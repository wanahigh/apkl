{"version":3,"sources":["meteor://ğŸ’»app/lib/collections/UserCol.js","meteor://ğŸ’»app/lib/collections/comments.js","meteor://ğŸ’»app/lib/collections/notifications.js","meteor://ğŸ’»app/lib/collections/posts.js","meteor://ğŸ’»app/lib/permissions.js","meteor://ğŸ’»app/lib/router.js","meteor://ğŸ’»app/server/main.js"],"names":["Ã©UserID","Mongo","Collection","Comments","Meteor","methods","commentInsert","commentAttributes","check","userId","String","postId","body","user","post","Posts","findOne","Error","comment","_","extend","_id","author","username","submitted","Date","update","$inc","commentsCount","insert","createCommentNotification","Notifications","allow","doc","fieldNames","ownsDocument","length","commentId","commenterName","read","module","export","Tasks","watch","require","v","Router","configure","layoutTemplate","route","name","startup"],"mappings":";;;;;;;;AAAAA,UAAU,IAAIC,MAAMC,UAAV,CAAqB,QAArB,CAAV,C;;;;;;;;;;;ACAAC,WAAW,IAAIF,MAAMC,UAAV,CAAqB,UAArB,CAAX;AAEAE,OAAOC,OAAP,CAAe;AACbC,iBAAe,UAASC,iBAAT,EAA4B;AACzCC,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAMD,iBAAN,EAAyB;AACvBI,cAAQD,MADe;AAEvBE,YAAMF;AAFiB,KAAzB;AAKA,QAAIG,OAAOT,OAAOS,IAAP,EAAX;AACA,QAAIC,OAAOC,MAAMC,OAAN,CAAcT,kBAAkBI,MAAhC,CAAX;AAEA,QAAI,CAACG,IAAL,EACE,MAAM,IAAIV,OAAOa,KAAX,CAAiB,iBAAjB,EAAoC,4BAApC,CAAN;AAEFC,cAAUC,EAAEC,MAAF,CAASb,iBAAT,EAA4B;AACpCE,cAAQI,KAAKQ,GADuB;AAEpCC,cAAQT,KAAKU,QAFuB;AAGpCC,iBAAW,IAAIC,IAAJ;AAHyB,KAA5B,CAAV,CAbyC,CAmBzC;;AACAV,UAAMW,MAAN,CAAaR,QAAQP,MAArB,EAA6B;AAACgB,YAAM;AAACC,uBAAe;AAAhB;AAAP,KAA7B,EApByC,CAsBzC;;AACAV,YAAQG,GAAR,GAAclB,SAAS0B,MAAT,CAAgBX,OAAhB,CAAd,CAvByC,CAyBzC;;AACAY,8BAA0BZ,OAA1B;AAEA,WAAOA,QAAQG,GAAf;AACD;AA9BY,CAAf,E;;;;;;;;;;;ACFAU,gBAAgB,IAAI9B,MAAMC,UAAV,CAAqB,eAArB,CAAhB;AAEA6B,cAAcC,KAAd,CAAoB;AAClBN,UAAQ,UAASjB,MAAT,EAAiBwB,GAAjB,EAAsBC,UAAtB,EAAkC;AACxC,WAAOC,aAAa1B,MAAb,EAAqBwB,GAArB,KACLC,WAAWE,MAAX,KAAsB,CADjB,IACsBF,WAAW,CAAX,MAAkB,MAD/C;AAED;AAJiB,CAApB;;AAOAJ,4BAA4B,UAASZ,OAAT,EAAkB;AAC5C,MAAIJ,OAAOC,MAAMC,OAAN,CAAcE,QAAQP,MAAtB,CAAX;;AACA,MAAIO,QAAQT,MAAR,KAAmBK,KAAKL,MAA5B,EAAoC;AAClCsB,kBAAcF,MAAd,CAAqB;AACnBpB,cAAQK,KAAKL,MADM;AAEnBE,cAAQG,KAAKO,GAFM;AAGnBgB,iBAAWnB,QAAQG,GAHA;AAInBiB,qBAAepB,QAAQI,MAJJ;AAKnBiB,YAAM;AALa,KAArB;AAOD;AACF,CAXD,C;;;;;;;;;;;ACTAC,OAAOC,MAAP,CAAc;AAACC,SAAM,MAAIA;AAAX,CAAd;AAAiC,IAAIzC,KAAJ;AAAUuC,OAAOG,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAAC3C,QAAM4C,CAAN,EAAQ;AAAC5C,YAAM4C,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAEpC,MAAMH,QAAQ,IAAIzC,MAAMC,UAAV,CAAqB,OAArB,CAAd,C;;;;;;;;;;;ACFP;AACAiC,eAAe,UAAS1B,MAAT,EAAiBwB,GAAjB,EAAsB;AACnC,SAAOA,OAAOA,IAAIxB,MAAJ,KAAeA,MAA7B;AACD,CAFD,C;;;;;;;;;;;ACDA,IAAIL,MAAJ;AAAWoC,OAAOG,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACxC,WAAOyC,CAAP,EAAS;AAACzC,iBAAOyC,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAEXC,OAAOC,SAAP,CAAiB;AACbC,oBAAgB;AADH,CAAjB;AAKAF,OAAOG,KAAP,CAAa,GAAb,EAAkB;AAACC,UAAO;AAAR,CAAlB;AACAJ,OAAOG,KAAP,CAAa,OAAb,EAAsB;AAACC,UAAO;AAAR,CAAtB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAJ,OAAOG,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,OAAb,EAAsB;AAACC,UAAO;AAAR,CAAtB,E,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;;;;;;;;;;;;;ACzFA9C,OAAO+C,OAAP,CAAe,MAAM,CACnB;AACD,CAFD,E,CAKA,W","file":"/app.js","sourcesContent":["Ã©UserID = new Mongo.Collection('userID');","Comments = new Mongo.Collection('comments');\n\nMeteor.methods({\n  commentInsert: function(commentAttributes) {\n    check(this.userId, String);\n    check(commentAttributes, {\n      postId: String,\n      body: String\n    });\n    \n    var user = Meteor.user();\n    var post = Posts.findOne(commentAttributes.postId);\n\n    if (!post)\n      throw new Meteor.Error('invalid-comment', 'You must comment on a post');\n    \n    comment = _.extend(commentAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date()\n    });\n    \n    // update the post with the number of comments\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\n    \n    // create the comment, save the id\n    comment._id = Comments.insert(comment);\n    \n    // now create a notification, informing the user that there's been a comment\n    createCommentNotification(comment);\n    \n    return comment._id;\n  }\n});\n","Notifications = new Mongo.Collection('notifications');\n\nNotifications.allow({\n  update: function(userId, doc, fieldNames) {\n    return ownsDocument(userId, doc) && \n      fieldNames.length === 1 && fieldNames[0] === 'read';\n  }\n});\n\ncreateCommentNotification = function(comment) {\n  var post = Posts.findOne(comment.postId);\n  if (comment.userId !== post.userId) {\n    Notifications.insert({\n      userId: post.userId,\n      postId: post._id,\n      commentId: comment._id,\n      commenterName: comment.author,\n      read: false\n    });\n  }\n};","import { Mongo } from 'meteor/mongo';\n\nexport const Tasks = new Mongo.Collection('tasks');","// check that the userId specified owns the documents\nownsDocument = function(userId, doc) {\n  return doc && doc.userId === userId;\n}\n","import { Meteor } from 'meteor/meteor';\n\nRouter.configure({\n    layoutTemplate: 'layout'\n\n});\n\nRouter.route('/', {name : 'home'})\nRouter.route('/tuto', {name : 'tuto'});\nRouter.route('/exo', {name : 'exo'});\nRouter.route('/DL', {name : 'DL'});\nRouter.route('/AP', {name : 'AP'});\nRouter.route('/VPN', {name : 'VPN'});\nRouter.route('/CTC', {name : 'contact'});\nRouter.route('/FLC', {name : 'FLC'});\nRouter.route('/Note', {name : 'Note'});\n\n\n\n\n// PostsListController = RouteController.extend({\n//     template: 'postsList',\n//     increment: 5,\n//     postsLimit: function() {\n//         return parseInt(this.params.postsLimit) || this.increment;\n//     },\n//     findOptions: function() {\n//         return {sort: this.sort, limit: this.postsLimit()};\n//     },\n//     subscriptions: function() {\n//         this.postsSub = Meteor.subscribe('posts', this.findOptions());\n//     },\n//     posts: function() {\n//         return Posts.find({}, this.findOptions());\n//     },\n//     data: function() {\n//         var self = this;\n//         return {\n//             posts: self.posts(),\n//             ready: self.postsSub.ready,\n//             nextPath: function() {\n//                 if (self.posts().count() === self.postsLimit())\n//                     return self.nextPath();\n//             }\n//         };\n//     }\n// });\n//\n// NewPostsController = PostsListController.extend({\n//     sort: {submitted: -1, _id: -1},\n//     nextPath: function() {\n//         return Router.routes.newPosts.path({postsLimit: this.postsLimit() + this.increment})\n//     }\n// });\n//\n// BestPostsController = PostsListController.extend({\n//     sort: {votes: -1, submitted: -1, _id: -1},\n//     nextPath: function() {\n//         return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})\n//     }\n// });\n//\n// Router.route('/pub', {\n//     name: 'publication',\n//     controller: NewPostsController\n// });\n//\n// Router.route('/new/:postsLimit?', {name: 'newPosts'});\n//\n// Router.route('/best/:postsLimit?', {name: 'bestPosts'});\n//\n//\n// Router.route('/posts/:_id', {\n//     name: 'postPage',\n//     waitOn: function() {\n//         return [\n//             Meteor.subscribe('singlePost', this.params._id),\n//             Meteor.subscribe('comments', this.params._id)\n//         ];\n//     },\n//     data: function() { return Posts.findOne(this.params._id); }\n// });\n//\n// Router.route('/posts/:_id/edit', {\n//     name: 'postEdit',\n//     waitOn: function() {\n//         return Meteor.subscribe('singlePost', this.params._id);\n//     },\n//     data: function() { return Posts.findOne(this.params._id); }\n// });\n//\n// Router.route('/submit', {name: 'postSubmit'});\n\n\n\n\n","\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n\n\n// mail //*\n"]}