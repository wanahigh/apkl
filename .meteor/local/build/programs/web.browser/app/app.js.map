{"version":3,"sources":["meteor://ðŸ’»app/client/template/homeHelper.js","meteor://ðŸ’»app/client/template/layoutHelper.js","meteor://ðŸ’»app/client/template/sideBarHelper.js","meteor://ðŸ’»app/client/helpers/errors.js","meteor://ðŸ’»app/client/helpers/handlebars.js","meteor://ðŸ’»app/lib/collections/UserCol.js","meteor://ðŸ’»app/lib/collections/comments.js","meteor://ðŸ’»app/lib/collections/notifications.js","meteor://ðŸ’»app/lib/collections/posts.js","meteor://ðŸ’»app/lib/permissions.js","meteor://ðŸ’»app/lib/router.js"],"names":["template","home","onRendered","$","document","ready","collapsible","sideNav","menuWidth","edge","draggable","onClick","close","layout","closeOnClick","Template","nav","rendered","dropdown","inDuration","outDuration","constrain_width","hover","gutter","belowOrigin","getJSON","data","console","log","tab","push","ip","UserID","insert","vst","alert","find","count","Errors","Mongo","Collection","throwError","message","registerHelper","n","thing","Ã©UserID","Comments","Meteor","methods","commentInsert","commentAttributes","check","userId","String","postId","body","user","post","Posts","findOne","Error","comment","_","extend","_id","author","username","submitted","Date","update","$inc","commentsCount","createCommentNotification","Notifications","allow","doc","fieldNames","ownsDocument","length","commentId","commenterName","read","module","export","Tasks","watch","require","v","Router","configure","layoutTemplate","route","name"],"mappings":"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AAO;AAAR,CAAlB;AACAJ,OAAOG,KAAP,CAAa,OAAb,EAAsB;AAACC,UAAO;AAAR,CAAtB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAJ,OAAOG,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,OAAb,EAAsB;AAACC,UAAO;AAAR,CAAtB,E,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/app.js","sourcesContent":["template.home.onRendered(\n    $(document).ready(function(){\n        $('.collapsible').collapsible();\n\n\n        $('.button-collapse').sideNav({\n            menuWidth: 300, // Default is 300\n            edge: 'left   ',\n            draggable: true,\n            onClick:close,\n        })// Choose     sss\n    }))\n","template.layout.onRendered(\n    $('.button-collapse').sideNav({\n        menuWidth: 300, // Default is 300\n        edge: 'right', // Choose the horizontal origin\n        closeOnClick: true, // Closes side-nav on <a> clicks, useful for Angular/Meteor\n        draggable: true, // Choose whether you can drag to open on touch screens,\n    }));\n","\nTemplate.layout.onRendered(function nav (){\n    $('.button-collapse').sideNav({\n        closeOnClick: true\n    }); // http://materializecss.com/side-nav.html\n});\n\nTemplate.layout.rendered = function() {\n    this.$().dropdown({\n        inDuration: 300,\n        outDuration: 225,\n        constrain_width: false, // Does not change width of dropdown to that of the activator\n        hover: true, // Activate on hover\n        gutter: 0, // Spacing from edge\n        belowOrigin: false // Displays dropdown below the button\n    });\n    $(document).ready(function () {\n        $.getJSON(\"http://jsonip.com/?callback=?\", function (data) {\n            console.log(data);\n            tab = [];\n            tab.push(data.ip);\n            UserID.insert(tab);\n\n        });\n\n    });\n    function vst(){\n        alert (UserID.find().count());\n\n    }\n\n};","// Local (client-only) collection\nErrors = new Mongo.Collection(null);\n\nthrowError = function(message) {\n  Errors.insert({message: message})\n}","Template.registerHelper('pluralize', function(n, thing) {\n  // fairly stupid pluralizer\n  if (n === 1) {\n    return '1 ' + thing;\n  } else {\n    return n + ' ' + thing + 's';\n  }\n});","Ã©UserID = new Mongo.Collection('userID');","Comments = new Mongo.Collection('comments');\n\nMeteor.methods({\n  commentInsert: function(commentAttributes) {\n    check(this.userId, String);\n    check(commentAttributes, {\n      postId: String,\n      body: String\n    });\n    \n    var user = Meteor.user();\n    var post = Posts.findOne(commentAttributes.postId);\n\n    if (!post)\n      throw new Meteor.Error('invalid-comment', 'You must comment on a post');\n    \n    comment = _.extend(commentAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date()\n    });\n    \n    // update the post with the number of comments\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\n    \n    // create the comment, save the id\n    comment._id = Comments.insert(comment);\n    \n    // now create a notification, informing the user that there's been a comment\n    createCommentNotification(comment);\n    \n    return comment._id;\n  }\n});\n","Notifications = new Mongo.Collection('notifications');\n\nNotifications.allow({\n  update: function(userId, doc, fieldNames) {\n    return ownsDocument(userId, doc) && \n      fieldNames.length === 1 && fieldNames[0] === 'read';\n  }\n});\n\ncreateCommentNotification = function(comment) {\n  var post = Posts.findOne(comment.postId);\n  if (comment.userId !== post.userId) {\n    Notifications.insert({\n      userId: post.userId,\n      postId: post._id,\n      commentId: comment._id,\n      commenterName: comment.author,\n      read: false\n    });\n  }\n};","import { Mongo } from 'meteor/mongo';\n\nexport const Tasks = new Mongo.Collection('tasks');","// check that the userId specified owns the documents\nownsDocument = function(userId, doc) {\n  return doc && doc.userId === userId;\n}\n","import { Meteor } from 'meteor/meteor';\n\nRouter.configure({\n    layoutTemplate: 'layout'\n\n});\n\nRouter.route('/', {name : 'home'})\nRouter.route('/tuto', {name : 'tuto'});\nRouter.route('/exo', {name : 'exo'});\nRouter.route('/DL', {name : 'DL'});\nRouter.route('/AP', {name : 'AP'});\nRouter.route('/VPN', {name : 'VPN'});\nRouter.route('/CTC', {name : 'contact'});\nRouter.route('/FLC', {name : 'FLC'});\nRouter.route('/Note', {name : 'Note'});\n\n\n\n\n// PostsListController = RouteController.extend({\n//     template: 'postsList',\n//     increment: 5,\n//     postsLimit: function() {\n//         return parseInt(this.params.postsLimit) || this.increment;\n//     },\n//     findOptions: function() {\n//         return {sort: this.sort, limit: this.postsLimit()};\n//     },\n//     subscriptions: function() {\n//         this.postsSub = Meteor.subscribe('posts', this.findOptions());\n//     },\n//     posts: function() {\n//         return Posts.find({}, this.findOptions());\n//     },\n//     data: function() {\n//         var self = this;\n//         return {\n//             posts: self.posts(),\n//             ready: self.postsSub.ready,\n//             nextPath: function() {\n//                 if (self.posts().count() === self.postsLimit())\n//                     return self.nextPath();\n//             }\n//         };\n//     }\n// });\n//\n// NewPostsController = PostsListController.extend({\n//     sort: {submitted: -1, _id: -1},\n//     nextPath: function() {\n//         return Router.routes.newPosts.path({postsLimit: this.postsLimit() + this.increment})\n//     }\n// });\n//\n// BestPostsController = PostsListController.extend({\n//     sort: {votes: -1, submitted: -1, _id: -1},\n//     nextPath: function() {\n//         return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})\n//     }\n// });\n//\n// Router.route('/pub', {\n//     name: 'publication',\n//     controller: NewPostsController\n// });\n//\n// Router.route('/new/:postsLimit?', {name: 'newPosts'});\n//\n// Router.route('/best/:postsLimit?', {name: 'bestPosts'});\n//\n//\n// Router.route('/posts/:_id', {\n//     name: 'postPage',\n//     waitOn: function() {\n//         return [\n//             Meteor.subscribe('singlePost', this.params._id),\n//             Meteor.subscribe('comments', this.params._id)\n//         ];\n//     },\n//     data: function() { return Posts.findOne(this.params._id); }\n// });\n//\n// Router.route('/posts/:_id/edit', {\n//     name: 'postEdit',\n//     waitOn: function() {\n//         return Meteor.subscribe('singlePost', this.params._id);\n//     },\n//     data: function() { return Posts.findOne(this.params._id); }\n// });\n//\n// Router.route('/submit', {name: 'postSubmit'});\n\n\n\n\n"]}