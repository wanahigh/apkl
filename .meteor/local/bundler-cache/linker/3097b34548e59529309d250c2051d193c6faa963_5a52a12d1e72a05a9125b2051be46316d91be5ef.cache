[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package['templating-runtime'].Template;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar Mongo = Package.mongo.Mongo;\nvar Model = Package['channikhabra:stupid-models'].Model;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Terminal, TerminalBufferColl, TerminalBuffer, TerminalStateColl, TerminalState;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/channikhabra_terminal/packages/channikhabra_terminal.js  //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/channikhabra:terminal/lib/jquery-terminal/jquery.terminal-0.8.8.js                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**@license                                                                                                          // 1\n *       __ _____                     ________                              __                                       // 2\n *      / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___  / /                                       // 3\n *  __ / // // // // // _  // _// // / / // _  // _//     // //  \\/ // _ \\/ /                                        // 4\n * /  / // // // // // ___// / / // / / // ___// / / / / // // /\\  // // / /__                                       // 5\n * \\___//____ \\\\___//____//_/ _\\_  / /_//____//_/ /_/ /_//_//_/ /_/ \\__\\_\\___/                                       // 6\n *           \\/              /____/                              version 0.8.8                                       // 7\n * http://terminal.jcubic.pl                                                                                         // 8\n *                                                                                                                   // 9\n * Licensed under GNU LGPL Version 3 license                                                                         // 10\n * Copyright (c) 2011-2013 Jakub Jankiewicz <http://jcubic.pl>                                                       // 11\n *                                                                                                                   // 12\n * Includes:                                                                                                         // 13\n *                                                                                                                   // 14\n * Storage plugin Distributed under the MIT License                                                                  // 15\n * Copyright (c) 2010 Dave Schindler                                                                                 // 16\n *                                                                                                                   // 17\n * jQuery Timers licenced with the WTFPL                                                                             // 18\n * <http://jquery.offput.ca/every/>                                                                                  // 19\n *                                                                                                                   // 20\n * Cross-Browser Split 1.1.1                                                                                         // 21\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>                                                          // 22\n * Available under the MIT License                                                                                   // 23\n *                                                                                                                   // 24\n * sprintf.js                                                                                                        // 25\n * Copyright (c) 2007-2013 Alexandru Marasteanu <hello at alexei dot ro>                                             // 26\n * licensed under 3 clause BSD license                                                                               // 27\n *                                                                                                                   // 28\n * Date: Thu, 10 Jul 2014 17:20:49 +0000                                                                             // 29\n *                                                                                                                   // 30\n */                                                                                                                  // 31\n                                                                                                                     // 32\n(function(ctx) {                                                                                                     // 33\n    var sprintf = function() {                                                                                       // 34\n        if (!sprintf.cache.hasOwnProperty(arguments[0])) {                                                           // 35\n            sprintf.cache[arguments[0]] = sprintf.parse(arguments[0]);                                               // 36\n        }                                                                                                            // 37\n        return sprintf.format.call(null, sprintf.cache[arguments[0]], arguments);                                    // 38\n    };                                                                                                               // 39\n                                                                                                                     // 40\n    sprintf.format = function(parse_tree, argv) {                                                                    // 41\n        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n        for (i = 0; i < tree_length; i++) {                                                                          // 43\n            node_type = get_type(parse_tree[i]);                                                                     // 44\n            if (node_type === 'string') {                                                                            // 45\n                output.push(parse_tree[i]);                                                                          // 46\n            }                                                                                                        // 47\n            else if (node_type === 'array') {                                                                        // 48\n                match = parse_tree[i]; // convenience purposes only                                                  // 49\n                if (match[2]) { // keyword argument                                                                  // 50\n                    arg = argv[cursor];                                                                              // 51\n                    for (k = 0; k < match[2].length; k++) {                                                          // 52\n                        if (!arg.hasOwnProperty(match[2][k])) {                                                      // 53\n                            throw(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));                   // 54\n                        }                                                                                            // 55\n                        arg = arg[match[2][k]];                                                                      // 56\n                    }                                                                                                // 57\n                }                                                                                                    // 58\n                else if (match[1]) { // positional argument (explicit)                                               // 59\n                    arg = argv[match[1]];                                                                            // 60\n                }                                                                                                    // 61\n                else { // positional argument (implicit)                                                             // 62\n                    arg = argv[cursor++];                                                                            // 63\n                }                                                                                                    // 64\n                                                                                                                     // 65\n                if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {                                          // 66\n                    throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));                        // 67\n                }                                                                                                    // 68\n                switch (match[8]) {                                                                                  // 69\n                    case 'b': arg = arg.toString(2); break;                                                          // 70\n                    case 'c': arg = String.fromCharCode(arg); break;                                                 // 71\n                    case 'd': arg = parseInt(arg, 10); break;                                                        // 72\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;             // 73\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;           // 74\n                    case 'o': arg = arg.toString(8); break;                                                          // 75\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;     // 76\n                    case 'u': arg = arg >>> 0; break;                                                                // 77\n                    case 'x': arg = arg.toString(16); break;                                                         // 78\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;                                           // 79\n                }                                                                                                    // 80\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                             // 81\n                pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';                         // 82\n                pad_length = match[6] - String(arg).length;                                                          // 83\n                pad = match[6] ? str_repeat(pad_character, pad_length) : '';                                         // 84\n                output.push(match[5] ? arg + pad : pad + arg);                                                       // 85\n            }                                                                                                        // 86\n        }                                                                                                            // 87\n        return output.join('');                                                                                      // 88\n    };                                                                                                               // 89\n                                                                                                                     // 90\n    sprintf.cache = {};                                                                                              // 91\n                                                                                                                     // 92\n    sprintf.parse = function(fmt) {                                                                                  // 93\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;                                                  // 94\n        while (_fmt) {                                                                                               // 95\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {                                                         // 96\n                parse_tree.push(match[0]);                                                                           // 97\n            }                                                                                                        // 98\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {                                                     // 99\n                parse_tree.push('%');                                                                                // 100\n            }                                                                                                        // 101\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n                if (match[2]) {                                                                                      // 103\n                    arg_names |= 1;                                                                                  // 104\n                    var field_list = [], replacement_field = match[2], field_match = [];                             // 105\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {                    // 106\n                        field_list.push(field_match[1]);                                                             // 107\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {    // 108\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {          // 109\n                                field_list.push(field_match[1]);                                                     // 110\n                            }                                                                                        // 111\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {                // 112\n                                field_list.push(field_match[1]);                                                     // 113\n                            }                                                                                        // 114\n                            else {                                                                                   // 115\n                                throw('[sprintf] huh?');                                                             // 116\n                            }                                                                                        // 117\n                        }                                                                                            // 118\n                    }                                                                                                // 119\n                    else {                                                                                           // 120\n                        throw('[sprintf] huh?');                                                                     // 121\n                    }                                                                                                // 122\n                    match[2] = field_list;                                                                           // 123\n                }                                                                                                    // 124\n                else {                                                                                               // 125\n                    arg_names |= 2;                                                                                  // 126\n                }                                                                                                    // 127\n                if (arg_names === 3) {                                                                               // 128\n                    throw('[sprintf] mixing positional and named placeholders is not (yet) supported');              // 129\n                }                                                                                                    // 130\n                parse_tree.push(match);                                                                              // 131\n            }                                                                                                        // 132\n            else {                                                                                                   // 133\n                throw('[sprintf] huh?');                                                                             // 134\n            }                                                                                                        // 135\n            _fmt = _fmt.substring(match[0].length);                                                                  // 136\n        }                                                                                                            // 137\n        return parse_tree;                                                                                           // 138\n    };                                                                                                               // 139\n                                                                                                                     // 140\n    var vsprintf = function(fmt, argv, _argv) {                                                                      // 141\n        _argv = argv.slice(0);                                                                                       // 142\n        _argv.splice(0, 0, fmt);                                                                                     // 143\n        return sprintf.apply(null, _argv);                                                                           // 144\n    };                                                                                                               // 145\n                                                                                                                     // 146\n    /**                                                                                                              // 147\n     * helpers                                                                                                       // 148\n     */                                                                                                              // 149\n    function get_type(variable) {                                                                                    // 150\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();                                  // 151\n    }                                                                                                                // 152\n                                                                                                                     // 153\n    function str_repeat(input, multiplier) {                                                                         // 154\n        for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}                       // 155\n        return output.join('');                                                                                      // 156\n    }                                                                                                                // 157\n                                                                                                                     // 158\n    /**                                                                                                              // 159\n     * export to either browser or node.js                                                                           // 160\n     */                                                                                                              // 161\n    ctx.sprintf = sprintf;                                                                                           // 162\n    ctx.vsprintf = vsprintf;                                                                                         // 163\n})(typeof exports != \"undefined\" ? exports : window);                                                                // 164\n                                                                                                                     // 165\n(function($, undefined) {                                                                                            // 166\n    \"use strict\";                                                                                                    // 167\n    // -----------------------------------------------------------------------                                       // 168\n    // :: map object to object                                                                                       // 169\n    // -----------------------------------------------------------------------                                       // 170\n    $.omap = function(o, fn) {                                                                                       // 171\n        var result = {};                                                                                             // 172\n        $.each(o, function(k, v) {                                                                                   // 173\n            result[k] = fn.call(o, k, v);                                                                            // 174\n        });                                                                                                          // 175\n        return result;                                                                                               // 176\n    };                                                                                                               // 177\n    // -----------------------------------------------------------------------                                       // 178\n    // :: Storage plugin                                                                                             // 179\n    // -----------------------------------------------------------------------                                       // 180\n    // Private data                                                                                                  // 181\n    var isLS = typeof window.localStorage !== 'undefined';                                                           // 182\n    // Private functions                                                                                             // 183\n    function wls(n, v) {                                                                                             // 184\n        var c;                                                                                                       // 185\n        if (typeof n === 'string' && typeof v === 'string') {                                                        // 186\n            localStorage[n] = v;                                                                                     // 187\n            return true;                                                                                             // 188\n        } else if (typeof n === 'object' && typeof v === 'undefined') {                                              // 189\n            for (c in n) {                                                                                           // 190\n                if (n.hasOwnProperty(c)) {                                                                           // 191\n                    localStorage[c] = n[c];                                                                          // 192\n                }                                                                                                    // 193\n            }                                                                                                        // 194\n            return true;                                                                                             // 195\n        }                                                                                                            // 196\n        return false;                                                                                                // 197\n    }                                                                                                                // 198\n    function wc(n, v) {                                                                                              // 199\n        var dt, e, c;                                                                                                // 200\n        dt = new Date();                                                                                             // 201\n        dt.setTime(dt.getTime() + 31536000000);                                                                      // 202\n        e = '; expires=' + dt.toGMTString();                                                                         // 203\n        if (typeof n === 'string' && typeof v === 'string') {                                                        // 204\n            document.cookie = n + '=' + v + e + '; path=/';                                                          // 205\n            return true;                                                                                             // 206\n        } else if (typeof n === 'object' && typeof v === 'undefined') {                                              // 207\n            for (c in n) {                                                                                           // 208\n                if (n.hasOwnProperty(c)) {                                                                           // 209\n                    document.cookie = c + '=' + n[c] + e + '; path=/';                                               // 210\n                }                                                                                                    // 211\n            }                                                                                                        // 212\n            return true;                                                                                             // 213\n        }                                                                                                            // 214\n        return false;                                                                                                // 215\n    }                                                                                                                // 216\n    function rls(n) {                                                                                                // 217\n        return localStorage[n];                                                                                      // 218\n    }                                                                                                                // 219\n    function rc(n) {                                                                                                 // 220\n        var nn, ca, i, c;                                                                                            // 221\n        nn = n + '=';                                                                                                // 222\n        ca = document.cookie.split(';');                                                                             // 223\n        for (i = 0; i < ca.length; i++) {                                                                            // 224\n            c = ca[i];                                                                                               // 225\n            while (c.charAt(0) === ' ') {                                                                            // 226\n                c = c.substring(1, c.length);                                                                        // 227\n            }                                                                                                        // 228\n            if (c.indexOf(nn) === 0) {                                                                               // 229\n                return c.substring(nn.length, c.length);                                                             // 230\n            }                                                                                                        // 231\n        }                                                                                                            // 232\n        return null;                                                                                                 // 233\n    }                                                                                                                // 234\n    function dls(n) {                                                                                                // 235\n        return delete localStorage[n];                                                                               // 236\n    }                                                                                                                // 237\n    function dc(n) {                                                                                                 // 238\n        return wc(n, '', -1);                                                                                        // 239\n    }                                                                                                                // 240\n    /**                                                                                                              // 241\n    * Public API                                                                                                     // 242\n    * $.Storage.set(\"name\", \"value\")                                                                                 // 243\n    * $.Storage.set({\"name1\":\"value1\", \"name2\":\"value2\", etc})                                                       // 244\n    * $.Storage.get(\"name\")                                                                                          // 245\n    * $.Storage.remove(\"name\")                                                                                       // 246\n    */                                                                                                               // 247\n    $.extend({                                                                                                       // 248\n        Storage: {                                                                                                   // 249\n            set: isLS ? wls : wc,                                                                                    // 250\n            get: isLS ? rls : rc,                                                                                    // 251\n            remove: isLS ? dls : dc                                                                                  // 252\n        }                                                                                                            // 253\n    });                                                                                                              // 254\n    // -----------------------------------------------------------------------                                       // 255\n    // :: jQuery Timers                                                                                              // 256\n    // -----------------------------------------------------------------------                                       // 257\n    jQuery.fn.extend({                                                                                               // 258\n        everyTime: function(interval, label, fn, times, belay) {                                                     // 259\n            return this.each(function() {                                                                            // 260\n                jQuery.timer.add(this, interval, label, fn, times, belay);                                           // 261\n            });                                                                                                      // 262\n        },                                                                                                           // 263\n        oneTime: function(interval, label, fn) {                                                                     // 264\n            return this.each(function() {                                                                            // 265\n                jQuery.timer.add(this, interval, label, fn, 1);                                                      // 266\n            });                                                                                                      // 267\n        },                                                                                                           // 268\n        stopTime: function(label, fn) {                                                                              // 269\n            return this.each(function() {                                                                            // 270\n                jQuery.timer.remove(this, label, fn);                                                                // 271\n            });                                                                                                      // 272\n        }                                                                                                            // 273\n    });                                                                                                              // 274\n                                                                                                                     // 275\n    jQuery.extend({                                                                                                  // 276\n        timer: {                                                                                                     // 277\n            guid: 1,                                                                                                 // 278\n            global: {},                                                                                              // 279\n            regex: /^([0-9]+)\\s*(.*s)?$/,                                                                            // 280\n            powers: {                                                                                                // 281\n                // Yeah this is major overkill...                                                                    // 282\n                'ms': 1,                                                                                             // 283\n                'cs': 10,                                                                                            // 284\n                'ds': 100,                                                                                           // 285\n                's': 1000,                                                                                           // 286\n                'das': 10000,                                                                                        // 287\n                'hs': 100000,                                                                                        // 288\n                'ks': 1000000                                                                                        // 289\n            },                                                                                                       // 290\n            timeParse: function(value) {                                                                             // 291\n                if (value === undefined || value === null) {                                                         // 292\n                    return null;                                                                                     // 293\n                }                                                                                                    // 294\n                var result = this.regex.exec(jQuery.trim(value.toString()));                                         // 295\n                if (result[2]) {                                                                                     // 296\n                    var num = parseInt(result[1], 10);                                                               // 297\n                    var mult = this.powers[result[2]] || 1;                                                          // 298\n                    return num * mult;                                                                               // 299\n                } else {                                                                                             // 300\n                    return value;                                                                                    // 301\n                }                                                                                                    // 302\n            },                                                                                                       // 303\n            add: function(element, interval, label, fn, times, belay) {                                              // 304\n                var counter = 0;                                                                                     // 305\n                                                                                                                     // 306\n                if (jQuery.isFunction(label)) {                                                                      // 307\n                    if (!times) {                                                                                    // 308\n                        times = fn;                                                                                  // 309\n                    }                                                                                                // 310\n                    fn = label;                                                                                      // 311\n                    label = interval;                                                                                // 312\n                }                                                                                                    // 313\n                                                                                                                     // 314\n                interval = jQuery.timer.timeParse(interval);                                                         // 315\n                                                                                                                     // 316\n                if (typeof interval !== 'number' ||                                                                  // 317\n                    isNaN(interval) ||                                                                               // 318\n                    interval <= 0) {                                                                                 // 319\n                    return;                                                                                          // 320\n                }                                                                                                    // 321\n                if (times && times.constructor !== Number) {                                                         // 322\n                    belay = !!times;                                                                                 // 323\n                    times = 0;                                                                                       // 324\n                }                                                                                                    // 325\n                                                                                                                     // 326\n                times = times || 0;                                                                                  // 327\n                belay = belay || false;                                                                              // 328\n                                                                                                                     // 329\n                if (!element.$timers) {                                                                              // 330\n                    element.$timers = {};                                                                            // 331\n                }                                                                                                    // 332\n                if (!element.$timers[label]) {                                                                       // 333\n                    element.$timers[label] = {};                                                                     // 334\n                }                                                                                                    // 335\n                fn.$timerID = fn.$timerID || this.guid++;                                                            // 336\n                                                                                                                     // 337\n                var handler = function() {                                                                           // 338\n                    if (belay && handler.inProgress) {                                                               // 339\n                        return;                                                                                      // 340\n                    }                                                                                                // 341\n                    handler.inProgress = true;                                                                       // 342\n                    if ((++counter > times && times !== 0) ||                                                        // 343\n                        fn.call(element, counter) === false) {                                                       // 344\n                        jQuery.timer.remove(element, label, fn);                                                     // 345\n                    }                                                                                                // 346\n                    handler.inProgress = false;                                                                      // 347\n                };                                                                                                   // 348\n                                                                                                                     // 349\n                handler.$timerID = fn.$timerID;                                                                      // 350\n                                                                                                                     // 351\n                if (!element.$timers[label][fn.$timerID]) {                                                          // 352\n                    element.$timers[label][fn.$timerID] = window.setInterval(handler, interval);                     // 353\n                }                                                                                                    // 354\n                                                                                                                     // 355\n                if (!this.global[label]) {                                                                           // 356\n                    this.global[label] = [];                                                                         // 357\n                }                                                                                                    // 358\n                this.global[label].push(element);                                                                    // 359\n                                                                                                                     // 360\n            },                                                                                                       // 361\n            remove: function(element, label, fn) {                                                                   // 362\n                var timers = element.$timers, ret;                                                                   // 363\n                                                                                                                     // 364\n                if (timers) {                                                                                        // 365\n                                                                                                                     // 366\n                    if (!label) {                                                                                    // 367\n                        for (var lab in timers) {                                                                    // 368\n                            if (timers.hasOwnProperty(lab)) {                                                        // 369\n                                this.remove(element, lab, fn);                                                       // 370\n                            }                                                                                        // 371\n                        }                                                                                            // 372\n                    } else if (timers[label]) {                                                                      // 373\n                        if (fn) {                                                                                    // 374\n                            if (fn.$timerID) {                                                                       // 375\n                                window.clearInterval(timers[label][fn.$timerID]);                                    // 376\n                                delete timers[label][fn.$timerID];                                                   // 377\n                            }                                                                                        // 378\n                        } else {                                                                                     // 379\n                            for (var _fn in timers[label]) {                                                         // 380\n                                if (timers[label].hasOwnProperty(_fn)) {                                             // 381\n                                    window.clearInterval(timers[label][_fn]);                                        // 382\n                                    delete timers[label][_fn];                                                       // 383\n                                }                                                                                    // 384\n                            }                                                                                        // 385\n                        }                                                                                            // 386\n                                                                                                                     // 387\n                        for (ret in timers[label]) {                                                                 // 388\n                            if (timers[label].hasOwnProperty(ret)) {                                                 // 389\n                                break;                                                                               // 390\n                            }                                                                                        // 391\n                        }                                                                                            // 392\n                        if (!ret) {                                                                                  // 393\n                            ret = null;                                                                              // 394\n                            delete timers[label];                                                                    // 395\n                        }                                                                                            // 396\n                    }                                                                                                // 397\n                                                                                                                     // 398\n                    for (ret in timers) {                                                                            // 399\n                        if (timers.hasOwnProperty(ret)) {                                                            // 400\n                            break;                                                                                   // 401\n                        }                                                                                            // 402\n                    }                                                                                                // 403\n                    if (!ret) {                                                                                      // 404\n                        element.$timers = null;                                                                      // 405\n                    }                                                                                                // 406\n                }                                                                                                    // 407\n            }                                                                                                        // 408\n        }                                                                                                            // 409\n    });                                                                                                              // 410\n                                                                                                                     // 411\n    if (/(msie) ([\\w.]+)/.exec(navigator.userAgent.toLowerCase())) {                                                 // 412\n        jQuery(window).one('unload', function() {                                                                    // 413\n            var global = jQuery.timer.global;                                                                        // 414\n            for (var label in global) {                                                                              // 415\n                if (global.hasOwnProperty(label)) {                                                                  // 416\n                    var els = global[label], i = els.length;                                                         // 417\n                    while (--i) {                                                                                    // 418\n                        jQuery.timer.remove(els[i], label);                                                          // 419\n                    }                                                                                                // 420\n                }                                                                                                    // 421\n            }                                                                                                        // 422\n        });                                                                                                          // 423\n    }                                                                                                                // 424\n    // -----------------------------------------------------------------------                                       // 425\n    // :: CROSS BROWSER SPLIT                                                                                        // 426\n    // -----------------------------------------------------------------------                                       // 427\n                                                                                                                     // 428\n    (function(undef) {                                                                                               // 429\n                                                                                                                     // 430\n        // prevent double include                                                                                    // 431\n                                                                                                                     // 432\n        if (!String.prototype.split.toString().match(/\\[native/)) {                                                  // 433\n            return;                                                                                                  // 434\n        }                                                                                                            // 435\n                                                                                                                     // 436\n        var nativeSplit = String.prototype.split,                                                                    // 437\n        compliantExecNpcg = /()??/.exec(\"\")[1] === undef, // NPCG: nonparticipating capturing group                  // 438\n        self;                                                                                                        // 439\n                                                                                                                     // 440\n        self = function (str, separator, limit) {                                                                    // 441\n            // If `separator` is not a regex, use `nativeSplit`                                                      // 442\n            if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {                                   // 443\n                return nativeSplit.call(str, separator, limit);                                                      // 444\n            }                                                                                                        // 445\n            var output = [],                                                                                         // 446\n            flags = (separator.ignoreCase ? \"i\" : \"\") +                                                              // 447\n                (separator.multiline  ? \"m\" : \"\") +                                                                  // 448\n                (separator.extended   ? \"x\" : \"\") + // Proposed for ES6                                              // 449\n                (separator.sticky     ? \"y\" : \"\"), // Firefox 3+                                                     // 450\n                lastLastIndex = 0,                                                                                   // 451\n            // Make `global` and avoid `lastIndex` issues by working with a copy                                     // 452\n            separator2, match, lastIndex, lastLength;                                                                // 453\n            separator = new RegExp(separator.source, flags + \"g\");                                                   // 454\n            str += \"\"; // Type-convert                                                                               // 455\n            if (!compliantExecNpcg) {                                                                                // 456\n                // Doesn't need flags gy, but they don't hurt                                                        // 457\n                separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);                                 // 458\n            }                                                                                                        // 459\n            /* Values for `limit`, per the spec:                                                                     // 460\n         * If undefined: 4294967295 // Math.pow(2, 32) - 1                                                           // 461\n         * If 0, Infinity, or NaN: 0                                                                                 // 462\n         * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;               // 463\n         * If negative number: 4294967296 - Math.floor(Math.abs(limit))                                              // 464\n         * If other: Type-convert, then use the above rules                                                          // 465\n         */                                                                                                          // 466\n            // ? Math.pow(2, 32) - 1 : ToUint32(limit)                                                               // 467\n            limit = limit === undef ? -1 >>> 0 : limit >>> 0;                                                        // 468\n            while (match = separator.exec(str)) {                                                                    // 469\n                    // `separator.lastIndex` is not reliable cross-browser                                           // 470\n                    lastIndex = match.index + match[0].length;                                                       // 471\n                    if (lastIndex > lastLastIndex) {                                                                 // 472\n                        output.push(str.slice(lastLastIndex, match.index));                                          // 473\n                        // Fix browsers whose `exec` methods don't consistently return `undefined` for               // 474\n                        // nonparticipating capturing groups                                                         // 475\n                        if (!compliantExecNpcg && match.length > 1) {                                                // 476\n                            match[0].replace(separator2, function () {                                               // 477\n                                for (var i = 1; i < arguments.length - 2; i++) {                                     // 478\n                                    if (arguments[i] === undef) {                                                    // 479\n                                        match[i] = undef;                                                            // 480\n                                    }                                                                                // 481\n                                }                                                                                    // 482\n                            });                                                                                      // 483\n                        }                                                                                            // 484\n                        if (match.length > 1 && match.index < str.length) {                                          // 485\n                            Array.prototype.push.apply(output, match.slice(1));                                      // 486\n                        }                                                                                            // 487\n                        lastLength = match[0].length;                                                                // 488\n                        lastLastIndex = lastIndex;                                                                   // 489\n                        if (output.length >= limit) {                                                                // 490\n                            break;                                                                                   // 491\n                        }                                                                                            // 492\n                    }                                                                                                // 493\n                    if (separator.lastIndex === match.index) {                                                       // 494\n                        separator.lastIndex++; // Avoid an infinite loop                                             // 495\n                    }                                                                                                // 496\n                }                                                                                                    // 497\n            if (lastLastIndex === str.length) {                                                                      // 498\n                if (lastLength || !separator.test(\"\")) {                                                             // 499\n                    output.push(\"\");                                                                                 // 500\n                }                                                                                                    // 501\n            } else {                                                                                                 // 502\n                output.push(str.slice(lastLastIndex));                                                               // 503\n            }                                                                                                        // 504\n            return output.length > limit ? output.slice(0, limit) : output;                                          // 505\n        };                                                                                                           // 506\n                                                                                                                     // 507\n        // For convenience                                                                                           // 508\n        String.prototype.split = function (separator, limit) {                                                       // 509\n            return self(this, separator, limit);                                                                     // 510\n        };                                                                                                           // 511\n                                                                                                                     // 512\n        return self;                                                                                                 // 513\n                                                                                                                     // 514\n    })();                                                                                                            // 515\n    // -----------------------------------------------------------------------                                       // 516\n    // :: Split string to array of strings with the same length                                                      // 517\n    // -----------------------------------------------------------------------                                       // 518\n    function str_parts(str, length) {                                                                                // 519\n        var result = [];                                                                                             // 520\n        var len = str.length;                                                                                        // 521\n        if (len < length) {                                                                                          // 522\n            return [str];                                                                                            // 523\n        }                                                                                                            // 524\n        for (var i = 0; i < len; i += length) {                                                                      // 525\n            result.push(str.substring(i, i + length));                                                               // 526\n        }                                                                                                            // 527\n        return result;                                                                                               // 528\n    }                                                                                                                // 529\n    // -----------------------------------------------------------------------                                       // 530\n    // :: CYCLE DATA STRUCTURE                                                                                       // 531\n    // -----------------------------------------------------------------------                                       // 532\n    function Cycle(init) {                                                                                           // 533\n        var data = init ? [init] : [];                                                                               // 534\n        var pos = 0;                                                                                                 // 535\n        $.extend(this, {                                                                                             // 536\n            get: function() {                                                                                        // 537\n                return data;                                                                                         // 538\n            },                                                                                                       // 539\n            rotate: function() {                                                                                     // 540\n                if (data.length === 1) {                                                                             // 541\n                    return data[0];                                                                                  // 542\n                } else {                                                                                             // 543\n                    if (pos === data.length - 1) {                                                                   // 544\n                        pos = 0;                                                                                     // 545\n                    } else {                                                                                         // 546\n                        ++pos;                                                                                       // 547\n                    }                                                                                                // 548\n                    return data[pos];                                                                                // 549\n                }                                                                                                    // 550\n            },                                                                                                       // 551\n            length: function() {                                                                                     // 552\n                return data.length;                                                                                  // 553\n            },                                                                                                       // 554\n            set: function(item) {                                                                                    // 555\n                for (var i = data.length; i--;) {                                                                    // 556\n                    if (data[i] === item) {                                                                          // 557\n                        pos = i;                                                                                     // 558\n                        return;                                                                                      // 559\n                    }                                                                                                // 560\n                }                                                                                                    // 561\n                this.append(item);                                                                                   // 562\n            },                                                                                                       // 563\n            front: function() {                                                                                      // 564\n                return data[pos];                                                                                    // 565\n            },                                                                                                       // 566\n            append: function(item) {                                                                                 // 567\n                data.push(item);                                                                                     // 568\n            }                                                                                                        // 569\n        });                                                                                                          // 570\n    }                                                                                                                // 571\n    // -----------------------------------------------------------------------                                       // 572\n    // :: STACK DATA STRUCTURE                                                                                       // 573\n    // -----------------------------------------------------------------------                                       // 574\n    function Stack(init) {                                                                                           // 575\n        var data = init ? [init] : [];                                                                               // 576\n        $.extend(this, {                                                                                             // 577\n            map: function(fn) {                                                                                      // 578\n                return $.map(data, fn);                                                                              // 579\n            },                                                                                                       // 580\n            size: function() {                                                                                       // 581\n                return data.length;                                                                                  // 582\n            },                                                                                                       // 583\n            pop: function() {                                                                                        // 584\n                if (data.length === 0) {                                                                             // 585\n                    return null;                                                                                     // 586\n                } else {                                                                                             // 587\n                    var value = data[data.length - 1];                                                               // 588\n                    data = data.slice(0, data.length - 1);                                                           // 589\n                    return value;                                                                                    // 590\n                }                                                                                                    // 591\n            },                                                                                                       // 592\n            push: function(value) {                                                                                  // 593\n                data = data.concat([value]);                                                                         // 594\n                return value;                                                                                        // 595\n            },                                                                                                       // 596\n            top: function() {                                                                                        // 597\n                return data.length > 0 ? data[data.length - 1] : null;                                               // 598\n            }                                                                                                        // 599\n        });                                                                                                          // 600\n    }                                                                                                                // 601\n    // -----------------------------------------------------------------------                                       // 602\n    // :: Serialize object myself (biwascheme or prototype library do something                                      // 603\n    // :: wicked with JSON serialization for Arrays)                                                                 // 604\n    // -----------------------------------------------------------------------                                       // 605\n    $.json_stringify = function(object, level) {                                                                     // 606\n        var result = '', i;                                                                                          // 607\n        level = level === undefined ? 1 : level;                                                                     // 608\n        var type = typeof object;                                                                                    // 609\n        switch (type) {                                                                                              // 610\n        case 'function':                                                                                             // 611\n            result += object;                                                                                        // 612\n            break;                                                                                                   // 613\n        case 'boolean':                                                                                              // 614\n            result += object ? 'true' : 'false';                                                                     // 615\n            break;                                                                                                   // 616\n        case 'object':                                                                                               // 617\n            if (object === null) {                                                                                   // 618\n                result += 'null';                                                                                    // 619\n            } else if (object instanceof Array) {                                                                    // 620\n                result += '[';                                                                                       // 621\n                var len = object.length;                                                                             // 622\n                for (i = 0; i < len - 1; ++i) {                                                                      // 623\n                    result += $.json_stringify(object[i], level + 1);                                                // 624\n                }                                                                                                    // 625\n                result += $.json_stringify(object[len - 1], level + 1) + ']';                                        // 626\n            } else {                                                                                                 // 627\n                result += '{';                                                                                       // 628\n                for (var property in object) {                                                                       // 629\n                    if (object.hasOwnProperty(property)) {                                                           // 630\n                        result += '\"' + property + '\":' +                                                            // 631\n                            $.json_stringify(object[property], level + 1);                                           // 632\n                    }                                                                                                // 633\n                }                                                                                                    // 634\n                result += '}';                                                                                       // 635\n            }                                                                                                        // 636\n            break;                                                                                                   // 637\n        case 'string':                                                                                               // 638\n            var str = object;                                                                                        // 639\n            var repl = {                                                                                             // 640\n                '\\\\\\\\': '\\\\\\\\',                                                                                      // 641\n                '\"': '\\\\\"',                                                                                          // 642\n                '/': '\\\\/',                                                                                          // 643\n                '\\\\n': '\\\\n',                                                                                        // 644\n                '\\\\r': '\\\\r',                                                                                        // 645\n                '\\\\t': '\\\\t'};                                                                                       // 646\n            for (i in repl) {                                                                                        // 647\n                if (repl.hasOwnProperty(i)) {                                                                        // 648\n                    str = str.replace(new RegExp(i, 'g'), repl[i]);                                                  // 649\n                }                                                                                                    // 650\n            }                                                                                                        // 651\n            result += '\"' + str + '\"';                                                                               // 652\n            break;                                                                                                   // 653\n        case 'number':                                                                                               // 654\n            result += String(object);                                                                                // 655\n            break;                                                                                                   // 656\n        }                                                                                                            // 657\n        result += (level > 1 ? ',' : '');                                                                            // 658\n        // quick hacks below                                                                                         // 659\n        if (level === 1) {                                                                                           // 660\n            // fix last comma                                                                                        // 661\n            result = result.replace(/,([\\]}])/g, '$1');                                                              // 662\n        }                                                                                                            // 663\n        // fix comma before array or object                                                                          // 664\n        return result.replace(/([\\[{]),/g, '$1');                                                                    // 665\n    };                                                                                                               // 666\n    // -----------------------------------------------------------------------                                       // 667\n    // :: HISTORY CLASS                                                                                              // 668\n    // -----------------------------------------------------------------------                                       // 669\n    function History(name, size) {                                                                                   // 670\n        var enabled = true;                                                                                          // 671\n        var storage_key = '';                                                                                        // 672\n        if (typeof name === 'string' && name !== '') {                                                               // 673\n            storage_key = name + '_';                                                                                // 674\n        }                                                                                                            // 675\n        storage_key += 'commands';                                                                                   // 676\n        var data = $.Storage.get(storage_key);                                                                       // 677\n        data = data ? $.parseJSON(data) : [];                                                                        // 678\n        var pos = data.length-1;                                                                                     // 679\n        $.extend(this, {                                                                                             // 680\n            append: function(item) {                                                                                 // 681\n                if (enabled) {                                                                                       // 682\n                    if (data[data.length-1] !== item) {                                                              // 683\n                        data.push(item);                                                                             // 684\n                        if (size && data.length > size) {                                                            // 685\n                            data = data.slice(-size);                                                                // 686\n                        }                                                                                            // 687\n                        pos = data.length-1;                                                                         // 688\n                        $.Storage.set(storage_key, $.json_stringify(data));                                          // 689\n                    }                                                                                                // 690\n                }                                                                                                    // 691\n            },                                                                                                       // 692\n            data: function() {                                                                                       // 693\n                return data;                                                                                         // 694\n            },                                                                                                       // 695\n            reset: function() {                                                                                      // 696\n                pos = data.length-1;                                                                                 // 697\n            },                                                                                                       // 698\n            last: function() {                                                                                       // 699\n                return data[length-1];                                                                               // 700\n            },                                                                                                       // 701\n            end: function() {                                                                                        // 702\n                return pos === data.length-1;                                                                        // 703\n            },                                                                                                       // 704\n            position: function() {                                                                                   // 705\n                return pos;                                                                                          // 706\n            },                                                                                                       // 707\n            current: function() {                                                                                    // 708\n                return data[pos];                                                                                    // 709\n            },                                                                                                       // 710\n            next: function() {                                                                                       // 711\n                if (pos < data.length-1) {                                                                           // 712\n                    ++pos;                                                                                           // 713\n                }                                                                                                    // 714\n                if (pos !== -1) {                                                                                    // 715\n                    return data[pos];                                                                                // 716\n                }                                                                                                    // 717\n            },                                                                                                       // 718\n            previous: function() {                                                                                   // 719\n                var old = pos;                                                                                       // 720\n                if (pos > 0) {                                                                                       // 721\n                    --pos;                                                                                           // 722\n                }                                                                                                    // 723\n                if (old !== -1) {                                                                                    // 724\n                    return data[pos];                                                                                // 725\n                }                                                                                                    // 726\n            },                                                                                                       // 727\n            clear: function() {                                                                                      // 728\n                data = [];                                                                                           // 729\n                this.purge();                                                                                        // 730\n            },                                                                                                       // 731\n            enabled: function() {                                                                                    // 732\n                return enabled;                                                                                      // 733\n            },                                                                                                       // 734\n            enable: function() {                                                                                     // 735\n                enabled = true;                                                                                      // 736\n            },                                                                                                       // 737\n            purge: function() {                                                                                      // 738\n                $.Storage.remove(storage_key);                                                                       // 739\n            },                                                                                                       // 740\n            disable: function() {                                                                                    // 741\n                enabled = false;                                                                                     // 742\n            }                                                                                                        // 743\n        });                                                                                                          // 744\n    }                                                                                                                // 745\n    // -----------------------------------------------------------------------                                       // 746\n    // :: COMMAND LINE PLUGIN                                                                                        // 747\n    // -----------------------------------------------------------------------                                       // 748\n    $.fn.cmd = function(options) {                                                                                   // 749\n        var self = this;                                                                                             // 750\n        var maybe_data = self.data('cmd');                                                                           // 751\n        if (maybe_data) {                                                                                            // 752\n            return maybe_data;                                                                                       // 753\n        }                                                                                                            // 754\n        self.addClass('cmd');                                                                                        // 755\n        self.append('<span class=\"prompt\"></span><span></span>' +                                                    // 756\n                    '<span class=\"cursor\">&nbsp;</span><span></span>');                                              // 757\n        var clip = $('<textarea/>').addClass('clipboard').appendTo(self);                                            // 758\n        if (options.width) {                                                                                         // 759\n            self.width(options.width);                                                                               // 760\n        }                                                                                                            // 761\n        var num_chars; // calculated by draw_prompt                                                                  // 762\n        var prompt_len;                                                                                              // 763\n        var reverse_search = false;                                                                                  // 764\n        var reverse_search_string = '';                                                                              // 765\n        var reverse_search_position = null;                                                                          // 766\n        var backup_prompt;                                                                                           // 767\n        var mask = options.mask || false;                                                                            // 768\n        var command = '';                                                                                            // 769\n        var selected_text = ''; // text from selection using CTRL+SHIFT+C (as in Xterm)                              // 770\n        var kill_text = ''; // text from command that kill part of the command                                       // 771\n        var position = 0;                                                                                            // 772\n        var prompt;                                                                                                  // 773\n        var enabled = options.enabled;                                                                               // 774\n        var historySize = options.historySize || 60;                                                                 // 775\n        var name, history;                                                                                           // 776\n        var cursor = self.find('.cursor');                                                                           // 777\n        var animation;                                                                                               // 778\n        if (supportAnimations()) {                                                                                   // 779\n            animation = function(toggle) {                                                                           // 780\n                if (toggle) {                                                                                        // 781\n                    cursor.addClass('blink');                                                                        // 782\n                } else {                                                                                             // 783\n                    cursor.removeClass('blink');                                                                     // 784\n                }                                                                                                    // 785\n            };                                                                                                       // 786\n        } else {                                                                                                     // 787\n            animation = function(toggle) {                                                                           // 788\n                if (toggle && !enabled) {                                                                            // 789\n                    cursor.addClass('inverted');                                                                     // 790\n                    self.everyTime(500, 'blink', blink);                                                             // 791\n                } else if (enabled) {                                                                                // 792\n                    self.stopTime('blink', blink);                                                                   // 793\n                    cursor.removeClass('inverted');                                                                  // 794\n                }                                                                                                    // 795\n            };                                                                                                       // 796\n        }                                                                                                            // 797\n        // -----------------------------------------------------------------------                                   // 798\n        // :: Blinking cursor function                                                                               // 799\n        // -----------------------------------------------------------------------                                   // 800\n        function blink(i) {                                                                                          // 801\n            cursor.toggleClass('inverted');                                                                          // 802\n        }                                                                                                            // 803\n        // -----------------------------------------------------------------------                                   // 804\n        // :: Set prompt for reverse search                                                                          // 805\n        // -----------------------------------------------------------------------                                   // 806\n        function draw_reverse_prompt() {                                                                             // 807\n            prompt = \"(reverse-i-search)`\" + reverse_search_string + \"': \";                                          // 808\n            draw_prompt();                                                                                           // 809\n        }                                                                                                            // 810\n        // -----------------------------------------------------------------------                                   // 811\n        // :: Disable reverse search                                                                                 // 812\n        // -----------------------------------------------------------------------                                   // 813\n        function clear_reverse_state() {                                                                             // 814\n            prompt = backup_prompt;                                                                                  // 815\n            reverse_search = false;                                                                                  // 816\n            reverse_search_position = null;                                                                          // 817\n            reverse_search_string = '';                                                                              // 818\n        }                                                                                                            // 819\n        // -----------------------------------------------------------------------                                   // 820\n        // :: Search through command line history. If next is not defined or false                                   // 821\n        // :: it searches for the first item from the end. If true it search for                                     // 822\n        // :: the next item                                                                                          // 823\n        // -----------------------------------------------------------------------                                   // 824\n        function reverse_history_search(next) {                                                                      // 825\n            var history_data = history.data();                                                                       // 826\n            var regex, save_string;                                                                                  // 827\n            var len = history_data.length;                                                                           // 828\n            if (next && reverse_search_position > 0) {                                                               // 829\n                len -= reverse_search_position;                                                                      // 830\n            }                                                                                                        // 831\n            if (reverse_search_string.length > 0) {                                                                  // 832\n                for (var j=reverse_search_string.length; j>0; j--) {                                                 // 833\n                    save_string = reverse_search_string.substring(0, j).                                             // 834\n                        replace(/([.*+{}\\[\\]?])/g, '\\\\$1');                                                          // 835\n                    regex = new RegExp(save_string);                                                                 // 836\n                    for (var i=len; i--;) {                                                                          // 837\n                        if (regex.test(history_data[i])) {                                                           // 838\n                            reverse_search_position = history_data.length - i;                                       // 839\n                            position = 0;                                                                            // 840\n                            self.set(history_data[i], true);                                                         // 841\n                            redraw();                                                                                // 842\n                            if (reverse_search_string.length !== j) {                                                // 843\n                                reverse_search_string = reverse_search_string.substring(0, j);                       // 844\n                                draw_reverse_prompt();                                                               // 845\n                            }                                                                                        // 846\n                            return;                                                                                  // 847\n                        }                                                                                            // 848\n                    }                                                                                                // 849\n                }                                                                                                    // 850\n            }                                                                                                        // 851\n            reverse_search_string = ''; // clear if not found any                                                    // 852\n        }                                                                                                            // 853\n        // -----------------------------------------------------------------------                                   // 854\n        // :: Recalculate number of characters in command line                                                       // 855\n        // -----------------------------------------------------------------------                                   // 856\n        function change_num_chars() {                                                                                // 857\n            var W = self.width();                                                                                    // 858\n            var w = cursor.innerWidth();                                                                             // 859\n            num_chars = Math.floor(W / w);                                                                           // 860\n        }                                                                                                            // 861\n        // -----------------------------------------------------------------------                                   // 862\n        // :: Return string repeated n times                                                                         // 863\n        // -----------------------------------------------------------------------                                   // 864\n        function str_repeat(str, n) {                                                                                // 865\n            var result = '';                                                                                         // 866\n            for (var i = n; i--;) {                                                                                  // 867\n                result += str;                                                                                       // 868\n            }                                                                                                        // 869\n            return result;                                                                                           // 870\n        }                                                                                                            // 871\n        // -----------------------------------------------------------------------                                   // 872\n        // :: Split String that fit into command line where first line need to                                       // 873\n        // :: fit next to prompt (need to have less characters)                                                      // 874\n        // -----------------------------------------------------------------------                                   // 875\n        function get_splited_command_line(string) {                                                                  // 876\n            var first = string.substring(0, num_chars - prompt_len);                                                 // 877\n            var rest = string.substring(num_chars - prompt_len);                                                     // 878\n            return [first].concat(str_parts(rest, num_chars));                                                       // 879\n        }                                                                                                            // 880\n        // -----------------------------------------------------------------------                                   // 881\n        // :: Function that displays the command line. Split long lines and place                                    // 882\n        // :: cursor in the right place                                                                              // 883\n        // -----------------------------------------------------------------------                                   // 884\n        var redraw = (function(self) {                                                                               // 885\n            var before = cursor.prev();                                                                              // 886\n            var after = cursor.next();                                                                               // 887\n            // -----------------------------------------------------------------------                               // 888\n            // :: Draw line with the cursor                                                                          // 889\n            // -----------------------------------------------------------------------                               // 890\n            function draw_cursor_line(string, position) {                                                            // 891\n                var len = string.length;                                                                             // 892\n                if (position === len) {                                                                              // 893\n                    before.html($.terminal.encode(string, true));                                                    // 894\n                    cursor.html('&nbsp;');                                                                           // 895\n                    after.html('');                                                                                  // 896\n                } else if (position === 0) {                                                                         // 897\n                    before.html('');                                                                                 // 898\n                    //fix for tilda in IE                                                                            // 899\n                    cursor.html($.terminal.encode(string.slice(0, 1), true));                                        // 900\n                    //cursor.html($.terminal.encode(string[0]));                                                     // 901\n                    after.html($.terminal.encode(string.slice(1), true));                                            // 902\n                } else {                                                                                             // 903\n                    var before_str = $.terminal.encode(string.slice(0, position), true);                             // 904\n                    before.html(before_str);                                                                         // 905\n                    //fix for tilda in IE                                                                            // 906\n                    var c = string.slice(position, position + 1);                                                    // 907\n                    //cursor.html(string[position]));                                                                // 908\n                    cursor.html(c === ' ' ? '&nbsp;' : $.terminal.encode(c, true));                                  // 909\n                    if (position === string.length - 1) {                                                            // 910\n                        after.html('');                                                                              // 911\n                    } else {                                                                                         // 912\n                        after.html($.terminal.encode(string.slice(position + 1), true));                             // 913\n                    }                                                                                                // 914\n                }                                                                                                    // 915\n            }                                                                                                        // 916\n            function div(string) {                                                                                   // 917\n                return '<div>' + $.terminal.encode(string, true) + '</div>';                                         // 918\n            }                                                                                                        // 919\n            // -----------------------------------------------------------------------                               // 920\n            // :: Display lines after the cursor                                                                     // 921\n            // -----------------------------------------------------------------------                               // 922\n            function lines_after(lines) {                                                                            // 923\n                var last_ins = after;                                                                                // 924\n                $.each(lines, function(i, line) {                                                                    // 925\n                    last_ins = $(div(line)).insertAfter(last_ins).                                                   // 926\n                        addClass('clear');                                                                           // 927\n                });                                                                                                  // 928\n            }                                                                                                        // 929\n            // -----------------------------------------------------------------------                               // 930\n            // :: Display lines before the cursor                                                                    // 931\n            // -----------------------------------------------------------------------                               // 932\n            function lines_before(lines) {                                                                           // 933\n                $.each(lines, function(i, line) {                                                                    // 934\n                    before.before(div(line));                                                                        // 935\n                });                                                                                                  // 936\n            }                                                                                                        // 937\n            var count = 0;                                                                                           // 938\n            // -----------------------------------------------------------------------                               // 939\n            // :: Redraw function                                                                                    // 940\n            // -----------------------------------------------------------------------                               // 941\n            return function() {                                                                                      // 942\n                var string = mask ? command.replace(/./g, '*') : command;                                            // 943\n                var i, first_len;                                                                                    // 944\n                self.find('div').remove();                                                                           // 945\n                before.html('');                                                                                     // 946\n                // long line                                                                                         // 947\n                if (string.length > num_chars - prompt_len - 1 ||                                                    // 948\n                    string.match(/\\n/)) {                                                                            // 949\n                    var array;                                                                                       // 950\n                    var tabs = string.match(/\\t/g);                                                                  // 951\n                    var tabs_rm = tabs ? tabs.length * 3 : 0;                                                        // 952\n                    //quick tabulation hack                                                                          // 953\n                    if (tabs) {                                                                                      // 954\n                        string = string.replace(/\\t/g, '\\x00\\x00\\x00\\x00');                                          // 955\n                    }                                                                                                // 956\n                    // command contains new line characters                                                          // 957\n                    if (string.match(/\\n/)) {                                                                        // 958\n                        var tmp = string.split(\"\\n\");                                                                // 959\n                        first_len = num_chars - prompt_len - 1;                                                      // 960\n                        // empty character after each line                                                           // 961\n                        for (i=0; i<tmp.length-1; ++i) {                                                             // 962\n                            tmp[i] += ' ';                                                                           // 963\n                        }                                                                                            // 964\n                        // split first line                                                                          // 965\n                        if (tmp[0].length > first_len) {                                                             // 966\n                            array = [tmp[0].substring(0, first_len)];                                                // 967\n                            array = array.concat(str_parts(tmp[0].substring(first_len), num_chars));                 // 968\n                        } else {                                                                                     // 969\n                            array = [tmp[0]];                                                                        // 970\n                        }                                                                                            // 971\n                        // process rest of the lines                                                                 // 972\n                        for (i=1; i<tmp.length; ++i) {                                                               // 973\n                            if (tmp[i].length > num_chars) {                                                         // 974\n                                array = array.concat(str_parts(tmp[i], num_chars));                                  // 975\n                            } else {                                                                                 // 976\n                                array.push(tmp[i]);                                                                  // 977\n                            }                                                                                        // 978\n                        }                                                                                            // 979\n                    } else {                                                                                         // 980\n                        array = get_splited_command_line(string);                                                    // 981\n                    }                                                                                                // 982\n                    if (tabs) {                                                                                      // 983\n                        array = $.map(array, function(line) {                                                        // 984\n                            return line.replace(/\\x00\\x00\\x00\\x00/g, '\\t');                                          // 985\n                        });                                                                                          // 986\n                    }                                                                                                // 987\n                    first_len = array[0].length;                                                                     // 988\n                    //cursor in first line                                                                           // 989\n                    if (first_len === 0 && array.length === 1) {                                                     // 990\n                        // skip empty line                                                                           // 991\n                    } else if (position < first_len) {                                                               // 992\n                        draw_cursor_line(array[0], position);                                                        // 993\n                        lines_after(array.slice(1));                                                                 // 994\n                    } else if (position === first_len) {                                                             // 995\n                        before.before(div(array[0]));                                                                // 996\n                        draw_cursor_line(array[1], 0);                                                               // 997\n                        lines_after(array.slice(2));                                                                 // 998\n                    } else {                                                                                         // 999\n                        var num_lines = array.length;                                                                // 1000\n                        var offset = 0;                                                                              // 1001\n                        if (position < first_len) {                                                                  // 1002\n                            draw_cursor_line(array[0], position);                                                    // 1003\n                            lines_after(array.slice(1));                                                             // 1004\n                        } else if (position === first_len) {                                                         // 1005\n                            before.before(div(array[0]));                                                            // 1006\n                            draw_cursor_line(array[1], 0);                                                           // 1007\n                            lines_after(array.slice(2));                                                             // 1008\n                        } else {                                                                                     // 1009\n                            var last = array.slice(-1)[0];                                                           // 1010\n                            var from_last = string.length - position;                                                // 1011\n                            var last_len = last.length;                                                              // 1012\n                            var pos = 0;                                                                             // 1013\n                            if (from_last <= last_len) {                                                             // 1014\n                                lines_before(array.slice(0, -1));                                                    // 1015\n                                pos = last_len === from_last ? 0 : last_len-from_last;                               // 1016\n                                draw_cursor_line(last, pos+tabs_rm);                                                 // 1017\n                            } else {                                                                                 // 1018\n                                // in the middle                                                                     // 1019\n                                if (num_lines === 3) {                                                               // 1020\n                                    before.before('<div>' + $.terminal.encode(array[0], true) +                      // 1021\n                                                  '</div>');                                                         // 1022\n                                    draw_cursor_line(array[1], position-first_len-1);                                // 1023\n                                    after.after('<div class=\"clear\">' +                                              // 1024\n                                                $.terminal.encode(array[2], true) +                                  // 1025\n                                                '</div>');                                                           // 1026\n                                } else {                                                                             // 1027\n                                    // more lines, cursor in the middle                                              // 1028\n                                    var line_index;                                                                  // 1029\n                                    var current;                                                                     // 1030\n                                    pos = position;                                                                  // 1031\n                                    for (i=0; i<array.length; ++i) {                                                 // 1032\n                                        var current_len = array[i].length;                                           // 1033\n                                        if (pos > current_len) {                                                     // 1034\n                                            pos -= current_len;                                                      // 1035\n                                        } else {                                                                     // 1036\n                                            break;                                                                   // 1037\n                                        }                                                                            // 1038\n                                    }                                                                                // 1039\n                                    current = array[i];                                                              // 1040\n                                    line_index = i;                                                                  // 1041\n                                    // cursor on first character in line                                             // 1042\n                                    if (pos === current.length) {                                                    // 1043\n                                        pos = 0;                                                                     // 1044\n                                        current = array[++line_index];                                               // 1045\n                                    }                                                                                // 1046\n                                    draw_cursor_line(current, pos);                                                  // 1047\n                                    lines_before(array.slice(0, line_index));                                        // 1048\n                                    lines_after(array.slice(line_index+1));                                          // 1049\n                                }                                                                                    // 1050\n                            }                                                                                        // 1051\n                        }                                                                                            // 1052\n                    }                                                                                                // 1053\n                } else {                                                                                             // 1054\n                     if (string === '') {                                                                            // 1055\n                         before.html('');                                                                            // 1056\n                         cursor.html('&nbsp;');                                                                      // 1057\n                         after.html('');                                                                             // 1058\n                     } else {                                                                                        // 1059\n                         draw_cursor_line(string, position);                                                         // 1060\n                     }                                                                                               // 1061\n                }                                                                                                    // 1062\n            };                                                                                                       // 1063\n        })(self);                                                                                                    // 1064\n        var last_command;                                                                                            // 1065\n        // -----------------------------------------------------------------------                                   // 1066\n        // :: Draw prompt that can be a function or a string                                                         // 1067\n        // -----------------------------------------------------------------------                                   // 1068\n        var draw_prompt = (function() {                                                                              // 1069\n            var prompt_node = self.find('.prompt');                                                                  // 1070\n            function set(prompt) {                                                                                   // 1071\n                prompt_len = skipFormattingCount(prompt);                                                            // 1072\n                prompt_node.html($.terminal.format($.terminal.encode(prompt)));                                      // 1073\n            }                                                                                                        // 1074\n            return function() {                                                                                      // 1075\n                switch (typeof prompt) {                                                                             // 1076\n                case 'string':                                                                                       // 1077\n                    set(prompt);                                                                                     // 1078\n                    break;                                                                                           // 1079\n                case 'function':                                                                                     // 1080\n                    prompt(set);                                                                                     // 1081\n                    break;                                                                                           // 1082\n                }                                                                                                    // 1083\n            };                                                                                                       // 1084\n        })();                                                                                                        // 1085\n        // -----------------------------------------------------------------------                                   // 1086\n        // :: Paste content to terminal using hidden textarea                                                        // 1087\n        // -----------------------------------------------------------------------                                   // 1088\n        function paste() {                                                                                           // 1089\n            clip.focus();                                                                                            // 1090\n            //wait until Browser insert text to textarea                                                             // 1091\n            self.oneTime(1, function() {                                                                             // 1092\n                self.insert(clip.val());                                                                             // 1093\n                clip.blur().val('');                                                                                 // 1094\n            });                                                                                                      // 1095\n        }                                                                                                            // 1096\n        var first_up_history = true;                                                                                 // 1097\n        //var prevent_keypress = false;                                                                              // 1098\n        // -----------------------------------------------------------------------                                   // 1099\n        // :: Keydown Event Handler                                                                                  // 1100\n        // -----------------------------------------------------------------------                                   // 1101\n        function keydown_event(e) {                                                                                  // 1102\n            var result, pos, len;                                                                                    // 1103\n            if (typeof options.keydown == 'function') {                                                              // 1104\n                result = options.keydown(e);                                                                         // 1105\n                if (result !== undefined) {                                                                          // 1106\n                    //prevent_keypress = true;                                                                       // 1107\n                    return result;                                                                                   // 1108\n                }                                                                                                    // 1109\n            }                                                                                                        // 1110\n            if (enabled) {                                                                                           // 1111\n                if (e.which !== 38 &&                                                                                // 1112\n                    !(e.which === 80 && e.ctrlKey)) {                                                                // 1113\n                    first_up_history = true;                                                                         // 1114\n                }                                                                                                    // 1115\n                // arrows / Home / End / ENTER                                                                       // 1116\n                if (reverse_search && (e.which === 35 || e.which === 36 ||                                           // 1117\n                                       e.which === 37 || e.which === 38 ||                                           // 1118\n                                       e.which === 39 || e.which === 40 ||                                           // 1119\n                                       e.which === 13 || e.which === 27)) {                                          // 1120\n                    clear_reverse_state();                                                                           // 1121\n                    draw_prompt();                                                                                   // 1122\n                    if (e.which === 27) { // ESC                                                                     // 1123\n                        command = '';                                                                                // 1124\n                    }                                                                                                // 1125\n                    redraw();                                                                                        // 1126\n                    // finish reverse search and execute normal event handler                                        // 1127\n                    keydown_event.call(this, e);                                                                     // 1128\n                } else if (e.altKey) {                                                                               // 1129\n                    // Chrome on Windows sets ctrlKey and altKey for alt                                             // 1130\n                    // need to check for alt first                                                                   // 1131\n                    //if (e.which === 18) { // press ALT                                                             // 1132\n                    if (e.which === 68) { //ALT+D                                                                    // 1133\n                        self.set(command.slice(0, position) +                                                        // 1134\n                                 command.slice(position).replace(/[^ ]+ |[^ ]+$/, ''),                               // 1135\n                                 true);                                                                              // 1136\n                        // chrome jump to address bar                                                                // 1137\n                        return false;                                                                                // 1138\n                    }                                                                                                // 1139\n                    return true;                                                                                     // 1140\n                } else if (e.keyCode === 13) { //enter                                                               // 1141\n                    if (e.shiftKey) {                                                                                // 1142\n                        self.insert('\\n');                                                                           // 1143\n                    } else {                                                                                         // 1144\n                        if (history && command && !mask &&                                                           // 1145\n                            ((typeof options.historyFilter == 'function' &&                                          // 1146\n                              options.historyFilter(command)) ||                                                     // 1147\n                             !options.historyFilter)) {                                                              // 1148\n                            history.append(command);                                                                 // 1149\n                        }                                                                                            // 1150\n                        var tmp = command;                                                                           // 1151\n                        history.reset();                                                                             // 1152\n                        self.set('');                                                                                // 1153\n                        if (options.commands) {                                                                      // 1154\n                            options.commands(tmp);                                                                   // 1155\n                        }                                                                                            // 1156\n                        if (typeof prompt === 'function') {                                                          // 1157\n                            draw_prompt();                                                                           // 1158\n                        }                                                                                            // 1159\n                    }                                                                                                // 1160\n                } else if (e.which === 8) { //backspace                                                              // 1161\n                    if (reverse_search) {                                                                            // 1162\n                        reverse_search_string = reverse_search_string.slice(0, -1);                                  // 1163\n                        draw_reverse_prompt();                                                                       // 1164\n                    } else {                                                                                         // 1165\n                        if (command !== '' && position > 0) {                                                        // 1166\n                            command = command.slice(0, position - 1) +                                               // 1167\n                                command.slice(position, command.length);                                             // 1168\n                            --position;                                                                              // 1169\n                            redraw();                                                                                // 1170\n                        }                                                                                            // 1171\n                    }                                                                                                // 1172\n                } else if (e.which === 67 && e.ctrlKey && e.shiftKey) { // CTRL+SHIFT+C                              // 1173\n                    selected_text = getSelectedText();                                                               // 1174\n                } else if (e.which === 86 && e.ctrlKey && e.shiftKey) {                                              // 1175\n                    if (selected_text !== '') {                                                                      // 1176\n                        self.insert(selected_text);                                                                  // 1177\n                    }                                                                                                // 1178\n                } else if (e.which === 9 && !(e.ctrlKey || e.altKey)) { // TAB                                       // 1179\n                    self.insert('\\t');                                                                               // 1180\n                } else if (e.which === 46) {                                                                         // 1181\n                    //DELETE                                                                                         // 1182\n                    if (command !== '' && position < command.length) {                                               // 1183\n                        command = command.slice(0, position) +                                                       // 1184\n                            command.slice(position + 1, command.length);                                             // 1185\n                        redraw();                                                                                    // 1186\n                    }                                                                                                // 1187\n                    return true;                                                                                     // 1188\n                } else if (history && e.which === 38 ||                                                              // 1189\n                           (e.which === 80 && e.ctrlKey)) {                                                          // 1190\n                    //UP ARROW or CTRL+P                                                                             // 1191\n                    if (first_up_history) {                                                                          // 1192\n                        last_command = command;                                                                      // 1193\n                        self.set(history.current());                                                                 // 1194\n                    } else {                                                                                         // 1195\n                        self.set(history.previous());                                                                // 1196\n                    }                                                                                                // 1197\n                    first_up_history = false;                                                                        // 1198\n                } else if (history && e.which === 40 ||                                                              // 1199\n                           (e.which === 78 && e.ctrlKey)) {                                                          // 1200\n                    //DOWN ARROW or CTRL+N                                                                           // 1201\n                    self.set(history.end() ? last_command : history.next());                                         // 1202\n                } else if (e.which === 37 ||                                                                         // 1203\n                           (e.which === 66 && e.ctrlKey)) {                                                          // 1204\n                    //CTRL+LEFT ARROW or CTRL+B                                                                      // 1205\n                    if (e.ctrlKey && e.which !== 66) {                                                               // 1206\n                        len = position - 1;                                                                          // 1207\n                        pos = 0;                                                                                     // 1208\n                        if (command[len] === ' ') {                                                                  // 1209\n                            --len;                                                                                   // 1210\n                        }                                                                                            // 1211\n                        for (var i = len; i > 0; --i) {                                                              // 1212\n                            if (command[i] === ' ' && command[i+1] !== ' ') {                                        // 1213\n                                pos = i + 1;                                                                         // 1214\n                                break;                                                                               // 1215\n                            } else if (command[i] === '\\n' && command[i+1] !== '\\n') {                               // 1216\n                                pos = i;                                                                             // 1217\n                                break;                                                                               // 1218\n                            }                                                                                        // 1219\n                        }                                                                                            // 1220\n                        self.position(pos);                                                                          // 1221\n                    } else {                                                                                         // 1222\n                        //LEFT ARROW or CTRL+B                                                                       // 1223\n                        if (position > 0) {                                                                          // 1224\n                            --position;                                                                              // 1225\n                            redraw();                                                                                // 1226\n                        }                                                                                            // 1227\n                    }                                                                                                // 1228\n                } else if (e.which === 82 && e.ctrlKey) { // CTRL+R                                                  // 1229\n                    if (reverse_search) {                                                                            // 1230\n                        reverse_history_search(true);                                                                // 1231\n                    } else {                                                                                         // 1232\n                        backup_prompt = prompt;                                                                      // 1233\n                        draw_reverse_prompt();                                                                       // 1234\n                        last_command = command;                                                                      // 1235\n                        command = '';                                                                                // 1236\n                        redraw();                                                                                    // 1237\n                        reverse_search = true;                                                                       // 1238\n                    }                                                                                                // 1239\n                } else if (e.which == 71 && e.ctrlKey) { // CTRL+G                                                   // 1240\n                    if (reverse_search) {                                                                            // 1241\n                        prompt = backup_prompt;                                                                      // 1242\n                        draw_prompt();                                                                               // 1243\n                        command = last_command;                                                                      // 1244\n                        redraw();                                                                                    // 1245\n                        reverse_search = false;                                                                      // 1246\n                        reverse_search_string = '';                                                                  // 1247\n                    }                                                                                                // 1248\n                } else if (e.which === 39 ||                                                                         // 1249\n                           (e.which === 70 && e.ctrlKey)) {                                                          // 1250\n                    //RIGHT ARROW OR CTRL+F                                                                          // 1251\n                    if (e.ctrlKey && e.which !== 70) {                                                               // 1252\n                        // jump to beginning or end of the word                                                      // 1253\n                        if (command[position] === ' ') {                                                             // 1254\n                            ++position;                                                                              // 1255\n                        }                                                                                            // 1256\n                        var re = /\\S[\\n\\s]{2,}|[\\n\\s]+\\S?/;                                                          // 1257\n                        var match = command.slice(position).match(re);                                               // 1258\n                        if (!match || match[0].match(/^\\s+$/)) {                                                     // 1259\n                            position = command.length;                                                               // 1260\n                        } else {                                                                                     // 1261\n                            if (match[0][0] !== ' ') {                                                               // 1262\n                                position += match.index + 1;                                                         // 1263\n                            } else {                                                                                 // 1264\n                                position += match.index + match[0].length - 1;                                       // 1265\n                                if (match[0][match[0].length-1] !== ' ') {                                           // 1266\n                                    --position;                                                                      // 1267\n                                }                                                                                    // 1268\n                            }                                                                                        // 1269\n                        }                                                                                            // 1270\n                        redraw();                                                                                    // 1271\n                    } else {                                                                                         // 1272\n                        if (position < command.length) {                                                             // 1273\n                            ++position;                                                                              // 1274\n                            redraw();                                                                                // 1275\n                        }                                                                                            // 1276\n                    }                                                                                                // 1277\n                } else if (e.which === 123) { //F12 - Allow Firebug                                                  // 1278\n                    return true;                                                                                     // 1279\n                } else if (e.which === 36) { //HOME                                                                  // 1280\n                    self.position(0);                                                                                // 1281\n                } else if (e.which === 35) {                                                                         // 1282\n                    //END                                                                                            // 1283\n                    self.position(command.length);                                                                   // 1284\n                } else if (e.shiftKey && e.which == 45) { // Shift+Insert                                            // 1285\n                    paste();                                                                                         // 1286\n                    return true;                                                                                     // 1287\n                } else if (e.ctrlKey || e.metaKey) {                                                                 // 1288\n                    if (e.which === 192) { // CMD+` switch browser window on Mac                                     // 1289\n                        return true;                                                                                 // 1290\n                    }                                                                                                // 1291\n                    if (e.metaKey) {                                                                                 // 1292\n                        if(e.which === 82) { // CMD+r page reload in Chrome Mac                                      // 1293\n                            return true;                                                                             // 1294\n                        } else if(e.which === 76) {                                                                  // 1295\n                            return true; // CMD+l jump into Omnibox on Chrome Mac                                    // 1296\n                        }                                                                                            // 1297\n                    }                                                                                                // 1298\n                    if (e.shiftKey) { // CTRL+SHIFT+??                                                               // 1299\n                        if (e.which === 84) {                                                                        // 1300\n                            //CTRL+SHIFT+T open closed tab                                                           // 1301\n                            return true;                                                                             // 1302\n                        }                                                                                            // 1303\n                    //} else if (e.altKey) { //ALT+CTRL+??                                                           // 1304\n                    } else {                                                                                         // 1305\n                        if (e.which === 81) { // CTRL+W                                                              // 1306\n                            // don't work in Chromium (can't prevent close tab)                                      // 1307\n                            if (command !== '' && position !== 0) {                                                  // 1308\n                                var first = command.slice(0, position);                                              // 1309\n                                var last = command.slice(position+1);                                                // 1310\n                                var m = first.match(/([^ ]+ *$)/);                                                   // 1311\n                                position = first.length-m[0].length;                                                 // 1312\n                                kill_text = first.slice(position);                                                   // 1313\n                                command = first.slice(0, position) + last;                                           // 1314\n                                redraw();                                                                            // 1315\n                            }                                                                                        // 1316\n                            return false;                                                                            // 1317\n                        } else if (e.which === 72) { // CTRL+H                                                       // 1318\n                            if (command !== '' && position > 0) {                                                    // 1319\n                                command = command.slice(0, --position);                                              // 1320\n                                if (position < command.length-1) {                                                   // 1321\n                                    command += command.slice(position);                                              // 1322\n                                }                                                                                    // 1323\n                                redraw();                                                                            // 1324\n                            }                                                                                        // 1325\n                            return false;                                                                            // 1326\n                        //NOTE: in opera charCode is undefined                                                       // 1327\n                        } else if (e.which === 65) {                                                                 // 1328\n                            //CTRL+A                                                                                 // 1329\n                            self.position(0);                                                                        // 1330\n                        } else if (e.which === 69) {                                                                 // 1331\n                            //CTRL+E                                                                                 // 1332\n                            self.position(command.length);                                                           // 1333\n                        } else if (e.which === 88 || e.which === 67 || e.which === 84) {                             // 1334\n                            //CTRL+X CTRL+C CTRL+W CTRL+T                                                            // 1335\n                            return true;                                                                             // 1336\n                        } else if (e.which === 89) { // CTRL+Y                                                       // 1337\n                            if (kill_text !== '') {                                                                  // 1338\n                                self.insert(kill_text);                                                              // 1339\n                            }                                                                                        // 1340\n                        } else if (e.which === 86) {                                                                 // 1341\n                            //CTRL+V                                                                                 // 1342\n                            paste();                                                                                 // 1343\n                            return true;                                                                             // 1344\n                        } else if (e.which === 75) {                                                                 // 1345\n                            //CTRL+K                                                                                 // 1346\n                            if (position === 0) {                                                                    // 1347\n                                kill_text = command;                                                                 // 1348\n                                self.set('');                                                                        // 1349\n                            } else if (position !== command.length) {                                                // 1350\n                                kill_text = command.slice(position);                                                 // 1351\n                                self.set(command.slice(0, position));                                                // 1352\n                            }                                                                                        // 1353\n                        } else if (e.which === 85) { // CTRL+U                                                       // 1354\n                            if (command !== '' && position !== 0) {                                                  // 1355\n                                kill_text = command.slice(0, position);                                              // 1356\n                                self.set(command.slice(position, command.length));                                   // 1357\n                                self.position(0);                                                                    // 1358\n                            }                                                                                        // 1359\n                        } else if (e.which === 17) { //CTRL+TAB switch tab                                           // 1360\n                            return false;                                                                            // 1361\n                        }                                                                                            // 1362\n                    }                                                                                                // 1363\n                } else {                                                                                             // 1364\n                    return true;                                                                                     // 1365\n                }                                                                                                    // 1366\n                return false;                                                                                        // 1367\n            } /*else {                                                                                               // 1368\n                if ((e.altKey && e.which === 68) ||                                                                  // 1369\n                    (e.ctrlKey &&                                                                                    // 1370\n                     $.inArray(e.which, [65, 66, 68, 69, 80, 78, 70]) > -1) ||                                       // 1371\n                    // 68 === D                                                                                      // 1372\n                    [35, 36, 37, 38, 39, 40].has(e.which)) {                                                         // 1373\n                    return false;                                                                                    // 1374\n                }                                                                                                    // 1375\n            } */                                                                                                     // 1376\n        }                                                                                                            // 1377\n        var history_list = [];                                                                                       // 1378\n        // -----------------------------------------------------------------------                                   // 1379\n        // :: Command Line Methods                                                                                   // 1380\n        // -----------------------------------------------------------------------                                   // 1381\n        $.extend(self, {                                                                                             // 1382\n            name: function(string) {                                                                                 // 1383\n                if (string !== undefined) {                                                                          // 1384\n                    name = string;                                                                                   // 1385\n                    var enabled = history && history.enabled() || !history;                                          // 1386\n                    history = new History(string, historySize);                                                      // 1387\n                    // disable new history if old was disabled                                                       // 1388\n                    if (!enabled) {                                                                                  // 1389\n                        history.disable();                                                                           // 1390\n                    }                                                                                                // 1391\n                    return self;                                                                                     // 1392\n                } else {                                                                                             // 1393\n                    return name;                                                                                     // 1394\n                }                                                                                                    // 1395\n            },                                                                                                       // 1396\n            purge: function() {                                                                                      // 1397\n                history.clear();                                                                                     // 1398\n                return self;                                                                                         // 1399\n            },                                                                                                       // 1400\n            history: function() {                                                                                    // 1401\n                return history;                                                                                      // 1402\n            },                                                                                                       // 1403\n            set: function(string, stay) {                                                                            // 1404\n                if (string !== undefined) {                                                                          // 1405\n                    command = string;                                                                                // 1406\n                    if (!stay) {                                                                                     // 1407\n                        position = command.length;                                                                   // 1408\n                    }                                                                                                // 1409\n                    redraw();                                                                                        // 1410\n                    if (typeof options.onCommandChange === 'function') {                                             // 1411\n                        options.onCommandChange(command);                                                            // 1412\n                    }                                                                                                // 1413\n                }                                                                                                    // 1414\n                return self;                                                                                         // 1415\n            },                                                                                                       // 1416\n            insert: function(string, stay) {                                                                         // 1417\n                if (position === command.length) {                                                                   // 1418\n                    command += string;                                                                               // 1419\n                } else if (position === 0) {                                                                         // 1420\n                    command = string + command;                                                                      // 1421\n                } else {                                                                                             // 1422\n                    command = command.slice(0, position) +                                                           // 1423\n                        string + command.slice(position);                                                            // 1424\n                }                                                                                                    // 1425\n                if (!stay) {                                                                                         // 1426\n                    position += string.length;                                                                       // 1427\n                }                                                                                                    // 1428\n                redraw();                                                                                            // 1429\n                if (typeof options.onCommandChange === 'function') {                                                 // 1430\n                    options.onCommandChange(command);                                                                // 1431\n                }                                                                                                    // 1432\n                return self;                                                                                         // 1433\n            },                                                                                                       // 1434\n            get: function() {                                                                                        // 1435\n                return command;                                                                                      // 1436\n            },                                                                                                       // 1437\n            commands: function(commands) {                                                                           // 1438\n                if (commands) {                                                                                      // 1439\n                    options.commands = commands;                                                                     // 1440\n                    return self;                                                                                     // 1441\n                } else {                                                                                             // 1442\n                    return commands;                                                                                 // 1443\n                }                                                                                                    // 1444\n            },                                                                                                       // 1445\n            destroy: function() {                                                                                    // 1446\n                $(document.documentElement || window).unbind('.cmd');                                                // 1447\n                self.stopTime('blink', blink);                                                                       // 1448\n                self.find('.cursor').next().remove().end().prev().remove().end().remove();                           // 1449\n                self.find('.prompt, .clipboard').remove();                                                           // 1450\n                self.removeClass('cmd').removeData('cmd');                                                           // 1451\n                return self;                                                                                         // 1452\n            },                                                                                                       // 1453\n            prompt: function(user_prompt) {                                                                          // 1454\n                if (user_prompt === undefined) {                                                                     // 1455\n                    return prompt;                                                                                   // 1456\n                } else {                                                                                             // 1457\n                    if (typeof user_prompt === 'string' ||                                                           // 1458\n                        typeof user_prompt === 'function') {                                                         // 1459\n                        prompt = user_prompt;                                                                        // 1460\n                    } else {                                                                                         // 1461\n                        throw 'prompt must be a function or string';                                                 // 1462\n                    }                                                                                                // 1463\n                    draw_prompt();                                                                                   // 1464\n                    // we could check if command is longer then numchars-new prompt                                  // 1465\n                    redraw();                                                                                        // 1466\n                    return self;                                                                                     // 1467\n                }                                                                                                    // 1468\n            },                                                                                                       // 1469\n            kill_text: function() {                                                                                  // 1470\n                return kill_text;                                                                                    // 1471\n            },                                                                                                       // 1472\n            position: function(n) {                                                                                  // 1473\n                if (typeof n === 'number') {                                                                         // 1474\n                    position = n < 0 ? 0 : n > command.length ? command.length : n;                                  // 1475\n                    redraw();                                                                                        // 1476\n                    return self;                                                                                     // 1477\n                } else {                                                                                             // 1478\n                    return position;                                                                                 // 1479\n                }                                                                                                    // 1480\n            },                                                                                                       // 1481\n            visible: (function() {                                                                                   // 1482\n                var visible = self.visible;                                                                          // 1483\n                return function() {                                                                                  // 1484\n                    visible.apply(self, []);                                                                         // 1485\n                    redraw();                                                                                        // 1486\n                    draw_prompt();                                                                                   // 1487\n                };                                                                                                   // 1488\n            })(),                                                                                                    // 1489\n            show: (function() {                                                                                      // 1490\n                var show = self.show;                                                                                // 1491\n                return function() {                                                                                  // 1492\n                    show.apply(self, []);                                                                            // 1493\n                    redraw();                                                                                        // 1494\n                    draw_prompt();                                                                                   // 1495\n                };                                                                                                   // 1496\n            })(),                                                                                                    // 1497\n            resize: function(num) {                                                                                  // 1498\n                if (num) {                                                                                           // 1499\n                    num_chars = num;                                                                                 // 1500\n                } else {                                                                                             // 1501\n                    change_num_chars();                                                                              // 1502\n                }                                                                                                    // 1503\n                redraw();                                                                                            // 1504\n                return self;                                                                                         // 1505\n            },                                                                                                       // 1506\n            enable: function() {                                                                                     // 1507\n                enabled = true;                                                                                      // 1508\n                animation(true);                                                                                     // 1509\n                return self;                                                                                         // 1510\n            },                                                                                                       // 1511\n            isenabled: function() {                                                                                  // 1512\n                return enabled;                                                                                      // 1513\n            },                                                                                                       // 1514\n            disable: function() {                                                                                    // 1515\n                enabled = false;                                                                                     // 1516\n                animation(false);                                                                                    // 1517\n                return self;                                                                                         // 1518\n            },                                                                                                       // 1519\n            mask: function(display) {                                                                                // 1520\n                if (typeof display === 'boolean') {                                                                  // 1521\n                    mask = display;                                                                                  // 1522\n                    redraw();                                                                                        // 1523\n                    return self;                                                                                     // 1524\n                } else {                                                                                             // 1525\n                    return mask;                                                                                     // 1526\n                }                                                                                                    // 1527\n            }                                                                                                        // 1528\n        });                                                                                                          // 1529\n        // -----------------------------------------------------------------------                                   // 1530\n        // :: INIT                                                                                                   // 1531\n        // -----------------------------------------------------------------------                                   // 1532\n        self.name(options.name || options.prompt || '');                                                             // 1533\n        prompt = options.prompt || '> ';                                                                             // 1534\n        draw_prompt();                                                                                               // 1535\n        if (options.enabled === undefined || options.enabled === true) {                                             // 1536\n            self.enable();                                                                                           // 1537\n        }                                                                                                            // 1538\n        // Keystrokes                                                                                                // 1539\n        var object;                                                                                                  // 1540\n        $(document.documentElement || window).bind('keypress.cmd', function(e) {                                     // 1541\n            var result;                                                                                              // 1542\n            if (e.ctrlKey && e.which === 99) { // CTRL+C                                                             // 1543\n                return true;                                                                                         // 1544\n            }                                                                                                        // 1545\n            if (!reverse_search && typeof options.keypress === 'function') {                                         // 1546\n                result = options.keypress(e);                                                                        // 1547\n            }                                                                                                        // 1548\n            if (result === undefined || result) {                                                                    // 1549\n                if (enabled) {                                                                                       // 1550\n                    if ($.inArray(e.which, [38, 13, 0, 8]) > -1 &&                                                   // 1551\n                        e.keyCode !== 123 && // for F12 which === 0                                                  // 1552\n                        //!(e.which === 40 && e.shiftKey ||                                                          // 1553\n                        !(e.which === 38 && e.shiftKey)) {                                                           // 1554\n                        return false;                                                                                // 1555\n                    } else if (!e.ctrlKey && !(e.altKey && e.which === 100) || e.altKey) { // ALT+D                  // 1556\n                        // TODO: this should be in one statement                                                     // 1557\n                        if (reverse_search) {                                                                        // 1558\n                            reverse_search_string += String.fromCharCode(e.which);                                   // 1559\n                            reverse_history_search();                                                                // 1560\n                            draw_reverse_prompt();                                                                   // 1561\n                        } else {                                                                                     // 1562\n                            self.insert(String.fromCharCode(e.which));                                               // 1563\n                        }                                                                                            // 1564\n                        return false;                                                                                // 1565\n                    }                                                                                                // 1566\n                }                                                                                                    // 1567\n            } else {                                                                                                 // 1568\n                return result;                                                                                       // 1569\n            }                                                                                                        // 1570\n        }).bind('keydown.cmd', keydown_event);                                                                       // 1571\n        // characters                                                                                                // 1572\n        self.data('cmd', self);                                                                                      // 1573\n        return self;                                                                                                 // 1574\n    }; // cmd plugin                                                                                                 // 1575\n                                                                                                                     // 1576\n    // -------------------------------------------------------------------------                                     // 1577\n    // :: TOOLS                                                                                                      // 1578\n    // -------------------------------------------------------------------------                                     // 1579\n    function skipFormattingCount(string) {                                                                           // 1580\n        // this will covert html entities to single characters                                                       // 1581\n        return $('<div>' + $.terminal.strip(string) + '</div>').text().length;                                       // 1582\n    }                                                                                                                // 1583\n    // -------------------------------------------------------------------------                                     // 1584\n    function formattingCount(string) {                                                                               // 1585\n        return string.length - skipFormattingCount(string);                                                          // 1586\n    }                                                                                                                // 1587\n    // -------------------------------------------------------------------------                                     // 1588\n    // taken from https://hacks.mozilla.org/2011/09/detecting-and-generating-css-animations-in-javascript/           // 1589\n    function supportAnimations() {                                                                                   // 1590\n        var animation = false,                                                                                       // 1591\n        animationstring = 'animation',                                                                               // 1592\n        keyframeprefix = '',                                                                                         // 1593\n        domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),                                                            // 1594\n        pfx  = '',                                                                                                   // 1595\n        elm = document.createElement('div');                                                                         // 1596\n        if (elm.style.animationName) { animation = true; }                                                           // 1597\n        if (animation === false) {                                                                                   // 1598\n            for (var i = 0; i < domPrefixes.length; i++) {                                                           // 1599\n                if (elm.style[ domPrefixes[i] + 'AnimationName' ] !== undefined) {                                   // 1600\n                    pfx = domPrefixes[i];                                                                            // 1601\n                    animationstring = pfx + 'Animation';                                                             // 1602\n                    keyframeprefix = '-' + pfx.toLowerCase() + '-';                                                  // 1603\n                    animation = true;                                                                                // 1604\n                    break;                                                                                           // 1605\n                }                                                                                                    // 1606\n            }                                                                                                        // 1607\n        }                                                                                                            // 1608\n        return animation;                                                                                            // 1609\n    }                                                                                                                // 1610\n    // -------------------------------------------------------------------------                                     // 1611\n    function processCommand(string, fn) {                                                                            // 1612\n        var args = string.replace(/^\\s+|\\s+$/g, '').split(/(\\s+)/);                                                  // 1613\n        var rest = string.replace(/^[^\\s]+\\s*/, '');                                                                 // 1614\n        return {                                                                                                     // 1615\n            name: args[0],                                                                                           // 1616\n            args: fn(rest),                                                                                          // 1617\n            rest: rest                                                                                               // 1618\n        };                                                                                                           // 1619\n    }                                                                                                                // 1620\n    // colors from http://www.w3.org/wiki/CSS/Properties/color/keywords                                              // 1621\n    var color_names = [                                                                                              // 1622\n        'black', 'silver', 'gray', 'white', 'maroon', 'red', 'purple',                                               // 1623\n        'fuchsia', 'green', 'lime', 'olive', 'yellow', 'navy', 'blue', 'teal',                                       // 1624\n        'aqua', 'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure',                                          // 1625\n        'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet',                                          // 1626\n        'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral',                                       // 1627\n        'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan',                                     // 1628\n        'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki',                                           // 1629\n        'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred',                                      // 1630\n        'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray',                                              // 1631\n        'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink',                                                  // 1632\n        'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick',                                              // 1633\n        'floralwhite', 'forestgreen', 'fuchsia', 'gainsboro', 'ghostwhite',                                          // 1634\n        'gold', 'goldenrod', 'gray', 'green', 'greenyellow', 'grey', 'honeydew',                                     // 1635\n        'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender',                                              // 1636\n        'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral',                                     // 1637\n        'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen',                                              // 1638\n        'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen',                                                    // 1639\n        'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue',                                        // 1640\n        'lightyellow', 'lime', 'limegreen', 'linen', 'magenta', 'maroon',                                            // 1641\n        'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple',                                            // 1642\n        'mediumseagreen', 'mediumslateblue', 'mediumspringgreen',                                                    // 1643\n        'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream',                                           // 1644\n        'mistyrose', 'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive',                                          // 1645\n        'olivedrab', 'orange', 'orangered', 'orchid', 'palegoldenrod',                                               // 1646\n        'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip',                                                 // 1647\n        'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'red',                                          // 1648\n        'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown',                                             // 1649\n        'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue',                                          // 1650\n        'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan',                                         // 1651\n        'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white',                                        // 1652\n        'whitesmoke', 'yellow', 'yellowgreen'];                                                                      // 1653\n    // -------------------------------------------------------------------------                                     // 1654\n    var format_split_re = /(\\[\\[[gbiuso]*;[^;]*;[^\\]]*\\](?:[^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^\\[]*\\[[^\\]]*)\\]?)/i;            // 1655\n    var format_parts_re = /\\[\\[([gbiuso]*);([^;]*);([^;\\]]*);?([^;\\]]*);?([^\\]]*)\\]([^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^\\[]*\\[[^\\]]*)\\]?/gi;\n    var format_re = /\\[\\[([gbiuso]*;[^;\\]]*;[^;\\]]*(?:;|[^\\]()]*);?[^\\]]*)\\]([^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^\\[]*\\[[^\\]]*)\\]?/gi;\n    var format_full_re = /^\\[\\[([gbiuso]*;[^;\\]]*;[^;\\]]*(?:;|[^\\]()]*);?[^\\]]*)\\]([^\\]]*\\\\\\][^\\]]*|[^\\]]*|[^\\[]*\\[[^\\]]*)\\]$/gi;\n    var color_hex_re = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i;                                                              // 1659\n    //var url_re = /https?:\\/\\/(?:(?!&[^;]+;)[^\\s:\"'<>)])+/g;                                                        // 1660\n    var url_re = /\\bhttps?:\\/\\/(?:(?!&[^;]+;)[^\\s\"'<>)])+\\b/g;                                                       // 1661\n    var email_re = /((([^<>('\")[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,})))/g;\n    var command_re = /('[^']*'|\"(\\\\\"|[^\"])*\"|\\/(\\\\\\/|[^\\/])+\\/[gimy]*|(\\\\ |[^ ])+|[\\w-]+)/g;                         // 1663\n    var format_begin_re = /(\\[\\[[gbiuso]*;[^;]*;[^\\]]*\\])/i;                                                         // 1664\n    var format_last_re = /\\[\\[[gbiuso]*;[^;]*;[^\\]]*\\]?$/i;                                                          // 1665\n    $.terminal = {                                                                                                   // 1666\n        // -----------------------------------------------------------------------                                   // 1667\n        // :: Validate html color (it can be name or hex)                                                            // 1668\n        // -----------------------------------------------------------------------                                   // 1669\n        valid_color: function(color) {                                                                               // 1670\n            return color.match(color_hex_re) || $.inArray(color.toLowerCase(), color_names) !== -1;                  // 1671\n        },                                                                                                           // 1672\n        // -----------------------------------------------------------------------                                   // 1673\n        // :: Escape all special regex characters, so it can be use as regex to                                      // 1674\n        // :: match exact string that contain those characters                                                       // 1675\n        // -----------------------------------------------------------------------                                   // 1676\n        escape_regex: function(string) {                                                                             // 1677\n            var special = /([\\^\\$\\[\\]\\(\\)\\+\\*\\.\\|])/g;                                                               // 1678\n            return string.replace(special, '\\\\$1');                                                                  // 1679\n        },                                                                                                           // 1680\n        // -----------------------------------------------------------------------                                   // 1681\n        // :: test if string contain formatting                                                                      // 1682\n        // -----------------------------------------------------------------------                                   // 1683\n        have_formatting: function(str) {                                                                             // 1684\n            return str.match(format_re);                                                                             // 1685\n        },                                                                                                           // 1686\n        is_formatting: function(str) {                                                                               // 1687\n            return str.match(format_full_re);                                                                        // 1688\n        },                                                                                                           // 1689\n        // -----------------------------------------------------------------------                                   // 1690\n        // :: return array of formatting and text between them                                                       // 1691\n        // -----------------------------------------------------------------------                                   // 1692\n        format_split: function(str) {                                                                                // 1693\n            return str.split(format_split_re);                                                                       // 1694\n        },                                                                                                           // 1695\n        // -----------------------------------------------------------------------                                   // 1696\n        // :: split text into lines with equal length so each line can be rendered                                   // 1697\n        // :: separately (text formatting can be longer then a line).                                                // 1698\n        // -----------------------------------------------------------------------                                   // 1699\n        split_equal: function(str, length) {                                                                         // 1700\n            var formatting = false;                                                                                  // 1701\n            var in_text = false;                                                                                     // 1702\n            var braket = 0;                                                                                          // 1703\n            var prev_format = '';                                                                                    // 1704\n            var result = [];                                                                                         // 1705\n            // add format text as 5th paramter to formatting it's used for                                           // 1706\n            // data attribute in format function                                                                     // 1707\n            var array = str.replace(format_re, function(_, format, text) {                                           // 1708\n                var semicolons = format.match(/;/g).length;                                                          // 1709\n                // missing semicolons                                                                                // 1710\n                if (semicolons == 2) {                                                                               // 1711\n                    semicolons = ';;';                                                                               // 1712\n                } else if (semicolons == 3) {                                                                        // 1713\n                    semicolons = ';';                                                                                // 1714\n                } else {                                                                                             // 1715\n                    semicolons = '';                                                                                 // 1716\n                }                                                                                                    // 1717\n                // return '[[' + format + ']' + text + ']';                                                          // 1718\n                // closing braket will break formatting so we need to escape those using                             // 1719\n                // html entity equvalent                                                                             // 1720\n                return '[[' + format + semicolons +                                                                  // 1721\n                    text.replace(/\\\\\\]/g, '&#93;').replace(/\\n/g, '\\\\n') + ']' +                                     // 1722\n                    text + ']';                                                                                      // 1723\n            }).split(/\\n/g);                                                                                         // 1724\n            for (var i = 0, len = array.length; i < len; ++i) {                                                      // 1725\n                if (array[i] === '') {                                                                               // 1726\n                    result.push('');                                                                                 // 1727\n                    continue;                                                                                        // 1728\n                }                                                                                                    // 1729\n                var line = array[i];                                                                                 // 1730\n                var first_index = 0;                                                                                 // 1731\n                var count = 0;                                                                                       // 1732\n                for (var j=0, jlen=line.length; j<jlen; ++j) {                                                       // 1733\n                    if (line[j] === '[' && line[j+1] === '[') {                                                      // 1734\n                        formatting = true;                                                                           // 1735\n                    } else if (formatting && line[j] === ']') {                                                      // 1736\n                        if (in_text) {                                                                               // 1737\n                            formatting = false;                                                                      // 1738\n                            in_text = false;                                                                         // 1739\n                        } else {                                                                                     // 1740\n                            in_text = true;                                                                          // 1741\n                        }                                                                                            // 1742\n                    } else if ((formatting && in_text) || !formatting) {                                             // 1743\n                        if (line[j] === '&') { // treat entity as one character                                      // 1744\n                            var m = line.substring(j).match(/^(&[^;]+;)/);                                           // 1745\n                            if (!m) {                                                                                // 1746\n                                // should never happen if used by terminal, because                                  // 1747\n                                // it always calls $.terminal.encode before this function                            // 1748\n                                throw \"Unclosed html entity in line \" + (i+1) + ' at char ' + (j+1);                 // 1749\n                            }                                                                                        // 1750\n                            j+=m[1].length-2; // because continue adds 1 to j                                        // 1751\n                            // if entity is at the end there is no next loop - issue #77                             // 1752\n                            if (j === jlen-1) {                                                                      // 1753\n                                result.push(output_line + m[1]);                                                     // 1754\n                            }                                                                                        // 1755\n                            continue;                                                                                // 1756\n                        } else if (line[j] === ']' && line[j-1] === '\\\\') {                                          // 1757\n                            // escape \\] counts as one character                                                     // 1758\n                            --count;                                                                                 // 1759\n                        } else {                                                                                     // 1760\n                            ++count;                                                                                 // 1761\n                        }                                                                                            // 1762\n                    }                                                                                                // 1763\n                    if (count === length || j === jlen-1) {                                                          // 1764\n                        var output_line = line.substring(first_index, j+1);                                          // 1765\n                        if (prev_format) {                                                                           // 1766\n                            output_line = prev_format + output_line;                                                 // 1767\n                            if (output_line.match(']')) {                                                            // 1768\n                                prev_format = '';                                                                    // 1769\n                            }                                                                                        // 1770\n                        }                                                                                            // 1771\n                        first_index = j+1;                                                                           // 1772\n                        count = 0;                                                                                   // 1773\n                        // Fix output_line if formatting not closed                                                  // 1774\n                        var matched = output_line.match(format_re);                                                  // 1775\n                        if (matched) {                                                                               // 1776\n                            var last = matched[matched.length-1];                                                    // 1777\n                            if (last[last.length-1] !== ']') {                                                       // 1778\n                                prev_format = last.match(format_begin_re)[1];                                        // 1779\n                                output_line += ']';                                                                  // 1780\n                            } else if (output_line.match(format_last_re)) {                                          // 1781\n                                var line_len = output_line.length;                                                   // 1782\n                                var f_len = line_len - last[last.length-1].length;                                   // 1783\n                                output_line = output_line.replace(format_last_re, '');                               // 1784\n                                prev_format = last.match(format_begin_re)[1];                                        // 1785\n                            }                                                                                        // 1786\n                        }                                                                                            // 1787\n                        result.push(output_line);                                                                    // 1788\n                    }                                                                                                // 1789\n                }                                                                                                    // 1790\n            }                                                                                                        // 1791\n            return result;                                                                                           // 1792\n        },                                                                                                           // 1793\n        // -----------------------------------------------------------------------                                   // 1794\n        // :: Encode formating as html for insertion into DOM                                                        // 1795\n        // -----------------------------------------------------------------------                                   // 1796\n        encode: function(str, full) {                                                                                // 1797\n            // don't escape entities                                                                                 // 1798\n            if (full) {                                                                                              // 1799\n                str = str.replace(/&(?![^=]+=)/g, '&amp;');                                                          // 1800\n            } else {                                                                                                 // 1801\n                str = str.replace(/&(?!#[0-9]+;|[a-zA-Z]+;|[^= \"]+=[^=])/g, '&amp;');                                // 1802\n            }                                                                                                        // 1803\n            return str.replace(/</g, '&lt;').replace(/>/g, '&gt;')                                                   // 1804\n                      .replace(/ /g, '&nbsp;')                                                                       // 1805\n                      .replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');                                                   // 1806\n        },                                                                                                           // 1807\n        // -----------------------------------------------------------------------                                   // 1808\n        // :: Replace terminal formatting with html                                                                  // 1809\n        // -----------------------------------------------------------------------                                   // 1810\n        format: function(str, options) {                                                                             // 1811\n            var settings = $.extend({}, {                                                                            // 1812\n                linksNoReferrer: false                                                                               // 1813\n            }, options || {});                                                                                       // 1814\n            if (typeof str === 'string') {                                                                           // 1815\n                //support for formating foo[[u;;]bar]baz[[b;#fff;]quux]zzz                                           // 1816\n                var splited = $.terminal.format_split(str);                                                          // 1817\n                if (splited && splited.length > 1) {                                                                 // 1818\n                    str = $.map(splited, function(text) {                                                            // 1819\n                        if (text === '') {                                                                           // 1820\n                            return text;                                                                             // 1821\n                        } else if (text.substring(0,1) === '[') {                                                    // 1822\n                            // use substring for IE quirks mode - [0] don't work                                     // 1823\n                            return text.replace(format_parts_re, function(s,                                         // 1824\n                                                                    style,                                           // 1825\n                                                                    color,                                           // 1826\n                                                                    background,                                      // 1827\n                                                                    _class,                                          // 1828\n                                                                    data_text,                                       // 1829\n                                                                    text) {                                          // 1830\n                                if (text === '') {                                                                   // 1831\n                                    return ''; //'<span>&nbsp;</span>';                                              // 1832\n                                }                                                                                    // 1833\n                                text = text.replace(/\\\\]/g, ']');                                                    // 1834\n                                var style_str = '';                                                                  // 1835\n                                if (style.indexOf('b') !== -1) {                                                     // 1836\n                                    style_str += 'font-weight:bold;';                                                // 1837\n                                }                                                                                    // 1838\n                                var text_decoration = [];                                                            // 1839\n                                if (style.indexOf('u') !== -1) {                                                     // 1840\n                                    text_decoration.push('underline');                                               // 1841\n                                }                                                                                    // 1842\n                                if (style.indexOf('s') !== -1) {                                                     // 1843\n                                    text_decoration.push('line-through');                                            // 1844\n                                }                                                                                    // 1845\n                                if (style.indexOf('o') !== -1) {                                                     // 1846\n                                    text_decoration.push('overline');                                                // 1847\n                                }                                                                                    // 1848\n                                if (text_decoration.length) {                                                        // 1849\n                                    style_str += 'text-decoration:' +                                                // 1850\n                                        text_decoration.join(' ') + ';';                                             // 1851\n                                }                                                                                    // 1852\n                                if (style.indexOf('i') !== -1) {                                                     // 1853\n                                    style_str += 'font-style:italic;';                                               // 1854\n                                }                                                                                    // 1855\n                                if ($.terminal.valid_color(color)) {                                                 // 1856\n                                    style_str += 'color:' + color + ';';                                             // 1857\n                                    if (style.indexOf('g') !== -1) {                                                 // 1858\n                                        style_str += 'text-shadow:0 0 5px ' + color + ';';                           // 1859\n                                    }                                                                                // 1860\n                                }                                                                                    // 1861\n                                if ($.terminal.valid_color(background)) {                                            // 1862\n                                    style_str += 'background-color:' + background;                                   // 1863\n                                }                                                                                    // 1864\n                                var data;                                                                            // 1865\n                                if (data_text === '') {                                                              // 1866\n                                    data = text;                                                                     // 1867\n                                } else {                                                                             // 1868\n                                    data = data_text.replace(/&#93;/g, ']');                                         // 1869\n                                }                                                                                    // 1870\n                                var result = '<span style=\"' + style_str + '\"' +                                     // 1871\n                                    (_class !== '' ? ' class=\"' + _class + '\"' : '') +                               // 1872\n                                    ' data-text=\"'+ data.replace('\"', '&quote;') +                                   // 1873\n                                    '\">' + text + '</span>';                                                         // 1874\n                                return result;                                                                       // 1875\n                            });                                                                                      // 1876\n                        } else {                                                                                     // 1877\n                            return '<span>' + text + '</span>';                                                      // 1878\n                        }                                                                                            // 1879\n                    }).join('');                                                                                     // 1880\n                }                                                                                                    // 1881\n                return $.map(str.split(/(<\\/?span[^>]*>)/g), function(string) {                                      // 1882\n                    if (!string.match(/span/)) {                                                                     // 1883\n                        return string.replace(url_re, function(link) {                                               // 1884\n                            var comma = link.match(/\\.$/);                                                           // 1885\n                            link = link.replace(/\\.$/, '');                                                          // 1886\n                            return '<a target=\"_blank\" ' +                                                           // 1887\n                                (settings.linksNoReferer ? ' rel=\"noreferrer\" ' : '') +                              // 1888\n                                'href=\"' + link + '\">' + link + '</a>' +                                             // 1889\n                                (comma ? '.' : '');                                                                  // 1890\n                        }).replace(email_re, '<a href=\"mailto:$1\">$1</a>');                                          // 1891\n                    } else {                                                                                         // 1892\n                        return string;                                                                               // 1893\n                    }                                                                                                // 1894\n                }).join('').replace(/<span><br\\/?><\\/span>/g, '<br/>');                                              // 1895\n            } else {                                                                                                 // 1896\n                return '';                                                                                           // 1897\n            }                                                                                                        // 1898\n        },                                                                                                           // 1899\n        // -----------------------------------------------------------------------                                   // 1900\n        // :: Replace brackets with html entities                                                                    // 1901\n        // -----------------------------------------------------------------------                                   // 1902\n        escape_brackets: function(string) {                                                                          // 1903\n            return string.replace(/\\[/g, '&#91;').replace(/\\]/g, '&#93;');                                           // 1904\n        },                                                                                                           // 1905\n        // -----------------------------------------------------------------------                                   // 1906\n        // :: Remove formatting from text                                                                            // 1907\n        // -----------------------------------------------------------------------                                   // 1908\n        strip: function(str) {                                                                                       // 1909\n            return str.replace(format_parts_re, '$6');                                                               // 1910\n        },                                                                                                           // 1911\n        // -----------------------------------------------------------------------                                   // 1912\n        // :: Return active terminal                                                                                 // 1913\n        // -----------------------------------------------------------------------                                   // 1914\n        active: function() {                                                                                         // 1915\n            return terminals.front();                                                                                // 1916\n        },                                                                                                           // 1917\n        // -----------------------------------------------------------------------                                   // 1918\n        // :: Replace overtyping (from man) formatting with terminal formatting                                      // 1919\n        // -----------------------------------------------------------------------                                   // 1920\n        overtyping: function(string) {                                                                               // 1921\n            return string.replace(/((?:_\\x08.|.\\x08_)+)/g, function(full, g) {                                       // 1922\n                return '[[u;;]' + full.replace(/_x08|\\x08_|_\\u0008|\\u0008_/g, '') + ']';                             // 1923\n            }).replace(/((?:.\\x08.)+)/g, function(full, g) {                                                         // 1924\n                return '[[b;#fff;]' + full.replace(/(.)(?:\\x08|\\u0008)(.)/g,                                         // 1925\n                                                   function(full, g1, g2) {                                          // 1926\n                                                       return g2;                                                    // 1927\n                                                   }) + ']';                                                         // 1928\n            });                                                                                                      // 1929\n        },                                                                                                           // 1930\n        // -----------------------------------------------------------------------                                   // 1931\n        // :: Html colors taken from ANSI formatting in Linux Terminal                                               // 1932\n        // -----------------------------------------------------------------------                                   // 1933\n        ansi_colors: {                                                                                               // 1934\n            normal: {                                                                                                // 1935\n                black: '#000',                                                                                       // 1936\n                red: '#A00',                                                                                         // 1937\n                green: '#008400',                                                                                    // 1938\n                yellow: '#A50',                                                                                      // 1939\n                blue: '#00A',                                                                                        // 1940\n                magenta: '#A0A',                                                                                     // 1941\n                cyan: '#0AA',                                                                                        // 1942\n                white: '#AAA'                                                                                        // 1943\n            },                                                                                                       // 1944\n            faited: {                                                                                                // 1945\n                black: '#000',                                                                                       // 1946\n                red: '#640000',                                                                                      // 1947\n                green: '#006100',                                                                                    // 1948\n                yellow: '#737300',                                                                                   // 1949\n                blue: '#000087',                                                                                     // 1950\n                magenta: '#650065',                                                                                  // 1951\n                cyan: '#008787',                                                                                     // 1952\n                white: '#818181'                                                                                     // 1953\n            },                                                                                                       // 1954\n            bold: {                                                                                                  // 1955\n                black: '#000',                                                                                       // 1956\n                red: '#F55',                                                                                         // 1957\n                green: '#44D544',                                                                                    // 1958\n                yellow: '#FF5',                                                                                      // 1959\n                blue: '#55F',                                                                                        // 1960\n                magenta: '#F5F',                                                                                     // 1961\n                cyan: '#5FF',                                                                                        // 1962\n                white: '#FFF'                                                                                        // 1963\n            },                                                                                                       // 1964\n            // XTerm 8-bit pallete                                                                                   // 1965\n            palette: [                                                                                               // 1966\n                '#000000', '#AA0000', '#00AA00', '#AA5500', '#0000AA',                                               // 1967\n                '#AA00AA', '#00AAAA', '#AAAAAA', '#555555', '#FF5555',                                               // 1968\n                '#55FF55', '#FFFF55', '#5555FF', '#FF55FF', '#55FFFF',                                               // 1969\n                '#FFFFFF', '#000000', '#00005F', '#000087', '#0000AF',                                               // 1970\n                '#0000D7', '#0000FF', '#005F00', '#005F5F', '#005F87',                                               // 1971\n                '#005FAF', '#005FD7', '#005FFF', '#008700', '#00875F',                                               // 1972\n                '#008787', '#0087AF', '#0087D7', '#00AF00', '#00AF5F',                                               // 1973\n                '#00AF87', '#00AFAF', '#00AFD7', '#00AFFF', '#00D700',                                               // 1974\n                '#00D75F', '#00D787', '#00D7AF', '#00D7D7', '#00D7FF',                                               // 1975\n                '#00FF00', '#00FF5F', '#00FF87', '#00FFAF', '#00FFD7',                                               // 1976\n                '#00FFFF', '#5F0000', '#5F005F', '#5F0087', '#5F00AF',                                               // 1977\n                '#5F00D7', '#5F00FF', '#5F5F00', '#5F5F5F', '#5F5F87',                                               // 1978\n                '#5F5FAF', '#5F5FD7', '#5F5FFF', '#5F8700', '#5F875F',                                               // 1979\n                '#5F8787', '#5F87AF', '#5F87D7', '#5F87FF', '#5FAF00',                                               // 1980\n                '#5FAF5F', '#5FAF87', '#5FAFAF', '#5FAFD7', '#5FAFFF',                                               // 1981\n                '#5FD700', '#5FD75F', '#5FD787', '#5FD7AF', '#5FD7D7',                                               // 1982\n                '#5FD7FF', '#5FFF00', '#5FFF5F', '#5FFF87', '#5FFFAF',                                               // 1983\n                '#5FFFD7', '#5FFFFF', '#870000', '#87005F', '#870087',                                               // 1984\n                '#8700AF', '#8700D7', '#8700FF', '#875F00', '#875F5F',                                               // 1985\n                '#875F87', '#875FAF', '#875FD7', '#875FFF', '#878700',                                               // 1986\n                '#87875F', '#878787', '#8787AF', '#8787D7', '#8787FF',                                               // 1987\n                '#87AF00', '#87AF5F', '#87AF87', '#87AFAF', '#87AFD7',                                               // 1988\n                '#87AFFF', '#87D700', '#87D75F', '#87D787', '#87D7AF',                                               // 1989\n                '#87D7D7', '#87D7FF', '#87FF00', '#87FF5F', '#87FF87',                                               // 1990\n                '#87FFAF', '#87FFD7', '#87FFFF', '#AF0000', '#AF005F',                                               // 1991\n                '#AF0087', '#AF00AF', '#AF00D7', '#AF00FF', '#AF5F00',                                               // 1992\n                '#AF5F5F', '#AF5F87', '#AF5FAF', '#AF5FD7', '#AF5FFF',                                               // 1993\n                '#AF8700', '#AF875F', '#AF8787', '#AF87AF', '#AF87D7',                                               // 1994\n                '#AF87FF', '#AFAF00', '#AFAF5F', '#AFAF87', '#AFAFAF',                                               // 1995\n                '#AFAFD7', '#AFAFFF', '#AFD700', '#AFD75F', '#AFD787',                                               // 1996\n                '#AFD7AF', '#AFD7D7', '#AFD7FF', '#AFFF00', '#AFFF5F',                                               // 1997\n                '#AFFF87', '#AFFFAF', '#AFFFD7', '#AFFFFF', '#D70000',                                               // 1998\n                '#D7005F', '#D70087', '#D700AF', '#D700D7', '#D700FF',                                               // 1999\n                '#D75F00', '#D75F5F', '#D75F87', '#D75FAF', '#D75FD7',                                               // 2000\n                '#D75FFF', '#D78700', '#D7875F', '#D78787', '#D787AF',                                               // 2001\n                '#D787D7', '#D787FF', '#D7AF00', '#D7AF5F', '#D7AF87',                                               // 2002\n                '#D7AFAF', '#D7AFD7', '#D7AFFF', '#D7D700', '#D7D75F',                                               // 2003\n                '#D7D787', '#D7D7AF', '#D7D7D7', '#D7D7FF', '#D7FF00',                                               // 2004\n                '#D7FF5F', '#D7FF87', '#D7FFAF', '#D7FFD7', '#D7FFFF',                                               // 2005\n                '#FF0000', '#FF005F', '#FF0087', '#FF00AF', '#FF00D7',                                               // 2006\n                '#FF00FF', '#FF5F00', '#FF5F5F', '#FF5F87', '#FF5FAF',                                               // 2007\n                '#FF5FD7', '#FF5FFF', '#FF8700', '#FF875F', '#FF8787',                                               // 2008\n                '#FF87AF', '#FF87D7', '#FF87FF', '#FFAF00', '#FFAF5F',                                               // 2009\n                '#FFAF87', '#FFAFAF', '#FFAFD7', '#FFAFFF', '#FFD700',                                               // 2010\n                '#FFD75F', '#FFD787', '#FFD7AF', '#FFD7D7', '#FFD7FF',                                               // 2011\n                '#FFFF00', '#FFFF5F', '#FFFF87', '#FFFFAF', '#FFFFD7',                                               // 2012\n                '#FFFFFF', '#080808', '#121212', '#1C1C1C', '#262626',                                               // 2013\n                '#303030', '#3A3A3A', '#444444', '#4E4E4E', '#585858',                                               // 2014\n                '#626262', '#6C6C6C', '#767676', '#808080', '#8A8A8A',                                               // 2015\n                '#949494', '#9E9E9E', '#A8A8A8', '#B2B2B2', '#BCBCBC',                                               // 2016\n                '#C6C6C6', '#D0D0D0', '#DADADA', '#E4E4E4', '#EEEEEE'                                                // 2017\n            ]                                                                                                        // 2018\n        },                                                                                                           // 2019\n        // -----------------------------------------------------------------------                                   // 2020\n        // :: Replace ANSI formatting with terminal formatting                                                       // 2021\n        // -----------------------------------------------------------------------                                   // 2022\n        from_ansi: (function() {                                                                                     // 2023\n            var color = {                                                                                            // 2024\n                30: 'black',                                                                                         // 2025\n                31: 'red',                                                                                           // 2026\n                32: 'green',                                                                                         // 2027\n                33: 'yellow',                                                                                        // 2028\n                34: 'blue',                                                                                          // 2029\n                35: 'magenta',                                                                                       // 2030\n                36: 'cyan',                                                                                          // 2031\n                37: 'white',                                                                                         // 2032\n                                                                                                                     // 2033\n                39: 'white' // default color                                                                         // 2034\n            };                                                                                                       // 2035\n            var background = {                                                                                       // 2036\n                40: 'black',                                                                                         // 2037\n                41: 'red',                                                                                           // 2038\n                42: 'green',                                                                                         // 2039\n                43: 'yellow',                                                                                        // 2040\n                44: 'blue',                                                                                          // 2041\n                45: 'magenta',                                                                                       // 2042\n                46: 'cyan',                                                                                          // 2043\n                47: 'white',                                                                                         // 2044\n                                                                                                                     // 2045\n                49: 'black' // default background                                                                    // 2046\n            };                                                                                                       // 2047\n            function format_ansi(code) {                                                                             // 2048\n                var controls = code.split(';');                                                                      // 2049\n                var num;                                                                                             // 2050\n                var faited = false;                                                                                  // 2051\n                var reverse = false;                                                                                 // 2052\n                var bold = false;                                                                                    // 2053\n                var styles = [];                                                                                     // 2054\n                var output_color = '';                                                                               // 2055\n                var output_background = '';                                                                          // 2056\n                var _8bit_color = false;                                                                             // 2057\n                var _8bit_background = false;                                                                        // 2058\n                var process_8bit = false;                                                                            // 2059\n                var palette = $.terminal.ansi_colors.palette;                                                        // 2060\n                for(var i in controls) {                                                                             // 2061\n                    num = parseInt(controls[i], 10);                                                                 // 2062\n                    switch(num) {                                                                                    // 2063\n                    case 1:                                                                                          // 2064\n                        styles.push('b');                                                                            // 2065\n                        bold = true;                                                                                 // 2066\n                        faited = false;                                                                              // 2067\n                        break;                                                                                       // 2068\n                    case 4:                                                                                          // 2069\n                        styles.push('u');                                                                            // 2070\n                        break;                                                                                       // 2071\n                    case 3:                                                                                          // 2072\n                        styles.push('i');                                                                            // 2073\n                        break;                                                                                       // 2074\n                    case 5:                                                                                          // 2075\n                        process_8bit = true;                                                                         // 2076\n                        break;                                                                                       // 2077\n                    case 38:                                                                                         // 2078\n                        _8bit_color = true;                                                                          // 2079\n                        break;                                                                                       // 2080\n                    case 48:                                                                                         // 2081\n                        _8bit_background = true;                                                                     // 2082\n                        break;                                                                                       // 2083\n                    case 2:                                                                                          // 2084\n                        faited = true;                                                                               // 2085\n                        bold = false;                                                                                // 2086\n                        break;                                                                                       // 2087\n                    case 7:                                                                                          // 2088\n                        reverse = true;                                                                              // 2089\n                        break;                                                                                       // 2090\n                    default:                                                                                         // 2091\n                        if (_8bit_color && process_8bit && palette[num-1]) {                                         // 2092\n                            output_color = palette[num-1];                                                           // 2093\n                        } else if (color[num]) {                                                                     // 2094\n                            output_color = color[num];                                                               // 2095\n                        }                                                                                            // 2096\n                        if (_8bit_background && process_8bit && palette[num-1]) {                                    // 2097\n                            output_background = palette[num-1];                                                      // 2098\n                        } else if (background[num]) {                                                                // 2099\n                            output_background = background[num];                                                     // 2100\n                        }                                                                                            // 2101\n                    }                                                                                                // 2102\n                    if (num !== 5) {                                                                                 // 2103\n                        process_8bit = false;                                                                        // 2104\n                    }                                                                                                // 2105\n                }                                                                                                    // 2106\n                if (reverse) {                                                                                       // 2107\n                    if (output_color && output_background) {                                                         // 2108\n                        var tmp = output_background;                                                                 // 2109\n                        output_background = output_color;                                                            // 2110\n                        output_color = tmp;                                                                          // 2111\n                    } else {                                                                                         // 2112\n                        output_color = 'black';                                                                      // 2113\n                        output_background = 'white';                                                                 // 2114\n                    }                                                                                                // 2115\n                }                                                                                                    // 2116\n                var colors, backgrounds;                                                                             // 2117\n                if (bold) {                                                                                          // 2118\n                    colors = backgrounds = $.terminal.ansi_colors.bold;                                              // 2119\n                } else if (faited) {                                                                                 // 2120\n                    colors = backgrounds = $.terminal.ansi_colors.faited;                                            // 2121\n                } else {                                                                                             // 2122\n                    colors = backgrounds = $.terminal.ansi_colors.normal;                                            // 2123\n                }                                                                                                    // 2124\n                return [styles.join(''),                                                                             // 2125\n                        _8bit_color ? output_color : colors[output_color],                                           // 2126\n                        _8bit_background ? output_background : backgrounds[output_background]                        // 2127\n                       ];                                                                                            // 2128\n            }                                                                                                        // 2129\n            return function(input) {                                                                                 // 2130\n                var splitted = input.split(/(\\x1B\\[[0-9;]*[A-Za-z])/g);                                              // 2131\n                if (splitted.length == 1) {                                                                          // 2132\n                    return input;                                                                                    // 2133\n                }                                                                                                    // 2134\n                var output = [];                                                                                     // 2135\n                //skip closing at the begining                                                                       // 2136\n                if (splitted.length > 3 && splitted.slice(0,3).join('') == '[0m') {                                  // 2137\n                    splitted = splitted.slice(3);                                                                    // 2138\n                }                                                                                                    // 2139\n                var inside = false, next, prev_color, prev_background, code, match;                                  // 2140\n                for (var i=0; i<splitted.length; ++i) {                                                              // 2141\n                    match = splitted[i].match(/^\\x1B\\[([0-9;]*)([A-Za-z])$/);                                        // 2142\n                    if (match) {                                                                                     // 2143\n                        switch (match[2]) {                                                                          // 2144\n                        case 'm':                                                                                    // 2145\n                            if (match[1] === '') {                                                                   // 2146\n                                continue;                                                                            // 2147\n                            }                                                                                        // 2148\n                            if (match[1] !== '0') {                                                                  // 2149\n                                code = format_ansi(match[1]);                                                        // 2150\n                            }                                                                                        // 2151\n                            if (inside) {                                                                            // 2152\n                                output.push(']');                                                                    // 2153\n                                if (match[1] == '0') {                                                               // 2154\n                                    //just closing                                                                   // 2155\n                                    inside = false;                                                                  // 2156\n                                    prev_color = prev_background = '';                                               // 2157\n                                } else {                                                                             // 2158\n                                    // someone forget to close - move to next                                        // 2159\n                                    code[1] = code[1] || prev_color;                                                 // 2160\n                                    code[2] = code[2] || prev_background;                                            // 2161\n                                    output.push('[[' + code.join(';') + ']');                                        // 2162\n                                    // store colors to next use                                                      // 2163\n                                    if (code[1]) {                                                                   // 2164\n                                        prev_color = code[1];                                                        // 2165\n                                    }                                                                                // 2166\n                                    if (code[2]) {                                                                   // 2167\n                                        prev_background = code[2];                                                   // 2168\n                                    }                                                                                // 2169\n                                }                                                                                    // 2170\n                            } else {                                                                                 // 2171\n                                if (match[1] != '0') {                                                               // 2172\n                                    inside = true;                                                                   // 2173\n                                    output.push('[[' + code.join(';') + ']');                                        // 2174\n                                    // store colors to next use                                                      // 2175\n                                    if (code[1]) {                                                                   // 2176\n                                        prev_color = code[1];                                                        // 2177\n                                    }                                                                                // 2178\n                                    if (code[2]) {                                                                   // 2179\n                                        prev_background = code[2];                                                   // 2180\n                                    }                                                                                // 2181\n                                }                                                                                    // 2182\n                            }                                                                                        // 2183\n                            break;                                                                                   // 2184\n                        }                                                                                            // 2185\n                    } else {                                                                                         // 2186\n                        output.push(splitted[i]);                                                                    // 2187\n                    }                                                                                                // 2188\n                }                                                                                                    // 2189\n                if (inside) {                                                                                        // 2190\n                    output.push(']');                                                                                // 2191\n                }                                                                                                    // 2192\n                return output.join(''); //.replace(/\\[\\[[^\\]]+\\]\\]/g, '');                                           // 2193\n            };                                                                                                       // 2194\n        })(),                                                                                                        // 2195\n        // -----------------------------------------------------------------------                                   // 2196\n        // :: Function splits arguments and works with strings like                                                  // 2197\n        // :: 'asd' 'asd\\' asd' \"asd asd\" asd\\ 123 -n -b / [^ ]+ / /\\s+/ asd\\ asd                                    // 2198\n        // :: it creates a regex and numbers and replaces escape characters in double                                // 2199\n        // :: quotes                                                                                                 // 2200\n        // -----------------------------------------------------------------------                                   // 2201\n        parseArguments: function(string) {                                                                           // 2202\n            return $.map(string.match(command_re) || [], function(arg) {                                             // 2203\n                if (arg[0] === \"'\" && arg[arg.length-1] === \"'\") {                                                   // 2204\n                    return arg.replace(/^'|'$/g, '');                                                                // 2205\n                } else if (arg[0] === '\"' && arg[arg.length-1] === '\"') {                                            // 2206\n                    arg = arg.replace(/^\"|\"$/g, '').replace(/\\\\([\" ])/g, '$1');                                      // 2207\n                    return arg.replace(/\\\\\\\\|\\\\t|\\\\n/g, function(string) {                                           // 2208\n                        if (string[1] === 't') {                                                                     // 2209\n                            return '\\t';                                                                             // 2210\n                        } else if (string[1] === 'n') {                                                              // 2211\n                            return '\\n';                                                                             // 2212\n                        } else {                                                                                     // 2213\n                            return '\\\\';                                                                             // 2214\n                        }                                                                                            // 2215\n                    }).replace(/\\\\x([0-9a-f]+)/gi, function(_, hex) {                                                // 2216\n                        return String.fromCharCode(parseInt(hex, 16));                                               // 2217\n                    }).replace(/\\\\0([0-7]+)/g, function(_, oct) {                                                    // 2218\n                        return String.fromCharCode(parseInt(oct, 8));                                                // 2219\n                    });                                                                                              // 2220\n                } else if (arg.match(/^\\/(\\\\\\/|[^\\/])+\\/[gimy]*$/)) {                                                // 2221\n                    var m = arg.match(/^\\/([^\\/]+)\\/([^\\/]*)$/);                                                     // 2222\n                    return new RegExp(m[1], m[2]);                                                                   // 2223\n                } else if (arg.match(/^-?[0-9]+$/)) {                                                                // 2224\n                    return parseInt(arg, 10);                                                                        // 2225\n                } else if (arg.match(/^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$/)) {                                  // 2226\n                    return parseFloat(arg);                                                                          // 2227\n                } else {                                                                                             // 2228\n                    return arg.replace(/\\\\ /g, ' ');                                                                 // 2229\n                }                                                                                                    // 2230\n            });                                                                                                      // 2231\n        },                                                                                                           // 2232\n        // -----------------------------------------------------------------------                                   // 2233\n        // :: Split arguments: it only strips single and double quotes and escapes                                   // 2234\n        // :: spaces                                                                                                 // 2235\n        // -----------------------------------------------------------------------                                   // 2236\n        splitArguments: function(string) {                                                                           // 2237\n            return $.map(string.match(command_re) || [], function(arg) {                                             // 2238\n                if (arg[0] === \"'\" && arg[arg.length-1] === \"'\") {                                                   // 2239\n                    return arg.replace(/^'|'$/g, '');                                                                // 2240\n                } else if (arg[0] === '\"' && arg[arg.length-1] === '\"') {                                            // 2241\n                    return arg.replace(/^\"|\"$/g, '').replace(/\\\\([\" ])/g, '$1');                                     // 2242\n                } else if (arg[0] === '/' && arg[arg.length-1] == '/') {                                             // 2243\n                    return arg;                                                                                      // 2244\n                } else {                                                                                             // 2245\n                    return arg.replace(/\\\\ /g, ' ');                                                                 // 2246\n                }                                                                                                    // 2247\n            });                                                                                                      // 2248\n        },                                                                                                           // 2249\n        // -----------------------------------------------------------------------                                   // 2250\n        // :: Function that returns an object {name,args}. Arguments are parsed                                      // 2251\n        // :: using the function parseArguments                                                                      // 2252\n        // -----------------------------------------------------------------------                                   // 2253\n        parseCommand: function(string) {                                                                             // 2254\n            return processCommand(string, $.terminal.parseArguments);                                                // 2255\n        },                                                                                                           // 2256\n        // -----------------------------------------------------------------------                                   // 2257\n        // :: Same as parseCommand but arguments are parsed using splitArguments                                     // 2258\n        // -----------------------------------------------------------------------                                   // 2259\n        splitCommand: function(string) {                                                                             // 2260\n            return processCommand(string, $.terminal.splitArguments);                                                // 2261\n        },                                                                                                           // 2262\n        // -----------------------------------------------------------------------                                   // 2263\n        // :: Test $.terminal functions using terminal                                                               // 2264\n        // -----------------------------------------------------------------------                                   // 2265\n        test: function() {                                                                                           // 2266\n            var term = $.terminal.active();                                                                          // 2267\n            if (!term) {                                                                                             // 2268\n                term = $('body').terminal($.noop).css('margin', 0);                                                  // 2269\n                var margin = term.outerHeight() - term.height();                                                     // 2270\n                var $win = $(window);                                                                                // 2271\n                $win.resize(function() {                                                                             // 2272\n                    term.css('height', $(window).height()-20);                                                       // 2273\n                }).resize();                                                                                         // 2274\n            }                                                                                                        // 2275\n            term.echo('Testing...');                                                                                 // 2276\n            function assert(cond, msg) {                                                                             // 2277\n                term.echo(msg + ' &#91;' + (cond ? '[[b;#44D544;]PASS]' : '[[b;#FF5555;]FAIL]') + '&#93;');          // 2278\n            }                                                                                                        // 2279\n            var string = 'name \"foo bar\" baz /^asd [x]/ str\\\\ str 10 1e10';                                          // 2280\n            var cmd = $.terminal.splitCommand(string);                                                               // 2281\n            assert(cmd.name === 'name' && cmd.args[0] === 'foo bar' &&                                               // 2282\n                  cmd.args[1] === 'baz' && cmd.args[2] === '/^asd [x]/' &&                                           // 2283\n                  cmd.args[3] === 'str str' && cmd.args[4] === '10' &&                                               // 2284\n                  cmd.args[5] === '1e10', '$.terminal.splitCommand');                                                // 2285\n            cmd = $.terminal.parseCommand(string);                                                                   // 2286\n            assert(cmd.name === 'name' && cmd.args[0] === 'foo bar' &&                                               // 2287\n                  cmd.args[1] === 'baz' && $.type(cmd.args[2]) === 'regexp' &&                                       // 2288\n                  cmd.args[2].source === '^asd [x]' &&                                                               // 2289\n                  cmd.args[3] === 'str str' && cmd.args[4] === 10 &&                                                 // 2290\n                  cmd.args[5] === 1e10, '$.terminal.parseCommand');                                                  // 2291\n            string = '\\x1b[2;31;46mFoo\\x1b[1;3;4;32;45mBar\\x1b[0m\\x1b[7mBaz';                                        // 2292\n            assert($.terminal.from_ansi(string) ===                                                                  // 2293\n                  '[[;#640000;#008787]Foo][[biu;#44D544;#F5F]Bar][[;#000;#AAA]Baz]',                                 // 2294\n                   '$.terminal.from_ansi');                                                                          // 2295\n            string = '[[biugs;#fff;#000]Foo][[i;;;foo]Bar][[ous;;]Baz]';                                             // 2296\n            term.echo('$.terminal.format');                                                                          // 2297\n            assert($.terminal.format(string) === '<span style=\"font-weight:bold;text-decoration:underline line-through;font-style:italic;color:#fff;text-shadow:0 0 5px #fff;background-color:#000\" data-text=\"Foo\">Foo</span><span style=\"font-style:italic;\" class=\"foo\" data-text=\"Bar\">Bar</span><span style=\"text-decoration:underline line-through overline;\" data-text=\"Baz\">Baz</span>', '\\tformatting');\n            string = 'http://terminal.jcubic.pl/examples.php https://www.google.com/?q=jquery%20terminal';           // 2299\n            assert($.terminal.format(string) === '<a target=\"_blank\" href=\"http://terminal.jcubic.pl/examples.php\">http://terminal.jcubic.pl/examples.php</a> <a target=\"_blank\" href=\"https://www.google.com/?q=jquery%20terminal\">https://www.google.com/?q=jquery%20terminal</a>', '\\turls');\n            string = 'foo@bar.com baz.quux@example.com';                                                             // 2301\n            assert($.terminal.format(string) === '<a href=\"mailto:foo@bar.com\">foo@bar.com</a> <a href=\"mailto:baz.quux@example.com\">baz.quux@example.com</a>', '\\temails');\n            string = '-_-[[biugs;#fff;#000]Foo]-_-[[i;;;foo]Bar]-_-[[ous;;]Baz]-_-';                                 // 2303\n            assert($.terminal.strip(string) === '-_-Foo-_-Bar-_-Baz-_-', '$.terminal.strip');                        // 2304\n            string = '[[bui;#fff;]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla sed dolor nisl, in suscipit justo. Donec a enim et est porttitor semper at vitae augue. Proin at nulla at dui mattis mattis. Nam a volutpat ante. Aliquam consequat dui eu sem convallis ullamcorper. Nulla suscipit, massa vitae suscipit ornare, tellus] est [[b;;#f00]consequat nunc, quis blandit elit odio eu arcu. Nam a urna nec nisl varius sodales. Mauris iaculis tincidunt orci id commodo. Aliquam] non magna quis [[i;;]tortor malesuada aliquam] eget ut lacus. Nam ut vestibulum est. Praesent volutpat tellus in eros dapibus elementum. Nam laoreet risus non nulla mollis ac luctus [[ub;#fff;]felis dapibus. Pellentesque mattis elementum augue non sollicitudin. Nullam lobortis fermentum elit ac mollis. Nam ac varius risus. Cras faucibus euismod nulla, ac auctor diam rutrum sit amet. Nulla vel odio erat], ac mattis enim.';\n            term.echo('$.terminal.split_equal');                                                                     // 2306\n            var cols = [10, 40, 60, 400];                                                                            // 2307\n            for (var i=cols.length; i--;) {                                                                          // 2308\n                var lines = $.terminal.split_equal(string, cols[i]);                                                 // 2309\n                var success = true;                                                                                  // 2310\n                for (var j=0; j<lines.length; ++j) {                                                                 // 2311\n                    if ($.terminal.strip(lines[j]).length > cols[i]) {                                               // 2312\n                        success = false;                                                                             // 2313\n                        break;                                                                                       // 2314\n                    }                                                                                                // 2315\n                }                                                                                                    // 2316\n                assert(success, '\\tsplit ' + cols[i]);                                                               // 2317\n            }                                                                                                        // 2318\n        }                                                                                                            // 2319\n    };                                                                                                               // 2320\n                                                                                                                     // 2321\n    // -----------------------------------------------------------------------                                       // 2322\n    // Helper plugins                                                                                                // 2323\n    // -----------------------------------------------------------------------                                       // 2324\n    $.fn.visible = function() {                                                                                      // 2325\n        return this.css('visibility', 'visible');                                                                    // 2326\n    };                                                                                                               // 2327\n    $.fn.hidden = function() {                                                                                       // 2328\n        return this.css('visibility', 'hidden');                                                                     // 2329\n    };                                                                                                               // 2330\n    // -----------------------------------------------------------------------                                       // 2331\n    // JSON-RPC CALL                                                                                                 // 2332\n    // -----------------------------------------------------------------------                                       // 2333\n    var ids = {};                                                                                                    // 2334\n    $.jrpc = function(url, method, params, success, error) {                                                         // 2335\n        ids[url] = ids[url] || 0;                                                                                    // 2336\n        var request = $.json_stringify({                                                                             // 2337\n           'jsonrpc': '2.0', 'method': method,                                                                       // 2338\n            'params': params, 'id': ++ids[url]});                                                                    // 2339\n        return $.ajax({                                                                                              // 2340\n            url: url,                                                                                                // 2341\n            data: request,                                                                                           // 2342\n            success: function(result, status, jqXHR) {                                                               // 2343\n                var content_type = jqXHR.getResponseHeader('Content-Type');                                          // 2344\n                if (!content_type.match(/application\\/json/)) {                                                      // 2345\n                    if (console && console.warn) {                                                                   // 2346\n                        console.warn('Response Content-Type is not application/json');                               // 2347\n                    } else {                                                                                         // 2348\n                        throw new Error('WARN: Response Content-Type is not application/json');                      // 2349\n                    }                                                                                                // 2350\n                }                                                                                                    // 2351\n                var json;                                                                                            // 2352\n                try {                                                                                                // 2353\n                    json = $.parseJSON(result);                                                                      // 2354\n                } catch (e) {                                                                                        // 2355\n                    if (error) {                                                                                     // 2356\n                        error(jqXHR, 'Invalid JSON', e);                                                             // 2357\n                    } else {                                                                                         // 2358\n                        throw new Error('Invalid JSON');                                                             // 2359\n                    }                                                                                                // 2360\n                    return;                                                                                          // 2361\n                }                                                                                                    // 2362\n                // don't catch errors in success callback                                                            // 2363\n                success(json, status, jqXHR);                                                                        // 2364\n            },                                                                                                       // 2365\n            error: error,                                                                                            // 2366\n            contentType: 'application/json',                                                                         // 2367\n            dataType: 'text',                                                                                        // 2368\n            async: true,                                                                                             // 2369\n            cache: false,                                                                                            // 2370\n            //timeout: 1,                                                                                            // 2371\n            type: 'POST'});                                                                                          // 2372\n    };                                                                                                               // 2373\n                                                                                                                     // 2374\n    // -----------------------------------------------------------------------                                       // 2375\n    function is_scrolled_into_view(elem) {                                                                           // 2376\n        var docViewTop = $(window).scrollTop();                                                                      // 2377\n        var docViewBottom = docViewTop + $(window).height();                                                         // 2378\n                                                                                                                     // 2379\n        var elemTop = $(elem).offset().top;                                                                          // 2380\n        var elemBottom = elemTop + $(elem).height();                                                                 // 2381\n                                                                                                                     // 2382\n        return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom));                                           // 2383\n    }                                                                                                                // 2384\n    // -----------------------------------------------------------------------                                       // 2385\n    // :: Create fake terminal to calcualte the dimention of one character                                           // 2386\n    // :: this will make terminal work if terminal div is not added to the                                           // 2387\n    // :: DOM at init like with:                                                                                     // 2388\n    // :: $('<div/>').terminal().echo('foo bar').appendTo('body');                                                   // 2389\n    // -----------------------------------------------------------------------                                       // 2390\n    function char_size() {                                                                                           // 2391\n        var temp = $('<div class=\"terminal\"><div class=\"cmd\"><span>&nbsp;' +                                         // 2392\n                     '</span></div></div>').appendTo('body');                                                        // 2393\n        var span = temp.find('span');                                                                                // 2394\n        var result = {                                                                                               // 2395\n            width: span.width(),                                                                                     // 2396\n            height: span.outerHeight()                                                                               // 2397\n        };                                                                                                           // 2398\n        temp.remove();                                                                                               // 2399\n        return result;                                                                                               // 2400\n    }                                                                                                                // 2401\n    // -----------------------------------------------------------------------                                       // 2402\n    // :: calculate numbers of characters                                                                            // 2403\n    // -----------------------------------------------------------------------                                       // 2404\n    function get_num_chars(terminal) {                                                                               // 2405\n        var width = char_size().width;                                                                               // 2406\n        var result = Math.floor(terminal.width() / width);                                                           // 2407\n        if (have_scrollbars(terminal)) {                                                                             // 2408\n            var SCROLLBAR_WIDTH = 20;                                                                                // 2409\n            // assume that scrollbars are 20px - in my Laptop with                                                   // 2410\n            // Linux/Chrome they are 16px                                                                            // 2411\n            var margins = terminal.innerWidth() - terminal.width();                                                  // 2412\n            result -= Math.ceil((SCROLLBAR_WIDTH - margins / 2) / (width-1));                                        // 2413\n        }                                                                                                            // 2414\n        return result;                                                                                               // 2415\n    }                                                                                                                // 2416\n    // -----------------------------------------------------------------------                                       // 2417\n    // :: Calculate number of lines that fit without scroll                                                          // 2418\n    // -----------------------------------------------------------------------                                       // 2419\n    function get_num_rows(terminal) {                                                                                // 2420\n        return Math.floor(terminal.height() / char_size().height);                                                   // 2421\n    }                                                                                                                // 2422\n    // -----------------------------------------------------------------------                                       // 2423\n    // :: Get Selected Text (this is internal because it return text even if                                         // 2424\n    // :: it's outside of terminal, is used to paste text to the terminal)                                           // 2425\n    // -----------------------------------------------------------------------                                       // 2426\n    function getSelectedText() {                                                                                     // 2427\n        if (window.getSelection || document.getSelection) {                                                          // 2428\n            var selection = (window.getSelection || document.getSelection)();                                        // 2429\n            if (selection.text) {                                                                                    // 2430\n                return selection.text;                                                                               // 2431\n            } else {                                                                                                 // 2432\n                return selection.toString();                                                                         // 2433\n            }                                                                                                        // 2434\n        } else if (document.selection) {                                                                             // 2435\n            return document.selection.createRange().text;                                                            // 2436\n        }                                                                                                            // 2437\n    }                                                                                                                // 2438\n    // -----------------------------------------------------------------------                                       // 2439\n    // :: check if div have scrollbars (need to have overflow auto or always)                                        // 2440\n    // -----------------------------------------------------------------------                                       // 2441\n    function have_scrollbars(div) {                                                                                  // 2442\n        return div.get(0).scrollHeight > div.innerHeight();                                                          // 2443\n    }                                                                                                                // 2444\n    // -----------------------------------------------------------------------                                       // 2445\n    // :: TERMINAL PLUGIN CODE                                                                                       // 2446\n    // -----------------------------------------------------------------------                                       // 2447\n    var version = '0.8.8';                                                                                           // 2448\n    var version_set = !version.match(/^\\{\\{/);                                                                       // 2449\n    var copyright = 'Copyright (c) 2011-2013 Jakub Jankiewicz <http://jcubic.pl>';                                   // 2450\n    var version_string = version_set ? ' version ' + version : ' ';                                                  // 2451\n    //regex is for placing version string aligned to the right                                                       // 2452\n    var reg = new RegExp(\" {\" + version_string.length + \"}$\");                                                       // 2453\n    // -----------------------------------------------------------------------                                       // 2454\n    // :: Terminal Signatures                                                                                        // 2455\n    // -----------------------------------------------------------------------                                       // 2456\n    var signatures = [                                                                                               // 2457\n        ['jQuery Terminal Emulator' + (version_set ? ' v. ' + version : ''),                                         // 2458\n         copyright.replace(/ *<.*>/, '')],                                                                           // 2459\n        ['jQuery Terminal Emulator' + (version_set ? version_string : ''),                                           // 2460\n         copyright.replace(/^Copyright /, '')],                                                                      // 2461\n        ['      _______                 ________                        __',                                         // 2462\n         '     / / _  /_ ____________ _/__  ___/______________  _____  / /',                                         // 2463\n         ' __ / / // / // / _  / _/ // / / / _  / _/     / /  \\\\/ / _ \\\\/ /',                                        // 2464\n         '/  / / // / // / ___/ // // / / / ___/ // / / / / /\\\\  / // / /__',                                        // 2465\n         '\\\\___/____ \\\\\\\\__/____/_/ \\\\__ / /_/____/_//_/ /_/ /_/  \\\\/\\\\__\\\\_\\\\___/',                                 // 2466\n         '         \\\\/          /____/                                   '.replace(reg, ' ') +                       // 2467\n         version_string,                                                                                             // 2468\n         copyright],                                                                                                 // 2469\n        ['      __ _____                     ________                              __',                              // 2470\n         '     / // _  /__ __ _____ ___ __ _/__  ___/__ ___ ______ __ __  __ ___  / /',                              // 2471\n         ' __ / // // // // // _  // _// // / / // _  // _//     // //  \\\\/ // _ \\\\/ /',                             // 2472\n         '/  / // // // // // ___// / / // / / // ___// / / / / // // /\\\\  // // / /__',                             // 2473\n         '\\\\___//____ \\\\\\\\___//____//_/ _\\\\_  / /_//____//_/ /_/ /_//_//_/ /_/ \\\\__\\\\_\\\\___/',                       // 2474\n         '          \\\\/              /____/                                          '.replace(reg, '') +            // 2475\n         version_string,                                                                                             // 2476\n         copyright]                                                                                                  // 2477\n    ];                                                                                                               // 2478\n    // -----------------------------------------------------------------------                                       // 2479\n    // :: Default options                                                                                            // 2480\n    // -----------------------------------------------------------------------                                       // 2481\n    $.terminal.defaults = {                                                                                          // 2482\n        prompt: '> ',                                                                                                // 2483\n        history: true,                                                                                               // 2484\n        exit: true,                                                                                                  // 2485\n        clear: true,                                                                                                 // 2486\n        enabled: true,                                                                                               // 2487\n        historySize: 60,                                                                                             // 2488\n        checkArity: true,                                                                                            // 2489\n        exceptionHandler: null,                                                                                      // 2490\n        cancelableAjax: true,                                                                                        // 2491\n        processArguments: true,                                                                                      // 2492\n        linksNoReferrer: false,                                                                                      // 2493\n        login: null,                                                                                                 // 2494\n        outputLimit: -1,                                                                                             // 2495\n        onAjaxError: null,                                                                                           // 2496\n        onRPCError: null,                                                                                            // 2497\n        completion: false,                                                                                           // 2498\n        historyFilter: null,                                                                                         // 2499\n        onInit: $.noop,                                                                                              // 2500\n        onClear: $.noop,                                                                                             // 2501\n        onBlur: $.noop,                                                                                              // 2502\n        onFocus: $.noop,                                                                                             // 2503\n        onTerminalChange: $.noop,                                                                                    // 2504\n        onExit: $.noop,                                                                                              // 2505\n        keypress: $.noop,                                                                                            // 2506\n        keydown: $.noop,                                                                                             // 2507\n        strings: {                                                                                                   // 2508\n            wrongPasswordTryAgain: \"Wrong password try again!\",                                                      // 2509\n            wrongPassword: \"Wrong password!\",                                                                        // 2510\n            ajaxAbortError: \"Error while aborting ajax call!\",                                                       // 2511\n            wrongArity: \"Wrong number of arguments. Function '%s' expect %s got %s!\",                                // 2512\n            commandNotFound: \"Command '%s' Not Found!\",                                                              // 2513\n            oneRPCWithIgnore: \"You can use only one rpc with ignoreSystemDescribe\",                                  // 2514\n            oneInterpreterFunction: \"You can't use more then one function (rpc with \" +                              // 2515\n                \"ignoreSystemDescribe is count as one)\",                                                             // 2516\n            loginFunctionMissing: \"You don't have login function\",                                                   // 2517\n            noTokenError: \"Access denied (no token)\",                                                                // 2518\n            serverResponse: \"Server reponse is\",                                                                     // 2519\n            wrongGreetings: \"Wrong value of greetings parameter\",                                                    // 2520\n            notWhileLogin: \"You can't call that function while in login\",                                            // 2521\n            loginIsNotAFunction: \"Authenticate must be a function\",                                                  // 2522\n            canExitError: \"You can't exit from main interpeter\",                                                     // 2523\n            invalidCompletion: \"Invalid completion\",                                                                 // 2524\n            login: \"login\",                                                                                          // 2525\n            password: \"password\"                                                                                     // 2526\n        }                                                                                                            // 2527\n    };                                                                                                               // 2528\n    // -----------------------------------------------------------------------                                       // 2529\n    // :: All terminal globals                                                                                       // 2530\n    // -----------------------------------------------------------------------                                       // 2531\n    var requests = []; // for canceling on CTRL+D                                                                    // 2532\n    var terminals = new Cycle(); // list of terminals global in this scope                                           // 2533\n    $.fn.terminal = function(init_interpreter, options) {                                                            // 2534\n        // -----------------------------------------------------------------------                                   // 2535\n        // :: helper function                                                                                        // 2536\n        // -----------------------------------------------------------------------                                   // 2537\n        function get_processed_command(command) {                                                                    // 2538\n            if (typeof settings.processArguments === 'function') {                                                   // 2539\n                return processCommand(command, settings.processArguments);                                           // 2540\n            } else if (settings.processArguments) {                                                                  // 2541\n                return $.terminal.parseCommand(command);                                                             // 2542\n            } else {                                                                                                 // 2543\n                return $.terminal.splitCommand(command);                                                             // 2544\n            }                                                                                                        // 2545\n        }                                                                                                            // 2546\n        // -----------------------------------------------------------------------                                   // 2547\n        // :: Display object on terminal                                                                             // 2548\n        // -----------------------------------------------------------------------                                   // 2549\n        function display_object(object) {                                                                            // 2550\n            if (typeof object === 'string') {                                                                        // 2551\n                self.echo(object);                                                                                   // 2552\n            } else if (object instanceof Array) {                                                                    // 2553\n                self.echo($.map(object, function(object) {                                                           // 2554\n                    return $.json_stringify(object);                                                                 // 2555\n                }).join(' '));                                                                                       // 2556\n            } else if (typeof object === 'object') {                                                                 // 2557\n                self.echo($.json_stringify(object));                                                                 // 2558\n            } else {                                                                                                 // 2559\n                self.echo(object);                                                                                   // 2560\n            }                                                                                                        // 2561\n        }                                                                                                            // 2562\n        // -----------------------------------------------------------------------                                   // 2563\n        // :: Helper function                                                                                        // 2564\n        // -----------------------------------------------------------------------                                   // 2565\n        function display_json_rpc_error(error) {                                                                     // 2566\n            if (typeof settings.onRPCError === 'function') {                                                         // 2567\n                settings.onRPCError.call(self, error);                                                               // 2568\n            } else {                                                                                                 // 2569\n                self.error('&#91;RPC&#93; ' + error.message);                                                        // 2570\n            }                                                                                                        // 2571\n        }                                                                                                            // 2572\n        // -----------------------------------------------------------------------                                   // 2573\n        // :: Create interpreter function from url string                                                            // 2574\n        // -----------------------------------------------------------------------                                   // 2575\n        function make_basic_json_rpc_interpreter(url) {                                                              // 2576\n            var service = function(method, params) {                                                                 // 2577\n                self.pause();                                                                                        // 2578\n                $.jrpc(url, method, params, function(json) {                                                         // 2579\n                    if (!json.error) {                                                                               // 2580\n                        if (typeof settings.processRPCResponse === 'function') {                                     // 2581\n                            settings.processRPCResponse.call(self, json.result);                                     // 2582\n                        } else {                                                                                     // 2583\n                            display_object(json.result);                                                             // 2584\n                        }                                                                                            // 2585\n                    } else {                                                                                         // 2586\n                        display_json_rpc_error(json.error);                                                          // 2587\n                    }                                                                                                // 2588\n                    self.resume();                                                                                   // 2589\n                }, ajax_error);                                                                                      // 2590\n            };                                                                                                       // 2591\n            //this is the interpreter function                                                                       // 2592\n            return function(command, terminal) {                                                                     // 2593\n                if (command === '') {                                                                                // 2594\n                    return;                                                                                          // 2595\n                }                                                                                                    // 2596\n                command = get_processed_command(command);                                                            // 2597\n                if (!settings.login || command.name === 'help') {                                                    // 2598\n                    // allows to call help without a token                                                           // 2599\n                    service(command.name, command.args);                                                             // 2600\n                } else {                                                                                             // 2601\n                    var token = terminal.token();                                                                    // 2602\n                    if (token) {                                                                                     // 2603\n                        service(command.name, [token].concat(command.args));                                         // 2604\n                    } else {                                                                                         // 2605\n                        //should never happen                                                                        // 2606\n                        terminal.error('&#91;AUTH&#93; ' +                                                           // 2607\n                                       strings.noTokenError);                                                        // 2608\n                    }                                                                                                // 2609\n                }                                                                                                    // 2610\n            };                                                                                                       // 2611\n        }                                                                                                            // 2612\n        // -----------------------------------------------------------------------                                   // 2613\n        // :: Create interpreter function from Object. If the value is object                                        // 2614\n        // :: it will create nested interpreters                                                                     // 2615\n        // -----------------------------------------------------------------------                                   // 2616\n        function make_object_interpreter(object, arity, fallback) {                                                  // 2617\n            // function that maps commands to object methods                                                         // 2618\n            // it keeps terminal context                                                                             // 2619\n            return function(user_command, terminal) {                                                                // 2620\n                if (user_command === '') {                                                                           // 2621\n                    return;                                                                                          // 2622\n                }                                                                                                    // 2623\n                //command = split_command_line(command);                                                             // 2624\n                var command = get_processed_command(user_command);                                                   // 2625\n                var val = object[command.name];                                                                      // 2626\n                var type = $.type(val);                                                                              // 2627\n                if (type === 'function') {                                                                           // 2628\n                    if (arity && val.length !== command.args.length) {                                               // 2629\n                        self.error(\"&#91;Arity&#93; \" +                                                              // 2630\n                                   sprintf(strings.wrongArity,                                                       // 2631\n                                           command.name,                                                             // 2632\n                                           val.length,                                                               // 2633\n                                           command.args.length));                                                    // 2634\n                    } else {                                                                                         // 2635\n                        return val.apply(self, command.args);                                                        // 2636\n                    }                                                                                                // 2637\n                } else if (type === 'object' || type === 'string') {                                                 // 2638\n                    var commands = [];                                                                               // 2639\n                    if (type === 'object') {                                                                         // 2640\n                        commands = Object.keys(val);                                                                 // 2641\n                        val = make_object_interpreter(val, arity);                                                   // 2642\n                    }                                                                                                // 2643\n                    terminal.push(val, {                                                                             // 2644\n                        prompt: command.name + '> ',                                                                 // 2645\n                        name: command.name,                                                                          // 2646\n                        completion: type === 'object' ? function(term, string, callback) {                           // 2647\n                            callback(commands);                                                                      // 2648\n                        } : undefined                                                                                // 2649\n                    });                                                                                              // 2650\n                } else {                                                                                             // 2651\n                    if ($.type(fallback) === 'function') {                                                           // 2652\n                        fallback(user_command, self);                                                                // 2653\n                    } else if ($.type(settings.onCommandNotFound) === 'function') {                                  // 2654\n                        settings.onCommandNotFound(user_command, self);                                              // 2655\n                    } else {                                                                                         // 2656\n                        terminal.error(sprintf(strings.commandNotFound, command.name));                              // 2657\n                    }                                                                                                // 2658\n                }                                                                                                    // 2659\n            };                                                                                                       // 2660\n        }                                                                                                            // 2661\n        // -----------------------------------------------------------------------                                   // 2662\n        function ajax_error(xhr, status, error) {                                                                    // 2663\n            self.resume(); // onAjaxError can use pause/resume call it first                                         // 2664\n            if (typeof settings.onAjaxError == 'function') {                                                         // 2665\n                settings.onAjaxError.call(self, xhr, status, error);                                                 // 2666\n            } else if (status !== 'abort') {                                                                         // 2667\n                self.error('&#91;AJAX&#93; ' + status + ' - ' +                                                      // 2668\n                           strings.serverResponse +                                                                  // 2669\n                           ': \\n' + xhr.responseText);                                                               // 2670\n            }                                                                                                        // 2671\n        }                                                                                                            // 2672\n        // -----------------------------------------------------------------------                                   // 2673\n        function make_json_rpc_object(url, auth, success) {                                                          // 2674\n            $.jrpc(url, 'system.describe', [], function(ret) {                                                       // 2675\n                var commands = [];                                                                                   // 2676\n                if (ret.procs) {                                                                                     // 2677\n                    var interpreter_object = {};                                                                     // 2678\n                    $.each(ret.procs, function(_, proc) {                                                            // 2679\n                        interpreter_object[proc.name] = function() {                                                 // 2680\n                            var append = auth && proc.name != 'help';                                                // 2681\n                            var args = Array.prototype.slice.call(arguments);                                        // 2682\n                            var args_len = args.length + (append ? 1 : 0);                                           // 2683\n                            if (settings.checkArity && proc.params &&                                                // 2684\n                                proc.params.length !== args_len) {                                                   // 2685\n                                self.error(\"&#91;Arity&#93; \" +                                                      // 2686\n                                           sprintf(strings.wrongArity,                                               // 2687\n                                                   proc.name,                                                        // 2688\n                                                   proc.params.length,                                               // 2689\n                                                   args_len));                                                       // 2690\n                            } else {                                                                                 // 2691\n                                self.pause();                                                                        // 2692\n                                if (append) {                                                                        // 2693\n                                    args = [self.token(true)].concat(args);                                          // 2694\n                                }                                                                                    // 2695\n                                $.jrpc(url, proc.name, args, function(json) {                                        // 2696\n                                    if (json.error) {                                                                // 2697\n                                        display_json_rpc_error(json.error);                                          // 2698\n                                    } else {                                                                         // 2699\n                                        display_object(json.result);                                                 // 2700\n                                    }                                                                                // 2701\n                                    self.resume();                                                                   // 2702\n                                }, ajax_error);                                                                      // 2703\n                            }                                                                                        // 2704\n                        };                                                                                           // 2705\n                    });                                                                                              // 2706\n                    success(interpreter_object);                                                                     // 2707\n                } else {                                                                                             // 2708\n                    success(null);                                                                                   // 2709\n                }                                                                                                    // 2710\n            }, function() {                                                                                          // 2711\n                success(null);                                                                                       // 2712\n            });                                                                                                      // 2713\n        }                                                                                                            // 2714\n        // -----------------------------------------------------------------------                                   // 2715\n        function make_interpreter(user_interpreter, auth, finalize) {                                                // 2716\n            finalize = finalize || $.noop;                                                                           // 2717\n            var type = $.type(user_interpreter);                                                                     // 2718\n            var result = {};                                                                                         // 2719\n            var commands;                                                                                            // 2720\n            var rpc_count = 0; // only one rpc can be use for array                                                  // 2721\n            var function_interpreter;                                                                                // 2722\n            if (type === 'array') {                                                                                  // 2723\n                var object = {};                                                                                     // 2724\n                // recur will be called when previous acync call is finished                                         // 2725\n                (function recur(interpreters, success) {                                                             // 2726\n                    if (interpreters.length) {                                                                       // 2727\n                        var first = interpreters[0];                                                                 // 2728\n                        var rest = interpreters.slice(1);                                                            // 2729\n                        var type = $.type(first);                                                                    // 2730\n                        if (type === 'string') {                                                                     // 2731\n                            rpc_count++;                                                                             // 2732\n                            self.pause();                                                                            // 2733\n                            if (settings.ignoreSystemDescribe) {                                                     // 2734\n                                if (rpc_count === 1) {                                                               // 2735\n                                    function_interpreter = make_basic_json_rpc_interpreter(first);                   // 2736\n                                } else {                                                                             // 2737\n                                    self.error(strings.oneRPCWithIgnore);                                            // 2738\n                                }                                                                                    // 2739\n                                recur(rest, success);                                                                // 2740\n                            } else {                                                                                 // 2741\n                                make_json_rpc_object(first, auth, function(new_object) {                             // 2742\n                                    // will ignore rpc in array that don't have system.describe                      // 2743\n                                    if (new_object) {                                                                // 2744\n                                        $.extend(object, new_object);                                                // 2745\n                                    }                                                                                // 2746\n                                    self.resume();                                                                   // 2747\n                                    recur(rest, success);                                                            // 2748\n                                });                                                                                  // 2749\n                            }                                                                                        // 2750\n                        } else if (type === 'function') {                                                            // 2751\n                            if (function_interpreter) {                                                              // 2752\n                                self.error(strings.oneInterpreterFunction);                                          // 2753\n                            } else {                                                                                 // 2754\n                                function_interpreter = first;                                                        // 2755\n                            }                                                                                        // 2756\n                        } else if (type === 'object') {                                                              // 2757\n                            $.extend(object, first);                                                                 // 2758\n                            recur(rest, success);                                                                    // 2759\n                        }                                                                                            // 2760\n                    } else {                                                                                         // 2761\n                        success();                                                                                   // 2762\n                    }                                                                                                // 2763\n                })(user_interpreter, function() {                                                                    // 2764\n                    commands = Object.keys(object);                                                                  // 2765\n                    result.interpreter = make_object_interpreter(object, false, function_interpreter);               // 2766\n                    result.completion = function(term, string, callback) {                                           // 2767\n                        callback(commands);                                                                          // 2768\n                    };                                                                                               // 2769\n                    finalize(result);                                                                                // 2770\n                });                                                                                                  // 2771\n            } else if (type === 'string') {                                                                          // 2772\n                if (settings.ignoreSystemDescribe) {                                                                 // 2773\n                    finalize({                                                                                       // 2774\n                        interpreter: make_basic_json_rpc_interpreter(user_interpreter),                              // 2775\n                        completion: settings.completion                                                              // 2776\n                    });                                                                                              // 2777\n                } else {                                                                                             // 2778\n                    self.pause();                                                                                    // 2779\n                    make_json_rpc_object(user_interpreter, auth, function(object) {                                  // 2780\n                        if (object) {                                                                                // 2781\n                            var commands = Object.keys(object);                                                      // 2782\n                            result.interpreter = make_object_interpreter(object, false);                             // 2783\n                            result.completion = function(term, string, callback) {                                   // 2784\n                                callback(commands);                                                                  // 2785\n                            };                                                                                       // 2786\n                        } else {                                                                                     // 2787\n                            // no procs in system.describe                                                           // 2788\n                            result.interpreter = make_basic_json_rpc_interpreter(user_interpreter);                  // 2789\n                            result.completion = settings.completion;                                                 // 2790\n                        }                                                                                            // 2791\n                        self.resume();                                                                               // 2792\n                        finalize(result);                                                                            // 2793\n                    });                                                                                              // 2794\n                }                                                                                                    // 2795\n            } else if (type === 'object') {                                                                          // 2796\n                commands = Object.keys(user_interpreter);                                                            // 2797\n                result.interpreter = make_object_interpreter(user_interpreter, settings.checkArity);                 // 2798\n                result.completion = function(term, string, callback) {                                               // 2799\n                    callback(commands);                                                                              // 2800\n                };                                                                                                   // 2801\n                finalize(result);                                                                                    // 2802\n            } else {                                                                                                 // 2803\n                // allow $('<div/>).terminal();                                                                      // 2804\n                if (type === 'undefined') {                                                                          // 2805\n                    user_interpreter = $.noop;                                                                       // 2806\n                } else if (type !== 'function') {                                                                    // 2807\n                    throw type + \" is invalid interpreter value\";                                                    // 2808\n                }                                                                                                    // 2809\n                finalize({                                                                                           // 2810\n                    interpreter: user_interpreter,                                                                   // 2811\n                    completion: settings.completion                                                                  // 2812\n                });                                                                                                  // 2813\n            }                                                                                                        // 2814\n        }                                                                                                            // 2815\n        // -----------------------------------------------------------------------                                   // 2816\n        // :: Create JSON-RPC authentication function                                                                // 2817\n        // -----------------------------------------------------------------------                                   // 2818\n        function make_json_rpc_login(url, login) {                                                                   // 2819\n            var method = $.type(login) === 'boolean' ? 'login' : login;                                              // 2820\n            return function(user, passwd, callback, term) {                                                          // 2821\n                self.pause();                                                                                        // 2822\n                $.jrpc(url,                                                                                          // 2823\n                       method,                                                                                       // 2824\n                       [user, passwd],                                                                               // 2825\n                       function(response) {                                                                          // 2826\n                           self.resume();                                                                            // 2827\n                           if (!response.error && response.result) {                                                 // 2828\n                               callback(response.result);                                                            // 2829\n                           } else {                                                                                  // 2830\n                               // null will trigger message that login fail                                          // 2831\n                               callback(null);                                                                       // 2832\n                           }                                                                                         // 2833\n                       }, ajax_error);                                                                               // 2834\n            };                                                                                                       // 2835\n            //default name is login so you can pass true                                                             // 2836\n        }                                                                                                            // 2837\n        // -----------------------------------------------------------------------                                   // 2838\n        // :: Return exception message as string                                                                     // 2839\n        // -----------------------------------------------------------------------                                   // 2840\n        function exception_message(e) {                                                                              // 2841\n            if (typeof e === 'string') {                                                                             // 2842\n                return e;                                                                                            // 2843\n            } else if (typeof e.fileName === 'string') {                                                             // 2844\n                return e.fileName + ': ' + e.message;                                                                // 2845\n            } else {                                                                                                 // 2846\n                return e.message;                                                                                    // 2847\n            }                                                                                                        // 2848\n        }                                                                                                            // 2849\n        // -----------------------------------------------------------------------                                   // 2850\n        // :: display Exception on terminal                                                                          // 2851\n        // -----------------------------------------------------------------------                                   // 2852\n        function display_exception(e, label) {                                                                       // 2853\n            if (typeof settings.exceptionHandler == 'function') {                                                    // 2854\n                settings.exceptionHandler.call(self, e);                                                             // 2855\n            } else {                                                                                                 // 2856\n                self.exception(e, label);                                                                            // 2857\n            }                                                                                                        // 2858\n        }                                                                                                            // 2859\n        // -----------------------------------------------------------------------                                   // 2860\n        function scroll_to_bottom() {                                                                                // 2861\n            var scrollHeight = scroll_object.prop ? scroll_object.prop('scrollHeight') :                             // 2862\n                scroll_object.attr('scrollHeight');                                                                  // 2863\n            scroll_object.scrollTop(scrollHeight);                                                                   // 2864\n        }                                                                                                            // 2865\n        // -----------------------------------------------------------------------                                   // 2866\n        // :: validating if object is a string or a function, call that function                                     // 2867\n        // :: and display the exeption if any                                                                        // 2868\n        // -----------------------------------------------------------------------                                   // 2869\n        function validate(label, object) {                                                                           // 2870\n            try {                                                                                                    // 2871\n                if (typeof object === 'function') {                                                                  // 2872\n                    object(function() {                                                                              // 2873\n                        // don't care                                                                                // 2874\n                    });                                                                                              // 2875\n                } else if (typeof object !== 'string') {                                                             // 2876\n                    var msg = label + ' must be string or function';                                                 // 2877\n                    throw msg;                                                                                       // 2878\n                }                                                                                                    // 2879\n            } catch (e) {                                                                                            // 2880\n                display_exception(e, label.toUpperCase());                                                           // 2881\n                return false;                                                                                        // 2882\n            }                                                                                                        // 2883\n            return true;                                                                                             // 2884\n        }                                                                                                            // 2885\n        // -----------------------------------------------------------------------                                   // 2886\n        // :: Draw line - can have line breaks and be longer than the width of                                       // 2887\n        // :: the terminal, there are 2 options raw and finalize                                                     // 2888\n        // :: raw - will not encode the string and finalize if a function that                                       // 2889\n        // :: will have div container of the line as first argument                                                  // 2890\n        // :: NOTE: it formats and appends lines to output_buffer. The actual                                        // 2891\n        // :: append to terminal output happens in the flush function                                                // 2892\n        // -----------------------------------------------------------------------                                   // 2893\n        var output_buffer = [];                                                                                      // 2894\n        var NEW_LINE = 1;                                                                                            // 2895\n        function draw_line(string, options) {                                                                        // 2896\n            // prevent exception in display exception                                                                // 2897\n            try {                                                                                                    // 2898\n                var line_settings = $.extend({                                                                       // 2899\n                    raw: false,                                                                                      // 2900\n                    finalize: $.noop                                                                                 // 2901\n                }, options || {});                                                                                   // 2902\n                string = $.type(string) === \"function\" ? string() : string;                                          // 2903\n                string = $.type(string) === \"string\" ? string : String(string);                                      // 2904\n                var i, len;                                                                                          // 2905\n                if (!line_settings.raw) {                                                                            // 2906\n                    string = $.terminal.encode(string);                                                              // 2907\n                }                                                                                                    // 2908\n                string = $.terminal.overtyping(string);                                                              // 2909\n                string = $.terminal.from_ansi(string);                                                               // 2910\n                output_buffer.push(NEW_LINE);                                                                        // 2911\n                if (!line_settings.raw && (string.length > num_chars || string.match(/\\n/))) {                       // 2912\n                    var array = $.terminal.split_equal(string, num_chars);                                           // 2913\n                    for (i = 0, len = array.length; i < len; ++i) {                                                  // 2914\n                        if (array[i] === '' || array[i] === '\\r') {                                                  // 2915\n                            output_buffer.push('&nbsp;');                                                            // 2916\n                        } else {                                                                                     // 2917\n                            if (line_settings.raw) {                                                                 // 2918\n                                output_buffer.push(array[i]);                                                        // 2919\n                            } else {                                                                                 // 2920\n                                output_buffer.push($.terminal.format(array[i], {                                     // 2921\n                                    linksNoReferer: settings.linksNoReferer                                          // 2922\n                                }));                                                                                 // 2923\n                            }                                                                                        // 2924\n                        }                                                                                            // 2925\n                    }                                                                                                // 2926\n                } else {                                                                                             // 2927\n                    if (!line_settings.raw) {                                                                        // 2928\n                        string = $.terminal.format(string, {                                                         // 2929\n                            linksNoReferer: settings.linksNoReferer                                                  // 2930\n                        });                                                                                          // 2931\n                    }                                                                                                // 2932\n                    output_buffer.push(string);                                                                      // 2933\n                }                                                                                                    // 2934\n                output_buffer.push(line_settings.finalize);                                                          // 2935\n            } catch (e) {                                                                                            // 2936\n                output_buffer = [];                                                                                  // 2937\n                // don't display exception if exception throw in terminal                                            // 2938\n                alert('[Internal Exception(draw_line)]:' + exception_message(e) + '\\n' +                             // 2939\n                      e.stack);                                                                                      // 2940\n            }                                                                                                        // 2941\n        }                                                                                                            // 2942\n        // -----------------------------------------------------------------------                                   // 2943\n        // Redraw all lines                                                                                          // 2944\n        // -----------------------------------------------------------------------                                   // 2945\n        function redraw() {                                                                                          // 2946\n            command_line.resize(num_chars);                                                                          // 2947\n            var o = output.empty().detach();                                                                         // 2948\n            var lines_to_show;                                                                                       // 2949\n            if (settings.outputLimit >= 0) {                                                                         // 2950\n                // flush will limit lines but if there is lot of                                                     // 2951\n                // lines we don't need to show them and then remove                                                  // 2952\n                // them from terminal                                                                                // 2953\n                var limit = settings.outputLimit === 0 ?                                                             // 2954\n                    self.rows() :                                                                                    // 2955\n                    settings.outputLimit;                                                                            // 2956\n                lines_to_show = lines.slice(lines.length-limit-1);                                                   // 2957\n            } else {                                                                                                 // 2958\n                lines_to_show = lines;                                                                               // 2959\n            }                                                                                                        // 2960\n            $.each(lines_to_show, function(i, line) {                                                                // 2961\n                draw_line.apply(null, line); // line is an array                                                     // 2962\n            });                                                                                                      // 2963\n            command_line.before(o);                                                                                  // 2964\n            self.flush();                                                                                            // 2965\n        }                                                                                                            // 2966\n        // -----------------------------------------------------------------------                                   // 2967\n        // :: Display user greetings or terminal signature                                                           // 2968\n        // -----------------------------------------------------------------------                                   // 2969\n        function show_greetings() {                                                                                  // 2970\n            if (settings.greetings === undefined) {                                                                  // 2971\n                self.echo(self.signature);                                                                           // 2972\n            } else if (settings.greetings) {                                                                         // 2973\n                var type = typeof settings.greetings;                                                                // 2974\n                if (type === 'string') {                                                                             // 2975\n                    self.echo(settings.greetings);                                                                   // 2976\n                } else if (type === 'function') {                                                                    // 2977\n                    settings.greetings.call(self, self.echo);                                                        // 2978\n                } else {                                                                                             // 2979\n                    self.error(strings.wrongGreetings);                                                              // 2980\n                }                                                                                                    // 2981\n            }                                                                                                        // 2982\n        }                                                                                                            // 2983\n        // -----------------------------------------------------------------------                                   // 2984\n        // :: Display prompt and last command                                                                        // 2985\n        // -----------------------------------------------------------------------                                   // 2986\n        function echo_command(command) {                                                                             // 2987\n            command = $.terminal.escape_brackets($.terminal.encode(command, true));                                  // 2988\n            var prompt = command_line.prompt();                                                                      // 2989\n            if (command_line.mask()) {                                                                               // 2990\n                command = command.replace(/./g, '*');                                                                // 2991\n            }                                                                                                        // 2992\n            if (typeof prompt === 'function') {                                                                      // 2993\n                prompt(function(string) {                                                                            // 2994\n                    self.echo(string + command);                                                                     // 2995\n                });                                                                                                  // 2996\n            } else {                                                                                                 // 2997\n                self.echo(prompt + command);                                                                         // 2998\n            }                                                                                                        // 2999\n        }                                                                                                            // 3000\n        // -----------------------------------------------------------------------                                   // 3001\n        // :: Wrapper over interpreter, it implements exit and catches all exeptions                                 // 3002\n        // :: from user code and displays them on the terminal                                                       // 3003\n        // -----------------------------------------------------------------------                                   // 3004\n        function commands(command, silent, exec) {                                                                   // 3005\n            try {                                                                                                    // 3006\n                if (!ghost()) {                                                                                      // 3007\n                    prev_command = $.terminal.splitCommand(command).name;                                            // 3008\n                    if (exec && typeof settings.historyFilter == 'function' &&                                       // 3009\n                        settings.historyFilter(command) || !settings.historyFilter) {                                // 3010\n                        command_line.history().append(command);                                                      // 3011\n                    }                                                                                                // 3012\n                }                                                                                                    // 3013\n                var interpreter = interpreters.top();                                                                // 3014\n                if (command === 'exit' && settings.exit) {                                                           // 3015\n                    var count = interpreters.size();                                                                 // 3016\n                        self.token();                                                                                // 3017\n                    if (count == 1 && self.token() || count > 1) {                                                   // 3018\n                        if (!silent) {                                                                               // 3019\n                            echo_command(command);                                                                   // 3020\n                        }                                                                                            // 3021\n                        self.pop();                                                                                  // 3022\n                    }                                                                                                // 3023\n                } else {                                                                                             // 3024\n                    if (!silent) {                                                                                   // 3025\n                        echo_command(command);                                                                       // 3026\n                    }                                                                                                // 3027\n                    var position = lines.length-1;                                                                   // 3028\n                    if (command === 'clear' && settings.clear) {                                                     // 3029\n                        self.clear();                                                                                // 3030\n                    } else {                                                                                         // 3031\n                        // Execute command from the interpreter                                                      // 3032\n                        var result = interpreter.interpreter(command, self);                                         // 3033\n                        if (result !== undefined) {                                                                  // 3034\n                            // was lines after echo_command (by interpreter)                                         // 3035\n                            if (position === lines.length-1) {                                                       // 3036\n                                lines.pop();                                                                         // 3037\n                                if (result !== false) {                                                              // 3038\n                                    self.echo(result);                                                               // 3039\n                                }                                                                                    // 3040\n                            } else {                                                                                 // 3041\n                                if (result === false) {                                                              // 3042\n                                    lines = lines.slice(0, position).                                                // 3043\n                                        concat(lines.slice(position+1));                                             // 3044\n                                } else {                                                                             // 3045\n                                    lines = lines.slice(0, position).                                                // 3046\n                                        concat([result]).                                                            // 3047\n                                        concat(lines.slice(position+1));                                             // 3048\n                                }                                                                                    // 3049\n                            }                                                                                        // 3050\n                            self.resize();                                                                           // 3051\n                        }                                                                                            // 3052\n                    }                                                                                                // 3053\n                }                                                                                                    // 3054\n            } catch (e) {                                                                                            // 3055\n                display_exception(e, 'USER');                                                                        // 3056\n                self.resume();                                                                                       // 3057\n                throw e;                                                                                             // 3058\n            }                                                                                                        // 3059\n        }                                                                                                            // 3060\n        // -----------------------------------------------------------------------                                   // 3061\n        // :: The logout function removes Storage, disables history and runs                                         // 3062\n        // :: the login function. This function is called only when options.login                                    // 3063\n        // :: function is defined. The check for this is in the self.pop method                                      // 3064\n        // -----------------------------------------------------------------------                                   // 3065\n        function global_logout() {                                                                                   // 3066\n            if (typeof settings.onBeforeLogout === 'function') {                                                     // 3067\n                try {                                                                                                // 3068\n                    if (settings.onBeforeLogout(self) === false) {                                                   // 3069\n                        return;                                                                                      // 3070\n                    }                                                                                                // 3071\n                } catch (e) {                                                                                        // 3072\n                    display_exception(e, 'onBeforeLogout');                                                          // 3073\n                    throw e;                                                                                         // 3074\n                }                                                                                                    // 3075\n            }                                                                                                        // 3076\n            logout();                                                                                                // 3077\n            if (typeof settings.onAfterLogout === 'function') {                                                      // 3078\n                try {                                                                                                // 3079\n                    settings.onAfterLogout(self);                                                                    // 3080\n                } catch (e) {                                                                                        // 3081\n                    display_exception(e, 'onAfterlogout');                                                           // 3082\n                    throw e;                                                                                         // 3083\n                }                                                                                                    // 3084\n            }                                                                                                        // 3085\n            self.login(settings.login, true, initialize);                                                            // 3086\n        }                                                                                                            // 3087\n        // -----------------------------------------------------------------------                                   // 3088\n        function logout() {                                                                                          // 3089\n            var name = self.prefix_name(true) + '_';                                                                 // 3090\n            $.Storage.remove(name + 'token');                                                                        // 3091\n            $.Storage.remove(name + 'login');                                                                        // 3092\n        }                                                                                                            // 3093\n        // -----------------------------------------------------------------------                                   // 3094\n        // :: Save the interpreter name for use with purge                                                           // 3095\n        // -----------------------------------------------------------------------                                   // 3096\n        function maybe_append_name(interpreter_name) {                                                               // 3097\n            var storage_key = self.prefix_name() + '_interpreters';                                                  // 3098\n            var names = $.Storage.get(storage_key);                                                                  // 3099\n            if (names) {                                                                                             // 3100\n                names = $.parseJSON(names);                                                                          // 3101\n            } else {                                                                                                 // 3102\n                names = [];                                                                                          // 3103\n            }                                                                                                        // 3104\n            if ($.inArray(interpreter_name, names) == -1) {                                                          // 3105\n                names.push(interpreter_name);                                                                        // 3106\n                $.Storage.set(storage_key, $.json_stringify(names));                                                 // 3107\n            }                                                                                                        // 3108\n        }                                                                                                            // 3109\n        // -----------------------------------------------------------------------                                   // 3110\n        // :: Function enables history, sets prompt, runs interpreter function                                       // 3111\n        // -----------------------------------------------------------------------                                   // 3112\n        function prepare_top_interpreter(silent) {                                                                   // 3113\n            var interpreter = interpreters.top();                                                                    // 3114\n            var name = self.prefix_name(true);                                                                       // 3115\n            if (!ghost()) {                                                                                          // 3116\n                maybe_append_name(name);                                                                             // 3117\n            }                                                                                                        // 3118\n            command_line.name(name);                                                                                 // 3119\n            if (typeof interpreter.prompt == 'function') {                                                           // 3120\n                command_line.prompt(function(command) {                                                              // 3121\n                    interpreter.prompt(command, self);                                                               // 3122\n                });                                                                                                  // 3123\n            } else {                                                                                                 // 3124\n                command_line.prompt(interpreter.prompt);                                                             // 3125\n            }                                                                                                        // 3126\n            command_line.set('');                                                                                    // 3127\n            if (!silent && typeof interpreter.onStart === 'function') {                                              // 3128\n                interpreter.onStart(self);                                                                           // 3129\n            }                                                                                                        // 3130\n        }                                                                                                            // 3131\n        // ---------------------------------------------------------------------                                     // 3132\n        function initialize() {                                                                                      // 3133\n            prepare_top_interpreter();                                                                               // 3134\n            show_greetings();                                                                                        // 3135\n            // was_paused flag is workaround for case when user call exec before                                     // 3136\n            // login and pause in onInit, 3rd exec will have proper timing (will                                     // 3137\n            // execute after onInit resume)                                                                          // 3138\n            var was_paused = false;                                                                                  // 3139\n            if (typeof settings.onInit === 'function') {                                                             // 3140\n                onPause = function() { // local in terminal                                                          // 3141\n                    was_paused = true;                                                                               // 3142\n                };                                                                                                   // 3143\n                try {                                                                                                // 3144\n                    settings.onInit(self);                                                                           // 3145\n                } catch (e) {                                                                                        // 3146\n                    display_exception(e, 'OnInit');                                                                  // 3147\n                    throw e;                                                                                         // 3148\n                } finally {                                                                                          // 3149\n                    onPause = $.noop;                                                                                // 3150\n                    if (!was_paused) {                                                                               // 3151\n                        // resume login if user didn't call pause in onInit                                          // 3152\n                        // if user pause in onInit wait with exec until it resume                                    // 3153\n                        self.resume();                                                                               // 3154\n                    }                                                                                                // 3155\n                }                                                                                                    // 3156\n            }                                                                                                        // 3157\n        }                                                                                                            // 3158\n        // ---------------------------------------------------------------------                                     // 3159\n        // :: function complete the command                                                                          // 3160\n        // ---------------------------------------------------------------------                                     // 3161\n        function complete_helper(command, string, commands) {                                                        // 3162\n            var test = command_line.get().substring(0, command_line.position());                                     // 3163\n            if (test !== command) {                                                                                  // 3164\n                // command line changed between TABS - ignore                                                        // 3165\n                return;                                                                                              // 3166\n            }                                                                                                        // 3167\n            var regex = new RegExp('^' + $.terminal.escape_regex(string));                                           // 3168\n            var matched = [];                                                                                        // 3169\n            for (var i=commands.length; i--;) {                                                                      // 3170\n                if (regex.test(commands[i])) {                                                                       // 3171\n                    matched.push(commands[i]);                                                                       // 3172\n                }                                                                                                    // 3173\n            }                                                                                                        // 3174\n            if (matched.length === 1) {                                                                              // 3175\n                self.insert(matched[0].replace(regex, '') + ' ');                                                    // 3176\n            } else if (matched.length > 1) {                                                                         // 3177\n                if (tab_count >= 2) {                                                                                // 3178\n                    echo_command(command);                                                                           // 3179\n                    self.echo(matched.join('\\t'));                                                                   // 3180\n                    tab_count = 0;                                                                                   // 3181\n                } else {                                                                                             // 3182\n                    var found = false;                                                                               // 3183\n                    var found_index;                                                                                 // 3184\n                    var j;                                                                                           // 3185\n                    loop:                                                                                            // 3186\n                    for (j=string.length; j<matched[0].length; ++j) {                                                // 3187\n                        for (i=1; i<matched.length; ++i) {                                                           // 3188\n                            if (matched[0].charAt(j) !== matched[i].charAt(j)) {                                     // 3189\n                                break loop;                                                                          // 3190\n                            }                                                                                        // 3191\n                        }                                                                                            // 3192\n                        found = true;                                                                                // 3193\n                    }                                                                                                // 3194\n                    if (found) {                                                                                     // 3195\n                        self.insert(matched[0].slice(0, j).replace(regex, ''));                                      // 3196\n                    }                                                                                                // 3197\n                }                                                                                                    // 3198\n            }                                                                                                        // 3199\n        }                                                                                                            // 3200\n        // ---------------------------------------------------------------------                                     // 3201\n        // :: IF Ghost don't store anything in localstorage                                                          // 3202\n        // ---------------------------------------------------------------------                                     // 3203\n        function ghost() {                                                                                           // 3204\n            return in_login || command_line.mask();                                                                  // 3205\n        }                                                                                                            // 3206\n        // ---------------------------------------------------------------------                                     // 3207\n        // :: Keydown event handler                                                                                  // 3208\n        // ---------------------------------------------------------------------                                     // 3209\n        function key_down(e) {                                                                                       // 3210\n            // Prevent to be executed by cmd: CTRL+D, TAB, CTRL+TAB (if more then                                    // 3211\n            // one terminal)                                                                                         // 3212\n            var result, i, top = interpreters.top();                                                                 // 3213\n            if ($.type(top.keydown) === 'function') {                                                                // 3214\n                result = top.keydown(e, self);                                                                       // 3215\n                if (result !== undefined) {                                                                          // 3216\n                    return result;                                                                                   // 3217\n                }                                                                                                    // 3218\n            }                                                                                                        // 3219\n            var completion;                                                                                          // 3220\n            if ((settings.completion && $.type(settings.completion) != 'boolean') &&                                 // 3221\n                !top.completion) {                                                                                   // 3222\n                completion = settings.completion;                                                                    // 3223\n            } else {                                                                                                 // 3224\n                completion = top.completion;                                                                         // 3225\n            }                                                                                                        // 3226\n            // after text pasted into textarea in cmd plugin                                                         // 3227\n            self.oneTime(10, function() {                                                                            // 3228\n                on_scrollbar_show_resize();                                                                          // 3229\n            });                                                                                                      // 3230\n            if ($.type(settings.keydown) === 'function') {                                                           // 3231\n                result = settings.keydown(e, self);                                                                  // 3232\n                if (result !== undefined) {                                                                          // 3233\n                    return result;                                                                                   // 3234\n                }                                                                                                    // 3235\n            }                                                                                                        // 3236\n            if (!self.paused()) {                                                                                    // 3237\n                if (e.which !== 9) { // not a TAB                                                                    // 3238\n                    tab_count = 0;                                                                                   // 3239\n                }                                                                                                    // 3240\n                if (e.which === 68 && e.ctrlKey) { // CTRL+D                                                         // 3241\n                    if (!in_login) {                                                                                 // 3242\n                        if (command_line.get() === '') {                                                             // 3243\n                            if (interpreters.size() > 1 ||                                                           // 3244\n                                settings.login !== undefined) {                                                      // 3245\n                                self.pop('');                                                                        // 3246\n                            } else {                                                                                 // 3247\n                                self.resume();                                                                       // 3248\n                                self.echo('');                                                                       // 3249\n                            }                                                                                        // 3250\n                        } else {                                                                                     // 3251\n                            self.set_command('');                                                                    // 3252\n                        }                                                                                            // 3253\n                    }                                                                                                // 3254\n                    return false;                                                                                    // 3255\n                } else if (e.which === 76 && e.ctrlKey) { // CTRL+L                                                  // 3256\n                    self.clear();                                                                                    // 3257\n                } else if (completion && e.which === 9) { // TAB                                                     // 3258\n                    // TODO: move this to cmd plugin                                                                 // 3259\n                    //       add completion = array | function                                                       // 3260\n                    ++tab_count;                                                                                     // 3261\n                    // cursor can be in the middle of the command                                                    // 3262\n                    // so we need to get the text before the cursor                                                  // 3263\n                    var command = command_line.get().substring(0, command_line.position());                          // 3264\n                    var strings = command.split(' ');                                                                // 3265\n                    var string; // string before cursor that will be completed                                       // 3266\n                    if (strings.length == 1) {                                                                       // 3267\n                        string = strings[0];                                                                         // 3268\n                    } else {                                                                                         // 3269\n                        string = strings[strings.length-1];                                                          // 3270\n                        for (i=strings.length-1; i>0; i--) {                                                         // 3271\n                            // treat escape space as part of the string                                              // 3272\n                            if (strings[i-1][strings[i-1].length-1] == '\\\\') {                                       // 3273\n                                string = strings[i-1] + ' ' + string;                                                // 3274\n                            } else {                                                                                 // 3275\n                                break;                                                                               // 3276\n                            }                                                                                        // 3277\n                        }                                                                                            // 3278\n                    }                                                                                                // 3279\n                    switch ($.type(completion)) {                                                                    // 3280\n                    case 'function':                                                                                 // 3281\n                        completion(self, string, function(commands) {                                                // 3282\n                            complete_helper(command, string, commands);                                              // 3283\n                        });                                                                                          // 3284\n                        break;                                                                                       // 3285\n                    case 'array':                                                                                    // 3286\n                        complete_helper(command, string, completion);                                                // 3287\n                        break;                                                                                       // 3288\n                    default:                                                                                         // 3289\n                        // terminal will not catch this because it's an event                                        // 3290\n                        throw new Error($.terminal.defaults.strings.invalidCompletion);                              // 3291\n                    }                                                                                                // 3292\n                    return false;                                                                                    // 3293\n                } else if (e.which === 86 && e.ctrlKey) { // CTRL+V                                                  // 3294\n                    self.oneTime(1, function() {                                                                     // 3295\n                        scroll_to_bottom();                                                                          // 3296\n                    });                                                                                              // 3297\n                    return;                                                                                          // 3298\n                } else if (e.which === 9 && e.ctrlKey) { // CTRL+TAB                                                 // 3299\n                    if (terminals.length() > 1) {                                                                    // 3300\n                        self.focus(false);                                                                           // 3301\n                        return false;                                                                                // 3302\n                    }                                                                                                // 3303\n                } else if (e.which === 34) { // PAGE DOWN                                                            // 3304\n                    self.scroll(self.height());                                                                      // 3305\n                } else if (e.which === 33) { // PAGE UP                                                              // 3306\n                    self.scroll(-self.height());                                                                     // 3307\n                } else {                                                                                             // 3308\n                    self.attr({scrollTop: self.attr('scrollHeight')});                                               // 3309\n                }                                                                                                    // 3310\n            } else if (e.which === 68 && e.ctrlKey) { // CTRL+D (if paused)                                          // 3311\n                if (requests.length) {                                                                               // 3312\n                    for (i=requests.length; i--;) {                                                                  // 3313\n                        var r = requests[i];                                                                         // 3314\n                        if (4 !== r.readyState) {                                                                    // 3315\n                            try {                                                                                    // 3316\n                                r.abort();                                                                           // 3317\n                            } catch (error) {                                                                        // 3318\n                                self.error(strings.ajaxAbortError);                                                  // 3319\n                            }                                                                                        // 3320\n                        }                                                                                            // 3321\n                    }                                                                                                // 3322\n                    requests = [];                                                                                   // 3323\n                    // only resume if there are ajax calls                                                           // 3324\n                    self.resume();                                                                                   // 3325\n                }                                                                                                    // 3326\n                return false;                                                                                        // 3327\n            }                                                                                                        // 3328\n        }                                                                                                            // 3329\n        // -----------------------------------------------------------------------                                   // 3330\n        var self = this;                                                                                             // 3331\n        if (this.length > 1) {                                                                                       // 3332\n            return this.each(function() {                                                                            // 3333\n                $.fn.terminal.call($(this),                                                                          // 3334\n                                   init_interpreter,                                                                 // 3335\n                                   $.extend({name: self.selector}, options));                                        // 3336\n            });                                                                                                      // 3337\n        } else {                                                                                                     // 3338\n            // terminal already exists                                                                               // 3339\n            if (self.data('terminal')) {                                                                             // 3340\n                return self.data('terminal');                                                                        // 3341\n            }                                                                                                        // 3342\n            if (self.length === 0) {                                                                                 // 3343\n                throw 'Sorry, but terminal said that \"' + self.selector +                                            // 3344\n                    '\" is not valid selector!';                                                                      // 3345\n            }                                                                                                        // 3346\n            //var names = []; // stack if interpeter names                                                           // 3347\n            var scroll_object;                                                                                       // 3348\n            var prev_command; // used for name on the terminal if not defined                                        // 3349\n            var loged_in = false;                                                                                    // 3350\n            var tab_count = 0; // for tab completion                                                                 // 3351\n            // array of line objects:                                                                                // 3352\n            // - function (called whenever necessary, result is printed)                                             // 3353\n            // - array (expected form: [line, settings])                                                             // 3354\n            // - anything else (cast to string when painted)                                                         // 3355\n            var lines = [];                                                                                          // 3356\n            var output; // .terminal-output jquery object                                                            // 3357\n            var terminal_id = terminals.length();                                                                    // 3358\n            var num_chars; // numer of chars in line                                                                 // 3359\n            var num_rows; // number of lines that fit without scrollbar                                              // 3360\n            var command_list = []; // for tab completion                                                             // 3361\n            var url;                                                                                                 // 3362\n            var in_login = false; // some Methods should not be called when login                                    // 3363\n            // TODO: Try to use mutex like counter for pause/resume                                                  // 3364\n            var onPause = $.noop; // used to indicate that user call pause onInit                                    // 3365\n            var old_width, old_height;                                                                               // 3366\n            var dalyed_commands = []; // used when exec commands with pause                                          // 3367\n            var settings = $.extend({},                                                                              // 3368\n                                    $.terminal.defaults,                                                             // 3369\n                                    {name: self.selector},                                                           // 3370\n                                    options || {});                                                                  // 3371\n            var strings = $.terminal.defaults.strings;                                                               // 3372\n            var enabled = settings.enabled;                                                                          // 3373\n            var paused = false;                                                                                      // 3374\n            // -----------------------------------------------------------------------                               // 3375\n            // TERMINAL METHODS                                                                                      // 3376\n            // -----------------------------------------------------------------------                               // 3377\n            $.extend(self, $.omap({                                                                                  // 3378\n                // -----------------------------------------------------------------------                           // 3379\n                // :: Clear the output                                                                               // 3380\n                // -----------------------------------------------------------------------                           // 3381\n                clear: function() {                                                                                  // 3382\n                    output.html('');                                                                                 // 3383\n                    command_line.set('');                                                                            // 3384\n                    lines = [];                                                                                      // 3385\n                    try {                                                                                            // 3386\n                        settings.onClear(self);                                                                      // 3387\n                    } catch (e) {                                                                                    // 3388\n                        display_exception(e, 'onClear');                                                             // 3389\n                        throw e;                                                                                     // 3390\n                    }                                                                                                // 3391\n                    self.attr({ scrollTop: 0});                                                                      // 3392\n                    return self;                                                                                     // 3393\n                },                                                                                                   // 3394\n                // -----------------------------------------------------------------------                           // 3395\n                // :: Return an object that can be used with import_view to restore the state                        // 3396\n                // -----------------------------------------------------------------------                           // 3397\n                export_view: function() {                                                                            // 3398\n                    if (in_login) {                                                                                  // 3399\n                        throw new Exception(strings.notWhileLogin);                                                  // 3400\n                    }                                                                                                // 3401\n                    return {                                                                                         // 3402\n                        prompt: self.get_prompt(),                                                                   // 3403\n                        command: self.get_command(),                                                                 // 3404\n                        position: command_line.position(),                                                           // 3405\n                        lines: lines.slice(0)                                                                        // 3406\n                    };                                                                                               // 3407\n                },                                                                                                   // 3408\n                // -----------------------------------------------------------------------                           // 3409\n                // :: Restore the state of the previous exported view                                                // 3410\n                // -----------------------------------------------------------------------                           // 3411\n                import_view: function(view) {                                                                        // 3412\n                    if (in_login) {                                                                                  // 3413\n                        throw new Exception(strings.notWhileLogin);                                                  // 3414\n                    }                                                                                                // 3415\n                    self.set_prompt(view.prompt);                                                                    // 3416\n                    self.set_command(view.command);                                                                  // 3417\n                    command_line.position(view.position);                                                            // 3418\n                    lines = view.lines;                                                                              // 3419\n                    redraw();                                                                                        // 3420\n                    return self;                                                                                     // 3421\n                },                                                                                                   // 3422\n                // -----------------------------------------------------------------------                           // 3423\n                // :: Execute a command, it will handle commands that do AJAX calls                                  // 3424\n                // :: and have delays, if the second argument is set to true it will not                             // 3425\n                // :: echo executed command                                                                          // 3426\n                // -----------------------------------------------------------------------                           // 3427\n                exec: function(command, silent) {                                                                    // 3428\n                    // both commands executed here (resume will call Terminal::exec)                                 // 3429\n                    if (paused) {                                                                                    // 3430\n                        dalyed_commands.push([command, silent]);                                                     // 3431\n                    } else {                                                                                         // 3432\n                        commands(command, silent, true);                                                             // 3433\n                    }                                                                                                // 3434\n                    return self;                                                                                     // 3435\n                },                                                                                                   // 3436\n                // -----------------------------------------------------------------------                           // 3437\n                // :: Function changes the prompt of the command line to login                                       // 3438\n                // :: with a password and calls the user login function with                                         // 3439\n                // :: the callback that expects a token. The login is successful                                     // 3440\n                // :: if the user calls it with value that is truthy                                                 // 3441\n                // -----------------------------------------------------------------------                           // 3442\n                login: function(auth, infinite, success, error) {                                                    // 3443\n                    if (in_login) {                                                                                  // 3444\n                        throw new Error(strings.notWhileLogin);                                                      // 3445\n                    }                                                                                                // 3446\n                    if (typeof auth !== 'function') {                                                                // 3447\n                        throw new Error(strings.loginIsNotAFunction);                                                // 3448\n                    }                                                                                                // 3449\n                    if (self.token(true) && self.login_name(true)) {                                                 // 3450\n                        if (typeof success == 'function') {                                                          // 3451\n                            success();                                                                               // 3452\n                        }                                                                                            // 3453\n                        return self;                                                                                 // 3454\n                    }                                                                                                // 3455\n                    var user = null;                                                                                 // 3456\n                    // don't store login data in history                                                             // 3457\n                    if (settings.history) {                                                                          // 3458\n                        command_line.history().disable();                                                            // 3459\n                    }                                                                                                // 3460\n                    in_login = true;                                                                                 // 3461\n                    return self.push(function(user) {                                                                // 3462\n                        self.set_mask(true).push(function(pass) {                                                    // 3463\n                            try {                                                                                    // 3464\n                                auth.call(self, user, pass, function(token, silent) {                                // 3465\n                                    if (token) {                                                                     // 3466\n                                        self.pop().pop();                                                            // 3467\n                                        if (settings.history) {                                                      // 3468\n                                            command_line.history().enable();                                         // 3469\n                                        }                                                                            // 3470\n                                        var name = self.prefix_name(true) + '_';                                     // 3471\n                                        $.Storage.set(name + 'token', token);                                        // 3472\n                                        $.Storage.set(name + 'login', user);                                         // 3473\n                                        in_login = false;                                                            // 3474\n                                        if (typeof success == 'function') {                                          // 3475\n                                            // will be used internaly since users know                               // 3476\n                                            // when login success (they decide when                                  // 3477\n                                            // it happen by calling the callback -                                   // 3478\n                                            // this funtion)                                                         // 3479\n                                            success();                                                               // 3480\n                                        }                                                                            // 3481\n                                    } else {                                                                         // 3482\n                                        if (infinite) {                                                              // 3483\n                                            if (!silent) {                                                           // 3484\n                                                self.error(strings.wrongPasswordTryAgain);                           // 3485\n                                            }                                                                        // 3486\n                                            self.pop().set_mask(false);                                              // 3487\n                                        } else {                                                                     // 3488\n                                            in_login = false;                                                        // 3489\n                                            if (!silent) {                                                           // 3490\n                                                self.error(strings.wrongPassword);                                   // 3491\n                                            }                                                                        // 3492\n                                            self.pop().pop();                                                        // 3493\n                                        }                                                                            // 3494\n                                        // used only to call pop in push                                             // 3495\n                                        if (typeof error == 'function') {                                            // 3496\n                                            error();                                                                 // 3497\n                                        }                                                                            // 3498\n                                    }                                                                                // 3499\n                                });                                                                                  // 3500\n                            } catch(e) {                                                                             // 3501\n                                display_exception(e, 'USER(authentication)');                                        // 3502\n                            }                                                                                        // 3503\n                        }, {                                                                                         // 3504\n                            prompt: strings.password + ': '                                                          // 3505\n                        });                                                                                          // 3506\n                    }, {                                                                                             // 3507\n                        prompt: strings.login + ': '                                                                 // 3508\n                    });                                                                                              // 3509\n                },                                                                                                   // 3510\n                // -----------------------------------------------------------------------                           // 3511\n                // :: User defined settings and defaults as well                                                     // 3512\n                // -----------------------------------------------------------------------                           // 3513\n                settings: settings,                                                                                  // 3514\n                // -----------------------------------------------------------------------                           // 3515\n                // :: Return commands function from top interpreter                                                  // 3516\n                // -----------------------------------------------------------------------                           // 3517\n                commands: function() {                                                                               // 3518\n                    return interpreters.top().interpreter;                                                           // 3519\n                },                                                                                                   // 3520\n                // -----------------------------------------------------------------------                           // 3521\n                // :: Low Level method that overwrites interpreter                                                   // 3522\n                // -----------------------------------------------------------------------                           // 3523\n                setInterpreter: function(user_interpreter, login) {                                                  // 3524\n                    function overwrite_interpreter() {                                                               // 3525\n                        self.pause();                                                                                // 3526\n                        make_interpreter(user_interpreter, login, function(result) {                                 // 3527\n                            self.resume();                                                                           // 3528\n                            var top = interpreters.top();                                                            // 3529\n                            $.extend(top, result);                                                                   // 3530\n                            prepare_top_interpreter(true);                                                           // 3531\n                        });                                                                                          // 3532\n                    }                                                                                                // 3533\n                    if ($.type(user_interpreter) == 'string' && login) {                                             // 3534\n                        self.login(make_json_rpc_login(user_interpreter, login),                                     // 3535\n                                   true,                                                                             // 3536\n                                   overwrite_interpreter);                                                           // 3537\n                    } else {                                                                                         // 3538\n                        overwrite_interpreter();                                                                     // 3539\n                    }                                                                                                // 3540\n                },                                                                                                   // 3541\n                // -----------------------------------------------------------------------                           // 3542\n                // :: Show user greetings or terminal signature                                                      // 3543\n                // -----------------------------------------------------------------------                           // 3544\n                greetings: function() {                                                                              // 3545\n                    show_greetings();                                                                                // 3546\n                    return self;                                                                                     // 3547\n                },                                                                                                   // 3548\n                // -----------------------------------------------------------------------                           // 3549\n                // :: Return true if terminal is paused false otherwise                                              // 3550\n                // -----------------------------------------------------------------------                           // 3551\n                paused: function() {                                                                                 // 3552\n                    return paused;                                                                                   // 3553\n                },                                                                                                   // 3554\n                // -----------------------------------------------------------------------                           // 3555\n                // :: Pause the terminal, it should be used for ajax calls                                           // 3556\n                // -----------------------------------------------------------------------                           // 3557\n                pause: function() {                                                                                  // 3558\n                    onPause();                                                                                       // 3559\n                    if (!paused && command_line) {                                                                   // 3560\n                        paused = true;                                                                               // 3561\n                        self.disable();                                                                              // 3562\n                        command_line.hidden();                                                                       // 3563\n                    }                                                                                                // 3564\n                    return self;                                                                                     // 3565\n                },                                                                                                   // 3566\n                // -----------------------------------------------------------------------                           // 3567\n                // :: Resume the previously paused terminal                                                          // 3568\n                // -----------------------------------------------------------------------                           // 3569\n                resume: function() {                                                                                 // 3570\n                    if (paused && command_line) {                                                                    // 3571\n                        paused = false;                                                                              // 3572\n                        self.enable();                                                                               // 3573\n                        command_line.visible();                                                                      // 3574\n                        var original = dalyed_commands;                                                              // 3575\n                        dalyed_commands = [];                                                                        // 3576\n                        while (original.length) {                                                                    // 3577\n                            self.exec.apply(self, original.shift());                                                 // 3578\n                        }                                                                                            // 3579\n                        scroll_to_bottom();                                                                          // 3580\n                    }                                                                                                // 3581\n                    return self;                                                                                     // 3582\n                },                                                                                                   // 3583\n                // -----------------------------------------------------------------------                           // 3584\n                // :: Return the number of characters that fit into the width of the terminal                        // 3585\n                // -----------------------------------------------------------------------                           // 3586\n                cols: function() {                                                                                   // 3587\n                    return num_chars;                                                                                // 3588\n                },                                                                                                   // 3589\n                // -----------------------------------------------------------------------                           // 3590\n                // :: Return the number of lines that fit into the height of the terminal                            // 3591\n                // -----------------------------------------------------------------------                           // 3592\n                rows: function() {                                                                                   // 3593\n                    return num_rows;                                                                                 // 3594\n                },                                                                                                   // 3595\n                // -----------------------------------------------------------------------                           // 3596\n                // :: Return the History object                                                                      // 3597\n                // -----------------------------------------------------------------------                           // 3598\n                history: function() {                                                                                // 3599\n                    return command_line.history();                                                                   // 3600\n                },                                                                                                   // 3601\n                // -----------------------------------------------------------------------                           // 3602\n                // :: Switch to the next terminal                                                                    // 3603\n                // -----------------------------------------------------------------------                           // 3604\n                next: function() {                                                                                   // 3605\n                    if (terminals.length() === 1) {                                                                  // 3606\n                        return self;                                                                                 // 3607\n                    } else {                                                                                         // 3608\n                        var offsetTop = self.offset().top;                                                           // 3609\n                        var height = self.height();                                                                  // 3610\n                        var scrollTop = self.scrollTop();                                                            // 3611\n                        if (!is_scrolled_into_view(self)) {                                                          // 3612\n                            self.enable();                                                                           // 3613\n                            $('html,body').animate({scrollTop: offsetTop-50}, 500);                                  // 3614\n                            return self;                                                                             // 3615\n                        } else {                                                                                     // 3616\n                            terminals.front().disable();                                                             // 3617\n                            var next = terminals.rotate().enable();                                                  // 3618\n                            // 100 provides buffer in viewport                                                       // 3619\n                            var x = next.offset().top - 50;                                                          // 3620\n                            $('html,body').animate({scrollTop: x}, 500);                                             // 3621\n                            try {                                                                                    // 3622\n                                settings.onTerminalChange(next);                                                     // 3623\n                            } catch (e) {                                                                            // 3624\n                                display_exception(e, 'onTerminalChange');                                            // 3625\n                                throw e;                                                                             // 3626\n                            }                                                                                        // 3627\n                            return next;                                                                             // 3628\n                        }                                                                                            // 3629\n                    }                                                                                                // 3630\n                },                                                                                                   // 3631\n                // -----------------------------------------------------------------------                           // 3632\n                // :: Make the terminal in focus or blur depending on the first argument.                            // 3633\n                // :: If there is more then one terminal it will switch to next one,                                 // 3634\n                // :: if the second argument is set to true the events will be not fired.                            // 3635\n                // :: Used on init                                                                                   // 3636\n                // -----------------------------------------------------------------------                           // 3637\n                focus: function(toggle, silent) {                                                                    // 3638\n                    self.oneTime(1, function() {                                                                     // 3639\n                        if (terminals.length() === 1) {                                                              // 3640\n                            if (toggle === false) {                                                                  // 3641\n                                try {                                                                                // 3642\n                                    if (!silent && settings.onBlur(self) !== false) {                                // 3643\n                                        self.disable();                                                              // 3644\n                                    }                                                                                // 3645\n                                } catch (e) {                                                                        // 3646\n                                    display_exception(e, 'onBlur');                                                  // 3647\n                                    throw e;                                                                         // 3648\n                                }                                                                                    // 3649\n                            } else {                                                                                 // 3650\n                                try {                                                                                // 3651\n                                    if (!silent && settings.onFocus(self) !== false) {                               // 3652\n                                        self.enable();                                                               // 3653\n                                    }                                                                                // 3654\n                                } catch (e) {                                                                        // 3655\n                                    display_exception(e, 'onFocus');                                                 // 3656\n                                    throw e;                                                                         // 3657\n                                }                                                                                    // 3658\n                            }                                                                                        // 3659\n                        } else {                                                                                     // 3660\n                            if (toggle === false) {                                                                  // 3661\n                                self.next();                                                                         // 3662\n                            } else {                                                                                 // 3663\n                                var front = terminals.front();                                                       // 3664\n                                if (front != self) {                                                                 // 3665\n                                    front.disable();                                                                 // 3666\n                                    if (!silent) {                                                                   // 3667\n                                        try {                                                                        // 3668\n                                            settings.onTerminalChange(self);                                         // 3669\n                                        } catch (e) {                                                                // 3670\n                                            display_exception(e, 'onTerminalChange');                                // 3671\n                                            throw e;                                                                 // 3672\n                                        }                                                                            // 3673\n                                    }                                                                                // 3674\n                                }                                                                                    // 3675\n                                terminals.set(self);                                                                 // 3676\n                                self.enable();                                                                       // 3677\n                            }                                                                                        // 3678\n                        }                                                                                            // 3679\n                    });                                                                                              // 3680\n                    return self;                                                                                     // 3681\n                },                                                                                                   // 3682\n                // -----------------------------------------------------------------------                           // 3683\n                // :: Enable the terminal                                                                            // 3684\n                // -----------------------------------------------------------------------                           // 3685\n                enable: function() {                                                                                 // 3686\n                    if (num_chars === undefined) {                                                                   // 3687\n                        //enabling first time                                                                        // 3688\n                        self.resize();                                                                               // 3689\n                    }                                                                                                // 3690\n                    if (command_line) {                                                                              // 3691\n                        command_line.enable();                                                                       // 3692\n                        enabled = true;                                                                              // 3693\n                    }                                                                                                // 3694\n                    return self;                                                                                     // 3695\n                },                                                                                                   // 3696\n                // -----------------------------------------------------------------------                           // 3697\n                // :: Disable the terminal                                                                           // 3698\n                // -----------------------------------------------------------------------                           // 3699\n                disable: function() {                                                                                // 3700\n                    if (command_line) {                                                                              // 3701\n                        enabled = false;                                                                             // 3702\n                        command_line.disable();                                                                      // 3703\n                    }                                                                                                // 3704\n                    return self;                                                                                     // 3705\n                },                                                                                                   // 3706\n                // -----------------------------------------------------------------------                           // 3707\n                // :: return true if the terminal is enabled                                                         // 3708\n                // -----------------------------------------------------------------------                           // 3709\n                enabled: function() {                                                                                // 3710\n                    return enabled;                                                                                  // 3711\n                },                                                                                                   // 3712\n                // -----------------------------------------------------------------------                           // 3713\n                // :: Return the terminal signature depending on the size of the terminal                            // 3714\n                // -----------------------------------------------------------------------                           // 3715\n                signature: function() {                                                                              // 3716\n                    var cols = self.cols();                                                                          // 3717\n                    var i = cols < 15 ? null : cols < 35 ? 0 : cols < 55 ? 1 : cols < 64 ? 2 : cols < 75 ? 3 : 4;    // 3718\n                    if (i !== null) {                                                                                // 3719\n                        return signatures[i].join('\\n') + '\\n';                                                      // 3720\n                    } else {                                                                                         // 3721\n                        return '';                                                                                   // 3722\n                    }                                                                                                // 3723\n                },                                                                                                   // 3724\n                // -----------------------------------------------------------------------                           // 3725\n                // :: Return the version number                                                                      // 3726\n                // -----------------------------------------------------------------------                           // 3727\n                version: function() {                                                                                // 3728\n                    return version;                                                                                  // 3729\n                },                                                                                                   // 3730\n                // -----------------------------------------------------------------------                           // 3731\n                // :: Return actual command line object (jquery object with cmd methods)                             // 3732\n                // -----------------------------------------------------------------------                           // 3733\n                cmd: function() {                                                                                    // 3734\n                    return command_line;                                                                             // 3735\n                },                                                                                                   // 3736\n                // -----------------------------------------------------------------------                           // 3737\n                // :: Return the current command entered by terminal                                                 // 3738\n                // -----------------------------------------------------------------------                           // 3739\n                get_command: function() {                                                                            // 3740\n                    return command_line.get();                                                                       // 3741\n                },                                                                                                   // 3742\n                // -----------------------------------------------------------------------                           // 3743\n                // :: Change the command line to the new one                                                         // 3744\n                // -----------------------------------------------------------------------                           // 3745\n                set_command: function(command) {                                                                     // 3746\n                    command_line.set(command);                                                                       // 3747\n                    return self;                                                                                     // 3748\n                },                                                                                                   // 3749\n                // -----------------------------------------------------------------------                           // 3750\n                // :: Insert text into the command line after the cursor                                             // 3751\n                // -----------------------------------------------------------------------                           // 3752\n                insert: function(string) {                                                                           // 3753\n                    if (typeof string === 'string') {                                                                // 3754\n                        command_line.insert(string);                                                                 // 3755\n                        return self;                                                                                 // 3756\n                    } else {                                                                                         // 3757\n                        throw \"insert function argument is not a string\";                                            // 3758\n                    }                                                                                                // 3759\n                },                                                                                                   // 3760\n                // -----------------------------------------------------------------------                           // 3761\n                // :: Set the prompt of the command line                                                             // 3762\n                // -----------------------------------------------------------------------                           // 3763\n                set_prompt: function(prompt) {                                                                       // 3764\n                    if (validate('prompt', prompt)) {                                                                // 3765\n                        if (typeof prompt == 'function') {                                                           // 3766\n                            command_line.prompt(function(command) {                                                  // 3767\n                                prompt(command, self);                                                               // 3768\n                            });                                                                                      // 3769\n                        } else {                                                                                     // 3770\n                            command_line.prompt(prompt);                                                             // 3771\n                        }                                                                                            // 3772\n                        interpreters.top().prompt = prompt;                                                          // 3773\n                    }                                                                                                // 3774\n                    return self;                                                                                     // 3775\n                },                                                                                                   // 3776\n                // -----------------------------------------------------------------------                           // 3777\n                // :: Return the prompt used by the terminal                                                         // 3778\n                // -----------------------------------------------------------------------                           // 3779\n                get_prompt: function() {                                                                             // 3780\n                    return interpreters.top().prompt;                                                                // 3781\n                    // command_line.prompt(); - can be a wrapper                                                     // 3782\n                    //return command_line.prompt();                                                                  // 3783\n                },                                                                                                   // 3784\n                // -----------------------------------------------------------------------                           // 3785\n                // :: Enable or Disable mask depedning on the passed argument                                        // 3786\n                // -----------------------------------------------------------------------                           // 3787\n                set_mask: function(display) {                                                                        // 3788\n                    command_line.mask(display);                                                                      // 3789\n                    return self;                                                                                     // 3790\n                },                                                                                                   // 3791\n                // -----------------------------------------------------------------------                           // 3792\n                // :: Return the ouput of the terminal as text                                                       // 3793\n                // -----------------------------------------------------------------------                           // 3794\n                get_output: function(raw) {                                                                          // 3795\n                    if (raw) {                                                                                       // 3796\n                        return lines;                                                                                // 3797\n                    } else {                                                                                         // 3798\n                        return $.map(lines, function(item) {                                                         // 3799\n                            return typeof item[0] == 'function' ? item[0]() : item[0];                               // 3800\n                        }).join('\\n');                                                                               // 3801\n                    }                                                                                                // 3802\n                },                                                                                                   // 3803\n                // -----------------------------------------------------------------------                           // 3804\n                // :: Recalculate and redraw everything                                                              // 3805\n                // -----------------------------------------------------------------------                           // 3806\n                resize: function(width, height) {                                                                    // 3807\n                    if (width && height) {                                                                           // 3808\n                        self.width(width);                                                                           // 3809\n                        self.height(height);                                                                         // 3810\n                    }                                                                                                // 3811\n                    width = self.width();                                                                            // 3812\n                    height = self.height();                                                                          // 3813\n                    var new_num_chars = get_num_chars(self);                                                         // 3814\n                    var new_num_rows = get_num_rows(self);                                                           // 3815\n                    // only if number of chars changed                                                               // 3816\n                    if (new_num_chars !== num_chars || new_num_rows !== num_rows) {                                  // 3817\n                        num_chars = new_num_chars;                                                                   // 3818\n                        num_rows = new_num_rows;                                                                     // 3819\n                        redraw();                                                                                    // 3820\n                        if (typeof settings.onResize === 'function' &&                                               // 3821\n                            (old_height !== height || old_width !== width)) {                                        // 3822\n                            settings.onResize(self);                                                                 // 3823\n                        }                                                                                            // 3824\n                        if (old_height !== height || old_width !== width) {                                          // 3825\n                            old_height = height;                                                                     // 3826\n                            old_width = width;                                                                       // 3827\n                        }                                                                                            // 3828\n                    }                                                                                                // 3829\n                    return self;                                                                                     // 3830\n                },                                                                                                   // 3831\n                // -----------------------------------------------------------------------                           // 3832\n                // :: Flush the output to the terminal                                                               // 3833\n                // -----------------------------------------------------------------------                           // 3834\n                flush: function() {                                                                                  // 3835\n                    try {                                                                                            // 3836\n                        var wrapper;                                                                                 // 3837\n                        // print all lines                                                                           // 3838\n                        $.each(output_buffer, function(i, line) {                                                    // 3839\n                            if (line === NEW_LINE) {                                                                 // 3840\n                                wrapper = $('<div></div>');                                                          // 3841\n                            } else if (typeof line === 'function') {                                                 // 3842\n                                wrapper.appendTo(output);                                                            // 3843\n                                try {                                                                                // 3844\n                                    line(wrapper);                                                                   // 3845\n                                } catch (e) {                                                                        // 3846\n                                    display_exception(e, 'USER:echo(finalize)');                                     // 3847\n                                }                                                                                    // 3848\n                            } else {                                                                                 // 3849\n                                $('<div/>').html(line).appendTo(wrapper).width('100%');                              // 3850\n                            }                                                                                        // 3851\n                        });                                                                                          // 3852\n                        if (settings.outputLimit >= 0) {                                                             // 3853\n                            var limit = settings.outputLimit === 0 ?                                                 // 3854\n                                self.rows() :                                                                        // 3855\n                                settings.outputLimit;                                                                // 3856\n                            var $lines = output.find('div div');                                                     // 3857\n                            if ($lines.length > limit) {                                                             // 3858\n                                var for_remove = $lines.slice(0, lines.length-limit+1);                              // 3859\n                                // you can't get parent if you remove the element so                                 // 3860\n                                // we first get the parent                                                           // 3861\n                                var parents = for_remove.parent();                                                   // 3862\n                                for_remove.remove();                                                                 // 3863\n                                parents.each(function() {                                                            // 3864\n                                    var self = $(this);                                                              // 3865\n                                    if (self.is(':empty')) {                                                         // 3866\n                                        self.remove();                                                               // 3867\n                                    }                                                                                // 3868\n                                });                                                                                  // 3869\n                            }                                                                                        // 3870\n                        }                                                                                            // 3871\n                        scroll_to_bottom();                                                                          // 3872\n                        output_buffer = [];                                                                          // 3873\n                    } catch (e) {                                                                                    // 3874\n                        alert('[Flush] ' + exception_message(e) + '\\n' +                                             // 3875\n                              e.stack);                                                                              // 3876\n                    }                                                                                                // 3877\n                    return self;                                                                                     // 3878\n                },                                                                                                   // 3879\n                // -----------------------------------------------------------------------                           // 3880\n                // :: Print data to the terminal output. It can have two options:                                    // 3881\n                // :: a function that is called with the container div that holds the                                // 3882\n                // :: output (as a jquery object) every time the output is printed                                   // 3883\n                // :: (including resize and scrolling)                                                               // 3884\n                // :: If the line is a function it will be called for every redraw.                                  // 3885\n                // -----------------------------------------------------------------------                           // 3886\n                echo: function(string, options) {                                                                    // 3887\n                    try {                                                                                            // 3888\n                        string = string || '';                                                                       // 3889\n                        var settings = $.extend({                                                                    // 3890\n                            flush: true,                                                                             // 3891\n                            raw: false,                                                                              // 3892\n                            finalize: $.noop                                                                         // 3893\n                        }, options || {});                                                                           // 3894\n                        output_buffer = [];                                                                          // 3895\n                        draw_line(string, settings);                                                                 // 3896\n                        lines.push([string, settings]);                                                              // 3897\n                        if (settings.flush) {                                                                        // 3898\n                            self.flush();                                                                            // 3899\n                        }                                                                                            // 3900\n                        on_scrollbar_show_resize();                                                                  // 3901\n                    } catch (e) {                                                                                    // 3902\n                        // if echo throw exception we can't use error to display that                                // 3903\n                        // exception                                                                                 // 3904\n                        alert('[Terminal.echo] ' + exception_message(e) + '\\n' +                                     // 3905\n                              e.stack);                                                                              // 3906\n                    }                                                                                                // 3907\n                    return self;                                                                                     // 3908\n                },                                                                                                   // 3909\n                // -----------------------------------------------------------------------                           // 3910\n                // :: echo red text                                                                                  // 3911\n                // -----------------------------------------------------------------------                           // 3912\n                error: function(message, finalize) {                                                                 // 3913\n                    //quick hack to fix trailing back slash                                                          // 3914\n                    return self.echo('[[;#f00;]' + $.terminal.escape_brackets(message).                              // 3915\n                                     replace(/\\\\$/, '&#92;') + ']', finalize);                                       // 3916\n                },                                                                                                   // 3917\n                // -----------------------------------------------------------------------                           // 3918\n                // :: Display Exception on terminal                                                                  // 3919\n                // -----------------------------------------------------------------------                           // 3920\n                exception: function(e, label) {                                                                      // 3921\n                    var message = exception_message(e);                                                              // 3922\n                    if (label) {                                                                                     // 3923\n                        message = '&#91;' + label + '&#93;: ' + message;                                             // 3924\n                    }                                                                                                // 3925\n                    if (message) {                                                                                   // 3926\n                        self.error(message, {                                                                        // 3927\n                            finalize: function(div) {                                                                // 3928\n                                div.addClass('exception message');                                                   // 3929\n                            }                                                                                        // 3930\n                        });                                                                                          // 3931\n                    }                                                                                                // 3932\n                    if (typeof e.fileName === 'string') {                                                            // 3933\n                        //display filename and line which throw exeption                                             // 3934\n                        self.pause();                                                                                // 3935\n                        $.get(e.fileName, function(file) {                                                           // 3936\n                            self.resume();                                                                           // 3937\n                            var num = e.lineNumber - 1;                                                              // 3938\n                            var line = file.split('\\n')[num];                                                        // 3939\n                            if (line) {                                                                              // 3940\n                                self.error('&#91;' + e.lineNumber + '&#93;: ' + line);                               // 3941\n                            }                                                                                        // 3942\n                        });                                                                                          // 3943\n                    }                                                                                                // 3944\n                    if (e.stack) {                                                                                   // 3945\n                        self.error(e.stack, {                                                                        // 3946\n                            finalize: function(div) {                                                                // 3947\n                                div.addClass('exception stack-trace');                                               // 3948\n                            }                                                                                        // 3949\n                        });                                                                                          // 3950\n                    }                                                                                                // 3951\n                },                                                                                                   // 3952\n                // -----------------------------------------------------------------------                           // 3953\n                // :: Scroll Div that holds the terminal                                                             // 3954\n                // -----------------------------------------------------------------------                           // 3955\n                scroll: function(amount) {                                                                           // 3956\n                    var pos;                                                                                         // 3957\n                    amount = Math.round(amount);                                                                     // 3958\n                    if (scroll_object.prop) { // work with jQuery > 1.6                                              // 3959\n                        if (amount > scroll_object.prop('scrollTop') && amount > 0) {                                // 3960\n                            scroll_object.prop('scrollTop', 0);                                                      // 3961\n                        }                                                                                            // 3962\n                        pos = scroll_object.prop('scrollTop');                                                       // 3963\n                        scroll_object.scrollTop(pos + amount);                                                       // 3964\n                    } else {                                                                                         // 3965\n                        if (amount > scroll_object.attr('scrollTop') && amount > 0) {                                // 3966\n                            scroll_object.attr('scrollTop', 0);                                                      // 3967\n                        }                                                                                            // 3968\n                        pos = scroll_object.attr('scrollTop');                                                       // 3969\n                        scroll_object.scrollTop(pos + amount);                                                       // 3970\n                    }                                                                                                // 3971\n                    return self;                                                                                     // 3972\n                },                                                                                                   // 3973\n                // -----------------------------------------------------------------------                           // 3974\n                // :: Exit all interpreters and logout. The function will throw exception                            // 3975\n                // :: if there is no login provided                                                                  // 3976\n                // -----------------------------------------------------------------------                           // 3977\n                logout: settings.login ? function() {                                                                // 3978\n                    while (interpreters.size() > 1) {                                                                // 3979\n                        self.pop();                                                                                  // 3980\n                    }                                                                                                // 3981\n                    return self.pop();                                                                               // 3982\n                } : function() {                                                                                     // 3983\n                    self.error(strings.loginFunctionMissing);                                                        // 3984\n                },                                                                                                   // 3985\n                // -----------------------------------------------------------------------                           // 3986\n                // :: Function returns the token returned by callback function in login                              // 3987\n                // :: function. It does nothing (return undefined) if there is no login                              // 3988\n                // -----------------------------------------------------------------------                           // 3989\n                token: settings.login ? function(local) {                                                            // 3990\n                    return $.Storage.get(self.prefix_name(local) + '_token');                                        // 3991\n                } : $.noop,                                                                                          // 3992\n                // -----------------------------------------------------------------------                           // 3993\n                // :: Function return Login name entered by the user                                                 // 3994\n                // -----------------------------------------------------------------------                           // 3995\n                login_name: settings.login ? function(local) {                                                       // 3996\n                    return $.Storage.get(self.prefix_name(local) + '_login');                                        // 3997\n                } : $.noop,                                                                                          // 3998\n                // -----------------------------------------------------------------------                           // 3999\n                // :: Function returns the name of current interpreter                                               // 4000\n                // -----------------------------------------------------------------------                           // 4001\n                name: function() {                                                                                   // 4002\n                    return interpreters.top().name;                                                                  // 4003\n                },                                                                                                   // 4004\n                // -----------------------------------------------------------------------                           // 4005\n                // :: Function return prefix name for login/token                                                    // 4006\n                // -----------------------------------------------------------------------                           // 4007\n                prefix_name: function(local) {                                                                       // 4008\n                    var name = (settings.name ? settings.name + '_' : '') + terminal_id;                             // 4009\n                    if (local && interpreters.size() > 1) {                                                          // 4010\n                        name += '_' + interpreters.map(function(intrp) {                                             // 4011\n                            return intrp.name;                                                                       // 4012\n                        }).slice(1).join('_');                                                                       // 4013\n                    }                                                                                                // 4014\n                    return name;                                                                                     // 4015\n                },                                                                                                   // 4016\n                // -----------------------------------------------------------------------                           // 4017\n                // :: Push a new interenter on the Stack                                                             // 4018\n                // -----------------------------------------------------------------------                           // 4019\n                push: function(interpreter, options) {                                                               // 4020\n                    options = options || {};                                                                         // 4021\n                    options.name = options.name || prev_command;                                                     // 4022\n                    options.prompt = options.prompt || options.name + ' ';                                           // 4023\n                    //names.push(options.name);                                                                      // 4024\n                    var top = interpreters.top();                                                                    // 4025\n                    if (top) {                                                                                       // 4026\n                        top.mask = command_line.mask();                                                              // 4027\n                    }                                                                                                // 4028\n                    make_interpreter(interpreter, options.login, function(result) {                                  // 4029\n                        // result is object with interpreter and completion properties                               // 4030\n                        interpreters.push($.extend({}, result, options));                                            // 4031\n                        if (options.login) {                                                                         // 4032\n                            var type = $.type(options.login);                                                        // 4033\n                            if (type == 'function') {                                                                // 4034\n                                // self.pop on error                                                                 // 4035\n                                self.login(options.login,                                                            // 4036\n                                           false,                                                                    // 4037\n                                           prepare_top_interpreter,                                                  // 4038\n                                           self.pop);                                                                // 4039\n                            } else if ($.type(interpreter) == 'string' &&                                            // 4040\n                                       type == 'string' || type == 'boolean') {                                      // 4041\n                                self.login(make_json_rpc_login(interpreter, options.login),                          // 4042\n                                           false,                                                                    // 4043\n                                           prepare_top_interpreter,                                                  // 4044\n                                           self.pop);                                                                // 4045\n                            }                                                                                        // 4046\n                        } else {                                                                                     // 4047\n                            prepare_top_interpreter();                                                               // 4048\n                        }                                                                                            // 4049\n                    });                                                                                              // 4050\n                    return self;                                                                                     // 4051\n                },                                                                                                   // 4052\n                // -----------------------------------------------------------------------                           // 4053\n                // :: Remove the last interpreter from the Stack                                                     // 4054\n                // -----------------------------------------------------------------------                           // 4055\n                pop: function(string) {                                                                              // 4056\n                    if (string !== undefined) {                                                                      // 4057\n                        echo_command(string);                                                                        // 4058\n                    }                                                                                                // 4059\n                    var token = self.token(true);                                                                    // 4060\n                    if (interpreters.size() == 1) {                                                                  // 4061\n                        if (settings.login) {                                                                        // 4062\n                            global_logout();                                                                         // 4063\n                            if ($.type(settings.onExit) === 'function') {                                            // 4064\n                                try {                                                                                // 4065\n                                    settings.onExit(self);                                                           // 4066\n                                } catch (e) {                                                                        // 4067\n                                    display_exception(e, 'onExit');                                                  // 4068\n                                    throw e;                                                                         // 4069\n                                }                                                                                    // 4070\n                            }                                                                                        // 4071\n                        } else {                                                                                     // 4072\n                            self.error(strings.canExitError);                                                        // 4073\n                        }                                                                                            // 4074\n                    } else {                                                                                         // 4075\n                        if (token) {                                                                                 // 4076\n                            logout();                                                                                // 4077\n                        }                                                                                            // 4078\n                        var current = interpreters.pop();                                                            // 4079\n                        prepare_top_interpreter();                                                                   // 4080\n                        if ($.type(current.onExit) === 'function') {                                                 // 4081\n                            try {                                                                                    // 4082\n                                current.onExit(self);                                                                // 4083\n                            } catch (e) {                                                                            // 4084\n                                display_exception(e, 'onExit');                                                      // 4085\n                                throw e;                                                                             // 4086\n                            }                                                                                        // 4087\n                        }                                                                                            // 4088\n                        // restore mask                                                                              // 4089\n                        self.set_mask(interpreters.top().mask);                                                      // 4090\n                    }                                                                                                // 4091\n                    return self;                                                                                     // 4092\n                },                                                                                                   // 4093\n                // -----------------------------------------------------------------------                           // 4094\n                // :: Return how deep you are in nested interpreters                                                 // 4095\n                // -----------------------------------------------------------------------                           // 4096\n                level: function() {                                                                                  // 4097\n                    return interpreters.size();                                                                      // 4098\n                },                                                                                                   // 4099\n                // -----------------------------------------------------------------------                           // 4100\n                // :: Reinitialize the terminal                                                                      // 4101\n                // -----------------------------------------------------------------------                           // 4102\n                reset: function() {                                                                                  // 4103\n                    self.clear();                                                                                    // 4104\n                    while(interpreters.size() > 1) {                                                                 // 4105\n                        interpreters.pop();                                                                          // 4106\n                    }                                                                                                // 4107\n                    initialize();                                                                                    // 4108\n                    return self;                                                                                     // 4109\n                },                                                                                                   // 4110\n                // -----------------------------------------------------------------------                           // 4111\n                // :: Remove all local storage left by terminal, it will not logout you                              // 4112\n                // :: until you refresh the browser                                                                  // 4113\n                // -----------------------------------------------------------------------                           // 4114\n                purge: function() {                                                                                  // 4115\n                    var prefix = self.prefix_name() + '_';                                                           // 4116\n                    var names = $.Storage.get(prefix + 'interpreters');                                              // 4117\n                    $.each($.parseJSON(names), function(_, name) {                                                   // 4118\n                        $.Storage.remove(name + '_commands');                                                        // 4119\n                        $.Storage.remove(name + '_token');                                                           // 4120\n                        $.Storage.remove(name + '_login');                                                           // 4121\n                    });                                                                                              // 4122\n                    command_line.purge();                                                                            // 4123\n                    $.Storage.remove(prefix + 'interpreters');                                                       // 4124\n                    return self;                                                                                     // 4125\n                },                                                                                                   // 4126\n                // -----------------------------------------------------------------------                           // 4127\n                // :: Remove all events and DOM nodes left by terminal, it will not purge                            // 4128\n                // :: the terminal so you will have the same state when you refresh the                              // 4129\n                // :: browser                                                                                        // 4130\n                // -----------------------------------------------------------------------                           // 4131\n                destroy: function() {                                                                                // 4132\n                    command_line.destroy().remove();                                                                 // 4133\n                    output.remove();                                                                                 // 4134\n                    $(document).unbind('.terminal');                                                                 // 4135\n                    $(window).unbind('.terminal');                                                                   // 4136\n                    self.unbind('click, mousewheel');                                                                // 4137\n                    self.removeData('terminal').removeClass('terminal');                                             // 4138\n                    if (settings.width) {                                                                            // 4139\n                        self.css('width', '');                                                                       // 4140\n                    }                                                                                                // 4141\n                    if (settings.height) {                                                                           // 4142\n                        self.css('height', '');                                                                      // 4143\n                    }                                                                                                // 4144\n                    return self;                                                                                     // 4145\n                }                                                                                                    // 4146\n            }, function(_, fun) {                                                                                    // 4147\n                // wrap all functions and display execptions                                                         // 4148\n                return function() {                                                                                  // 4149\n                    try {                                                                                            // 4150\n                        return fun.apply(this, Array.prototype.slice.apply(arguments));                              // 4151\n                    } catch (e) {                                                                                    // 4152\n                        // exec catch by command (resume call exec)                                                  // 4153\n                        if (_ !== 'exec' && _ !== 'resume') {                                                        // 4154\n                            display_exception(e, 'TERMINAL');                                                        // 4155\n                        }                                                                                            // 4156\n                        throw e;                                                                                     // 4157\n                    }                                                                                                // 4158\n                };                                                                                                   // 4159\n            }));                                                                                                     // 4160\n                                                                                                                     // 4161\n            // ---------------------------------------------------------------------                                 // 4162\n            var on_scrollbar_show_resize = (function() {                                                             // 4163\n                var scroll_bars = have_scrollbars(self);                                                             // 4164\n                return function() {                                                                                  // 4165\n                    if (scroll_bars !== have_scrollbars(self)) {                                                     // 4166\n                        // if the scollbar appearance changes we will have a different                               // 4167\n                        // number of chars                                                                           // 4168\n                        self.resize();                                                                               // 4169\n                        scroll_bars = have_scrollbars(self);                                                         // 4170\n                    }                                                                                                // 4171\n                };                                                                                                   // 4172\n            })();                                                                                                    // 4173\n                                                                                                                     // 4174\n            // ---------------------------------------------------------------------                                 // 4175\n            // INIT CODE                                                                                             // 4176\n            // ---------------------------------------------------------------------                                 // 4177\n            if (settings.width) {                                                                                    // 4178\n                self.width(settings.width);                                                                          // 4179\n            }                                                                                                        // 4180\n            if (settings.height) {                                                                                   // 4181\n                self.height(settings.height);                                                                        // 4182\n            }                                                                                                        // 4183\n            if (!navigator.userAgent.toLowerCase().match(/(webkit)[ \\/]([\\w.]+)/) &&                                 // 4184\n                self[0].tagName.toLowerCase() == 'body') {                                                           // 4185\n                scroll_object = $('html');                                                                           // 4186\n            } else {                                                                                                 // 4187\n                scroll_object = self;                                                                                // 4188\n            }                                                                                                        // 4189\n            // register ajaxSend for cancel requests on CTRL+D                                                       // 4190\n            $(document).bind('ajaxSend.terminal', function(e, xhr, opt) {                                            // 4191\n                requests.push(xhr);                                                                                  // 4192\n            });                                                                                                      // 4193\n            output = $('<div>').addClass('terminal-output').appendTo(self);                                          // 4194\n            self.addClass('terminal');                                                                               // 4195\n            // keep focus in clipboard textarea in mobile                                                            // 4196\n            if (('ontouchstart' in window) || window.DocumentTouch &&                                                // 4197\n                document instanceof DocumentTouch) {                                                                 // 4198\n                self.click(function() {                                                                              // 4199\n                    self.find('textarea').focus();                                                                   // 4200\n                });                                                                                                  // 4201\n                self.find('textarea').focus();                                                                       // 4202\n            }                                                                                                        // 4203\n            /*                                                                                                       // 4204\n              self.bind('touchstart.touchScroll', function() {                                                       // 4205\n                                                                                                                     // 4206\n              });                                                                                                    // 4207\n              self.bind('touchmove.touchScroll', function() {                                                        // 4208\n                                                                                                                     // 4209\n              });                                                                                                    // 4210\n            */                                                                                                       // 4211\n            //$('<input type=\"text\"/>').hide().focus().appendTo(self);                                               // 4212\n                                                                                                                     // 4213\n            // before login event                                                                                    // 4214\n            if (settings.login && typeof settings.onBeforeLogin === 'function') {                                    // 4215\n                try {                                                                                                // 4216\n                    settings.onBeforeLogin(self);                                                                    // 4217\n                } catch (e) {                                                                                        // 4218\n                    display_exception(e, 'onBeforeLogin');                                                           // 4219\n                    throw e;                                                                                         // 4220\n                }                                                                                                    // 4221\n            }                                                                                                        // 4222\n            var auth = settings.login;                                                                               // 4223\n            // create json-rpc authentication function                                                               // 4224\n            if (typeof init_interpreter === 'string' &&                                                              // 4225\n                (typeof settings.login === 'string' || settings.login)) {                                            // 4226\n                settings.login = make_json_rpc_login(init_interpreter, settings.login);                              // 4227\n            }                                                                                                        // 4228\n            terminals.append(self);                                                                                  // 4229\n            var interpreters;                                                                                        // 4230\n            var command_line;                                                                                        // 4231\n            make_interpreter(init_interpreter, auth, function(interpreter) {                                         // 4232\n                interpreters = new Stack($.extend({                                                                  // 4233\n                    name: settings.name,                                                                             // 4234\n                    prompt: settings.prompt,                                                                         // 4235\n                    greetings: settings.greetings                                                                    // 4236\n                }, interpreter));                                                                                    // 4237\n                // CREATE COMMAND LINE                                                                               // 4238\n                command_line = $('<div/>').appendTo(self).cmd({                                                      // 4239\n                    prompt: settings.prompt,                                                                         // 4240\n                    history: settings.history,                                                                       // 4241\n                    historyFilter: settings.historyFilter,                                                           // 4242\n                    historySize: settings.historySize,                                                               // 4243\n                    width: '100%',                                                                                   // 4244\n                    keydown: key_down,                                                                               // 4245\n                    keypress: settings.keypress ? function(e) {                                                      // 4246\n                        return settings.keypress(e, self);                                                           // 4247\n                    } : null,                                                                                        // 4248\n                    onCommandChange: function(command) {                                                             // 4249\n                        if ($.type(settings.onCommandChange) === 'function') {                                       // 4250\n                            try {                                                                                    // 4251\n                                settings.onCommandChange(command, self);                                             // 4252\n                            } catch (e) {                                                                            // 4253\n                                display_exception(e, 'onCommandChange');                                             // 4254\n                                throw e;                                                                             // 4255\n                            }                                                                                        // 4256\n                        }                                                                                            // 4257\n                        scroll_to_bottom();                                                                          // 4258\n                    },                                                                                               // 4259\n                    commands: commands                                                                               // 4260\n                });                                                                                                  // 4261\n                if (enabled) {                                                                                       // 4262\n                    self.focus(undefined, true);                                                                     // 4263\n                } else {                                                                                             // 4264\n                    self.disable();                                                                                  // 4265\n                }                                                                                                    // 4266\n                $(document).bind('click.terminal', function(e) {                                                     // 4267\n                    if (!$(e.target).closest('.terminal').hasClass('terminal') &&                                    // 4268\n                        settings.onBlur(self) !== false) {                                                           // 4269\n                        self.disable();                                                                              // 4270\n                    }                                                                                                // 4271\n                });                                                                                                  // 4272\n                self.click(function(e) {                                                                             // 4273\n                    if (!self.enabled()) {                                                                           // 4274\n                        self.focus();                                                                                // 4275\n                    }                                                                                                // 4276\n                }).mousedown(function(e) {                                                                           // 4277\n                    if (e.which == 2) {                                                                              // 4278\n                        self.insert(getSelectedText());                                                              // 4279\n                    }                                                                                                // 4280\n                });                                                                                                  // 4281\n                // ------------------------------------------------                                                  // 4282\n                // Run Login                                                                                         // 4283\n                if (settings.login) {                                                                                // 4284\n                    self.login(settings.login, true, initialize);                                                    // 4285\n                } else {                                                                                             // 4286\n                    initialize();                                                                                    // 4287\n                }                                                                                                    // 4288\n                if (self.is(':visible')) {                                                                           // 4289\n                    num_chars = get_num_chars(self);                                                                 // 4290\n                    command_line.resize(num_chars);                                                                  // 4291\n                    num_rows = get_num_rows(self);                                                                   // 4292\n                }                                                                                                    // 4293\n                self.oneTime(100, function() {                                                                       // 4294\n                    $(window).bind('resize.terminal', function() {                                                   // 4295\n                        if (self.is(':visible')) {                                                                   // 4296\n                            var width = self.width();                                                                // 4297\n                            var height = self.height();                                                              // 4298\n                            // prevent too many calculations in IE                                                   // 4299\n                            if (old_height !== height || old_width !== width) {                                      // 4300\n                                self.resize();                                                                       // 4301\n                            }                                                                                        // 4302\n                        }                                                                                            // 4303\n                    });                                                                                              // 4304\n                });                                                                                                  // 4305\n                if ($.event.special.mousewheel) {                                                                    // 4306\n                    var shift = false;                                                                               // 4307\n                    $(document).bind('keydown.terminal', function(e) {                                               // 4308\n                        if (e.shiftKey) {                                                                            // 4309\n                            shift = true;                                                                            // 4310\n                        }                                                                                            // 4311\n                    }).bind('keyup.terminal', function(e) {                                                          // 4312\n                        // in Google Chromium/Linux shiftKey is false                                                // 4313\n                        if (e.shiftKey || e.which == 16) {                                                           // 4314\n                            shift = false;                                                                           // 4315\n                        }                                                                                            // 4316\n                    });                                                                                              // 4317\n                    self.mousewheel(function(event, delta) {                                                         // 4318\n                        if (!shift) {                                                                                // 4319\n                            if (delta > 0) {                                                                         // 4320\n                                self.scroll(-40);                                                                    // 4321\n                            } else {                                                                                 // 4322\n                                self.scroll(40);                                                                     // 4323\n                            }                                                                                        // 4324\n                            //event.preventDefault();                                                                // 4325\n                        }                                                                                            // 4326\n                    });                                                                                              // 4327\n                }                                                                                                    // 4328\n            });                                                                                                      // 4329\n            self.data('terminal', self);                                                                             // 4330\n            return self;                                                                                             // 4331\n        }                                                                                                            // 4332\n    }; //terminal plugin                                                                                             // 4333\n})(jQuery);                                                                                                          // 4334\n                                                                                                                     // 4335\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/channikhabra:terminal/lib/jquery-terminal/jquery.mousewheel.js                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)                                                       // 1\n * Licensed under the MIT License (LICENSE.txt).                                                                     // 2\n *                                                                                                                   // 3\n * Version: 3.1.12                                                                                                   // 4\n *                                                                                                                   // 5\n * Requires: jQuery 1.2.2+                                                                                           // 6\n */                                                                                                                  // 7\n                                                                                                                     // 8\n(function (factory) {                                                                                                // 9\n    if ( typeof define === 'function' && define.amd ) {                                                              // 10\n        // AMD. Register as an anonymous module.                                                                     // 11\n        define(['jquery'], factory);                                                                                 // 12\n    } else if (typeof exports === 'object') {                                                                        // 13\n        // Node/CommonJS style for Browserify                                                                        // 14\n        module.exports = factory;                                                                                    // 15\n    } else {                                                                                                         // 16\n        // Browser globals                                                                                           // 17\n        factory(jQuery);                                                                                             // 18\n    }                                                                                                                // 19\n}(function ($) {                                                                                                     // 20\n                                                                                                                     // 21\n    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],                                   // 22\n        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?                                           // 23\n                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],                             // 24\n        slice  = Array.prototype.slice,                                                                              // 25\n        nullLowestDeltaTimeout, lowestDelta;                                                                         // 26\n                                                                                                                     // 27\n    if ( $.event.fixHooks ) {                                                                                        // 28\n        for ( var i = toFix.length; i; ) {                                                                           // 29\n            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;                                                     // 30\n        }                                                                                                            // 31\n    }                                                                                                                // 32\n                                                                                                                     // 33\n    var special = $.event.special.mousewheel = {                                                                     // 34\n        version: '3.1.12',                                                                                           // 35\n                                                                                                                     // 36\n        setup: function() {                                                                                          // 37\n            if ( this.addEventListener ) {                                                                           // 38\n                for ( var i = toBind.length; i; ) {                                                                  // 39\n                    this.addEventListener( toBind[--i], handler, false );                                            // 40\n                }                                                                                                    // 41\n            } else {                                                                                                 // 42\n                this.onmousewheel = handler;                                                                         // 43\n            }                                                                                                        // 44\n            // Store the line height and page height for this particular element                                     // 45\n            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));                                     // 46\n            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));                                     // 47\n        },                                                                                                           // 48\n                                                                                                                     // 49\n        teardown: function() {                                                                                       // 50\n            if ( this.removeEventListener ) {                                                                        // 51\n                for ( var i = toBind.length; i; ) {                                                                  // 52\n                    this.removeEventListener( toBind[--i], handler, false );                                         // 53\n                }                                                                                                    // 54\n            } else {                                                                                                 // 55\n                this.onmousewheel = null;                                                                            // 56\n            }                                                                                                        // 57\n            // Clean up the data we added to the element                                                             // 58\n            $.removeData(this, 'mousewheel-line-height');                                                            // 59\n            $.removeData(this, 'mousewheel-page-height');                                                            // 60\n        },                                                                                                           // 61\n                                                                                                                     // 62\n        getLineHeight: function(elem) {                                                                              // 63\n            var $elem = $(elem),                                                                                     // 64\n                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();                               // 65\n            if (!$parent.length) {                                                                                   // 66\n                $parent = $('body');                                                                                 // 67\n            }                                                                                                        // 68\n            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;               // 69\n        },                                                                                                           // 70\n                                                                                                                     // 71\n        getPageHeight: function(elem) {                                                                              // 72\n            return $(elem).height();                                                                                 // 73\n        },                                                                                                           // 74\n                                                                                                                     // 75\n        settings: {                                                                                                  // 76\n            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below                                              // 77\n            normalizeOffset: true  // calls getBoundingClientRect for each event                                     // 78\n        }                                                                                                            // 79\n    };                                                                                                               // 80\n                                                                                                                     // 81\n    $.fn.extend({                                                                                                    // 82\n        mousewheel: function(fn) {                                                                                   // 83\n            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');                                    // 84\n        },                                                                                                           // 85\n                                                                                                                     // 86\n        unmousewheel: function(fn) {                                                                                 // 87\n            return this.unbind('mousewheel', fn);                                                                    // 88\n        }                                                                                                            // 89\n    });                                                                                                              // 90\n                                                                                                                     // 91\n                                                                                                                     // 92\n    function handler(event) {                                                                                        // 93\n        var orgEvent   = event || window.event,                                                                      // 94\n            args       = slice.call(arguments, 1),                                                                   // 95\n            delta      = 0,                                                                                          // 96\n            deltaX     = 0,                                                                                          // 97\n            deltaY     = 0,                                                                                          // 98\n            absDelta   = 0,                                                                                          // 99\n            offsetX    = 0,                                                                                          // 100\n            offsetY    = 0;                                                                                          // 101\n        event = $.event.fix(orgEvent);                                                                               // 102\n        event.type = 'mousewheel';                                                                                   // 103\n                                                                                                                     // 104\n        // Old school scrollwheel delta                                                                              // 105\n        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }                                     // 106\n        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }                                     // 107\n        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }                                     // 108\n        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }                                     // 109\n                                                                                                                     // 110\n        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event                                         // 111\n        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {                                    // 112\n            deltaX = deltaY * -1;                                                                                    // 113\n            deltaY = 0;                                                                                              // 114\n        }                                                                                                            // 115\n                                                                                                                     // 116\n        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy                              // 117\n        delta = deltaY === 0 ? deltaX : deltaY;                                                                      // 118\n                                                                                                                     // 119\n        // New school wheel delta (wheel event)                                                                      // 120\n        if ( 'deltaY' in orgEvent ) {                                                                                // 121\n            deltaY = orgEvent.deltaY * -1;                                                                           // 122\n            delta  = deltaY;                                                                                         // 123\n        }                                                                                                            // 124\n        if ( 'deltaX' in orgEvent ) {                                                                                // 125\n            deltaX = orgEvent.deltaX;                                                                                // 126\n            if ( deltaY === 0 ) { delta  = deltaX * -1; }                                                            // 127\n        }                                                                                                            // 128\n                                                                                                                     // 129\n        // No change actually happened, no reason to go any further                                                  // 130\n        if ( deltaY === 0 && deltaX === 0 ) { return; }                                                              // 131\n                                                                                                                     // 132\n        // Need to convert lines and pages to pixels if we aren't already in pixels                                  // 133\n        // There are three delta modes:                                                                              // 134\n        //   * deltaMode 0 is by pixels, nothing to do                                                               // 135\n        //   * deltaMode 1 is by lines                                                                               // 136\n        //   * deltaMode 2 is by pages                                                                               // 137\n        if ( orgEvent.deltaMode === 1 ) {                                                                            // 138\n            var lineHeight = $.data(this, 'mousewheel-line-height');                                                 // 139\n            delta  *= lineHeight;                                                                                    // 140\n            deltaY *= lineHeight;                                                                                    // 141\n            deltaX *= lineHeight;                                                                                    // 142\n        } else if ( orgEvent.deltaMode === 2 ) {                                                                     // 143\n            var pageHeight = $.data(this, 'mousewheel-page-height');                                                 // 144\n            delta  *= pageHeight;                                                                                    // 145\n            deltaY *= pageHeight;                                                                                    // 146\n            deltaX *= pageHeight;                                                                                    // 147\n        }                                                                                                            // 148\n                                                                                                                     // 149\n        // Store lowest absolute delta to normalize the delta values                                                 // 150\n        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );                                                   // 151\n                                                                                                                     // 152\n        if ( !lowestDelta || absDelta < lowestDelta ) {                                                              // 153\n            lowestDelta = absDelta;                                                                                  // 154\n                                                                                                                     // 155\n            // Adjust older deltas if necessary                                                                      // 156\n            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {                                                       // 157\n                lowestDelta /= 40;                                                                                   // 158\n            }                                                                                                        // 159\n        }                                                                                                            // 160\n                                                                                                                     // 161\n        // Adjust older deltas if necessary                                                                          // 162\n        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {                                                           // 163\n            // Divide all the things by 40!                                                                          // 164\n            delta  /= 40;                                                                                            // 165\n            deltaX /= 40;                                                                                            // 166\n            deltaY /= 40;                                                                                            // 167\n        }                                                                                                            // 168\n                                                                                                                     // 169\n        // Get a whole, normalized value for the deltas                                                              // 170\n        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);                                       // 171\n        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);                                       // 172\n        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);                                       // 173\n                                                                                                                     // 174\n        // Normalise offsetX and offsetY properties                                                                  // 175\n        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {                                      // 176\n            var boundingRect = this.getBoundingClientRect();                                                         // 177\n            offsetX = event.clientX - boundingRect.left;                                                             // 178\n            offsetY = event.clientY - boundingRect.top;                                                              // 179\n        }                                                                                                            // 180\n                                                                                                                     // 181\n        // Add information to the event object                                                                       // 182\n        event.deltaX = deltaX;                                                                                       // 183\n        event.deltaY = deltaY;                                                                                       // 184\n        event.deltaFactor = lowestDelta;                                                                             // 185\n        event.offsetX = offsetX;                                                                                     // 186\n        event.offsetY = offsetY;                                                                                     // 187\n        // Go ahead and set deltaMode to 0 since we converted to pixels                                              // 188\n        // Although this is a little odd since we overwrite the deltaX/Y                                             // 189\n        // properties with normalized deltas.                                                                        // 190\n        event.deltaMode = 0;                                                                                         // 191\n                                                                                                                     // 192\n        // Add event and delta to the front of the arguments                                                         // 193\n        args.unshift(event, delta, deltaX, deltaY);                                                                  // 194\n                                                                                                                     // 195\n        // Clearout lowestDelta after sometime to better                                                             // 196\n        // handle multiple device types that give different                                                          // 197\n        // a different lowestDelta                                                                                   // 198\n        // Ex: trackpad = 3 and mouse wheel = 120                                                                    // 199\n        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }                                        // 200\n        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);                                                   // 201\n                                                                                                                     // 202\n        return ($.event.dispatch || $.event.handle).apply(this, args);                                               // 203\n    }                                                                                                                // 204\n                                                                                                                     // 205\n    function nullLowestDelta() {                                                                                     // 206\n        lowestDelta = null;                                                                                          // 207\n    }                                                                                                                // 208\n                                                                                                                     // 209\n    function shouldAdjustOldDeltas(orgEvent, absDelta) {                                                             // 210\n        // If this is an older event and the delta is divisable by 120,                                              // 211\n        // then we are assuming that the browser is treating this as an                                              // 212\n        // older mouse wheel event and that we should divide the deltas                                              // 213\n        // by 40 to try and get a more usable deltaFactor.                                                           // 214\n        // Side note, this actually impacts the reported scroll distance                                             // 215\n        // in older browsers and can cause scrolling to be slower than native.                                       // 216\n        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.                    // 217\n        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;           // 218\n    }                                                                                                                // 219\n                                                                                                                     // 220\n}));                                                                                                                 // 221\n                                                                                                                     // 222\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/channikhabra:terminal/terminal.js                                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Write your package code here!                                                                                     // 1\nTerminal = {                                                                                                         // 2\n  term: false                                                                                                        // 3\n};                                                                                                                   // 4\n                                                                                                                     // 5\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/channikhabra:terminal/models.js                                                                          //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  // 1\n * text                             String                                                                           // 2\n * stream                           String [stdout, stderr]                                                          // 3\n * shown                            Boolean                                                                          // 4\n */                                                                                                                  // 5\n                                                                                                                     // 6\nTerminalBufferColl = new Mongo.Collection('terminal_buffer');                                                        // 7\nTerminalBuffer = Model(TerminalBufferColl);                                                                          // 8\n                                                                                                                     // 9\nTerminalBuffer.extend({                                                                                              // 10\n  markShown: function() {                                                                                            // 11\n    this.update({shown: true});                                                                                      // 12\n  }                                                                                                                  // 13\n});                                                                                                                  // 14\n                                                                                                                     // 15\nTerminalBuffer.addToStream = function(options /* {text: 'output', stream: 'stdout/stderr'} */) {                     // 16\n  if (typeof options === 'string') {                                                                                 // 17\n    options = {                                                                                                      // 18\n      text: options,                                                                                                 // 19\n      stream: 'stdout'                                                                                               // 20\n    };                                                                                                               // 21\n  }                                                                                                                  // 22\n                                                                                                                     // 23\n  var buffer = new TerminalBuffer();                                                                                 // 24\n  buffer.text = options.text;                                                                                        // 25\n  buffer.stream = options.stream;                                                                                    // 26\n  buffer.shown = false;                                                                                              // 27\n  buffer.save();                                                                                                     // 28\n};                                                                                                                   // 29\nTerminalBuffer.newEntries = function() {                                                                             // 30\n  return TerminalBufferColl.find({shown: false});                                                                    // 31\n};                                                                                                                   // 32\n                                                                                                                     // 33\n                                                                                                                     // 34\n/**                                                                                                                  // 35\n * Used to maintain state of the terminal. Like pwd. We are spawning individual commands instead of an interactive shell.\n * So we have to maintain the state of shell ourselves and update the state before spawning every command.           // 37\n */                                                                                                                  // 38\nTerminalStateColl = new Mongo.Collection('terminal_state');                                                          // 39\nvar TerminalStateModel = Model(TerminalStateColl);                                                                   // 40\nTerminalState = {                                                                                                    // 41\n  state: function() {                                                                                                // 42\n    var state = TerminalStateColl.find().fetch();                                                                    // 43\n    if(state.length === 0) {                                                                                         // 44\n      console.warn(\"CREATING NEW STATE: If you see an 'insert denied' error below this line, it's perfectly fine.\"); // 45\n      state = new TerminalStateModel();                                                                              // 46\n      state.pwd = '';                                                                                                // 47\n      state.save();                                                                                                  // 48\n    }                                                                                                                // 49\n    return state[0];                                                                                                 // 50\n  },                                                                                                                 // 51\n  pwd: function(newPwd) {                                                                                            // 52\n    if (typeof newPwd !== 'string')                                                                                  // 53\n      return this.state().pwd;                                                                                       // 54\n                                                                                                                     // 55\n    var termState = this.state();                                                                                    // 56\n    if (! termState)                                                                                                 // 57\n      return false;                                                                                                  // 58\n                                                                                                                     // 59\n    termState.update({pwd: newPwd});                                                                                 // 60\n                                                                                                                     // 61\n    return this.state.pwd;                                                                                           // 62\n  },                                                                                                                 // 63\n  shellUser: function(username) {                                                                                    // 64\n    if (typeof username !== 'string')                                                                                // 65\n      return this.state().shell_user;                                                                                // 66\n                                                                                                                     // 67\n    var termState = this.state();                                                                                    // 68\n                                                                                                                     // 69\n    termState.update({shell_user: username});                                                                        // 70\n                                                                                                                     // 71\n    return termState.shell_user;                                                                                     // 72\n  },                                                                                                                 // 73\n  prompt: function() {                                                                                               // 74\n    var termState = this.state(),                                                                                    // 75\n        pwd = this.pwd(),                                                                                            // 76\n        shellUser = this.shellUser(),                                                                                // 77\n        prompt = shellUser + \"@\" + pwd + \"» \";                                                                       // 78\n                                                                                                                     // 79\n    return prompt;                                                                                                   // 80\n  }                                                                                                                  // 81\n};                                                                                                                   // 82\n                                                                                                                     // 83\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/channikhabra:terminal/client/template.template.js                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"terminal\");                                                                                    // 2\nTemplate[\"terminal\"] = new Template(\"Template.terminal\", (function() {                                               // 3\n  var view = this;                                                                                                   // 4\n  return HTML.Raw('<div id=\"shell-panel\">\\n    <div id=\"shell-view\">\\n\\n    </div>\\n  </div>');                      // 5\n}));                                                                                                                 // 6\n                                                                                                                     // 7\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/channikhabra:terminal/client/template.js                                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nTemplate.terminal.rendered = function() {                                                                            // 1\n  var panel = $(\"#shell-panel\");                                                                                     // 2\n                                                                                                                     // 3\n  panel.terminal(function(command, term) {                                                                           // 4\n    command = command.trim();                                                                                        // 5\n    if (command !== '') {                                                                                            // 6\n      Meteor.call(\"terminalRecieveCommand\", command, function(err, res) {                                            // 7\n        if (err)                                                                                                     // 8\n          throw new Error;                                                                                           // 9\n        if(res)                                                                                                      // 10\n          term.echo(res);                                                                                            // 11\n      });                                                                                                            // 12\n    } else {                                                                                                         // 13\n      term.echo('');                                                                                                 // 14\n    }                                                                                                                // 15\n  }, {                                                                                                               // 16\n    greetings: null,                                                                                                 // 17\n    name: 'js_demo',                                                                                                 // 18\n    height: 200,                                                                                                     // 19\n    prompt: 'nuc> ',                                                                                                 // 20\n    onInit: function(term) {                                                                                         // 21\n      Terminal.term = term;                                                                                          // 22\n      term.set_prompt(TerminalState.prompt());                                                                       // 23\n      term.echo('' +                                                                                                 // 24\n                '/$$   /$$                     /$$                                \\n' +                              // 25\n                '| $$$ | $$                    | $$                               \\n' +                              // 26\n                '| $$$$| $$ /$$   /$$  /$$$$$$$| $$  /$$$$$$  /$$   /$$  /$$$$$$$ \\n' +                              // 27\n                '| $$ $$ $$| $$  | $$ /$$_____/| $$ /$$__  $$| $$  | $$ /$$_____/ \\n' +                              // 28\n                '| $$  $$$$| $$  | $$| $$      | $$| $$$$$$$$| $$  | $$|  $$$$$$  \\n' +                              // 29\n                '| $$\\  $$$| $$  | $$| $$      | $$| $$_____/| $$  | $$ \\____  $$ \\n' +                              // 30\n                '| $$ \\  $$|  $$$$$$/|  $$$$$$$| $$|  $$$$$$$|  $$$$$$/ /$$$$$$$/ \\n' +                              // 31\n                '|__/  \\__/ \\______/  \\_______/|__/ \\_______/ \\______/ |_______/  \\n'                                // 32\n               );                                                                                                    // 33\n    }                                                                                                                // 34\n  });                                                                                                                // 35\n};                                                                                                                   // 36\n                                                                                                                     // 37\nTemplate.terminal.helpers({                                                                                          // 38\n                                                                                                                     // 39\n});                                                                                                                  // 40\n                                                                                                                     // 41\n// autorun to push stdin/stderr into the terminal window when activity happens on server                             // 42\nDeps.autorun(function() {                                                                                            // 43\n  if(! TerminalBuffer) return;                                                                                       // 44\n                                                                                                                     // 45\n  var buffer = TerminalBuffer.newEntries();                                                                          // 46\n  buffer.forEach(function(entry) {                                                                                   // 47\n    Terminal.term.echo(entry.text);                                                                                  // 48\n    entry.markShown();                                                                                               // 49\n  });                                                                                                                // 50\n});                                                                                                                  // 51\n                                                                                                                     // 52\n                                                                                                                     // 53\n//autorun to update shell prompt                                                                                     // 54\nDeps.autorun(function() {                                                                                            // 55\n  var termState = TerminalState.state();                                                                             // 56\n                                                                                                                     // 57\n  if(!Terminal.term || !termState) return;                                                                           // 58\n                                                                                                                     // 59\n  Terminal.term.set_prompt(TerminalState.prompt());                                                                  // 60\n});                                                                                                                  // 61\n                                                                                                                     // 62\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/channikhabra:terminal/client/subscriptions.js                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nMeteor.subscribe(\"all_terminal\");                                                                                    // 1\n                                                                                                                     // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['channikhabra:terminal'] = {}, {\n  Terminal: Terminal,\n  TerminalBuffer: TerminalBuffer\n});\n\n})();\n","servePath":"/packages/channikhabra_terminal.js"}]