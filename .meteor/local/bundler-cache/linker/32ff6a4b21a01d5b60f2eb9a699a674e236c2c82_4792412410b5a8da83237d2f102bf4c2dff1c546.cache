[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Google;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"google-oauth\":{\"google_client.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/google-oauth/google_client.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Google = require(\"./namespace.js\");                                                                                // 1\n                                                                                                                       //\nvar ILLEGAL_PARAMETERS = {                                                                                             // 3\n  'response_type': 1,                                                                                                  // 4\n  'client_id': 1,                                                                                                      // 5\n  'scope': 1,                                                                                                          // 6\n  'redirect_uri': 1,                                                                                                   // 7\n  'state': 1                                                                                                           // 8\n}; // Request Google credentials for the user                                                                          // 3\n// @param options {optional}                                                                                           // 12\n// @param credentialRequestCompleteCallback {Function} Callback function to call on                                    // 13\n//   completion. Takes one argument, credentialToken on success, or Error on                                           // 14\n//   error.                                                                                                            // 15\n                                                                                                                       //\nGoogle.requestCredential = function (options, credentialRequestCompleteCallback) {                                     // 16\n  // support both (options, callback) and (callback).                                                                  // 17\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {                                           // 18\n    credentialRequestCompleteCallback = options;                                                                       // 19\n    options = {};                                                                                                      // 20\n  } else if (!options) {                                                                                               // 21\n    options = {};                                                                                                      // 22\n  }                                                                                                                    // 23\n                                                                                                                       //\n  var config = ServiceConfiguration.configurations.findOne({                                                           // 25\n    service: 'google'                                                                                                  // 25\n  });                                                                                                                  // 25\n                                                                                                                       //\n  if (!config) {                                                                                                       // 26\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());    // 27\n    return;                                                                                                            // 29\n  }                                                                                                                    // 30\n                                                                                                                       //\n  var credentialToken = Random.secret(); // we need the email scope to get user id from google.                        // 32\n                                                                                                                       //\n  var requiredScopes = {                                                                                               // 35\n    'email': 1                                                                                                         // 35\n  };                                                                                                                   // 35\n  var scopes = options.requestPermissions || ['profile'];                                                              // 36\n  scopes.forEach(function (scope) {                                                                                    // 37\n    requiredScopes[scope] = 1;                                                                                         // 38\n  });                                                                                                                  // 39\n  scopes = Object.keys(requiredScopes);                                                                                // 40\n  var loginUrlParameters = {};                                                                                         // 42\n                                                                                                                       //\n  if (config.loginUrlParameters) {                                                                                     // 43\n    Object.assign(loginUrlParameters, config.loginUrlParameters);                                                      // 44\n  }                                                                                                                    // 45\n                                                                                                                       //\n  if (options.loginUrlParameters) {                                                                                    // 46\n    Object.assign(loginUrlParameters, options.loginUrlParameters);                                                     // 47\n  } // validate options keys                                                                                           // 48\n                                                                                                                       //\n                                                                                                                       //\n  Object.keys(loginUrlParameters).forEach(function (key) {                                                             // 51\n    if (ILLEGAL_PARAMETERS.hasOwnProperty(key)) {                                                                      // 52\n      throw new Error(\"Google.requestCredential: Invalid loginUrlParameter: \" + key);                                  // 53\n    }                                                                                                                  // 54\n  }); // backwards compatible options                                                                                  // 55\n                                                                                                                       //\n  if (options.requestOfflineToken != null) {                                                                           // 58\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online';                               // 59\n  }                                                                                                                    // 60\n                                                                                                                       //\n  if (options.prompt != null) {                                                                                        // 61\n    loginUrlParameters.prompt = options.prompt;                                                                        // 62\n  } else if (options.forceApprovalPrompt) {                                                                            // 63\n    loginUrlParameters.prompt = 'consent';                                                                             // 64\n  }                                                                                                                    // 65\n                                                                                                                       //\n  if (options.loginHint) {                                                                                             // 67\n    loginUrlParameters.login_hint = options.loginHint;                                                                 // 68\n  }                                                                                                                    // 69\n                                                                                                                       //\n  var loginStyle = OAuth._loginStyle('google', config, options); // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n                                                                                                                       //\n                                                                                                                       //\n  Object.assign(loginUrlParameters, {                                                                                  // 73\n    \"response_type\": \"code\",                                                                                           // 74\n    \"client_id\": config.clientId,                                                                                      // 75\n    \"scope\": scopes.join(' '),                                                                                         // 76\n    // space delimited                                                                                                 // 76\n    \"redirect_uri\": OAuth._redirectUri('google', config),                                                              // 77\n    \"state\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)                                       // 78\n  });                                                                                                                  // 73\n  var loginUrl = 'https://accounts.google.com/o/oauth2/auth?' + Object.keys(loginUrlParameters).map(function (param) {\n    return encodeURIComponent(param) + '=' + encodeURIComponent(loginUrlParameters[param]);                            // 82\n  }).join(\"&\");                                                                                                        // 84\n  OAuth.launchLogin({                                                                                                  // 86\n    loginService: \"google\",                                                                                            // 87\n    loginStyle: loginStyle,                                                                                            // 88\n    loginUrl: loginUrl,                                                                                                // 89\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,                                              // 90\n    credentialToken: credentialToken,                                                                                  // 91\n    popupOptions: {                                                                                                    // 92\n      height: 600                                                                                                      // 92\n    }                                                                                                                  // 92\n  });                                                                                                                  // 86\n};                                                                                                                     // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"google_sign-in.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/google-oauth/google_sign-in.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Google = require(\"./namespace.js\");                                                                                // 1\n                                                                                                                       //\nvar gplusPromise = new Promise(function (resolve, reject) {                                                            // 3\n  if (!Meteor.isCordova) {                                                                                             // 4\n    reject(new Error(\"plugins.googleplus requires Cordova\"));                                                          // 5\n    return;                                                                                                            // 6\n  }                                                                                                                    // 7\n                                                                                                                       //\n  Meteor.startup(function () {                                                                                         // 9\n    var plugins = global.plugins;                                                                                      // 10\n    var gplus = plugins && plugins.googleplus;                                                                         // 11\n                                                                                                                       //\n    if (gplus) {                                                                                                       // 12\n      resolve(gplus);                                                                                                  // 13\n    } else {                                                                                                           // 14\n      reject(new Error(\"plugins.googleplus not defined\"));                                                             // 15\n    }                                                                                                                  // 16\n  });                                                                                                                  // 17\n});                                                                                                                    // 18\n                                                                                                                       //\nfunction tolerateUnhandledRejection() {}                                                                               // 20\n                                                                                                                       //\ngplusPromise.catch(tolerateUnhandledRejection); // After 20 April 2017, Google OAuth login will no longer work from a  // 21\n// WebView, so Cordova apps must use Google Sign-In instead.                                                           // 24\n// https://github.com/meteor/meteor/issues/8253                                                                        // 25\n                                                                                                                       //\nexports.signIn = Google.signIn = function (options, callback) {                                                        // 26\n  // support a callback without options                                                                                // 27\n  if (!callback && typeof options === \"function\") {                                                                    // 28\n    callback = options;                                                                                                // 29\n    options = null;                                                                                                    // 30\n  }                                                                                                                    // 31\n                                                                                                                       //\n  gplusPromise.then(function (gplus) {                                                                                 // 33\n    var config = ServiceConfiguration.configurations.findOne({                                                         // 34\n      service: \"google\"                                                                                                // 35\n    });                                                                                                                // 34\n                                                                                                                       //\n    if (!config) {                                                                                                     // 38\n      throw new ServiceConfiguration.ConfigError();                                                                    // 39\n    }                                                                                                                  // 40\n                                                                                                                       //\n    options = Object.assign(Object.create(null), options);                                                             // 42\n    gplus.login({                                                                                                      // 44\n      scopes: getScopes(options).join(\" \"),                                                                            // 45\n      webClientId: config.clientId,                                                                                    // 46\n      offline: true                                                                                                    // 47\n    }, function (response) {                                                                                           // 44\n      Accounts.callLoginMethod({                                                                                       // 49\n        methodArguments: [Object.assign({                                                                              // 50\n          googleSignIn: true                                                                                           // 51\n        }, response)],                                                                                                 // 50\n        userCallback: callback                                                                                         // 53\n      });                                                                                                              // 49\n    }, callback);                                                                                                      // 55\n  }).catch(callback);                                                                                                  // 57\n};                                                                                                                     // 58\n                                                                                                                       //\nfunction getScopes(options) {                                                                                          // 60\n  // we need the email scope to get user id from google.                                                               // 61\n  var requiredScopes = {                                                                                               // 62\n    'email': 1                                                                                                         // 62\n  };                                                                                                                   // 62\n  var scopes = options.requestPermissions || ['profile'];                                                              // 63\n  scopes.forEach(function (scope) {                                                                                    // 65\n    requiredScopes[scope] = 1;                                                                                         // 66\n  });                                                                                                                  // 67\n  return Object.keys(requiredScopes);                                                                                  // 69\n}                                                                                                                      // 70\n                                                                                                                       //\nexports.signOut = Google.signOut = function () {                                                                       // 72\n  return gplusPromise.then(function (gplus) {                                                                          // 73\n    return new Promise(function (resolve) {                                                                            // 74\n      gplus.logout(resolve);                                                                                           // 75\n    });                                                                                                                // 76\n  });                                                                                                                  // 77\n}; // Make sure we don't stay logged in with Google Sign-In after the client                                           // 78\n// calls Meteor.logout().                                                                                              // 81\n                                                                                                                       //\n                                                                                                                       //\nMeteor.startup(function () {                                                                                           // 82\n  Accounts.onLogout(function () {                                                                                      // 83\n    Google.signOut().catch(tolerateUnhandledRejection);                                                                // 84\n  });                                                                                                                  // 85\n});                                                                                                                    // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"namespace.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/google-oauth/namespace.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// The module.exports object of this module becomes the Google namespace                                               // 1\n// for other modules in this package.                                                                                  // 2\nGoogle = module.exports; // So that api.export finds the \"Google\" property.                                            // 3\n                                                                                                                       //\nGoogle.Google = Google;                                                                                                // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./node_modules/meteor/google-oauth/google_client.js\");\nrequire(\"./node_modules/meteor/google-oauth/google_sign-in.js\");\nvar exports = require(\"./node_modules/meteor/google-oauth/namespace.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['google-oauth'] = exports, {\n  Google: Google\n});\n\n})();\n","servePath":"/packages/google-oauth.js","sourceMap":{"version":3,"sources":["packages/google-oauth/google_client.js","packages/google-oauth/google_sign-in.js","packages/google-oauth/namespace.js"],"names":["Google","require","ILLEGAL_PARAMETERS","requestCredential","options","credentialRequestCompleteCallback","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","requiredScopes","scopes","requestPermissions","forEach","scope","Object","keys","loginUrlParameters","assign","key","hasOwnProperty","Error","requestOfflineToken","access_type","prompt","forceApprovalPrompt","loginHint","login_hint","loginStyle","OAuth","_loginStyle","clientId","join","_redirectUri","_stateParam","redirectUrl","loginUrl","map","param","encodeURIComponent","launchLogin","loginService","popupOptions","height","gplusPromise","Promise","resolve","reject","Meteor","isCordova","startup","plugins","global","gplus","googleplus","tolerateUnhandledRejection","catch","exports","signIn","callback","then","create","login","getScopes","webClientId","offline","response","Accounts","callLoginMethod","methodArguments","googleSignIn","userCallback","signOut","logout","onLogout","module"],"mappings":"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","file":"/packages/google-oauth.js","sourcesContent":["var Google = require(\"./namespace.js\");\n\nvar ILLEGAL_PARAMETERS = {\n  'response_type': 1,\n  'client_id': 1,\n  'scope': 1,\n  'redirect_uri': 1,\n  'state': 1\n};\n\n// Request Google credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGoogle.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  var credentialToken = Random.secret();\n\n  // we need the email scope to get user id from google.\n  var requiredScopes = { 'email': 1 };\n  var scopes = options.requestPermissions || ['profile'];\n  scopes.forEach(function (scope) {\n    requiredScopes[scope] = 1;\n  });\n  scopes = Object.keys(requiredScopes);\n\n  var loginUrlParameters = {};\n  if (config.loginUrlParameters){\n    Object.assign(loginUrlParameters, config.loginUrlParameters);\n  }\n  if (options.loginUrlParameters){\n    Object.assign(loginUrlParameters, options.loginUrlParameters);\n  }\n\n  // validate options keys\n  Object.keys(loginUrlParameters).forEach(function (key) {\n    if (ILLEGAL_PARAMETERS.hasOwnProperty(key)) {\n      throw new Error(\"Google.requestCredential: Invalid loginUrlParameter: \" + key);\n    }\n  });\n\n  // backwards compatible options\n  if (options.requestOfflineToken != null){\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online'\n  }\n  if (options.prompt != null) {\n    loginUrlParameters.prompt = options.prompt;\n  } else if (options.forceApprovalPrompt) {\n    loginUrlParameters.prompt = 'consent'\n  }\n\n  if (options.loginHint) {\n    loginUrlParameters.login_hint = options.loginHint;\n  }\n\n  var loginStyle = OAuth._loginStyle('google', config, options);\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n  Object.assign(loginUrlParameters, {\n    \"response_type\": \"code\",\n    \"client_id\":  config.clientId,\n    \"scope\": scopes.join(' '), // space delimited\n    \"redirect_uri\": OAuth._redirectUri('google', config),\n    \"state\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)\n  });\n  var loginUrl = 'https://accounts.google.com/o/oauth2/auth?' +\n    Object.keys(loginUrlParameters).map(function (param) {\n      return encodeURIComponent(param) + '=' +\n        encodeURIComponent(loginUrlParameters[param]);\n    }).join(\"&\");\n\n  OAuth.launchLogin({\n    loginService: \"google\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken,\n    popupOptions: { height: 600 }\n  });\n};\n","var Google = require(\"./namespace.js\");\n\nvar gplusPromise = new Promise(function (resolve, reject) {\n  if (! Meteor.isCordova) {\n    reject(new Error(\"plugins.googleplus requires Cordova\"));\n    return;\n  }\n\n  Meteor.startup(function () {\n    var plugins = global.plugins;\n    var gplus = plugins && plugins.googleplus;\n    if (gplus) {\n      resolve(gplus);\n    } else {\n      reject(new Error(\"plugins.googleplus not defined\"));\n    }\n  });\n});\n\nfunction tolerateUnhandledRejection() {}\ngplusPromise.catch(tolerateUnhandledRejection);\n\n// After 20 April 2017, Google OAuth login will no longer work from a\n// WebView, so Cordova apps must use Google Sign-In instead.\n// https://github.com/meteor/meteor/issues/8253\nexports.signIn = Google.signIn = function (options, callback) {\n  // support a callback without options\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n\n  gplusPromise.then(function (gplus) {\n    var config = ServiceConfiguration.configurations.findOne({\n      service: \"google\"\n    });\n\n    if (! config) {\n      throw new ServiceConfiguration.ConfigError();\n    }\n\n    options = Object.assign(Object.create(null), options);\n\n    gplus.login({\n      scopes: getScopes(options).join(\" \"),\n      webClientId: config.clientId,\n      offline: true\n    }, function (response) {\n      Accounts.callLoginMethod({\n        methodArguments: [Object.assign({\n          googleSignIn: true\n        }, response)],\n        userCallback: callback\n      });\n    }, callback);\n\n  }).catch(callback);\n};\n\nfunction getScopes(options) {\n  // we need the email scope to get user id from google.\n  var requiredScopes = { 'email': 1 };\n  var scopes = options.requestPermissions || ['profile'];\n\n  scopes.forEach(function (scope) {\n    requiredScopes[scope] = 1;\n  });\n\n  return Object.keys(requiredScopes);\n}\n\nexports.signOut = Google.signOut = function () {\n  return gplusPromise.then(function (gplus) {\n    return new Promise(function (resolve) {\n      gplus.logout(resolve);\n    });\n  });\n};\n\n// Make sure we don't stay logged in with Google Sign-In after the client\n// calls Meteor.logout().\nMeteor.startup(function () {\n  Accounts.onLogout(function () {\n    Google.signOut().catch(tolerateUnhandledRejection);\n  });\n});\n","// The module.exports object of this module becomes the Google namespace\n// for other modules in this package.\nGoogle = module.exports;\n\n// So that api.export finds the \"Google\" property.\nGoogle.Google = Google;\n"]}}]