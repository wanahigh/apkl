[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n/* Package-scope variables */\nvar s, ar;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jquery-layout/packages/jquery-layout.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jquery-layout/jquery.layout.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n                                                                                                                   // 1\n * @preserve\n                                                                                                          // 2\n * jquery.layout 1.3.0 - Release Candidate 30.79\n                                                                      // 3\n * $Date: 2013-01-12 08:00:00 (Sat, 12 Jan 2013) $\n                                                                    // 4\n * $Rev: 303007 $\n                                                                                                     // 5\n *\n                                                                                                                    // 6\n * Copyright (c) 2012 \n                                                                                                // 7\n *   Fabrizio Balliano (http://www.fabrizioballiano.net)\n                                                              // 8\n *   Kevin Dalman (http://allpro.net)\n                                                                                 // 9\n *\n                                                                                                                    // 10\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\n                                                 // 11\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\n                                             // 12\n *\n                                                                                                                    // 13\n * Changelog: http://layout.jquery-dev.net/changelog.cfm#1.3.0.rc30.79\n                                                // 14\n *\n                                                                                                                    // 15\n * Docs: http://layout.jquery-dev.net/documentation.html\n                                                              // 16\n * Tips: http://layout.jquery-dev.net/tips.html\n                                                                       // 17\n * Help: http://groups.google.com/group/jquery-ui-layout\n                                                              // 18\n */\n                                                                                                                   // 19\n\n                                                                                                                      // 20\n/* JavaDoc Info: http://code.google.com/closure/compiler/docs/js-for-compiler.html\n                                    // 21\n * {!Object}\tnon-nullable type (never NULL)\n                                                                           // 22\n * {?string}\tnullable type (sometimes NULL) - default for {Object}\n                                                    // 23\n * {number=}\toptional parameter\n                                                                                       // 24\n * {*}\t\t\tALL types\n                                                                                                    // 25\n */\n                                                                                                                   // 26\n/*\tTODO for jQ 2.0 \n                                                                                                   // 27\n *\tchange .andSelf() to .addBack()\n                                                                                    // 28\n *\t$.fn.disableSelection won't work\n                                                                                   // 29\n */\n                                                                                                                   // 30\n\n                                                                                                                      // 31\n// NOTE: For best readability, view with a fixed-width font and tabs equal to 4-chars\n                                 // 32\n\n                                                                                                                      // 33\n;(function ($) {\n                                                                                                      // 34\n\n                                                                                                                      // 35\n// alias Math methods - used a lot!\n                                                                                   // 36\nvar\tmin\t\t= Math.min\n                                                                                                   // 37\n,\tmax\t\t= Math.max\n                                                                                                     // 38\n,\tround\t= Math.floor\n                                                                                                  // 39\n\n                                                                                                                      // 40\n,\tisStr\t=  function (v) { return $.type(v) === \"string\"; }\n                                                            // 41\n\n                                                                                                                      // 42\n\t/**\n                                                                                                                  // 43\n\t* @param {!Object}\t\t\tInstance\n                                                                                        // 44\n\t* @param {Array.<string>}\ta_fn\n                                                                                       // 45\n\t*/\n                                                                                                                   // 46\n,\trunPluginCallbacks = function (Instance, a_fn) {\n                                                                    // 47\n\t\tif ($.isArray(a_fn))\n                                                                                                // 48\n\t\t\tfor (var i=0, c=a_fn.length; i<c; i++) {\n                                                                           // 49\n\t\t\t\tvar fn = a_fn[i];\n                                                                                                 // 50\n\t\t\t\ttry {\n                                                                                                             // 51\n\t\t\t\t\tif (isStr(fn)) // 'name' of a function\n                                                                           // 52\n\t\t\t\t\t\tfn = eval(fn);\n                                                                                                  // 53\n\t\t\t\t\tif ($.isFunction(fn))\n                                                                                            // 54\n\t\t\t\t\t\tg(fn)( Instance );\n                                                                                              // 55\n\t\t\t\t} catch (ex) {}\n                                                                                                   // 56\n\t\t\t}\n                                                                                                                  // 57\n\t\tfunction g (f) { return f; }; // compiler hack\n                                                                      // 58\n\t}\n                                                                                                                    // 59\n;\n                                                                                                                     // 60\n\n                                                                                                                      // 61\n/*\n                                                                                                                    // 62\n *\tGENERIC $.layout METHODS - used by all layouts\n                                                                     // 63\n */\n                                                                                                                   // 64\n$.layout = {\n                                                                                                          // 65\n\n                                                                                                                      // 66\n\tversion:\t\"1.3.rc30.79\"\n                                                                                               // 67\n,\trevision:\t0.033007 // 1.3.0 final = 1.0300 - major(n+).minor(nn)+patch(nn+)\n                                         // 68\n\n                                                                                                                      // 69\n\t// $.layout.browser REPLACES $.browser\n                                                                               // 70\n,\tbrowser:\t{} // set below\n                                                                                            // 71\n\n                                                                                                                      // 72\n\t// *PREDEFINED* EFFECTS & DEFAULTS \n                                                                                  // 73\n\t// MUST list effect here - OR MUST set an fxSettings option (can be an empty hash: {})\n                               // 74\n,\teffects: {\n                                                                                                          // 75\n\n                                                                                                                      // 76\n\t//\tPane Open/Close Animations\n                                                                                        // 77\n\t\tslide: {\n                                                                                                            // 78\n\t\t\tall:\t{ duration:  \"fast\"\t} // eg: duration: 1000, easing: \"easeOutBounce\"\n                                          // 79\n\t\t,\tnorth:\t{ direction: \"up\"\t}\n                                                                                        // 80\n\t\t,\tsouth:\t{ direction: \"down\"\t}\n                                                                                      // 81\n\t\t,\teast:\t{ direction: \"right\"}\n                                                                                       // 82\n\t\t,\twest:\t{ direction: \"left\"\t}\n                                                                                       // 83\n\t\t}\n                                                                                                                   // 84\n\t,\tdrop: {\n                                                                                                            // 85\n\t\t\tall:\t{ duration:  \"slow\"\t}\n                                                                                         // 86\n\t\t,\tnorth:\t{ direction: \"up\"\t}\n                                                                                        // 87\n\t\t,\tsouth:\t{ direction: \"down\"\t}\n                                                                                      // 88\n\t\t,\teast:\t{ direction: \"right\"}\n                                                                                       // 89\n\t\t,\twest:\t{ direction: \"left\"\t}\n                                                                                       // 90\n\t\t}\n                                                                                                                   // 91\n\t,\tscale: {\n                                                                                                           // 92\n\t\t\tall:\t{ duration:\t\"fast\"\t}\n                                                                                          // 93\n\t\t}\n                                                                                                                   // 94\n\t//\tthese are not recommended, but can be used\n                                                                        // 95\n\t,\tblind:\t\t{}\n                                                                                                         // 96\n\t,\tclip:\t\t{}\n                                                                                                          // 97\n\t,\texplode:\t{}\n                                                                                                        // 98\n\t,\tfade:\t\t{}\n                                                                                                          // 99\n\t,\tfold:\t\t{}\n                                                                                                          // 100\n\t,\tpuff:\t\t{}\n                                                                                                          // 101\n\n                                                                                                                      // 102\n\t//\tPane Resize Animations\n                                                                                            // 103\n\t,\tsize: {\n                                                                                                            // 104\n\t\t\tall:\t{ easing:\t\"swing\"\t}\n                                                                                           // 105\n\t\t}\n                                                                                                                   // 106\n\t}\n                                                                                                                    // 107\n\n                                                                                                                      // 108\n\t// INTERNAL CONFIG DATA - DO NOT CHANGE THIS!\n                                                                        // 109\n,\tconfig: {\n                                                                                                           // 110\n\t\toptionRootKeys:\t\"effects,panes,north,south,west,east,center\".split(\",\")\n                                             // 111\n\t,\tallPanes:\t\t\"north,south,west,east,center\".split(\",\")\n                                                               // 112\n\t,\tborderPanes:\t\"north,south,west,east\".split(\",\")\n                                                                    // 113\n\t,\toppositeEdge: {\n                                                                                                    // 114\n\t\t\tnorth:\t\"south\"\n                                                                                                     // 115\n\t\t,\tsouth:\t\"north\"\n                                                                                                    // 116\n\t\t,\teast: \t\"west\"\n                                                                                                     // 117\n\t\t,\twest: \t\"east\"\n                                                                                                     // 118\n\t\t}\n                                                                                                                   // 119\n\t//\toffscreen data\n                                                                                                    // 120\n\t,\toffscreenCSS:\t{ left: \"-99999px\", right: \"auto\" } // used by hide/close if useOffscreenClose=true\n                  // 121\n\t,\toffscreenReset:\t\"offscreenReset\" // key used for data\n                                                              // 122\n\t//\tCSS used in multiple places\n                                                                                       // 123\n\t,\thidden:\t\t{ visibility: \"hidden\" }\n                                                                                  // 124\n\t,\tvisible:\t{ visibility: \"visible\" }\n                                                                                 // 125\n\t//\tlayout element settings\n                                                                                           // 126\n\t,\tresizers: {\n                                                                                                        // 127\n\t\t\tcssReq: {\n                                                                                                          // 128\n\t\t\t\tposition: \t\"absolute\"\n                                                                                             // 129\n\t\t\t,\tpadding: \t0\n                                                                                                      // 130\n\t\t\t,\tmargin: \t0\n                                                                                                       // 131\n\t\t\t,\tfontSize:\t\"1px\"\n                                                                                                  // 132\n\t\t\t,\ttextAlign:\t\"left\"\t// to counter-act \"center\" alignment!\n                                                          // 133\n\t\t\t,\toverflow: \t\"hidden\" // prevent toggler-button from overflowing\n                                                   // 134\n\t\t\t//\tSEE $.layout.defaults.zIndexes.resizer_normal\n                                                                   // 135\n\t\t\t}\n                                                                                                                  // 136\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\n                                            // 137\n\t\t\t\tbackground: \"#DDD\"\n                                                                                                // 138\n\t\t\t,\tborder:\t\t\"none\"\n                                                                                                  // 139\n\t\t\t}\n                                                                                                                  // 140\n\t\t}\n                                                                                                                   // 141\n\t,\ttogglers: {\n                                                                                                        // 142\n\t\t\tcssReq: {\n                                                                                                          // 143\n\t\t\t\tposition: \t\"absolute\"\n                                                                                             // 144\n\t\t\t,\tdisplay: \t\"block\"\n                                                                                                // 145\n\t\t\t,\tpadding: \t0\n                                                                                                      // 146\n\t\t\t,\tmargin: \t0\n                                                                                                       // 147\n\t\t\t,\toverflow:\t\"hidden\"\n                                                                                               // 148\n\t\t\t,\ttextAlign:\t\"center\"\n                                                                                              // 149\n\t\t\t,\tfontSize:\t\"1px\"\n                                                                                                  // 150\n\t\t\t,\tcursor: \t\"pointer\"\n                                                                                               // 151\n\t\t\t,\tzIndex: \t1\n                                                                                                       // 152\n\t\t\t}\n                                                                                                                  // 153\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\n                                            // 154\n\t\t\t\tbackground: \"#AAA\"\n                                                                                                // 155\n\t\t\t}\n                                                                                                                  // 156\n\t\t}\n                                                                                                                   // 157\n\t,\tcontent: {\n                                                                                                         // 158\n\t\t\tcssReq: {\n                                                                                                          // 159\n\t\t\t\tposition:\t\"relative\" /* contain floated or positioned elements */\n                                                 // 160\n\t\t\t}\n                                                                                                                  // 161\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\n                                            // 162\n\t\t\t\toverflow:\t\"auto\"\n                                                                                                  // 163\n\t\t\t,\tpadding:\t\"10px\"\n                                                                                                  // 164\n\t\t\t}\n                                                                                                                  // 165\n\t\t,\tcssDemoPane: { // DEMO CSS - REMOVE scrolling from 'pane' when it has a content-div\n                               // 166\n\t\t\t\toverflow:\t\"hidden\"\n                                                                                                // 167\n\t\t\t,\tpadding:\t0\n                                                                                                       // 168\n\t\t\t}\n                                                                                                                  // 169\n\t\t}\n                                                                                                                   // 170\n\t,\tpanes: { // defaults for ALL panes - overridden by 'per-pane settings' below\n                                       // 171\n\t\t\tcssReq: {\n                                                                                                          // 172\n\t\t\t\tposition: \t\"absolute\"\n                                                                                             // 173\n\t\t\t,\tmargin:\t\t0\n                                                                                                       // 174\n\t\t\t//\t$.layout.defaults.zIndexes.pane_normal\n                                                                          // 175\n\t\t\t}\n                                                                                                                  // 176\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\n                                            // 177\n\t\t\t\tpadding:\t\"10px\"\n                                                                                                   // 178\n\t\t\t,\tbackground:\t\"#FFF\"\n                                                                                               // 179\n\t\t\t,\tborder:\t\t\"1px solid #BBB\"\n                                                                                        // 180\n\t\t\t,\toverflow:\t\"auto\"\n                                                                                                 // 181\n\t\t\t}\n                                                                                                                  // 182\n\t\t}\n                                                                                                                   // 183\n\t,\tnorth: {\n                                                                                                           // 184\n\t\t\tside:\t\t\t\"top\"\n                                                                                                      // 185\n\t\t,\tsizeType:\t\t\"Height\"\n                                                                                               // 186\n\t\t,\tdir:\t\t\t\"horz\"\n                                                                                                     // 187\n\t\t,\tcssReq: {\n                                                                                                         // 188\n\t\t\t\ttop: \t\t0\n                                                                                                          // 189\n\t\t\t,\tbottom: \t\"auto\"\n                                                                                                  // 190\n\t\t\t,\tleft: \t\t0\n                                                                                                        // 191\n\t\t\t,\tright: \t\t0\n                                                                                                       // 192\n\t\t\t,\twidth: \t\t\"auto\"\n                                                                                                  // 193\n\t\t\t//\theight: \tDYNAMIC\n                                                                                                // 194\n\t\t\t}\n                                                                                                                  // 195\n\t\t}\n                                                                                                                   // 196\n\t,\tsouth: {\n                                                                                                           // 197\n\t\t\tside:\t\t\t\"bottom\"\n                                                                                                   // 198\n\t\t,\tsizeType:\t\t\"Height\"\n                                                                                               // 199\n\t\t,\tdir:\t\t\t\"horz\"\n                                                                                                     // 200\n\t\t,\tcssReq: {\n                                                                                                         // 201\n\t\t\t\ttop: \t\t\"auto\"\n                                                                                                     // 202\n\t\t\t,\tbottom: \t0\n                                                                                                       // 203\n\t\t\t,\tleft: \t\t0\n                                                                                                        // 204\n\t\t\t,\tright: \t\t0\n                                                                                                       // 205\n\t\t\t,\twidth: \t\t\"auto\"\n                                                                                                  // 206\n\t\t\t//\theight: \tDYNAMIC\n                                                                                                // 207\n\t\t\t}\n                                                                                                                  // 208\n\t\t}\n                                                                                                                   // 209\n\t,\teast: {\n                                                                                                            // 210\n\t\t\tside:\t\t\t\"right\"\n                                                                                                    // 211\n\t\t,\tsizeType:\t\t\"Width\"\n                                                                                                // 212\n\t\t,\tdir:\t\t\t\"vert\"\n                                                                                                     // 213\n\t\t,\tcssReq: {\n                                                                                                         // 214\n\t\t\t\tleft: \t\t\"auto\"\n                                                                                                    // 215\n\t\t\t,\tright: \t\t0\n                                                                                                       // 216\n\t\t\t,\ttop: \t\t\"auto\" // DYNAMIC\n                                                                                         // 217\n\t\t\t,\tbottom: \t\"auto\" // DYNAMIC\n                                                                                       // 218\n\t\t\t,\theight: \t\"auto\"\n                                                                                                  // 219\n\t\t\t//\twidth: \t\tDYNAMIC\n                                                                                                // 220\n\t\t\t}\n                                                                                                                  // 221\n\t\t}\n                                                                                                                   // 222\n\t,\twest: {\n                                                                                                            // 223\n\t\t\tside:\t\t\t\"left\"\n                                                                                                     // 224\n\t\t,\tsizeType:\t\t\"Width\"\n                                                                                                // 225\n\t\t,\tdir:\t\t\t\"vert\"\n                                                                                                     // 226\n\t\t,\tcssReq: {\n                                                                                                         // 227\n\t\t\t\tleft: \t\t0\n                                                                                                         // 228\n\t\t\t,\tright: \t\t\"auto\"\n                                                                                                  // 229\n\t\t\t,\ttop: \t\t\"auto\" // DYNAMIC\n                                                                                         // 230\n\t\t\t,\tbottom: \t\"auto\" // DYNAMIC\n                                                                                       // 231\n\t\t\t,\theight: \t\"auto\"\n                                                                                                  // 232\n\t\t\t//\twidth: \t\tDYNAMIC\n                                                                                                // 233\n\t\t\t}\n                                                                                                                  // 234\n\t\t}\n                                                                                                                   // 235\n\t,\tcenter: {\n                                                                                                          // 236\n\t\t\tdir:\t\t\t\"center\"\n                                                                                                    // 237\n\t\t,\tcssReq: {\n                                                                                                         // 238\n\t\t\t\tleft: \t\t\"auto\" // DYNAMIC\n                                                                                         // 239\n\t\t\t,\tright: \t\t\"auto\" // DYNAMIC\n                                                                                       // 240\n\t\t\t,\ttop: \t\t\"auto\" // DYNAMIC\n                                                                                         // 241\n\t\t\t,\tbottom: \t\"auto\" // DYNAMIC\n                                                                                       // 242\n\t\t\t,\theight: \t\"auto\"\n                                                                                                  // 243\n\t\t\t,\twidth: \t\t\"auto\"\n                                                                                                  // 244\n\t\t\t}\n                                                                                                                  // 245\n\t\t}\n                                                                                                                   // 246\n\t}\n                                                                                                                    // 247\n\n                                                                                                                      // 248\n\t// CALLBACK FUNCTION NAMESPACE - used to store reusable callback functions\n                                           // 249\n,\tcallbacks: {}\n                                                                                                       // 250\n\n                                                                                                                      // 251\n,\tgetParentPaneElem: function (el) {\n                                                                                  // 252\n\t\t// must pass either a container or pane element\n                                                                     // 253\n\t\tvar $el = $(el)\n                                                                                                     // 254\n\t\t,\tlayout = $el.data(\"layout\") || $el.data(\"parentLayout\");\n                                                          // 255\n\t\tif (layout) {\n                                                                                                       // 256\n\t\t\tvar $cont = layout.container;\n                                                                                      // 257\n\t\t\t// see if this container is directly-nested inside an outer-pane\n                                                   // 258\n\t\t\tif ($cont.data(\"layoutPane\")) return $cont;\n                                                                        // 259\n\t\t\tvar $pane = $cont.closest(\".\"+ $.layout.defaults.panes.paneClass);\n                                                 // 260\n\t\t\t// if a pane was found, return it\n                                                                                  // 261\n\t\t\tif ($pane.data(\"layoutPane\")) return $pane;\n                                                                        // 262\n\t\t}\n                                                                                                                   // 263\n\t\treturn null;\n                                                                                                        // 264\n\t}\n                                                                                                                    // 265\n\n                                                                                                                      // 266\n,\tgetParentPaneInstance: function (el) {\n                                                                              // 267\n\t\t// must pass either a container or pane element\n                                                                     // 268\n\t\tvar $pane = $.layout.getParentPaneElem(el);\n                                                                         // 269\n\t\treturn $pane ? $pane.data(\"layoutPane\") : null;\n                                                                     // 270\n\t}\n                                                                                                                    // 271\n\n                                                                                                                      // 272\n,\tgetParentLayoutInstance: function (el) {\n                                                                            // 273\n\t\t// must pass either a container or pane element\n                                                                     // 274\n\t\tvar $pane = $.layout.getParentPaneElem(el);\n                                                                         // 275\n\t\treturn $pane ? $pane.data(\"parentLayout\") : null;\n                                                                   // 276\n\t}\n                                                                                                                    // 277\n\n                                                                                                                      // 278\n,\tgetEventObject: function (evt) {\n                                                                                    // 279\n\t\treturn typeof evt === \"object\" && evt.stopPropagation ? evt : null;\n                                                 // 280\n\t}\n                                                                                                                    // 281\n,\tparsePaneName: function (evt_or_pane) {\n                                                                             // 282\n\t\tvar evt = $.layout.getEventObject( evt_or_pane )\n                                                                    // 283\n\t\t,\tpane = evt_or_pane;\n                                                                                               // 284\n\t\tif (evt) {\n                                                                                                          // 285\n\t\t\t// ALWAYS stop propagation of events triggered in Layout!\n                                                          // 286\n\t\t\tevt.stopPropagation();\n                                                                                             // 287\n\t\t\tpane = $(this).data(\"layoutEdge\");\n                                                                                 // 288\n\t\t}\n                                                                                                                   // 289\n\t\tif (pane && !/^(west|east|north|south|center)$/.test(pane)) {\n                                                       // 290\n\t\t\t$.layout.msg('LAYOUT ERROR - Invalid pane-name: \"'+ pane +'\"');\n                                                    // 291\n\t\t\tpane = \"error\";\n                                                                                                    // 292\n\t\t}\n                                                                                                                   // 293\n\t\treturn pane;\n                                                                                                        // 294\n\t}\n                                                                                                                    // 295\n\n                                                                                                                      // 296\n\n                                                                                                                      // 297\n\t// LAYOUT-PLUGIN REGISTRATION\n                                                                                        // 298\n\t// more plugins can added beyond this default list\n                                                                   // 299\n,\tplugins: {\n                                                                                                          // 300\n\t\tdraggable:\t\t!!$.fn.draggable // resizing\n                                                                            // 301\n\t,\teffects: {\n                                                                                                         // 302\n\t\t\tcore:\t\t!!$.effects\t\t// animimations (specific effects tested by initOptions)\n                                       // 303\n\t\t,\tslide:\t\t$.effects && ($.effects.slide || ($.effects.effect && $.effects.effect.slide)) // default effect\n          // 304\n\t\t}\n                                                                                                                   // 305\n\t}\n                                                                                                                    // 306\n\n                                                                                                                      // 307\n//\tarrays of plugin or other methods to be triggered for events in *each layout* - will be passed 'Instance'\n          // 308\n,\tonCreate:\t[]\t// runs when layout is just starting to be created - right after options are set\n                       // 309\n,\tonLoad:\t\t[]\t// runs after layout container and global events init, but before initPanes is called\n                   // 310\n,\tonReady:\t[]\t// runs after initialization *completes* - ie, after initPanes completes successfully\n                   // 311\n,\tonDestroy:\t[]\t// runs after layout is destroyed\n                                                                     // 312\n,\tonUnload:\t[]\t// runs after layout is destroyed OR when page unloads\n                                                 // 313\n,\tafterOpen:\t[]\t// runs after setAsOpen() completes\n                                                                   // 314\n,\tafterClose:\t[]\t// runs after setAsClosed() completes\n                                                                // 315\n\n                                                                                                                      // 316\n\t/*\n                                                                                                                   // 317\n\t*\tGENERIC UTILITY METHODS\n                                                                                            // 318\n\t*/\n                                                                                                                   // 319\n\n                                                                                                                      // 320\n\t// calculate and return the scrollbar width, as an integer\n                                                           // 321\n,\tscrollbarWidth:\t\tfunction () { return window.scrollbarWidth  || $.layout.getScrollbarSize('width'); }\n               // 322\n,\tscrollbarHeight:\tfunction () { return window.scrollbarHeight || $.layout.getScrollbarSize('height'); }\n              // 323\n,\tgetScrollbarSize:\tfunction (dim) {\n                                                                                  // 324\n\t\tvar $c\t= $('<div style=\"position: absolute; top: -10000px; left: -10000px; width: 100px; height: 100px; overflow: scroll;\"></div>').appendTo(\"body\");\n\t\tvar d\t= { width: $c.css(\"width\") - $c[0].clientWidth, height: $c.height() - $c[0].clientHeight };\n                   // 326\n\t\t$c.remove();\n                                                                                                        // 327\n\t\twindow.scrollbarWidth\t= d.width;\n                                                                                    // 328\n\t\twindow.scrollbarHeight\t= d.height;\n                                                                                  // 329\n\t\treturn dim.match(/^(width|height)$/) ? d[dim] : d;\n                                                                  // 330\n\t}\n                                                                                                                    // 331\n\n                                                                                                                      // 332\n\n                                                                                                                      // 333\n\t/**\n                                                                                                                  // 334\n\t* Returns hash container 'display' and 'visibility'\n                                                                  // 335\n\t*\n                                                                                                                    // 336\n\t* @see\t$.swap() - swaps CSS, runs callback, resets CSS\n                                                               // 337\n\t* @param  {!Object}\t\t$E\t\t\t\tjQuery element\n                                                                            // 338\n\t* @param  {boolean=}\t[force=false]\tRun even if display != none\n                                                       // 339\n\t* @return {!Object}\t\t\t\t\t\tReturns current style props, if applicable\n                                                  // 340\n\t*/\n                                                                                                                   // 341\n,\tshowInvisibly: function ($E, force) {\n                                                                               // 342\n\t\tif ($E && $E.length && (force || $E.css(\"display\") === \"none\")) { // only if not *already hidden*\n                   // 343\n\t\t\tvar s = $E[0].style\n                                                                                                // 344\n\t\t\t\t// save ONLY the 'style' props because that is what we must restore\n                                               // 345\n\t\t\t,\tCSS = { display: s.display || '', visibility: s.visibility || '' };\n                                              // 346\n\t\t\t// show element 'invisibly' so can be measured\n                                                                     // 347\n\t\t\t$E.css({ display: \"block\", visibility: \"hidden\" });\n                                                                // 348\n\t\t\treturn CSS;\n                                                                                                        // 349\n\t\t}\n                                                                                                                   // 350\n\t\treturn {};\n                                                                                                          // 351\n\t}\n                                                                                                                    // 352\n\n                                                                                                                      // 353\n\t/**\n                                                                                                                  // 354\n\t* Returns data for setting size of an element (container or a pane).\n                                                 // 355\n\t*\n                                                                                                                    // 356\n\t* @see  _create(), onWindowResize() for container, plus others for pane\n                                              // 357\n\t* @return JSON  Returns a hash of all dimensions: top, bottom, left, right, outerWidth, innerHeight, etc\n             // 358\n\t*/\n                                                                                                                   // 359\n,\tgetElementDimensions: function ($E, inset) {\n                                                                        // 360\n\t\tvar\n                                                                                                                 // 361\n\t\t//\tdimensions hash - start with current data IF passed\n                                                              // 362\n\t\t\td\t= { css: {}, inset: {} }\n                                                                                         // 363\n\t\t,\tx\t= d.css\t\t\t// CSS hash\n                                                                                           // 364\n\t\t,\ti\t= { bottom: 0 }\t// TEMP insets (bottom = complier hack)\n                                                         // 365\n\t\t,\tN\t= $.layout.cssNum\n                                                                                               // 366\n\t\t,\toff = $E.offset()\n                                                                                                 // 367\n\t\t,\tb, p, ei\t\t\t// TEMP border, padding\n                                                                                // 368\n\t\t;\n                                                                                                                   // 369\n\t\td.offsetLeft = off.left;\n                                                                                            // 370\n\t\td.offsetTop  = off.top;\n                                                                                             // 371\n\n                                                                                                                      // 372\n\t\tif (!inset) inset = {}; // simplify logic below\n                                                                     // 373\n\n                                                                                                                      // 374\n\t\t$.each(\"Left,Right,Top,Bottom\".split(\",\"), function (idx, e) { // e = edge\n                                          // 375\n\t\t\tb = x[\"border\" + e] = $.layout.borderWidth($E, e);\n                                                                 // 376\n\t\t\tp = x[\"padding\"+ e] = $.layout.cssNum($E, \"padding\"+e);\n                                                            // 377\n\t\t\tei = e.toLowerCase();\n                                                                                              // 378\n\t\t\td.inset[ei] = inset[ei] >= 0 ? inset[ei] : p; // any missing insetX value = paddingX\n                               // 379\n\t\t\ti[ei] = d.inset[ei] + b; // total offset of content from outer side\n                                                // 380\n\t\t});\n                                                                                                                 // 381\n\n                                                                                                                      // 382\n\t\tx.width\t\t= $E.width();\n                                                                                              // 383\n\t\tx.height\t= $E.height();\n                                                                                             // 384\n\t\tx.top\t\t= N($E,\"top\",true);\n                                                                                          // 385\n\t\tx.bottom\t= N($E,\"bottom\",true);\n                                                                                     // 386\n\t\tx.left\t\t= N($E,\"left\",true);\n                                                                                        // 387\n\t\tx.right\t\t= N($E,\"right\",true);\n                                                                                      // 388\n\n                                                                                                                      // 389\n\t\td.outerWidth\t= $E.outerWidth();\n                                                                                     // 390\n\t\td.outerHeight\t= $E.outerHeight();\n                                                                                   // 391\n\t\t// calc the TRUE inner-dimensions, even in quirks-mode!\n                                                             // 392\n\t\td.innerWidth\t= max(0, d.outerWidth  - i.left - i.right);\n                                                            // 393\n\t\td.innerHeight\t= max(0, d.outerHeight - i.top  - i.bottom);\n                                                          // 394\n\t\t// layoutWidth/Height is used in calcs for manual resizing\n                                                          // 395\n\t\t// layoutW/H only differs from innerW/H when in quirks-mode - then is like outerW/H\n                                 // 396\n\t\td.layoutWidth\t= $E.innerWidth();\n                                                                                    // 397\n\t\td.layoutHeight\t= $E.innerHeight();\n                                                                                  // 398\n\n                                                                                                                      // 399\n\t\t//if ($E.prop('tagName') === 'BODY') { debugData( d, $E.prop('tagName') ); } // DEBUG\n                               // 400\n\n                                                                                                                      // 401\n\t\t//d.visible\t= $E.is(\":visible\");// && x.width > 0 && x.height > 0;\n                                                  // 402\n\n                                                                                                                      // 403\n\t\treturn d;\n                                                                                                           // 404\n\t}\n                                                                                                                    // 405\n\n                                                                                                                      // 406\n,\tgetElementStyles: function ($E, list) {\n                                                                             // 407\n\t\tvar\n                                                                                                                 // 408\n\t\t\tCSS\t= {}\n                                                                                                           // 409\n\t\t,\tstyle\t= $E[0].style\n                                                                                               // 410\n\t\t,\tprops\t= list.split(\",\")\n                                                                                           // 411\n\t\t,\tsides\t= \"Top,Bottom,Left,Right\".split(\",\")\n                                                                        // 412\n\t\t,\tattrs\t= \"Color,Style,Width\".split(\",\")\n                                                                            // 413\n\t\t,\tp, s, a, i, j, k\n                                                                                                  // 414\n\t\t;\n                                                                                                                   // 415\n\t\tfor (i=0; i < props.length; i++) {\n                                                                                  // 416\n\t\t\tp = props[i];\n                                                                                                      // 417\n\t\t\tif (p.match(/(border|padding|margin)$/))\n                                                                           // 418\n\t\t\t\tfor (j=0; j < 4; j++) {\n                                                                                           // 419\n\t\t\t\t\ts = sides[j];\n                                                                                                    // 420\n\t\t\t\t\tif (p === \"border\")\n                                                                                              // 421\n\t\t\t\t\t\tfor (k=0; k < 3; k++) {\n                                                                                         // 422\n\t\t\t\t\t\t\ta = attrs[k];\n                                                                                                  // 423\n\t\t\t\t\t\t\tCSS[p+s+a] = style[p+s+a];\n                                                                                     // 424\n\t\t\t\t\t\t}\n                                                                                                               // 425\n\t\t\t\t\telse\n                                                                                                             // 426\n\t\t\t\t\t\tCSS[p+s] = style[p+s];\n                                                                                          // 427\n\t\t\t\t}\n                                                                                                                 // 428\n\t\t\telse\n                                                                                                               // 429\n\t\t\t\tCSS[p] = style[p];\n                                                                                                // 430\n\t\t};\n                                                                                                                  // 431\n\t\treturn CSS\n                                                                                                          // 432\n\t}\n                                                                                                                    // 433\n\n                                                                                                                      // 434\n\t/**\n                                                                                                                  // 435\n\t* Return the innerWidth for the current browser/doctype\n                                                              // 436\n\t*\n                                                                                                                    // 437\n\t* @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()\n                                                    // 438\n\t* @param  {Array.<Object>}\t$E  Must pass a jQuery object - first element is processed\n                                // 439\n\t* @param  {number=}\t\t\touterWidth (optional) Can pass a width, allowing calculations BEFORE element is resized\n        // 440\n\t* @return {number}\t\t\tReturns the innerWidth of the elem by subtracting padding and borders\n                           // 441\n\t*/\n                                                                                                                   // 442\n,\tcssWidth: function ($E, outerWidth) {\n                                                                               // 443\n\t\t// a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed\n                         // 444\n\t\tif (outerWidth <= 0) return 0;\n                                                                                      // 445\n\n                                                                                                                      // 446\n\t\tvar bs\t= !$.layout.browser.boxModel ? \"border-box\" : $.support.boxSizing ? $E.css(\"boxSizing\") : \"content-box\"\n      // 447\n\t\t,\tb\t= $.layout.borderWidth\n                                                                                          // 448\n\t\t,\tn\t= $.layout.cssNum\n                                                                                               // 449\n\t\t,\tW\t= outerWidth\n                                                                                                    // 450\n\t\t;\n                                                                                                                   // 451\n\t\t// strip border and/or padding from outerWidth to get CSS Width\n                                                     // 452\n\t\tif (bs !== \"border-box\")\n                                                                                            // 453\n\t\t\tW -= (b($E, \"Left\") + b($E, \"Right\"));\n                                                                             // 454\n\t\tif (bs === \"content-box\")\n                                                                                           // 455\n\t\t\tW -= (n($E, \"paddingLeft\") + n($E, \"paddingRight\"));\n                                                               // 456\n\t\treturn max(0,W);\n                                                                                                    // 457\n\t}\n                                                                                                                    // 458\n\n                                                                                                                      // 459\n\t/**\n                                                                                                                  // 460\n\t* Return the innerHeight for the current browser/doctype\n                                                             // 461\n\t*\n                                                                                                                    // 462\n\t* @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()\n                                                    // 463\n\t* @param  {Array.<Object>}\t$E  Must pass a jQuery object - first element is processed\n                                // 464\n\t* @param  {number=}\t\t\touterHeight  (optional) Can pass a width, allowing calculations BEFORE element is resized\n      // 465\n\t* @return {number}\t\t\tReturns the innerHeight of the elem by subtracting padding and borders\n                          // 466\n\t*/\n                                                                                                                   // 467\n,\tcssHeight: function ($E, outerHeight) {\n                                                                             // 468\n\t\t// a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed\n                         // 469\n\t\tif (outerHeight <= 0) return 0;\n                                                                                     // 470\n\n                                                                                                                      // 471\n\t\tvar bs\t= !$.layout.browser.boxModel ? \"border-box\" : $.support.boxSizing ? $E.css(\"boxSizing\") : \"content-box\"\n      // 472\n\t\t,\tb\t= $.layout.borderWidth\n                                                                                          // 473\n\t\t,\tn\t= $.layout.cssNum\n                                                                                               // 474\n\t\t,\tH\t= outerHeight\n                                                                                                   // 475\n\t\t;\n                                                                                                                   // 476\n\t\t// strip border and/or padding from outerHeight to get CSS Height\n                                                   // 477\n\t\tif (bs !== \"border-box\")\n                                                                                            // 478\n\t\t\tH -= (b($E, \"Top\") + b($E, \"Bottom\"));\n                                                                             // 479\n\t\tif (bs === \"content-box\")\n                                                                                           // 480\n\t\t\tH -= (n($E, \"paddingTop\") + n($E, \"paddingBottom\"));\n                                                               // 481\n\t\treturn max(0,H);\n                                                                                                    // 482\n\t}\n                                                                                                                    // 483\n\n                                                                                                                      // 484\n\t/**\n                                                                                                                  // 485\n\t* Returns the 'current CSS numeric value' for a CSS property - 0 if property does not exist\n                          // 486\n\t*\n                                                                                                                    // 487\n\t* @see  Called by many methods\n                                                                                       // 488\n\t* @param {Array.<Object>}\t$E\t\t\t\t\tMust pass a jQuery object - first element is processed\n                              // 489\n\t* @param {string}\t\t\tprop\t\t\t\tThe name of the CSS property, eg: top, width, etc.\n                                       // 490\n\t* @param {boolean=}\t\t\t[allowAuto=false]\ttrue = return 'auto' if that is value; false = return 0\n                      // 491\n\t* @return {(string|number)}\t\t\t\t\t\tUsually used to get an integer value for position (top, left) or size (height, width)\n\t*/\n                                                                                                                   // 493\n,\tcssNum: function ($E, prop, allowAuto) {\n                                                                            // 494\n\t\tif (!$E.jquery) $E = $($E);\n                                                                                         // 495\n\t\tvar CSS = $.layout.showInvisibly($E)\n                                                                                // 496\n\t\t,\tp\t= $.css($E[0], prop, true)\n                                                                                      // 497\n\t\t,\tv\t= allowAuto && p==\"auto\" ? p : Math.round(parseFloat(p) || 0);\n                                                  // 498\n\t\t$E.css( CSS ); // RESET\n                                                                                             // 499\n\t\treturn v;\n                                                                                                           // 500\n\t}\n                                                                                                                    // 501\n\n                                                                                                                      // 502\n,\tborderWidth: function (el, side) {\n                                                                                  // 503\n\t\tif (el.jquery) el = el[0];\n                                                                                          // 504\n\t\tvar b = \"border\"+ side.substr(0,1).toUpperCase() + side.substr(1); // left => Left\n                                  // 505\n\t\treturn $.css(el, b+\"Style\", true) === \"none\" ? 0 : Math.round(parseFloat($.css(el, b+\"Width\", true)) || 0);\n         // 506\n\t}\n                                                                                                                    // 507\n\n                                                                                                                      // 508\n\t/**\n                                                                                                                  // 509\n\t* Mouse-tracking utility - FUTURE REFERENCE\n                                                                          // 510\n\t*\n                                                                                                                    // 511\n\t* init: if (!window.mouse) {\n                                                                                         // 512\n\t*\t\t\twindow.mouse = { x: 0, y: 0 };\n                                                                                   // 513\n\t*\t\t\t$(document).mousemove( $.layout.trackMouse );\n                                                                    // 514\n\t*\t\t}\n                                                                                                                 // 515\n\t*\n                                                                                                                    // 516\n\t* @param {Object}\t\tevt\n                                                                                               // 517\n\t*\n                                                                                                                    // 518\n,\ttrackMouse: function (evt) {\n                                                                                        // 519\n\t\twindow.mouse = { x: evt.clientX, y: evt.clientY };\n                                                                  // 520\n\t}\n                                                                                                                    // 521\n\t*/\n                                                                                                                   // 522\n\n                                                                                                                      // 523\n\t/**\n                                                                                                                  // 524\n\t* SUBROUTINE for preventPrematureSlideClose option\n                                                                   // 525\n\t*\n                                                                                                                    // 526\n\t* @param {Object}\t\tevt\n                                                                                               // 527\n\t* @param {Object=}\t\tel\n                                                                                               // 528\n\t*/\n                                                                                                                   // 529\n,\tisMouseOverElem: function (evt, el) {\n                                                                               // 530\n\t\tvar\n                                                                                                                 // 531\n\t\t\t$E\t= $(el || this)\n                                                                                                 // 532\n\t\t,\td\t= $E.offset()\n                                                                                                   // 533\n\t\t,\tT\t= d.top\n                                                                                                         // 534\n\t\t,\tL\t= d.left\n                                                                                                        // 535\n\t\t,\tR\t= L + $E.outerWidth()\n                                                                                           // 536\n\t\t,\tB\t= T + $E.outerHeight()\n                                                                                          // 537\n\t\t,\tx\t= evt.pageX\t// evt.clientX ?\n                                                                                    // 538\n\t\t,\ty\t= evt.pageY\t// evt.clientY ?\n                                                                                    // 539\n\t\t;\n                                                                                                                   // 540\n\t\t// if X & Y are < 0, probably means is over an open SELECT\n                                                          // 541\n\t\treturn ($.layout.browser.msie && x < 0 && y < 0) || ((x >= L && x <= R) && (y >= T && y <= B));\n                     // 542\n\t}\n                                                                                                                    // 543\n\n                                                                                                                      // 544\n\t/**\n                                                                                                                  // 545\n\t* Message/Logging Utility\n                                                                                            // 546\n\t*\n                                                                                                                    // 547\n\t* @example $.layout.msg(\"My message\");\t\t\t\t// log text\n                                                                // 548\n\t* @example $.layout.msg(\"My message\", true);\t\t// alert text\n                                                          // 549\n\t* @example $.layout.msg({ foo: \"bar\" }, \"Title\");\t// log hash-data, with custom title\n                                // 550\n\t* @example $.layout.msg({ foo: \"bar\" }, true, \"Title\", { sort: false }); -OR-\n                                        // 551\n\t* @example $.layout.msg({ foo: \"bar\" }, \"Title\", { sort: false, display: true }); // alert hash-data\n                 // 552\n\t*\n                                                                                                                    // 553\n\t* @param {(Object|string)}\t\t\tinfo\t\t\tString message OR Hash/Array\n                                                     // 554\n\t* @param {(Boolean|string|Object)=}\t[popup=false]\tTrue means alert-box - can be skipped\n                              // 555\n\t* @param {(Object|string)=}\t\t\t[debugTitle=\"\"]\tTitle for Hash data - can be skipped\n                                   // 556\n\t* @param {Object=}\t\t\t\t\t[debugOpts]\t\tExtra options for debug output\n                                                   // 557\n\t*/\n                                                                                                                   // 558\n,\tmsg: function (info, popup, debugTitle, debugOpts) {\n                                                                // 559\n\t\tif ($.isPlainObject(info) && window.debugData) {\n                                                                    // 560\n\t\t\tif (typeof popup === \"string\") {\n                                                                                   // 561\n\t\t\t\tdebugOpts\t= debugTitle;\n                                                                                           // 562\n\t\t\t\tdebugTitle\t= popup;\n                                                                                               // 563\n\t\t\t}\n                                                                                                                  // 564\n\t\t\telse if (typeof debugTitle === \"object\") {\n                                                                         // 565\n\t\t\t\tdebugOpts\t= debugTitle;\n                                                                                           // 566\n\t\t\t\tdebugTitle\t= null;\n                                                                                                // 567\n\t\t\t}\n                                                                                                                  // 568\n\t\t\tvar t = debugTitle || \"log( <object> )\"\n                                                                            // 569\n\t\t\t,\to = $.extend({ sort: false, returnHTML: false, display: false }, debugOpts);\n                                     // 570\n\t\t\tif (popup === true || o.display)\n                                                                                   // 571\n\t\t\t\tdebugData( info, t, o );\n                                                                                          // 572\n\t\t\telse if (window.console)\n                                                                                           // 573\n\t\t\t\tconsole.log(debugData( info, t, o ));\n                                                                             // 574\n\t\t}\n                                                                                                                   // 575\n\t\telse if (popup)\n                                                                                                     // 576\n\t\t\talert(info);\n                                                                                                       // 577\n\t\telse if (window.console)\n                                                                                            // 578\n\t\t\tconsole.log(info);\n                                                                                                 // 579\n\t\telse {\n                                                                                                              // 580\n\t\t\tvar id\t= \"#layoutLogger\"\n                                                                                           // 581\n\t\t\t,\t$l = $(id);\n                                                                                                      // 582\n\t\t\tif (!$l.length)\n                                                                                                    // 583\n\t\t\t\t$l = createLog();\n                                                                                                 // 584\n\t\t\t$l.children(\"ul\").append('<li style=\"padding: 4px 10px; margin: 0; border-top: 1px solid #CCC;\">'+ info.replace(/\\</g,\"&lt;\").replace(/\\>/g,\"&gt;\") +'</li>');\n\t\t}\n                                                                                                                   // 586\n\n                                                                                                                      // 587\n\t\tfunction createLog () {\n                                                                                             // 588\n\t\t\tvar pos = $.support.fixedPosition ? 'fixed' : 'absolute'\n                                                           // 589\n\t\t\t,\t$e = $('<div id=\"layoutLogger\" style=\"position: '+ pos +'; top: 5px; z-index: 999999; max-width: 25%; overflow: hidden; border: 1px solid #000; border-radius: 5px; background: #FBFBFB; box-shadow: 0 2px 10px rgba(0,0,0,0.3);\">'\n\t\t\t\t+\t'<div style=\"font-size: 13px; font-weight: bold; padding: 5px 10px; background: #F6F6F6; border-radius: 5px 5px 0 0; cursor: move;\">'\n\t\t\t\t+\t'<span style=\"float: right; padding-left: 7px; cursor: pointer;\" title=\"Remove Console\" onclick=\"$(this).closest(\\'#layoutLogger\\').remove()\">X</span>Layout console.log</div>'\n\t\t\t\t+\t'<ul style=\"font-size: 13px; font-weight: none; list-style: none; margin: 0; padding: 0 0 2px;\"></ul>'\n          // 593\n\t\t\t\t+ '</div>'\n                                                                                                        // 594\n\t\t\t\t).appendTo(\"body\");\n                                                                                               // 595\n\t\t\t$e.css('left', $(window).width() - $e.outerWidth() - 5)\n                                                            // 596\n\t\t\tif ($.ui.draggable) $e.draggable({ handle: ':first-child' });\n                                                      // 597\n\t\t\treturn $e;\n                                                                                                         // 598\n\t\t};\n                                                                                                                  // 599\n\t}\n                                                                                                                    // 600\n\n                                                                                                                      // 601\n};\n                                                                                                                    // 602\n\n                                                                                                                      // 603\n\n                                                                                                                      // 604\n/*\n                                                                                                                    // 605\n *\t$.layout.browser REPLACES removed $.browser, with extra data\n                                                       // 606\n *\tParsing code here adapted from jQuery 1.8 $.browse\n                                                                 // 607\n */\n                                                                                                                   // 608\nvar u = navigator.userAgent.toLowerCase()\n                                                                             // 609\n,\tm = /(chrome)[ \\/]([\\w.]+)/.exec( u )\n                                                                               // 610\n\t||\t/(webkit)[ \\/]([\\w.]+)/.exec( u )\n                                                                                 // 611\n\t||\t/(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( u )\n                                                                    // 612\n\t||\t/(msie) ([\\w.]+)/.exec( u )\n                                                                                       // 613\n\t||\tu.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( u )\n                                          // 614\n\t||\t[]\n                                                                                                                // 615\n,\tb = m[1] || \"\"\n                                                                                                      // 616\n,\tv = m[2] || 0\n                                                                                                       // 617\n,\tie = b === \"msie\"\n                                                                                                   // 618\n;\n                                                                                                                     // 619\n$.layout.browser = {\n                                                                                                  // 620\n\tversion:\tv\n                                                                                                           // 621\n,\tsafari:\t\tb === \"webkit\"\t// webkit (NOT chrome) = safari\n                                                             // 622\n,\twebkit:\t\tb === \"chrome\"\t// chrome = webkit\n                                                                          // 623\n,\tmsie:\t\tie\n                                                                                                           // 624\n,\tisIE6:\t\tie && v == 6\n                                                                                                // 625\n\t// ONLY IE reverts to old box-model - update for older jQ onReady\n                                                    // 626\n,\tboxModel:\t!ie || $.support.boxModel !== false\n                                                                       // 627\n};\n                                                                                                                    // 628\nif (b) $.layout.browser[b] = true; // set CURRENT browser\n                                                             // 629\n/*\tOLD versions of jQuery only set $.support.boxModel after page is loaded\n                                            // 630\n *\tso if this is IE, use support.boxModel to test for quirks-mode (ONLY IE changes boxModel) */\n                       // 631\nif (ie) $(function(){ $.layout.browser.boxModel = $.support.boxModel; });\n                                             // 632\n\n                                                                                                                      // 633\n\n                                                                                                                      // 634\n// DEFAULT OPTIONS\n                                                                                                    // 635\n$.layout.defaults = {\n                                                                                                 // 636\n/*\n                                                                                                                    // 637\n *\tLAYOUT & LAYOUT-CONTAINER OPTIONS\n                                                                                  // 638\n *\t- none of these options are applicable to individual panes\n                                                         // 639\n */\n                                                                                                                   // 640\n\tname:\t\t\t\t\t\t\"\"\t\t\t// Not required, but useful for buttons and used for the state-cookie\n                                // 641\n,\tcontainerClass:\t\t\t\t\"ui-layout-container\" // layout-container element\n                                                // 642\n,\tinset:\t\t\t\t\t\tnull\t\t// custom container-inset values (override padding)\n                                               // 643\n,\tscrollToBookmarkOnLoad:\t\ttrue\t\t// after creating a layout, scroll to bookmark in URL (.../page.htm#myBookmark)\n      // 644\n,\tresizeWithWindow:\t\t\ttrue\t\t// bind thisLayout.resizeAll() to the window.resize event\n                                 // 645\n,\tresizeWithWindowDelay:\t\t200\t\t\t// delay calling resizeAll because makes window resizing very jerky\n                   // 646\n,\tresizeWithWindowMaxDelay:\t0\t\t\t// 0 = none - force resize every XX ms while window is being resized\n                  // 647\n,\tmaskPanesEarly:\t\t\t\tfalse\t\t// true = create pane-masks on resizer.mouseDown instead of waiting for resizer.dragstart\n // 648\n,\tonresizeall_start:\t\t\tnull\t\t// CALLBACK when resizeAll() STARTS\t- NOT pane-specific\n                                  // 649\n,\tonresizeall_end:\t\t\tnull\t\t// CALLBACK when resizeAll() ENDS\t- NOT pane-specific\n                                      // 650\n,\tonload_start:\t\t\t\tnull\t\t// CALLBACK when Layout inits - after options initialized, but before elements\n               // 651\n,\tonload_end:\t\t\t\t\tnull\t\t// CALLBACK when Layout inits - after EVERYTHING has been initialized\n                         // 652\n,\tonunload_start:\t\t\t\tnull\t\t// CALLBACK when Layout is destroyed OR onWindowUnload\n                                     // 653\n,\tonunload_end:\t\t\t\tnull\t\t// CALLBACK when Layout is destroyed OR onWindowUnload\n                                       // 654\n,\tinitPanes:\t\t\t\t\ttrue\t\t// false = DO NOT initialize the panes onLoad - will init later\n                                // 655\n,\tshowErrorMessages:\t\t\ttrue\t\t// enables fatal error messages to warn developers of common errors\n                      // 656\n,\tshowDebugMessages:\t\t\tfalse\t\t// display console-and-alert debug msgs - IF this Layout version _has_ debugging code!\n  // 657\n//\tChanging this zIndex value will cause other zIndex values to automatically change\n                                  // 658\n,\tzIndex:\t\t\t\t\t\tnull\t\t// the PANE zIndex - resizers and masks will be +1\n                                               // 659\n//\tDO NOT CHANGE the zIndex values below unless you clearly understand their relationships\n                            // 660\n,\tzIndexes: {\t\t\t\t\t\t\t\t// set _default_ z-index values here...\n                                                          // 661\n\t\tpane_normal:\t\t\t0\t\t\t// normal z-index for panes\n                                                                      // 662\n\t,\tcontent_mask:\t\t\t1\t\t\t// applied to overlays used to mask content INSIDE panes during resizing\n                       // 663\n\t,\tresizer_normal:\t\t\t2\t\t\t// normal z-index for resizer-bars\n                                                           // 664\n\t,\tpane_sliding:\t\t\t100\t\t\t// applied to *BOTH* the pane and its resizer when a pane is 'slid open'\n                     // 665\n\t,\tpane_animate:\t\t\t1000\t\t// applied to the pane when being animated - not applied to the resizer\n                      // 666\n\t,\tresizer_drag:\t\t\t10000\t\t// applied to the CLONED resizer-bar when being 'dragged'\n                                   // 667\n\t}\n                                                                                                                    // 668\n,\terrors: {\n                                                                                                           // 669\n\t\tpane:\t\t\t\t\t\"pane\"\t\t// description of \"layout pane element\" - used only in error messages\n                             // 670\n\t,\tselector:\t\t\t\t\"selector\"\t// description of \"jQuery-selector\" - used only in error messages\n                          // 671\n\t,\taddButtonError:\t\t\t\"Error Adding Button\\nInvalid \"\n                                                                  // 672\n\t,\tcontainerMissing:\t\t\"UI Layout Initialization Error\\nThe specified layout-container does not exist.\"\n                // 673\n\t,\tcenterPaneMissing:\t\t\"UI Layout Initialization Error\\nThe center-pane element does not exist.\\nThe center-pane is a required element.\"\n\t,\tnoContainerHeight:\t\t\"UI Layout Initialization Warning\\nThe layout-container \\\"CONTAINER\\\" has no height.\\nTherefore the layout is 0-height and hence 'invisible'!\"\n\t,\tcallbackError:\t\t\t\"UI Layout Callback Error\\nThe EVENT callback is not a valid function.\"\n                           // 676\n\t}\n                                                                                                                    // 677\n/*\n                                                                                                                    // 678\n *\tPANE DEFAULT SETTINGS\n                                                                                              // 679\n *\t- settings under the 'panes' key become the default settings for *all panes*\n                                       // 680\n *\t- ALL pane-options can also be set specifically for each panes, which will override these 'default values'\n         // 681\n */\n                                                                                                                   // 682\n,\tpanes: { // default options for 'all panes' - will be overridden by 'per-pane settings'\n                             // 683\n\t\tapplyDemoStyles: \t\tfalse\t\t// NOTE: renamed from applyDefaultStyles for clarity\n                                      // 684\n\t,\tclosable:\t\t\t\ttrue\t\t// pane can open & close\n                                                                        // 685\n\t,\tresizable:\t\t\t\ttrue\t\t// when open, pane can be resized \n                                                             // 686\n\t,\tslidable:\t\t\t\ttrue\t\t// when closed, pane can 'slide open' over other panes - closes on mouse-out\n                    // 687\n\t,\tinitClosed:\t\t\t\tfalse\t\t// true = init pane as 'closed'\n                                                              // 688\n\t,\tinitHidden: \t\t\tfalse \t\t// true = init pane as 'hidden' - no resizer-bar/spacing\n                                    // 689\n\t//\tSELECTORS\n                                                                                                         // 690\n\t//,\tpaneSelector:\t\t\t\"\"\t\t\t// MUST be pane-specific - jQuery selector for pane\n                                         // 691\n\t,\tcontentSelector:\t\t\".ui-layout-content\" // INNER div/element to auto-size so only it scrolls, not the entire pane!\n  // 692\n\t,\tcontentIgnoreSelector:\t\".ui-layout-ignore\"\t// element(s) to 'ignore' when measuring 'content'\n                      // 693\n\t,\tfindNestedContent:\t\tfalse\t\t// true = $P.find(contentSelector), false = $P.children(contentSelector)\n                // 694\n\t//\tGENERIC ROOT-CLASSES - for auto-generated classNames\n                                                              // 695\n\t,\tpaneClass:\t\t\t\t\"ui-layout-pane\"\t// Layout Pane\n                                                                      // 696\n\t,\tresizerClass:\t\t\t\"ui-layout-resizer\"\t// Resizer Bar\n                                                                 // 697\n\t,\ttogglerClass:\t\t\t\"ui-layout-toggler\"\t// Toggler Button\n                                                              // 698\n\t,\tbuttonClass:\t\t\t\"ui-layout-button\"\t// CUSTOM Buttons\t- eg: '[ui-layout-button]-toggle/-open/-close/-pin'\n            // 699\n\t//\tELEMENT SIZE & SPACING\n                                                                                            // 700\n\t//,\tsize:\t\t\t\t\t100\t\t\t// MUST be pane-specific -initial size of pane\n                                                   // 701\n\t,\tminSize:\t\t\t\t0\t\t\t// when manually resizing a pane\n                                                                   // 702\n\t,\tmaxSize:\t\t\t\t0\t\t\t// ditto, 0 = no limit\n                                                                             // 703\n\t,\tspacing_open:\t\t\t6\t\t\t// space between pane and adjacent panes - when pane is 'open'\n                                 // 704\n\t,\tspacing_closed:\t\t\t6\t\t\t// ditto - when pane is 'closed'\n                                                             // 705\n\t,\ttogglerLength_open:\t\t50\t\t\t// Length = WIDTH of toggler button on north/south sides - HEIGHT on east/west sides\n     // 706\n\t,\ttogglerLength_closed: \t50\t\t\t// 100% OR -1 means 'full height/width of resizer bar' - 0 means 'hidden'\n              // 707\n\t,\ttogglerAlign_open:\t\t\"center\"\t// top/left, bottom/right, center, OR...\n                                              // 708\n\t,\ttogglerAlign_closed:\t\"center\"\t// 1 => nn = offset from top/left, -1 => -nn == offset from bottom/right\n             // 709\n\t,\ttogglerContent_open:\t\"\"\t\t\t// text or HTML to put INSIDE the toggler\n                                                // 710\n\t,\ttogglerContent_closed:\t\"\"\t\t\t// ditto\n                                                                               // 711\n\t//\tRESIZING OPTIONS\n                                                                                                  // 712\n\t,\tresizerDblClickToggle:\ttrue\t\t// \n                                                                                   // 713\n\t,\tautoResize:\t\t\t\ttrue\t\t// IF size is 'auto' or a percentage, then recalc 'pixel size' whenever the layout resizes\n    // 714\n\t,\tautoReopen:\t\t\t\ttrue\t\t// IF a pane was auto-closed due to noRoom, reopen it when there is room? False = leave it closed\n\t,\tresizerDragOpacity:\t\t1\t\t\t// option for ui.draggable\n                                                                // 716\n\t//,\tresizerCursor:\t\t\t\"\"\t\t\t// MUST be pane-specific - cursor when over resizer-bar\n                                    // 717\n\t,\tmaskContents:\t\t\tfalse\t\t// true = add DIV-mask over-or-inside this pane so can 'drag' over IFRAMES\n                  // 718\n\t,\tmaskObjects:\t\t\tfalse\t\t// true = add IFRAME-mask over-or-inside this pane to cover objects/applets - content-mask will overlay this mask\n\t,\tmaskZindex:\t\t\t\tnull\t\t// will override zIndexes.content_mask if specified - not applicable to iframe-panes\n          // 720\n\t,\tresizingGrid:\t\t\tfalse\t\t// grid size that the resizers will snap-to during resizing, eg: [20,20]\n                    // 721\n\t,\tlivePaneResizing:\t\tfalse\t\t// true = LIVE Resizing as resizer is dragged\n                                            // 722\n\t,\tliveContentResizing:\tfalse\t\t// true = re-measure header/footer heights as resizer is dragged\n                       // 723\n\t,\tliveResizingTolerance:\t1\t\t\t// how many px change before pane resizes, to control performance\n                       // 724\n\t//\tSLIDING OPTIONS\n                                                                                                   // 725\n\t,\tsliderCursor:\t\t\t\"pointer\"\t// cursor when resizer-bar will trigger 'sliding'\n                                        // 726\n\t,\tslideTrigger_open:\t\t\"click\"\t\t// click, dblclick, mouseenter\n                                                        // 727\n\t,\tslideTrigger_close:\t\t\"mouseleave\"// click, mouseleave\n                                                              // 728\n\t,\tslideDelay_open:\t\t300\t\t\t// applies only for mouseenter event - 0 = instant open\n                                    // 729\n\t,\tslideDelay_close:\t\t300\t\t\t// applies only for mouseleave event (300ms is the minimum!)\n                              // 730\n\t,\thideTogglerOnSlide:\t\tfalse\t\t// when pane is slid-open, should the toggler show?\n                                    // 731\n\t,\tpreventQuickSlideClose:\t$.layout.browser.webkit // Chrome triggers slideClosed as it is opening\n                    // 732\n\t,\tpreventPrematureSlideClose: false\t// handle incorrect mouseleave trigger, like when over a SELECT-list in IE\n       // 733\n\t//\tPANE-SPECIFIC TIPS & MESSAGES\n                                                                                     // 734\n\t,\ttips: {\n                                                                                                            // 735\n\t\t\tOpen:\t\t\t\t\"Open\"\t\t// eg: \"Open Pane\"\n                                                                                // 736\n\t\t,\tClose:\t\t\t\t\"Close\"\n                                                                                                 // 737\n\t\t,\tResize:\t\t\t\t\"Resize\"\n                                                                                               // 738\n\t\t,\tSlide:\t\t\t\t\"Slide Open\"\n                                                                                            // 739\n\t\t,\tPin:\t\t\t\t\"Pin\"\n                                                                                                     // 740\n\t\t,\tUnpin:\t\t\t\t\"Un-Pin\"\n                                                                                                // 741\n\t\t,\tnoRoomToOpen:\t\t\"Not enough room to show this panel.\"\t// alert if user tries to open a pane that cannot\n            // 742\n\t\t,\tminSizeWarning:\t\t\"Panel has reached its minimum size\"\t// displays in browser statusbar\n                            // 743\n\t\t,\tmaxSizeWarning:\t\t\"Panel has reached its maximum size\"\t// ditto\n                                                    // 744\n\t\t}\n                                                                                                                   // 745\n\t//\tHOT-KEYS & MISC\n                                                                                                   // 746\n\t,\tshowOverflowOnHover:\tfalse\t\t// will bind allowOverflow() utility to pane.onMouseOver\n                               // 747\n\t,\tenableCursorHotkey:\t\ttrue\t\t// enabled 'cursor' hotkeys\n                                                             // 748\n\t//,\tcustomHotkey:\t\t\t\"\"\t\t\t// MUST be pane-specific - EITHER a charCode OR a character\n                                 // 749\n\t,\tcustomHotkeyModifier:\t\"SHIFT\"\t\t// either 'SHIFT', 'CTRL' or 'CTRL+SHIFT' - NOT 'ALT'\n                               // 750\n\t//\tPANE ANIMATION\n                                                                                                    // 751\n\t//\tNOTE: fxSss_open, fxSss_close & fxSss_size options (eg: fxName_open) are auto-generated if not passed\n             // 752\n\t,\tfxName:\t\t\t\t\t\"slide\" \t// ('none' or blank), slide, drop, scale -- only relevant to 'open' & 'close', NOT 'size'\n     // 753\n\t,\tfxSpeed:\t\t\t\tnull\t\t// slow, normal, fast, 200, nnn - if passed, will OVERRIDE fxSettings.duration\n                   // 754\n\t,\tfxSettings:\t\t\t\t{}\t\t\t// can be passed, eg: { easing: \"easeOutBounce\", duration: 1500 }\n                              // 755\n\t,\tfxOpacityFix:\t\t\ttrue\t\t// tries to fix opacity in IE to restore anti-aliasing after animation\n                       // 756\n\t,\tanimatePaneSizing:\t\tfalse\t\t// true = animate resizing after dragging resizer-bar OR sizePane() is called\n           // 757\n\t/*  NOTE: Action-specific FX options are auto-generated from the options above if not specifically set:\n              // 758\n\t\tfxName_open:\t\t\t\"slide\"\t\t// 'Open' pane animation\n                                                                    // 759\n\t\tfnName_close:\t\t\t\"slide\"\t\t// 'Close' pane animation\n                                                                  // 760\n\t\tfxName_size:\t\t\t\"slide\"\t\t// 'Size' pane animation - when animatePaneSizing = true\n                                    // 761\n\t\tfxSpeed_open:\t\t\tnull\n                                                                                                // 762\n\t\tfxSpeed_close:\t\t\tnull\n                                                                                               // 763\n\t\tfxSpeed_size:\t\t\tnull\n                                                                                                // 764\n\t\tfxSettings_open:\t\t{}\n                                                                                                // 765\n\t\tfxSettings_close:\t\t{}\n                                                                                               // 766\n\t\tfxSettings_size:\t\t{}\n                                                                                                // 767\n\t*/\n                                                                                                                   // 768\n\t//\tCHILD/NESTED LAYOUTS\n                                                                                              // 769\n\t,\tchildren:\t\t\t\tnull\t\t// Layout-options for nested/child layout - even {} is valid as options\n                         // 770\n\t,\tcontainerSelector:\t\t''\t\t\t// if child is NOT 'directly nested', a selector to find it/them (can have more than one child layout!)\n\t,\tinitChildren:\t\t\ttrue\t\t// true = child layout will be created as soon as _this_ layout completes initialization\n     // 772\n\t,\tdestroyChildren:\t\ttrue\t\t// true = destroy child-layout if this pane is destroyed\n                                   // 773\n\t,\tresizeChildren:\t\t\ttrue\t\t// true = trigger child-layout.resizeAll() when this pane is resized\n                       // 774\n\t//\tEVENT TRIGGERING\n                                                                                                  // 775\n\t,\ttriggerEventsOnLoad:\tfalse\t\t// true = trigger onopen OR onclose callbacks when layout initializes\n                  // 776\n\t,\ttriggerEventsDuringLiveResize: true\t// true = trigger onresize callback REPEATEDLY if livePaneResizing==true\n       // 777\n\t//\tPANE CALLBACKS\n                                                                                                    // 778\n\t,\tonshow_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Show\t- BEFORE onopen/onhide_start\n                            // 779\n\t,\tonshow_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Shown\t- AFTER  onopen/onhide_end\n                             // 780\n\t,\tonhide_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Close\t- BEFORE onclose_start\n                                 // 781\n\t,\tonhide_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Closed\t- AFTER  onclose_end\n                                  // 782\n\t,\tonopen_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Open\n                                                         // 783\n\t,\tonopen_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Opened\n                                                       // 784\n\t,\tonclose_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Close\n                                                       // 785\n\t,\tonclose_end:\t\t\tnull\t\t// CALLBACK when pane ENDS being Closed\n                                                       // 786\n\t,\tonresize_start:\t\t\tnull\t\t// CALLBACK when pane STARTS being Resized ***FOR ANY REASON***\n                            // 787\n\t,\tonresize_end:\t\t\tnull\t\t// CALLBACK when pane ENDS being Resized ***FOR ANY REASON***\n                                // 788\n\t,\tonsizecontent_start:\tnull\t\t// CALLBACK when sizing of content-element STARTS\n                                       // 789\n\t,\tonsizecontent_end:\t\tnull\t\t// CALLBACK when sizing of content-element ENDS\n                                          // 790\n\t,\tonswap_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Swap\n                                                         // 791\n\t,\tonswap_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Swapped\n                                                      // 792\n\t,\tondrag_start:\t\t\tnull\t\t// CALLBACK when pane STARTS being ***MANUALLY*** Resized\n                                    // 793\n\t,\tondrag_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being ***MANUALLY*** Resized\n                                       // 794\n\t}\n                                                                                                                    // 795\n/*\n                                                                                                                    // 796\n *\tPANE-SPECIFIC SETTINGS\n                                                                                             // 797\n *\t- options listed below MUST be specified per-pane - they CANNOT be set under 'panes'\n                               // 798\n *\t- all options under the 'panes' key can also be set specifically for any pane\n                                      // 799\n *\t- most options under the 'panes' key apply only to 'border-panes' - NOT the the center-pane\n                        // 800\n */\n                                                                                                                   // 801\n,\tnorth: {\n                                                                                                            // 802\n\t\tpaneSelector:\t\t\t\".ui-layout-north\"\n                                                                                  // 803\n\t,\tsize:\t\t\t\t\t\"auto\"\t\t// eg: \"auto\", \"30%\", .30, 200\n                                                                   // 804\n\t,\tresizerCursor:\t\t\t\"n-resize\"\t// custom = url(myCursor.cur)\n                                                          // 805\n\t,\tcustomHotkey:\t\t\t\"\"\t\t\t// EITHER a charCode (43) OR a character (\"o\")\n                                                // 806\n\t}\n                                                                                                                    // 807\n,\tsouth: {\n                                                                                                            // 808\n\t\tpaneSelector:\t\t\t\".ui-layout-south\"\n                                                                                  // 809\n\t,\tsize:\t\t\t\t\t\"auto\"\n                                                                                                   // 810\n\t,\tresizerCursor:\t\t\t\"s-resize\"\n                                                                                        // 811\n\t,\tcustomHotkey:\t\t\t\"\"\n                                                                                                 // 812\n\t}\n                                                                                                                    // 813\n,\teast: {\n                                                                                                             // 814\n\t\tpaneSelector:\t\t\t\".ui-layout-east\"\n                                                                                   // 815\n\t,\tsize:\t\t\t\t\t200\n                                                                                                      // 816\n\t,\tresizerCursor:\t\t\t\"e-resize\"\n                                                                                        // 817\n\t,\tcustomHotkey:\t\t\t\"\"\n                                                                                                 // 818\n\t}\n                                                                                                                    // 819\n,\twest: {\n                                                                                                             // 820\n\t\tpaneSelector:\t\t\t\".ui-layout-west\"\n                                                                                   // 821\n\t,\tsize:\t\t\t\t\t200\n                                                                                                      // 822\n\t,\tresizerCursor:\t\t\t\"w-resize\"\n                                                                                        // 823\n\t,\tcustomHotkey:\t\t\t\"\"\n                                                                                                 // 824\n\t}\n                                                                                                                    // 825\n,\tcenter: {\n                                                                                                           // 826\n\t\tpaneSelector:\t\t\t\".ui-layout-center\"\n                                                                                 // 827\n\t,\tminWidth:\t\t\t\t0\n                                                                                                     // 828\n\t,\tminHeight:\t\t\t\t0\n                                                                                                    // 829\n\t}\n                                                                                                                    // 830\n};\n                                                                                                                    // 831\n\n                                                                                                                      // 832\n$.layout.optionsMap = {\n                                                                                               // 833\n\t// layout/global options - NOT pane-options\n                                                                          // 834\n\tlayout: (\"name,instanceKey,stateManagement,effects,inset,zIndexes,errors,\"\n                                           // 835\n\t+\t\"zIndex,scrollToBookmarkOnLoad,showErrorMessages,maskPanesEarly,\"\n                                                  // 836\n\t+\t\"outset,resizeWithWindow,resizeWithWindowDelay,resizeWithWindowMaxDelay,\"\n                                          // 837\n\t+\t\"onresizeall,onresizeall_start,onresizeall_end,onload,onload_start,onload_end,onunload,onunload_start,onunload_end\").split(\",\")\n//\tborderPanes: [ ALL options that are NOT specified as 'layout' ]\n                                                    // 839\n\t// default.panes options that apply to the center-pane (most options apply _only_ to border-panes)\n                   // 840\n,\tcenter: (\"paneClass,contentSelector,contentIgnoreSelector,findNestedContent,applyDemoStyles,triggerEventsOnLoad,\"\n   // 841\n\t+\t\"showOverflowOnHover,maskContents,maskObjects,liveContentResizing,\"\n                                                // 842\n\t+\t\"containerSelector,children,initChildren,resizeChildren,destroyChildren,\"\n                                          // 843\n\t+\t\"onresize,onresize_start,onresize_end,onsizecontent,onsizecontent_start,onsizecontent_end\").split(\",\")\n             // 844\n\t// options that MUST be specifically set 'per-pane' - CANNOT set in the panes (defaults) key\n                         // 845\n,\tnoDefault: (\"paneSelector,resizerCursor,customHotkey\").split(\",\")\n                                                   // 846\n};\n                                                                                                                    // 847\n\n                                                                                                                      // 848\n/**\n                                                                                                                   // 849\n * Processes options passed in converts flat-format data into subkey (JSON) format\n                                    // 850\n * In flat-format, subkeys are _currently_ separated with 2 underscores, like north__optName\n                          // 851\n * Plugins may also call this method so they can transform their own data\n                                             // 852\n *\n                                                                                                                    // 853\n * @param  {!Object}\thash\t\t\tData/options passed by user - may be a single level or nested levels\n                      // 854\n * @param  {boolean=}\t[addKeys=false]\tShould the primary layout.options keys be added if they do not exist?\n           // 855\n * @return {Object}\t\t\t\t\t\tReturns hash of minWidth & minHeight\n                                                         // 856\n */\n                                                                                                                   // 857\n$.layout.transformData = function (hash, addKeys) {\n                                                                   // 858\n\tvar\tjson = addKeys ? { panes: {}, center: {} } : {} // init return object\n                                            // 859\n\t,\tbranch, optKey, keys, key, val, i, c;\n                                                                              // 860\n\n                                                                                                                      // 861\n\tif (typeof hash !== \"object\") return json; // no options passed\n                                                      // 862\n\n                                                                                                                      // 863\n\t// convert all 'flat-keys' to 'sub-key' format\n                                                                       // 864\n\tfor (optKey in hash) {\n                                                                                               // 865\n\t\tbranch\t= json;\n                                                                                                      // 866\n\t\tval\t\t= hash[ optKey ];\n                                                                                              // 867\n\t\tkeys\t= optKey.split(\"__\"); // eg: west__size or north__fxSettings__duration\n                                         // 868\n\t\tc\t\t= keys.length - 1;\n                                                                                               // 869\n\t\t// convert underscore-delimited to subkeys\n                                                                          // 870\n\t\tfor (i=0; i <= c; i++) {\n                                                                                            // 871\n\t\t\tkey = keys[i];\n                                                                                                     // 872\n\t\t\tif (i === c) {\t// last key = value\n                                                                                 // 873\n\t\t\t\tif ($.isPlainObject( val ))\n                                                                                       // 874\n\t\t\t\t\tbranch[key] = $.layout.transformData( val ); // RECURSE\n                                                          // 875\n\t\t\t\telse\n                                                                                                              // 876\n\t\t\t\t\tbranch[key] = val;\n                                                                                               // 877\n\t\t\t}\n                                                                                                                  // 878\n\t\t\telse {\n                                                                                                             // 879\n\t\t\t\tif (!branch[key])\n                                                                                                 // 880\n\t\t\t\t\tbranch[key] = {}; // create the subkey\n                                                                           // 881\n\t\t\t\t// recurse to sub-key for next loop - if not done\n                                                                 // 882\n\t\t\t\tbranch = branch[key];\n                                                                                             // 883\n\t\t\t}\n                                                                                                                  // 884\n\t\t}\n                                                                                                                   // 885\n\t}\n                                                                                                                    // 886\n\treturn json;\n                                                                                                         // 887\n};\n                                                                                                                    // 888\n\n                                                                                                                      // 889\n// INTERNAL CONFIG DATA - DO NOT CHANGE THIS!\n                                                                         // 890\n$.layout.backwardCompatibility = {\n                                                                                    // 891\n\t// data used by renameOldOptions()\n                                                                                   // 892\n\tmap: {\n                                                                                                               // 893\n\t//\tOLD Option Name:\t\t\tNEW Option Name\n                                                                                // 894\n\t\tapplyDefaultStyles:\t\t\t\"applyDemoStyles\"\n                                                                             // 895\n\t//\tCHILD/NESTED LAYOUTS\n                                                                                              // 896\n\t,\tchildOptions:\t\t\t\t\"children\"\n                                                                                        // 897\n\t,\tinitChildLayout:\t\t\t\"initChildren\"\n                                                                                  // 898\n\t,\tdestroyChildLayout:\t\t\t\"destroyChildren\"\n                                                                            // 899\n\t,\tresizeChildLayout:\t\t\t\"resizeChildren\"\n                                                                              // 900\n\t,\tresizeNestedLayout:\t\t\t\"resizeChildren\"\n                                                                             // 901\n\t//\tMISC Options\n                                                                                                      // 902\n\t,\tresizeWhileDragging:\t\t\"livePaneResizing\"\n                                                                           // 903\n\t,\tresizeContentWhileDragging:\t\"liveContentResizing\"\n                                                                  // 904\n\t,\ttriggerEventsWhileDragging:\t\"triggerEventsDuringLiveResize\"\n                                                        // 905\n\t,\tmaskIframesOnResize:\t\t\"maskContents\"\n                                                                               // 906\n\t//\tSTATE MANAGEMENT\n                                                                                                  // 907\n\t,\tuseStateCookie:\t\t\t\t\"stateManagement.enabled\"\n                                                                       // 908\n\t,\t\"cookie.autoLoad\":\t\t\t\"stateManagement.autoLoad\"\n                                                                    // 909\n\t,\t\"cookie.autoSave\":\t\t\t\"stateManagement.autoSave\"\n                                                                    // 910\n\t,\t\"cookie.keys\":\t\t\t\t\"stateManagement.stateKeys\"\n                                                                      // 911\n\t,\t\"cookie.name\":\t\t\t\t\"stateManagement.cookie.name\"\n                                                                    // 912\n\t,\t\"cookie.domain\":\t\t\t\"stateManagement.cookie.domain\"\n                                                                 // 913\n\t,\t\"cookie.path\":\t\t\t\t\"stateManagement.cookie.path\"\n                                                                    // 914\n\t,\t\"cookie.expires\":\t\t\t\"stateManagement.cookie.expires\"\n                                                               // 915\n\t,\t\"cookie.secure\":\t\t\t\"stateManagement.cookie.secure\"\n                                                                 // 916\n\t//\tOLD Language options\n                                                                                              // 917\n\t,\tnoRoomToOpenTip:\t\t\t\"tips.noRoomToOpen\"\n                                                                             // 918\n\t,\ttogglerTip_open:\t\t\t\"tips.Close\"\t// open   = Close\n                                                                  // 919\n\t,\ttogglerTip_closed:\t\t\t\"tips.Open\"\t\t// closed = Open\n                                                                 // 920\n\t,\tresizerTip:\t\t\t\t\t\"tips.Resize\"\n                                                                                      // 921\n\t,\tsliderTip:\t\t\t\t\t\"tips.Slide\"\n                                                                                        // 922\n\t}\n                                                                                                                    // 923\n\n                                                                                                                      // 924\n/**\n                                                                                                                   // 925\n* @param {Object}\topts\n                                                                                                // 926\n*/\n                                                                                                                    // 927\n,\trenameOptions: function (opts) {\n                                                                                    // 928\n\t\tvar map = $.layout.backwardCompatibility.map\n                                                                        // 929\n\t\t,\toldData, newData, value\n                                                                                           // 930\n\t\t;\n                                                                                                                   // 931\n\t\tfor (var itemPath in map) {\n                                                                                         // 932\n\t\t\toldData\t= getBranch( itemPath );\n                                                                                   // 933\n\t\t\tvalue\t= oldData.branch[ oldData.key ];\n                                                                             // 934\n\t\t\tif (value !== undefined) {\n                                                                                         // 935\n\t\t\t\tnewData = getBranch( map[itemPath], true );\n                                                                       // 936\n\t\t\t\tnewData.branch[ newData.key ] = value;\n                                                                            // 937\n\t\t\t\tdelete oldData.branch[ oldData.key ];\n                                                                             // 938\n\t\t\t}\n                                                                                                                  // 939\n\t\t}\n                                                                                                                   // 940\n\n                                                                                                                      // 941\n\t\t/**\n                                                                                                                 // 942\n\t\t* @param {string}\tpath\n                                                                                              // 943\n\t\t* @param {boolean=}\t[create=false]\tCreate path if does not exist\n                                                    // 944\n\t\t*/\n                                                                                                                  // 945\n\t\tfunction getBranch (path, create) {\n                                                                                 // 946\n\t\t\tvar a = path.split(\".\") // split keys into array\n                                                                   // 947\n\t\t\t,\tc = a.length - 1\n                                                                                                 // 948\n\t\t\t,\tD = { branch: opts, key: a[c] } // init branch at top & set key (last item)\n                                      // 949\n\t\t\t,\ti = 0, k, undef;\n                                                                                                 // 950\n\t\t\tfor (; i<c; i++) { // skip the last key (data)\n                                                                     // 951\n\t\t\t\tk = a[i];\n                                                                                                         // 952\n\t\t\t\tif (D.branch[ k ] == undefined) { // child-key does not exist\n                                                     // 953\n\t\t\t\t\tif (create) {\n                                                                                                    // 954\n\t\t\t\t\t\tD.branch = D.branch[ k ] = {}; // create child-branch\n                                                           // 955\n\t\t\t\t\t}\n                                                                                                                // 956\n\t\t\t\t\telse // can't go any farther\n                                                                                     // 957\n\t\t\t\t\t\tD.branch = {}; // branch is undefined\n                                                                           // 958\n\t\t\t\t}\n                                                                                                                 // 959\n\t\t\t\telse\n                                                                                                              // 960\n\t\t\t\t\tD.branch = D.branch[ k ]; // get child-branch\n                                                                    // 961\n\t\t\t}\n                                                                                                                  // 962\n\t\t\treturn D;\n                                                                                                          // 963\n\t\t};\n                                                                                                                  // 964\n\t}\n                                                                                                                    // 965\n\n                                                                                                                      // 966\n/**\n                                                                                                                   // 967\n* @param {Object}\topts\n                                                                                                // 968\n*/\n                                                                                                                    // 969\n,\trenameAllOptions: function (opts) {\n                                                                                 // 970\n\t\tvar ren = $.layout.backwardCompatibility.renameOptions;\n                                                             // 971\n\t\t// rename root (layout) options\n                                                                                     // 972\n\t\tren( opts );\n                                                                                                        // 973\n\t\t// rename 'defaults' to 'panes'\n                                                                                     // 974\n\t\tif (opts.defaults) {\n                                                                                                // 975\n\t\t\tif (typeof opts.panes !== \"object\")\n                                                                                // 976\n\t\t\t\topts.panes = {};\n                                                                                                  // 977\n\t\t\t$.extend(true, opts.panes, opts.defaults);\n                                                                         // 978\n\t\t\tdelete opts.defaults;\n                                                                                              // 979\n\t\t}\n                                                                                                                   // 980\n\t\t// rename options in the the options.panes key\n                                                                      // 981\n\t\tif (opts.panes) ren( opts.panes );\n                                                                                  // 982\n\t\t// rename options inside *each pane key*, eg: options.west\n                                                          // 983\n\t\t$.each($.layout.config.allPanes, function (i, pane) {\n                                                               // 984\n\t\t\tif (opts[pane]) ren( opts[pane] );\n                                                                                 // 985\n\t\t});\t\n                                                                                                                // 986\n\t\treturn opts;\n                                                                                                        // 987\n\t}\n                                                                                                                    // 988\n};\n                                                                                                                    // 989\n\n                                                                                                                      // 990\n\n                                                                                                                      // 991\n\n                                                                                                                      // 992\n\n                                                                                                                      // 993\n/*\t============================================================\n                                                       // 994\n *\tBEGIN WIDGET: $( selector ).layout( {options} );\n                                                                   // 995\n *\t============================================================\n                                                       // 996\n */\n                                                                                                                   // 997\n$.fn.layout = function (opts) {\n                                                                                       // 998\n\tvar\n                                                                                                                  // 999\n\n                                                                                                                      // 1000\n\t// local aliases to global data\n                                                                                      // 1001\n\tbrowser\t= $.layout.browser\n                                                                                           // 1002\n,\t_c\t\t= $.layout.config\n                                                                                               // 1003\n\n                                                                                                                      // 1004\n\t// local aliases to utlity methods\n                                                                                   // 1005\n,\tcssW\t= $.layout.cssWidth\n                                                                                            // 1006\n,\tcssH\t= $.layout.cssHeight\n                                                                                           // 1007\n,\telDims\t= $.layout.getElementDimensions\n                                                                              // 1008\n,\tstyles\t= $.layout.getElementStyles\n                                                                                  // 1009\n,\tevtObj\t= $.layout.getEventObject\n                                                                                    // 1010\n,\tevtPane\t= $.layout.parsePaneName\n                                                                                    // 1011\n\n                                                                                                                      // 1012\n/**\n                                                                                                                   // 1013\n * options - populated by initOptions()\n                                                                               // 1014\n */\n                                                                                                                   // 1015\n,\toptions = $.extend(true, {}, $.layout.defaults)\n                                                                     // 1016\n,\teffects\t= options.effects = $.extend(true, {}, $.layout.effects)\n                                                    // 1017\n\n                                                                                                                      // 1018\n/**\n                                                                                                                   // 1019\n * layout-state object\n                                                                                                // 1020\n */\n                                                                                                                   // 1021\n,\tstate = {\n                                                                                                           // 1022\n\t\t// generate unique ID to use for event.namespace so can unbind only events added by 'this layout'\n                   // 1023\n\t\tid:\t\t\t\t\"layout\"+ $.now()\t// code uses alias: sID\n                                                                    // 1024\n\t,\tinitialized:\tfalse\n                                                                                                 // 1025\n\t,\tpaneResizing:\tfalse\n                                                                                                // 1026\n\t,\tpanesSliding:\t{}\n                                                                                                   // 1027\n\t,\tcontainer:\t{ \t// list all keys referenced in code to avoid compiler error msgs\n                                     // 1028\n\t\t\tinnerWidth:\t\t0\n                                                                                                     // 1029\n\t\t,\tinnerHeight:\t0\n                                                                                                    // 1030\n\t\t,\touterWidth:\t\t0\n                                                                                                    // 1031\n\t\t,\touterHeight:\t0\n                                                                                                    // 1032\n\t\t,\tlayoutWidth:\t0\n                                                                                                    // 1033\n\t\t,\tlayoutHeight:\t0\n                                                                                                   // 1034\n\t\t}\n                                                                                                                   // 1035\n\t,\tnorth:\t\t{ childIdx: 0 }\n                                                                                            // 1036\n\t,\tsouth:\t\t{ childIdx: 0 }\n                                                                                            // 1037\n\t,\teast:\t\t{ childIdx: 0 }\n                                                                                             // 1038\n\t,\twest:\t\t{ childIdx: 0 }\n                                                                                             // 1039\n\t,\tcenter:\t\t{ childIdx: 0 }\n                                                                                           // 1040\n\t}\n                                                                                                                    // 1041\n\n                                                                                                                      // 1042\n/**\n                                                                                                                   // 1043\n * parent/child-layout pointers\n                                                                                       // 1044\n */\n                                                                                                                   // 1045\n//,\thasParentLayout\t= false\t- exists ONLY inside Instance so can be set externally\n                                    // 1046\n,\tchildren = {\n                                                                                                        // 1047\n\t\tnorth:\t\tnull\n                                                                                                        // 1048\n\t,\tsouth:\t\tnull\n                                                                                                       // 1049\n\t,\teast:\t\tnull\n                                                                                                        // 1050\n\t,\twest:\t\tnull\n                                                                                                        // 1051\n\t,\tcenter:\t\tnull\n                                                                                                      // 1052\n\t}\n                                                                                                                    // 1053\n\n                                                                                                                      // 1054\n/*\n                                                                                                                    // 1055\n * ###########################\n                                                                                        // 1056\n *  INTERNAL HELPER FUNCTIONS\n                                                                                         // 1057\n * ###########################\n                                                                                        // 1058\n */\n                                                                                                                   // 1059\n\n                                                                                                                      // 1060\n\t/**\n                                                                                                                  // 1061\n\t* Manages all internal timers\n                                                                                        // 1062\n\t*/\n                                                                                                                   // 1063\n,\ttimer = {\n                                                                                                           // 1064\n\t\tdata:\t{}\n                                                                                                            // 1065\n\t,\tset:\tfunction (s, fn, ms) { timer.clear(s); timer.data[s] = setTimeout(fn, ms); }\n                                  // 1066\n\t,\tclear:\tfunction (s) { var t=timer.data; if (t[s]) {clearTimeout(t[s]); delete t[s];} }\n                             // 1067\n\t}\n                                                                                                                    // 1068\n\n                                                                                                                      // 1069\n\t/**\n                                                                                                                  // 1070\n\t* Alert or console.log a message - IF option is enabled.\n                                                             // 1071\n\t*\n                                                                                                                    // 1072\n\t* @param {(string|!Object)}\tmsg\t\t\t\tMessage (or debug-data) to display\n                                                // 1073\n\t* @param {boolean=}\t\t\t[popup=false]\tTrue by default, means 'alert', false means use console.log\n                      // 1074\n\t* @param {boolean=}\t\t\t[debug=false]\tTrue means is a widget debugging message\n                                         // 1075\n\t*/\n                                                                                                                   // 1076\n,\t_log = function (msg, popup, debug) {\n                                                                               // 1077\n\t\tvar o = options;\n                                                                                                    // 1078\n\t\tif ((o.showErrorMessages && !debug) || (debug && o.showDebugMessages))\n                                              // 1079\n\t\t\t$.layout.msg( o.name +' / '+ msg, (popup !== false) );\n                                                             // 1080\n\t\treturn false;\n                                                                                                       // 1081\n\t}\n                                                                                                                    // 1082\n\n                                                                                                                      // 1083\n\t/**\n                                                                                                                  // 1084\n\t* Executes a Callback function after a trigger event, like resize, open or close\n                                     // 1085\n\t*\n                                                                                                                    // 1086\n\t* @param {string}\t\t\t\tevtName\t\t\t\t\tName of the layout callback, eg \"onresize_start\"\n                                    // 1087\n\t* @param {(string|boolean)=}\t[pane=\"\"]\t\t\t\tThis is passed only so we can pass the 'pane object' to the callback\n       // 1088\n\t* @param {(string|boolean)=}\t[skipBoundEvents=false]\tTrue = do not run events bound to the elements - only the callbacks set in options\n\t*/\n                                                                                                                   // 1090\n,\t_runCallbacks = function (evtName, pane, skipBoundEvents) {\n                                                         // 1091\n\t\tvar\thasPane\t= pane && isStr(pane)\n                                                                                   // 1092\n\t\t,\ts\t\t= hasPane ? state[pane] : state\n                                                                                // 1093\n\t\t,\to\t\t= hasPane ? options[pane] : options\n                                                                            // 1094\n\t\t,\tlName\t= options.name\n                                                                                              // 1095\n\t\t\t// names like onopen and onopen_end separate are interchangeable in options...\n                                     // 1096\n\t\t,\tlng\t\t= evtName + (evtName.match(/_/) ? \"\" : \"_end\")\n                                                               // 1097\n\t\t,\tshrt\t= lng.match(/_end$/) ? lng.substr(0, lng.length - 4) : \"\"\n                                                    // 1098\n\t\t,\tfn\t\t= o[lng] || o[shrt]\n                                                                                           // 1099\n\t\t,\tretVal\t= \"NC\" // NC = No Callback\n                                                                                 // 1100\n\t\t,\targs\t= []\n                                                                                                         // 1101\n\t\t,\t$P\n                                                                                                                // 1102\n\t\t;\n                                                                                                                   // 1103\n\t\tif ( !hasPane && $.type(pane) === 'boolean' ) {\n                                                                     // 1104\n\t\t\tskipBoundEvents = pane; // allow pane param to be skipped for Layout callback\n                                      // 1105\n\t\t\tpane = \"\";\n                                                                                                         // 1106\n\t\t}\n                                                                                                                   // 1107\n\n                                                                                                                      // 1108\n\t\t// first trigger the callback set in the options\n                                                                    // 1109\n\t\tif (fn) {\n                                                                                                           // 1110\n\t\t\ttry {\n                                                                                                              // 1111\n\t\t\t\t// convert function name (string) to function object\n                                                              // 1112\n\t\t\t\tif (isStr( fn )) {\n                                                                                                // 1113\n\t\t\t\t\tif (fn.match(/,/)) {\n                                                                                             // 1114\n\t\t\t\t\t\t// function name cannot contain a comma, \n                                                                       // 1115\n\t\t\t\t\t\t// so must be a function name AND a parameter to pass\n                                                           // 1116\n\t\t\t\t\t\targs = fn.split(\",\")\n                                                                                            // 1117\n\t\t\t\t\t\t,\tfn = eval(args[0]);\n                                                                                           // 1118\n\t\t\t\t\t}\n                                                                                                                // 1119\n\t\t\t\t\telse // just the name of an external function?\n                                                                   // 1120\n\t\t\t\t\t\tfn = eval(fn);\n                                                                                                  // 1121\n\t\t\t\t}\n                                                                                                                 // 1122\n\t\t\t\t// execute the callback, if exists\n                                                                                // 1123\n\t\t\t\tif ($.isFunction( fn )) {\n                                                                                         // 1124\n\t\t\t\t\tif (args.length)\n                                                                                                 // 1125\n\t\t\t\t\t\tretVal = g(fn)(args[1]); // pass the argument parsed from 'list'\n                                                // 1126\n\t\t\t\t\telse if ( hasPane )\n                                                                                              // 1127\n\t\t\t\t\t\t// pass data: pane-name, pane-element, pane-state, pane-options, and layout-name\n                                // 1128\n\t\t\t\t\t\tretVal = g(fn)( pane, $Ps[pane], s, o, lName );\n                                                                 // 1129\n\t\t\t\t\telse // must be a layout/container callback - pass suitable info\n                                                 // 1130\n\t\t\t\t\t\tretVal = g(fn)( Instance, s, o, lName );\n                                                                        // 1131\n\t\t\t\t}\n                                                                                                                 // 1132\n\t\t\t}\n                                                                                                                  // 1133\n\t\t\tcatch (ex) {\n                                                                                                       // 1134\n\t\t\t\t_log( options.errors.callbackError.replace(/EVENT/, $.trim((pane || \"\") +\" \"+ lng)), false );\n                     // 1135\n\t\t\t\tif ($.type(ex) === 'string' && string.length)\n                                                                     // 1136\n\t\t\t\t\t_log('Exception:  '+ ex, false );\n                                                                                // 1137\n\t\t\t}\n                                                                                                                  // 1138\n\t\t}\n                                                                                                                   // 1139\n\n                                                                                                                      // 1140\n\t\t// trigger additional events bound directly to the pane\n                                                             // 1141\n\t\tif (!skipBoundEvents && retVal !== false) {\n                                                                         // 1142\n\t\t\tif ( hasPane ) { // PANE events can be bound to each pane-elements\n                                                 // 1143\n\t\t\t\t$P\t= $Ps[pane];\n                                                                                                   // 1144\n\t\t\t\to\t= options[pane];\n                                                                                                // 1145\n\t\t\t\ts\t= state[pane];\n                                                                                                  // 1146\n\t\t\t\t$P.triggerHandler('layoutpane'+ lng, [ pane, $P, s, o, lName ]);\n                                                  // 1147\n\t\t\t\tif (shrt)\n                                                                                                         // 1148\n\t\t\t\t\t$P.triggerHandler('layoutpane'+ shrt, [ pane, $P, s, o, lName ]);\n                                                // 1149\n\t\t\t}\n                                                                                                                  // 1150\n\t\t\telse { // LAYOUT events can be bound to the container-element\n                                                      // 1151\n\t\t\t\t$N.triggerHandler('layout'+ lng, [ Instance, s, o, lName ]);\n                                                      // 1152\n\t\t\t\tif (shrt)\n                                                                                                         // 1153\n\t\t\t\t\t$N.triggerHandler('layout'+ shrt, [ Instance, s, o, lName ]);\n                                                    // 1154\n\t\t\t}\n                                                                                                                  // 1155\n\t\t}\n                                                                                                                   // 1156\n\n                                                                                                                      // 1157\n\t\t// ALWAYS resizeChildren after an onresize_end event - even during initialization\n                                   // 1158\n\t\t// IGNORE onsizecontent_end event because causes child-layouts to resize TWICE\n                                      // 1159\n\t\tif (hasPane && evtName === \"onresize_end\") // BAD: || evtName === \"onsizecontent_end\"\n                               // 1160\n\t\t\tresizeChildren(pane+\"\", true); // compiler hack -force string\n                                                      // 1161\n\n                                                                                                                      // 1162\n\t\treturn retVal;\n                                                                                                      // 1163\n\n                                                                                                                      // 1164\n\t\tfunction g (f) { return f; }; // compiler hack\n                                                                      // 1165\n\t}\n                                                                                                                    // 1166\n\n                                                                                                                      // 1167\n\n                                                                                                                      // 1168\n\t/**\n                                                                                                                  // 1169\n\t* cure iframe display issues in IE & other browsers\n                                                                  // 1170\n\t*/\n                                                                                                                   // 1171\n,\t_fixIframe = function (pane) {\n                                                                                      // 1172\n\t\tif (browser.mozilla) return; // skip FireFox - it auto-refreshes iframes onShow\n                                     // 1173\n\t\tvar $P = $Ps[pane];\n                                                                                                 // 1174\n\t\t// if the 'pane' is an iframe, do it\n                                                                                // 1175\n\t\tif (state[pane].tagName === \"IFRAME\")\n                                                                               // 1176\n\t\t\t$P.css(_c.hidden).css(_c.visible); \n                                                                                // 1177\n\t\telse // ditto for any iframes INSIDE the pane\n                                                                       // 1178\n\t\t\t$P.find('IFRAME').css(_c.hidden).css(_c.visible);\n                                                                  // 1179\n\t}\n                                                                                                                    // 1180\n\n                                                                                                                      // 1181\n\t/**\n                                                                                                                  // 1182\n\t* @param  {string}\t\tpane\t\tCan accept ONLY a 'pane' (east, west, etc)\n                                                 // 1183\n\t* @param  {number=}\t\touterSize\t(optional) Can pass a width, allowing calculations BEFORE element is resized\n          // 1184\n\t* @return {number}\t\tReturns the innerHeight/Width of el by subtracting padding and borders\n                           // 1185\n\t*/\n                                                                                                                   // 1186\n,\tcssSize = function (pane, outerSize) {\n                                                                              // 1187\n\t\tvar fn = _c[pane].dir==\"horz\" ? cssH : cssW;\n                                                                        // 1188\n\t\treturn fn($Ps[pane], outerSize);\n                                                                                    // 1189\n\t}\n                                                                                                                    // 1190\n\n                                                                                                                      // 1191\n\t/**\n                                                                                                                  // 1192\n\t* @param  {string}\t\tpane\t\tCan accept ONLY a 'pane' (east, west, etc)\n                                                 // 1193\n\t* @return {Object}\t\tReturns hash of minWidth & minHeight\n                                                             // 1194\n\t*/\n                                                                                                                   // 1195\n,\tcssMinDims = function (pane) {\n                                                                                      // 1196\n\t\t// minWidth/Height means CSS width/height = 1px\n                                                                     // 1197\n\t\tvar\t$P\t= $Ps[pane]\n                                                                                                  // 1198\n\t\t,\tdir\t= _c[pane].dir\n                                                                                                // 1199\n\t\t,\td\t= {\n                                                                                                             // 1200\n\t\t\t\tminWidth:\t1001 - cssW($P, 1000)\n                                                                                   // 1201\n\t\t\t,\tminHeight:\t1001 - cssH($P, 1000)\n                                                                                 // 1202\n\t\t\t}\n                                                                                                                  // 1203\n\t\t;\n                                                                                                                   // 1204\n\t\tif (dir === \"horz\") d.minSize = d.minHeight;\n                                                                        // 1205\n\t\tif (dir === \"vert\") d.minSize = d.minWidth;\n                                                                         // 1206\n\t\treturn d;\n                                                                                                           // 1207\n\t}\n                                                                                                                    // 1208\n\n                                                                                                                      // 1209\n\t// TODO: see if these methods can be made more useful...\n                                                             // 1210\n\t// TODO: *maybe* return cssW/H from these so caller can use this info\n                                                // 1211\n\n                                                                                                                      // 1212\n\t/**\n                                                                                                                  // 1213\n\t* @param {(string|!Object)}\t\tel\n                                                                                      // 1214\n\t* @param {number=}\t\t\t\touterWidth\n                                                                                     // 1215\n\t* @param {boolean=}\t\t\t\t[autoHide=false]\n                                                                              // 1216\n\t*/\n                                                                                                                   // 1217\n,\tsetOuterWidth = function (el, outerWidth, autoHide) {\n                                                               // 1218\n\t\tvar $E = el, w;\n                                                                                                     // 1219\n\t\tif (isStr(el)) $E = $Ps[el]; // west\n                                                                                // 1220\n\t\telse if (!el.jquery) $E = $(el);\n                                                                                    // 1221\n\t\tw = cssW($E, outerWidth);\n                                                                                           // 1222\n\t\t$E.css({ width: w });\n                                                                                               // 1223\n\t\tif (w > 0) {\n                                                                                                        // 1224\n\t\t\tif (autoHide && $E.data('autoHidden') && $E.innerHeight() > 0) {\n                                                   // 1225\n\t\t\t\t$E.show().data('autoHidden', false);\n                                                                              // 1226\n\t\t\t\tif (!browser.mozilla) // FireFox refreshes iframes - IE does not\n                                                  // 1227\n\t\t\t\t\t// make hidden, then visible to 'refresh' display after animation\n                                                // 1228\n\t\t\t\t\t$E.css(_c.hidden).css(_c.visible);\n                                                                               // 1229\n\t\t\t}\n                                                                                                                  // 1230\n\t\t}\n                                                                                                                   // 1231\n\t\telse if (autoHide && !$E.data('autoHidden'))\n                                                                        // 1232\n\t\t\t$E.hide().data('autoHidden', true);\n                                                                                // 1233\n\t}\n                                                                                                                    // 1234\n\n                                                                                                                      // 1235\n\t/**\n                                                                                                                  // 1236\n\t* @param {(string|!Object)}\t\tel\n                                                                                      // 1237\n\t* @param {number=}\t\t\t\touterHeight\n                                                                                    // 1238\n\t* @param {boolean=}\t\t\t\t[autoHide=false]\n                                                                              // 1239\n\t*/\n                                                                                                                   // 1240\n,\tsetOuterHeight = function (el, outerHeight, autoHide) {\n                                                             // 1241\n\t\tvar $E = el, h;\n                                                                                                     // 1242\n\t\tif (isStr(el)) $E = $Ps[el]; // west\n                                                                                // 1243\n\t\telse if (!el.jquery) $E = $(el);\n                                                                                    // 1244\n\t\th = cssH($E, outerHeight);\n                                                                                          // 1245\n\t\t$E.css({ height: h, visibility: \"visible\" }); // may have been 'hidden' by sizeContent\n                              // 1246\n\t\tif (h > 0 && $E.innerWidth() > 0) {\n                                                                                 // 1247\n\t\t\tif (autoHide && $E.data('autoHidden')) {\n                                                                           // 1248\n\t\t\t\t$E.show().data('autoHidden', false);\n                                                                              // 1249\n\t\t\t\tif (!browser.mozilla) // FireFox refreshes iframes - IE does not\n                                                  // 1250\n\t\t\t\t\t$E.css(_c.hidden).css(_c.visible);\n                                                                               // 1251\n\t\t\t}\n                                                                                                                  // 1252\n\t\t}\n                                                                                                                   // 1253\n\t\telse if (autoHide && !$E.data('autoHidden'))\n                                                                        // 1254\n\t\t\t$E.hide().data('autoHidden', true);\n                                                                                // 1255\n\t}\n                                                                                                                    // 1256\n\n                                                                                                                      // 1257\n\n                                                                                                                      // 1258\n\t/**\n                                                                                                                  // 1259\n\t* Converts any 'size' params to a pixel/integer size, if not already\n                                                 // 1260\n\t* If 'auto' or a decimal/percentage is passed as 'size', a pixel-size is calculated\n                                  // 1261\n\t*\n                                                                                                                    // 1262\n\t/**\n                                                                                                                  // 1263\n\t* @param  {string}\t\t\t\tpane\n                                                                                           // 1264\n\t* @param  {(string|number)=}\tsize\n                                                                                    // 1265\n\t* @param  {string=}\t\t\t\t[dir]\n                                                                                         // 1266\n\t* @return {number}\n                                                                                                   // 1267\n\t*/\n                                                                                                                   // 1268\n,\t_parseSize = function (pane, size, dir) {\n                                                                           // 1269\n\t\tif (!dir) dir = _c[pane].dir;\n                                                                                       // 1270\n\n                                                                                                                      // 1271\n\t\tif (isStr(size) && size.match(/%/))\n                                                                                 // 1272\n\t\t\tsize = (size === '100%') ? -1 : parseInt(size, 10) / 100; // convert % to decimal\n                                  // 1273\n\n                                                                                                                      // 1274\n\t\tif (size === 0)\n                                                                                                     // 1275\n\t\t\treturn 0;\n                                                                                                          // 1276\n\t\telse if (size >= 1)\n                                                                                                 // 1277\n\t\t\treturn parseInt(size, 10);\n                                                                                         // 1278\n\n                                                                                                                      // 1279\n\t\tvar o = options, avail = 0;\n                                                                                         // 1280\n\t\tif (dir==\"horz\") // north or south or center.minHeight\n                                                              // 1281\n\t\t\tavail = sC.innerHeight - ($Ps.north ? o.north.spacing_open : 0) - ($Ps.south ? o.south.spacing_open : 0);\n          // 1282\n\t\telse if (dir==\"vert\") // east or west or center.minWidth\n                                                            // 1283\n\t\t\tavail = sC.innerWidth - ($Ps.west ? o.west.spacing_open : 0) - ($Ps.east ? o.east.spacing_open : 0);\n               // 1284\n\n                                                                                                                      // 1285\n\t\tif (size === -1) // -1 == 100%\n                                                                                      // 1286\n\t\t\treturn avail;\n                                                                                                      // 1287\n\t\telse if (size > 0) // percentage, eg: .25\n                                                                           // 1288\n\t\t\treturn round(avail * size);\n                                                                                        // 1289\n\t\telse if (pane==\"center\")\n                                                                                            // 1290\n\t\t\treturn 0;\n                                                                                                          // 1291\n\t\telse { // size < 0 || size=='auto' || size==Missing || size==Invalid\n                                                // 1292\n\t\t\t// auto-size the pane\n                                                                                              // 1293\n\t\t\tvar\tdim\t= (dir === \"horz\" ? \"height\" : \"width\")\n                                                                    // 1294\n\t\t\t,\t$P\t= $Ps[pane]\n                                                                                                   // 1295\n\t\t\t,\t$C\t= dim === 'height' ? $Cs[pane] : false\n                                                                        // 1296\n\t\t\t,\tvis\t= $.layout.showInvisibly($P) // show pane invisibly if hidden\n                                                // 1297\n\t\t\t,\tszP\t= $P.css(dim) // SAVE current pane size\n                                                                      // 1298\n\t\t\t,\tszC\t= $C ? $C.css(dim) : 0 // SAVE current content size\n                                                          // 1299\n\t\t\t;\n                                                                                                                  // 1300\n\t\t\t$P.css(dim, \"auto\");\n                                                                                               // 1301\n\t\t\tif ($C) $C.css(dim, \"auto\");\n                                                                                       // 1302\n\t\t\tsize = (dim === \"height\") ? $P.outerHeight() : $P.outerWidth(); // MEASURE\n                                         // 1303\n\t\t\t$P.css(dim, szP).css(vis); // RESET size & visibility\n                                                              // 1304\n\t\t\tif ($C) $C.css(dim, szC);\n                                                                                          // 1305\n\t\t\treturn size;\n                                                                                                       // 1306\n\t\t}\n                                                                                                                   // 1307\n\t}\n                                                                                                                    // 1308\n\n                                                                                                                      // 1309\n\t/**\n                                                                                                                  // 1310\n\t* Calculates current 'size' (outer-width or outer-height) of a border-pane - optionally with 'pane-spacing' added\n    // 1311\n\t*\n                                                                                                                    // 1312\n\t* @param  {(string|!Object)}\tpane\n                                                                                    // 1313\n\t* @param  {boolean=}\t\t\t[inclSpace=false]\n                                                                             // 1314\n\t* @return {number}\t\t\t\tReturns EITHER Width for east/west panes OR Height for north/south panes\n                       // 1315\n\t*/\n                                                                                                                   // 1316\n,\tgetPaneSize = function (pane, inclSpace) {\n                                                                          // 1317\n\t\tvar \n                                                                                                                // 1318\n\t\t\t$P\t= $Ps[pane]\n                                                                                                     // 1319\n\t\t,\to\t= options[pane]\n                                                                                                 // 1320\n\t\t,\ts\t= state[pane]\n                                                                                                   // 1321\n\t\t,\toSp\t= (inclSpace ? o.spacing_open : 0)\n                                                                            // 1322\n\t\t,\tcSp\t= (inclSpace ? o.spacing_closed : 0)\n                                                                          // 1323\n\t\t;\n                                                                                                                   // 1324\n\t\tif (!$P || s.isHidden)\n                                                                                              // 1325\n\t\t\treturn 0;\n                                                                                                          // 1326\n\t\telse if (s.isClosed || (s.isSliding && inclSpace))\n                                                                  // 1327\n\t\t\treturn cSp;\n                                                                                                        // 1328\n\t\telse if (_c[pane].dir === \"horz\")\n                                                                                   // 1329\n\t\t\treturn $P.outerHeight() + oSp;\n                                                                                     // 1330\n\t\telse // dir === \"vert\"\n                                                                                              // 1331\n\t\t\treturn $P.outerWidth() + oSp;\n                                                                                      // 1332\n\t}\n                                                                                                                    // 1333\n\n                                                                                                                      // 1334\n\t/**\n                                                                                                                  // 1335\n\t* Calculate min/max pane dimensions and limits for resizing\n                                                          // 1336\n\t*\n                                                                                                                    // 1337\n\t* @param  {string}\t\tpane\n                                                                                             // 1338\n\t* @param  {boolean=}\t[slide=false]\n                                                                                   // 1339\n\t*/\n                                                                                                                   // 1340\n,\tsetSizeLimits = function (pane, slide) {\n                                                                            // 1341\n\t\tif (!isInitialized()) return;\n                                                                                       // 1342\n\t\tvar \n                                                                                                                // 1343\n\t\t\to\t\t\t\t= options[pane]\n                                                                                               // 1344\n\t\t,\ts\t\t\t\t= state[pane]\n                                                                                                // 1345\n\t\t,\tc\t\t\t\t= _c[pane]\n                                                                                                   // 1346\n\t\t,\tdir\t\t\t\t= c.dir\n                                                                                                    // 1347\n\t\t,\ttype\t\t\t= c.sizeType.toLowerCase()\n                                                                                 // 1348\n\t\t,\tisSliding\t\t= (slide != undefined ? slide : s.isSliding) // only open() passes 'slide' param\n                       // 1349\n\t\t,\t$P\t\t\t\t= $Ps[pane]\n                                                                                                 // 1350\n\t\t,\tpaneSpacing\t\t= o.spacing_open\n                                                                                     // 1351\n\t\t//\tmeasure the pane on the *opposite side* from this pane\n                                                           // 1352\n\t\t,\taltPane\t\t\t= _c.oppositeEdge[pane]\n                                                                                 // 1353\n\t\t,\taltS\t\t\t= state[altPane]\n                                                                                           // 1354\n\t\t,\t$altP\t\t\t= $Ps[altPane]\n                                                                                            // 1355\n\t\t,\taltPaneSize\t\t= (!$altP || altS.isVisible===false || altS.isSliding ? 0 : (dir==\"horz\" ? $altP.outerHeight() : $altP.outerWidth()))\n\t\t,\taltPaneSpacing\t= ((!$altP || altS.isHidden ? 0 : options[altPane][ altS.isClosed !== false ? \"spacing_closed\" : \"spacing_open\" ]) || 0)\n\t\t//\tlimitSize prevents this pane from 'overlapping' opposite pane\n                                                    // 1358\n\t\t,\tcontainerSize\t= (dir==\"horz\" ? sC.innerHeight : sC.innerWidth)\n                                                    // 1359\n\t\t,\tminCenterDims\t= cssMinDims(\"center\")\n                                                                              // 1360\n\t\t,\tminCenterSize\t= dir==\"horz\" ? max(options.center.minHeight, minCenterDims.minHeight) : max(options.center.minWidth, minCenterDims.minWidth)\n\t\t//\tif pane is 'sliding', then ignore center and alt-pane sizes - because 'overlays' them\n                            // 1362\n\t\t,\tlimitSize\t\t= (containerSize - paneSpacing - (isSliding ? 0 : (_parseSize(\"center\", minCenterSize, dir) + altPaneSize + altPaneSpacing)))\n\t\t,\tminSize\t\t\t= s.minSize = max( _parseSize(pane, o.minSize), cssMinDims(pane).minSize )\n                              // 1364\n\t\t,\tmaxSize\t\t\t= s.maxSize = min( (o.maxSize ? _parseSize(pane, o.maxSize) : 100000), limitSize )\n                      // 1365\n\t\t,\tr\t\t\t\t= s.resizerPosition = {} // used to set resizing limits\n                                                      // 1366\n\t\t,\ttop\t\t\t\t= sC.inset.top\n                                                                                             // 1367\n\t\t,\tleft\t\t\t= sC.inset.left\n                                                                                            // 1368\n\t\t,\tW\t\t\t\t= sC.innerWidth\n                                                                                              // 1369\n\t\t,\tH\t\t\t\t= sC.innerHeight\n                                                                                             // 1370\n\t\t,\trW\t\t\t\t= o.spacing_open // subtract resizer-width to get top/left position for south/east\n                          // 1371\n\t\t;\n                                                                                                                   // 1372\n\t\tswitch (pane) {\n                                                                                                     // 1373\n\t\t\tcase \"north\":\tr.min = top + minSize;\n                                                                               // 1374\n\t\t\t\t\t\t\tr.max = top + maxSize;\n                                                                                         // 1375\n\t\t\t\t\t\t\tbreak;\n                                                                                                         // 1376\n\t\t\tcase \"west\":\tr.min = left + minSize;\n                                                                               // 1377\n\t\t\t\t\t\t\tr.max = left + maxSize;\n                                                                                        // 1378\n\t\t\t\t\t\t\tbreak;\n                                                                                                         // 1379\n\t\t\tcase \"south\":\tr.min = top + H - maxSize - rW;\n                                                                      // 1380\n\t\t\t\t\t\t\tr.max = top + H - minSize - rW;\n                                                                                // 1381\n\t\t\t\t\t\t\tbreak;\n                                                                                                         // 1382\n\t\t\tcase \"east\":\tr.min = left + W - maxSize - rW;\n                                                                      // 1383\n\t\t\t\t\t\t\tr.max = left + W - minSize - rW;\n                                                                               // 1384\n\t\t\t\t\t\t\tbreak;\n                                                                                                         // 1385\n\t\t};\n                                                                                                                  // 1386\n\t}\n                                                                                                                    // 1387\n\n                                                                                                                      // 1388\n\t/**\n                                                                                                                  // 1389\n\t* Returns data for setting the size/position of center pane. Also used to set Height for east/west panes\n             // 1390\n\t*\n                                                                                                                    // 1391\n\t* @return JSON  Returns a hash of all dimensions: top, bottom, left, right, (outer) width and (outer) height\n         // 1392\n\t*/\n                                                                                                                   // 1393\n,\tcalcNewCenterPaneDims = function () {\n                                                                               // 1394\n\t\tvar d = {\n                                                                                                           // 1395\n\t\t\ttop:\tgetPaneSize(\"north\", true) // true = include 'spacing' value for pane\n                                         // 1396\n\t\t,\tbottom:\tgetPaneSize(\"south\", true)\n                                                                                // 1397\n\t\t,\tleft:\tgetPaneSize(\"west\", true)\n                                                                                   // 1398\n\t\t,\tright:\tgetPaneSize(\"east\", true)\n                                                                                  // 1399\n\t\t,\twidth:\t0\n                                                                                                          // 1400\n\t\t,\theight:\t0\n                                                                                                         // 1401\n\t\t};\n                                                                                                                  // 1402\n\n                                                                                                                      // 1403\n\t\t// NOTE: sC = state.container\n                                                                                       // 1404\n\t\t// calc center-pane outer dimensions\n                                                                                // 1405\n\t\td.width\t\t= sC.innerWidth - d.left - d.right;  // outerWidth\n                                                         // 1406\n\t\td.height\t= sC.innerHeight - d.bottom - d.top; // outerHeight\n                                                        // 1407\n\t\t// add the 'container border/padding' to get final positions relative to the container\n                              // 1408\n\t\td.top\t\t+= sC.inset.top;\n                                                                                             // 1409\n\t\td.bottom\t+= sC.inset.bottom;\n                                                                                        // 1410\n\t\td.left\t\t+= sC.inset.left;\n                                                                                           // 1411\n\t\td.right\t\t+= sC.inset.right;\n                                                                                         // 1412\n\n                                                                                                                      // 1413\n\t\treturn d;\n                                                                                                           // 1414\n\t}\n                                                                                                                    // 1415\n\n                                                                                                                      // 1416\n\n                                                                                                                      // 1417\n\t/**\n                                                                                                                  // 1418\n\t* @param {!Object}\t\tel\n                                                                                               // 1419\n\t* @param {boolean=}\t\t[allStates=false]\n                                                                               // 1420\n\t*/\n                                                                                                                   // 1421\n,\tgetHoverClasses = function (el, allStates) {\n                                                                        // 1422\n\t\tvar\n                                                                                                                 // 1423\n\t\t\t$El\t\t= $(el)\n                                                                                                       // 1424\n\t\t,\ttype\t= $El.data(\"layoutRole\")\n                                                                                     // 1425\n\t\t,\tpane\t= $El.data(\"layoutEdge\")\n                                                                                     // 1426\n\t\t,\to\t\t= options[pane]\n                                                                                                // 1427\n\t\t,\troot\t= o[type +\"Class\"]\n                                                                                           // 1428\n\t\t,\t_pane\t= \"-\"+ pane // eg: \"-west\"\n                                                                                  // 1429\n\t\t,\t_open\t= \"-open\"\n                                                                                                   // 1430\n\t\t,\t_closed\t= \"-closed\"\n                                                                                               // 1431\n\t\t,\t_slide\t= \"-sliding\"\n                                                                                               // 1432\n\t\t,\t_hover\t= \"-hover \" // NOTE the trailing space\n                                                                     // 1433\n\t\t,\t_state\t= $El.hasClass(root+_closed) ? _closed : _open\n                                                             // 1434\n\t\t,\t_alt\t= _state === _closed ? _open : _closed\n                                                                       // 1435\n\t\t,\tclasses = (root+_hover) + (root+_pane+_hover) + (root+_state+_hover) + (root+_pane+_state+_hover)\n                 // 1436\n\t\t;\n                                                                                                                   // 1437\n\t\tif (allStates) // when 'removing' classes, also remove alternate-state classes\n                                      // 1438\n\t\t\tclasses += (root+_alt+_hover) + (root+_pane+_alt+_hover);\n                                                          // 1439\n\n                                                                                                                      // 1440\n\t\tif (type==\"resizer\" && $El.hasClass(root+_slide))\n                                                                   // 1441\n\t\t\tclasses += (root+_slide+_hover) + (root+_pane+_slide+_hover);\n                                                      // 1442\n\n                                                                                                                      // 1443\n\t\treturn $.trim(classes);\n                                                                                             // 1444\n\t}\n                                                                                                                    // 1445\n,\taddHover\t= function (evt, el) {\n                                                                                     // 1446\n\t\tvar $E = $(el || this);\n                                                                                             // 1447\n\t\tif (evt && $E.data(\"layoutRole\") === \"toggler\")\n                                                                     // 1448\n\t\t\tevt.stopPropagation(); // prevent triggering 'slide' on Resizer-bar\n                                                // 1449\n\t\t$E.addClass( getHoverClasses($E) );\n                                                                                 // 1450\n\t}\n                                                                                                                    // 1451\n,\tremoveHover\t= function (evt, el) {\n                                                                                  // 1452\n\t\tvar $E = $(el || this);\n                                                                                             // 1453\n\t\t$E.removeClass( getHoverClasses($E, true) );\n                                                                        // 1454\n\t}\n                                                                                                                    // 1455\n\n                                                                                                                      // 1456\n,\tonResizerEnter\t= function (evt) { // ALSO called by toggler.mouseenter\n                                              // 1457\n\t\tvar pane\t= $(this).data(\"layoutEdge\")\n                                                                               // 1458\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 1459\n\t\t;\n                                                                                                                   // 1460\n\t\t// ignore closed-panes and mouse moving back & forth over resizer!\n                                                  // 1461\n\t\t// also ignore if ANY pane is currently resizing\n                                                                    // 1462\n\t\tif ( s.isClosed || s.isResizing || state.paneResizing ) return;\n                                                     // 1463\n\n                                                                                                                      // 1464\n\t\tif ($.fn.disableSelection)\n                                                                                          // 1465\n\t\t\t$(\"body\").disableSelection();\n                                                                                      // 1466\n\t\tif (options.maskPanesEarly)\n                                                                                         // 1467\n\t\t\tshowMasks( pane, { resizing: true });\n                                                                              // 1468\n\t}\n                                                                                                                    // 1469\n,\tonResizerLeave\t= function (evt, el) {\n                                                                               // 1470\n\t\tvar\te\t\t= el || this // el is only passed when called by the timer\n                                                   // 1471\n\t\t,\tpane\t= $(e).data(\"layoutEdge\")\n                                                                                    // 1472\n\t\t,\tname\t= pane +\"ResizerLeave\"\n                                                                                       // 1473\n\t\t;\n                                                                                                                   // 1474\n\t\ttimer.clear(pane+\"_openSlider\"); // cancel slideOpen timer, if set\n                                                  // 1475\n\t\ttimer.clear(name); // cancel enableSelection timer - may re/set below\n                                               // 1476\n\t\t// this method calls itself on a timer because it needs to allow\n                                                    // 1477\n\t\t// enough time for dragging to kick-in and set the isResizing flag\n                                                  // 1478\n\t\t// dragging has a 100ms delay set, so this delay must be >100\n                                                       // 1479\n\t\tif (!el) // 1st call - mouseleave event\n                                                                             // 1480\n\t\t\ttimer.set(name, function(){ onResizerLeave(evt, e); }, 200);\n                                                       // 1481\n\t\t// if user is resizing, then dragStop will enableSelection(), so can skip it here\n                                   // 1482\n\t\telse if ( !state.paneResizing ) { // 2nd call - by timer\n                                                            // 1483\n\t\t\tif ($.fn.enableSelection)\n                                                                                          // 1484\n\t\t\t\t$(\"body\").enableSelection();\n                                                                                      // 1485\n\t\t\tif (options.maskPanesEarly)\n                                                                                        // 1486\n\t\t\t\thideMasks();\n                                                                                                      // 1487\n\t\t}\n                                                                                                                   // 1488\n\t}\n                                                                                                                    // 1489\n\n                                                                                                                      // 1490\n/*\n                                                                                                                    // 1491\n * ###########################\n                                                                                        // 1492\n *   INITIALIZATION METHODS\n                                                                                           // 1493\n * ###########################\n                                                                                        // 1494\n */\n                                                                                                                   // 1495\n\n                                                                                                                      // 1496\n\t/**\n                                                                                                                  // 1497\n\t* Initialize the layout - called automatically whenever an instance of layout is created\n                             // 1498\n\t*\n                                                                                                                    // 1499\n\t* @see  none - triggered onInit\n                                                                                      // 1500\n\t* @return  mixed\ttrue = fully initialized | false = panes not initialized (yet) | 'cancel' = abort\n                   // 1501\n\t*/\n                                                                                                                   // 1502\n,\t_create = function () {\n                                                                                             // 1503\n\t\t// initialize config/options\n                                                                                        // 1504\n\t\tinitOptions();\n                                                                                                      // 1505\n\t\tvar o = options\n                                                                                                     // 1506\n\t\t,\ts = state;\n                                                                                                        // 1507\n\n                                                                                                                      // 1508\n\t\t// TEMP state so isInitialized returns true during init process\n                                                     // 1509\n\t\ts.creatingLayout = true;\n                                                                                            // 1510\n\n                                                                                                                      // 1511\n\t\t// init plugins for this layout, if there are any (eg: stateManagement)\n                                             // 1512\n\t\trunPluginCallbacks( Instance, $.layout.onCreate );\n                                                                  // 1513\n\n                                                                                                                      // 1514\n\t\t// options & state have been initialized, so now run beforeLoad callback\n                                            // 1515\n\t\t// onload will CANCEL layout creation if it returns false\n                                                           // 1516\n\t\tif (false === _runCallbacks(\"onload_start\"))\n                                                                        // 1517\n\t\t\treturn 'cancel';\n                                                                                                   // 1518\n\n                                                                                                                      // 1519\n\t\t// initialize the container element\n                                                                                 // 1520\n\t\t_initContainer();\n                                                                                                   // 1521\n\n                                                                                                                      // 1522\n\t\t// bind hotkey function - keyDown - if required\n                                                                     // 1523\n\t\tinitHotkeys();\n                                                                                                      // 1524\n\n                                                                                                                      // 1525\n\t\t// bind window.onunload\n                                                                                             // 1526\n\t\t$(window).bind(\"unload.\"+ sID, unload);\n                                                                             // 1527\n\n                                                                                                                      // 1528\n\t\t// init plugins for this layout, if there are any (eg: customButtons)\n                                               // 1529\n\t\trunPluginCallbacks( Instance, $.layout.onLoad );\n                                                                    // 1530\n\n                                                                                                                      // 1531\n\t\t// if layout elements are hidden, then layout WILL NOT complete initialization!\n                                     // 1532\n\t\t// initLayoutElements will set initialized=true and run the onload callback IF successful\n                           // 1533\n\t\tif (o.initPanes) _initLayoutElements();\n                                                                             // 1534\n\n                                                                                                                      // 1535\n\t\tdelete s.creatingLayout;\n                                                                                            // 1536\n\n                                                                                                                      // 1537\n\t\treturn state.initialized;\n                                                                                           // 1538\n\t}\n                                                                                                                    // 1539\n\n                                                                                                                      // 1540\n\t/**\n                                                                                                                  // 1541\n\t* Initialize the layout IF not already\n                                                                               // 1542\n\t*\n                                                                                                                    // 1543\n\t* @see  All methods in Instance run this test\n                                                                        // 1544\n\t* @return  boolean\ttrue = layoutElements have been initialized | false = panes are not initialized (yet)\n             // 1545\n\t*/\n                                                                                                                   // 1546\n,\tisInitialized = function () {\n                                                                                       // 1547\n\t\tif (state.initialized || state.creatingLayout) return true;\t// already initialized\n                                  // 1548\n\t\telse return _initLayoutElements();\t// try to init panes NOW\n                                                         // 1549\n\t}\n                                                                                                                    // 1550\n\n                                                                                                                      // 1551\n\t/**\n                                                                                                                  // 1552\n\t* Initialize the layout - called automatically whenever an instance of layout is created\n                             // 1553\n\t*\n                                                                                                                    // 1554\n\t* @see  _create() & isInitialized\n                                                                                    // 1555\n\t* @param {boolean=}\t\t[retry=false]\t// indicates this is a 2nd try\n                                                    // 1556\n\t* @return  An object pointer to the instance created\n                                                                 // 1557\n\t*/\n                                                                                                                   // 1558\n,\t_initLayoutElements = function (retry) {\n                                                                            // 1559\n\t\t// initialize config/options\n                                                                                        // 1560\n\t\tvar o = options;\n                                                                                                    // 1561\n\t\t// CANNOT init panes inside a hidden container!\n                                                                     // 1562\n\t\tif (!$N.is(\":visible\")) {\n                                                                                           // 1563\n\t\t\t// handle Chrome bug where popup window 'has no height'\n                                                            // 1564\n\t\t\t// if layout is BODY element, try again in 50ms\n                                                                    // 1565\n\t\t\t// SEE: http://layout.jquery-dev.net/samples/test_popup_window.html\n                                                // 1566\n\t\t\tif ( !retry && browser.webkit && $N[0].tagName === \"BODY\" )\n                                                        // 1567\n\t\t\t\tsetTimeout(function(){ _initLayoutElements(true); }, 50);\n                                                         // 1568\n\t\t\treturn false;\n                                                                                                      // 1569\n\t\t}\n                                                                                                                   // 1570\n\n                                                                                                                      // 1571\n\t\t// a center pane is required, so make sure it exists\n                                                                // 1572\n\t\tif (!getPane(\"center\").length) {\n                                                                                    // 1573\n\t\t\treturn _log( o.errors.centerPaneMissing );\n                                                                         // 1574\n\t\t}\n                                                                                                                   // 1575\n\n                                                                                                                      // 1576\n\t\t// TEMP state so isInitialized returns true during init process\n                                                     // 1577\n\t\tstate.creatingLayout = true;\n                                                                                        // 1578\n\n                                                                                                                      // 1579\n\t\t// update Container dims\n                                                                                            // 1580\n\t\t$.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT include insetX values\n                            // 1581\n\n                                                                                                                      // 1582\n\t\t// initialize all layout elements\n                                                                                   // 1583\n\t\tinitPanes();\t// size & position panes - calls initHandles() - which calls initResizable()\n                           // 1584\n\n                                                                                                                      // 1585\n\t\tif (o.scrollToBookmarkOnLoad) {\n                                                                                     // 1586\n\t\t\tvar l = self.location;\n                                                                                             // 1587\n\t\t\tif (l.hash) l.replace( l.hash ); // scrollTo Bookmark\n                                                              // 1588\n\t\t}\n                                                                                                                   // 1589\n\n                                                                                                                      // 1590\n\t\t// check to see if this layout 'nested' inside a pane\n                                                               // 1591\n\t\tif (Instance.hasParentLayout)\n                                                                                       // 1592\n\t\t\to.resizeWithWindow = false;\n                                                                                        // 1593\n\t\t// bind resizeAll() for 'this layout instance' to window.resize event\n                                               // 1594\n\t\telse if (o.resizeWithWindow)\n                                                                                        // 1595\n\t\t\t$(window).bind(\"resize.\"+ sID, windowResize);\n                                                                      // 1596\n\n                                                                                                                      // 1597\n\t\tdelete state.creatingLayout;\n                                                                                        // 1598\n\t\tstate.initialized = true;\n                                                                                           // 1599\n\n                                                                                                                      // 1600\n\t\t// init plugins for this layout, if there are any\n                                                                   // 1601\n\t\trunPluginCallbacks( Instance, $.layout.onReady );\n                                                                   // 1602\n\n                                                                                                                      // 1603\n\t\t// now run the onload callback, if exists\n                                                                           // 1604\n\t\t_runCallbacks(\"onload_end\");\n                                                                                        // 1605\n\n                                                                                                                      // 1606\n\t\treturn true; // elements initialized successfully\n                                                                   // 1607\n\t}\n                                                                                                                    // 1608\n\n                                                                                                                      // 1609\n\t/**\n                                                                                                                  // 1610\n\t* Initialize nested layouts for a specific pane - can optionally pass layout-options\n                                 // 1611\n\t*\n                                                                                                                    // 1612\n\t* @param {(string|Object)}\tevt_or_pane\tThe pane being opened, ie: north, south, east, or west\n                        // 1613\n\t* @param {Object=}\t\t\t[opts]\t\tLayout-options - if passed, will OVERRRIDE options[pane].children\n                       // 1614\n\t* @return  An object pointer to the layout instance created - or null\n                                                // 1615\n\t*/\n                                                                                                                   // 1616\n,\tcreateChildren = function (evt_or_pane, opts) {\n                                                                     // 1617\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 1618\n\t\t,\t$P\t= $Ps[pane]\n                                                                                                    // 1619\n\t\t;\n                                                                                                                   // 1620\n\t\tif (!$P) return;\n                                                                                                    // 1621\n\t\tvar\t$C\t= $Cs[pane]\n                                                                                                  // 1622\n\t\t,\ts\t= state[pane]\n                                                                                                   // 1623\n\t\t,\to\t= options[pane]\n                                                                                                 // 1624\n\t\t,\tsm\t= options.stateManagement || {}\n                                                                                // 1625\n\t\t,\tcos = opts ? (o.children = opts) : o.children\n                                                                     // 1626\n\t\t;\n                                                                                                                   // 1627\n\t\tif ( $.isPlainObject( cos ) )\n                                                                                       // 1628\n\t\t\tcos = [ cos ]; // convert a hash to a 1-elem array\n                                                                 // 1629\n\t\telse if (!cos || !$.isArray( cos ))\n                                                                                 // 1630\n\t\t\treturn;\n                                                                                                            // 1631\n\n                                                                                                                      // 1632\n\t\t$.each( cos, function (idx, co) {\n                                                                                   // 1633\n\t\t\tif ( !$.isPlainObject( co ) ) return;\n                                                                              // 1634\n\n                                                                                                                      // 1635\n\t\t\t// determine which element is supposed to be the 'child container'\n                                                 // 1636\n\t\t\t// if pane has a 'containerSelector' OR a 'content-div', use those instead of the pane\n                             // 1637\n\t\t\tvar $containers = co.containerSelector ? $P.find( co.containerSelector ) : ($C || $P);\n                             // 1638\n\n                                                                                                                      // 1639\n\t\t\t$containers.each(function(){\n                                                                                       // 1640\n\t\t\t\tvar $cont\t= $(this)\n                                                                                               // 1641\n\t\t\t\t,\tchild\t= $cont.data(\"layout\") //\tsee if a child-layout ALREADY exists on this element\n                            // 1642\n\t\t\t\t;\n                                                                                                                 // 1643\n\t\t\t\t// if no layout exists, but children are set, try to create the layout now\n                                        // 1644\n\t\t\t\tif (!child) {\n                                                                                                     // 1645\n\t\t\t\t\t// TODO: see about moving this to the stateManagement plugin, as a method\n                                        // 1646\n\t\t\t\t\t// set a unique child-instance key for this layout, if not already set\n                                           // 1647\n\t\t\t\t\tsetInstanceKey({ container: $cont, options: co }, s );\n                                                           // 1648\n\t\t\t\t\t// If THIS layout has a hash in stateManagement.autoLoad,\n                                                        // 1649\n\t\t\t\t\t// then see if it also contains state-data for this child-layout\n                                                 // 1650\n\t\t\t\t\t// If so, copy the stateData to child.options.stateManagement.autoLoad\n                                           // 1651\n\t\t\t\t\tif ( sm.includeChildren && state.stateData[pane] ) {\n                                                             // 1652\n\t\t\t\t\t\t//\tTHIS layout's state was cached when its state was loaded\n                                                     // 1653\n\t\t\t\t\t\tvar\tpaneChildren = state.stateData[pane].children || {}\n                                                         // 1654\n\t\t\t\t\t\t,\tchildState\t= paneChildren[ co.instanceKey ]\n                                                                   // 1655\n\t\t\t\t\t\t,\tco_sm\t\t= co.stateManagement || (co.stateManagement = { autoLoad: true })\n                                      // 1656\n\t\t\t\t\t\t;\n                                                                                                               // 1657\n\t\t\t\t\t\t// COPY the stateData into the autoLoad key\n                                                                     // 1658\n\t\t\t\t\t\tif ( co_sm.autoLoad === true && childState ) {\n                                                                  // 1659\n\t\t\t\t\t\t\tco_sm.autoSave\t\t\t= false; // disable autoSave because saving handled by parent-layout\n                          // 1660\n\t\t\t\t\t\t\tco_sm.includeChildren\t= true;  // cascade option - FOR NOW\n                                                     // 1661\n\t\t\t\t\t\t\tco_sm.autoLoad = $.extend(true, {}, childState); // COPY the state-hash\n                                        // 1662\n\t\t\t\t\t\t}\n                                                                                                               // 1663\n\t\t\t\t\t}\n                                                                                                                // 1664\n\n                                                                                                                      // 1665\n\t\t\t\t\t// create the layout\n                                                                                             // 1666\n\t\t\t\t\tchild = $cont.layout( co );\n                                                                                      // 1667\n\n                                                                                                                      // 1668\n\t\t\t\t\t// if successful, update data\n                                                                                    // 1669\n\t\t\t\t\tif (child) {\n                                                                                                     // 1670\n\t\t\t\t\t\t// add the child and update all layout-pointers\n                                                                 // 1671\n\t\t\t\t\t\t// MAY have already been done by child-layout calling parent.refreshChildren()\n                                  // 1672\n\t\t\t\t\t\trefreshChildren( pane, child );\n                                                                                 // 1673\n\t\t\t\t\t}\n                                                                                                                // 1674\n\t\t\t\t}\n                                                                                                                 // 1675\n\t\t\t});\n                                                                                                                // 1676\n\t\t});\n                                                                                                                 // 1677\n\t}\n                                                                                                                    // 1678\n\n                                                                                                                      // 1679\n,\tsetInstanceKey = function (child, parentPaneState) {\n                                                                // 1680\n\t\t// create a named key for use in state and instance branches\n                                                        // 1681\n\t\tvar\t$c\t= child.container\n                                                                                            // 1682\n\t\t,\to\t= child.options\n                                                                                                 // 1683\n\t\t,\tsm\t= o.stateManagement\n                                                                                            // 1684\n\t\t,\tkey\t= o.instanceKey || $c.data(\"layoutInstanceKey\")\n                                                               // 1685\n\t\t;\n                                                                                                                   // 1686\n\t\tif (!key) key = (sm && sm.cookie ? sm.cookie.name : '') || o.name; // look for a name/key\n                           // 1687\n\t\tif (!key) key = \"layout\"+ (++parentPaneState.childIdx);\t// if no name/key found, generate one\n                       // 1688\n\t\telse key = key.replace(/[^\\w-]/gi, '_').replace(/_{2,}/g, '_');\t // ensure is valid as a hash key\n                   // 1689\n\t\to.instanceKey = key;\n                                                                                                // 1690\n\t\t$c.data(\"layoutInstanceKey\", key); // useful if layout is destroyed and then recreated\n                              // 1691\n\t\treturn key;\n                                                                                                         // 1692\n\t}\n                                                                                                                    // 1693\n\n                                                                                                                      // 1694\n\t/**\n                                                                                                                  // 1695\n\t* @param {string}\t\tpane\t\tThe pane being opened, ie: north, south, east, or west\n                                      // 1696\n\t* @param {Object=}\t\tnewChild\tNew child-layout Instance to add to this pane\n                                           // 1697\n\t*/\n                                                                                                                   // 1698\n,\trefreshChildren = function (pane, newChild) {\n                                                                       // 1699\n\t\tvar\t$P\t= $Ps[pane]\n                                                                                                  // 1700\n\t\t,\tpC\t= children[pane]\n                                                                                               // 1701\n\t\t,\ts\t= state[pane]\n                                                                                                   // 1702\n\t\t,\to\n                                                                                                                 // 1703\n\t\t;\n                                                                                                                   // 1704\n\t\t// check for destroy()ed layouts and update the child pointers & arrays\n                                             // 1705\n\t\tif ($.isPlainObject( pC )) {\n                                                                                        // 1706\n\t\t\t$.each( pC, function (key, child) {\n                                                                                // 1707\n\t\t\t\tif (child.destroyed) delete pC[key]\n                                                                               // 1708\n\t\t\t});\n                                                                                                                // 1709\n\t\t\t// if no more children, remove the children hash\n                                                                   // 1710\n\t\t\tif ($.isEmptyObject( pC ))\n                                                                                         // 1711\n\t\t\t\tpC = children[pane] = null; // clear children hash\n                                                                // 1712\n\t\t}\n                                                                                                                   // 1713\n\n                                                                                                                      // 1714\n\t\t// see if there is a directly-nested layout inside this pane\n                                                        // 1715\n\t\t// if there is, then there can be only ONE child-layout, so check that...\n                                           // 1716\n\t\tif (!newChild && !pC) {\n                                                                                             // 1717\n\t\t\tnewChild = $P.data(\"layout\");\n                                                                                      // 1718\n\t\t}\n                                                                                                                   // 1719\n\n                                                                                                                      // 1720\n\t\t// if a newChild instance was passed, add it to children[pane]\n                                                      // 1721\n\t\tif (newChild) {\n                                                                                                     // 1722\n\t\t\t// update child.state\n                                                                                              // 1723\n\t\t\tnewChild.hasParentLayout = true; // set parent-flag in child\n                                                       // 1724\n\t\t\t// instanceKey is a key-name used in both state and children\n                                                       // 1725\n\t\t\to = newChild.options;\n                                                                                              // 1726\n\t\t\t// set a unique child-instance key for this layout, if not already set\n                                             // 1727\n\t\t\tsetInstanceKey( newChild, s );\n                                                                                     // 1728\n\t\t\t// add pointer to pane.children hash\n                                                                               // 1729\n\t\t\tif (!pC) pC = children[pane] = {}; // create an empty children hash\n                                                // 1730\n\t\t\tpC[ o.instanceKey ] = newChild.container.data(\"layout\"); // add childLayout instance\n                               // 1731\n\t\t}\n                                                                                                                   // 1732\n\n                                                                                                                      // 1733\n\t\t// ALWAYS refresh the pane.children alias, even if null\n                                                             // 1734\n\t\tInstance[pane].children = children[pane];\n                                                                           // 1735\n\n                                                                                                                      // 1736\n\t\t// if newChild was NOT passed - see if there is a child layout NOW\n                                                  // 1737\n\t\tif (!newChild) {\n                                                                                                    // 1738\n\t\t\tcreateChildren(pane); // MAY create a child and re-call this method\n                                                // 1739\n\t\t}\n                                                                                                                   // 1740\n\t}\n                                                                                                                    // 1741\n\n                                                                                                                      // 1742\n,\twindowResize = function () {\n                                                                                        // 1743\n\t\tvar\to = options\n                                                                                                     // 1744\n\t\t,\tdelay = Number(o.resizeWithWindowDelay);\n                                                                          // 1745\n\t\tif (delay < 10) delay = 100; // MUST have a delay!\n                                                                  // 1746\n\t\t// resizing uses a delay-loop because the resize event fires repeatly - except in FF, but delay anyway\n              // 1747\n\t\ttimer.clear(\"winResize\"); // if already running\n                                                                     // 1748\n\t\ttimer.set(\"winResize\", function(){\n                                                                                  // 1749\n\t\t\ttimer.clear(\"winResize\");\n                                                                                          // 1750\n\t\t\ttimer.clear(\"winResizeRepeater\");\n                                                                                  // 1751\n\t\t\tvar dims = elDims( $N, o.inset );\n                                                                                  // 1752\n\t\t\t// only trigger resizeAll() if container has changed size\n                                                          // 1753\n\t\t\tif (dims.innerWidth !== sC.innerWidth || dims.innerHeight !== sC.innerHeight)\n                                      // 1754\n\t\t\t\tresizeAll();\n                                                                                                      // 1755\n\t\t}, delay);\n                                                                                                          // 1756\n\t\t// ALSO set fixed-delay timer, if not already running\n                                                               // 1757\n\t\tif (!timer.data[\"winResizeRepeater\"]) setWindowResizeRepeater();\n                                                    // 1758\n\t}\n                                                                                                                    // 1759\n\n                                                                                                                      // 1760\n,\tsetWindowResizeRepeater = function () {\n                                                                             // 1761\n\t\tvar delay = Number(options.resizeWithWindowMaxDelay);\n                                                               // 1762\n\t\tif (delay > 0)\n                                                                                                      // 1763\n\t\t\ttimer.set(\"winResizeRepeater\", function(){ setWindowResizeRepeater(); resizeAll(); }, delay);\n                      // 1764\n\t}\n                                                                                                                    // 1765\n\n                                                                                                                      // 1766\n,\tunload = function () {\n                                                                                              // 1767\n\t\tvar o = options;\n                                                                                                    // 1768\n\n                                                                                                                      // 1769\n\t\t_runCallbacks(\"onunload_start\");\n                                                                                    // 1770\n\n                                                                                                                      // 1771\n\t\t// trigger plugin callabacks for this layout (eg: stateManagement)\n                                                  // 1772\n\t\trunPluginCallbacks( Instance, $.layout.onUnload );\n                                                                  // 1773\n\n                                                                                                                      // 1774\n\t\t_runCallbacks(\"onunload_end\");\n                                                                                      // 1775\n\t}\n                                                                                                                    // 1776\n\n                                                                                                                      // 1777\n\t/**\n                                                                                                                  // 1778\n\t* Validate and initialize container CSS and events\n                                                                   // 1779\n\t*\n                                                                                                                    // 1780\n\t* @see  _create()\n                                                                                                    // 1781\n\t*/\n                                                                                                                   // 1782\n,\t_initContainer = function () {\n                                                                                      // 1783\n\t\tvar\n                                                                                                                 // 1784\n\t\t\tN\t\t= $N[0]\t\n                                                                                                        // 1785\n\t\t,\t$H\t\t= $(\"html\")\n                                                                                                   // 1786\n\t\t,\ttag\t\t= sC.tagName = N.tagName\n                                                                                     // 1787\n\t\t,\tid\t\t= sC.id = N.id\n                                                                                                // 1788\n\t\t,\tcls\t\t= sC.className = N.className\n                                                                                 // 1789\n\t\t,\to\t\t= options\n                                                                                                      // 1790\n\t\t,\tname\t= o.name\n                                                                                                     // 1791\n\t\t,\tprops\t= \"position,margin,padding,border\"\n                                                                          // 1792\n\t\t,\tcss\t\t= \"layoutCSS\"\n                                                                                                // 1793\n\t\t,\tCSS\t\t= {}\n                                                                                                         // 1794\n\t\t,\thid\t\t= \"hidden\" // used A LOT!\n                                                                                    // 1795\n\t\t//\tsee if this container is a 'pane' inside an outer-layout\n                                                         // 1796\n\t\t,\tparent\t= $N.data(\"parentLayout\")\t// parent-layout Instance\n                                                        // 1797\n\t\t,\tpane\t= $N.data(\"layoutEdge\")\t\t// pane-name in parent-layout\n                                                       // 1798\n\t\t,\tisChild\t= parent && pane\n                                                                                          // 1799\n\t\t,\tnum\t\t= $.layout.cssNum\n                                                                                            // 1800\n\t\t,\t$parent, n\n                                                                                                        // 1801\n\t\t;\n                                                                                                                   // 1802\n\t\t// sC = state.container\n                                                                                             // 1803\n\t\tsC.selector = $N.selector.split(\".slice\")[0];\n                                                                       // 1804\n\t\tsC.ref\t\t= (o.name ? o.name +' layout / ' : '') + tag + (id ? \"#\"+id : cls ? '.['+cls+']' : ''); // used in messages\n // 1805\n\t\tsC.isBody\t= (tag === \"BODY\");\n                                                                                       // 1806\n\n                                                                                                                      // 1807\n\t\t// try to find a parent-layout\n                                                                                      // 1808\n\t\tif (!isChild && !sC.isBody) {\n                                                                                       // 1809\n\t\t\t$parent = $N.closest(\".\"+ $.layout.defaults.panes.paneClass);\n                                                      // 1810\n\t\t\tparent\t= $parent.data(\"parentLayout\");\n                                                                             // 1811\n\t\t\tpane\t= $parent.data(\"layoutEdge\");\n                                                                                 // 1812\n\t\t\tisChild\t= parent && pane;\n                                                                                          // 1813\n\t\t}\n                                                                                                                   // 1814\n\n                                                                                                                      // 1815\n\t\t$N\t.data({\n                                                                                                          // 1816\n\t\t\t\tlayout: Instance\n                                                                                                  // 1817\n\t\t\t,\tlayoutContainer: sID // FLAG to indicate this is a layout-container - contains unique internal ID\n                // 1818\n\t\t\t})\n                                                                                                                 // 1819\n\t\t\t.addClass(o.containerClass)\n                                                                                        // 1820\n\t\t;\n                                                                                                                   // 1821\n\t\tvar layoutMethods = {\n                                                                                               // 1822\n\t\t\tdestroy:\t''\n                                                                                                        // 1823\n\t\t,\tinitPanes:\t''\n                                                                                                     // 1824\n\t\t,\tresizeAll:\t'resizeAll'\n                                                                                            // 1825\n\t\t,\tresize:\t\t'resizeAll'\n                                                                                              // 1826\n\t\t};\n                                                                                                                  // 1827\n\t\t// loop hash and bind all methods - include layoutID namespacing\n                                                    // 1828\n\t\tfor (name in layoutMethods) {\n                                                                                       // 1829\n\t\t\t$N.bind(\"layout\"+ name.toLowerCase() +\".\"+ sID, Instance[ layoutMethods[name] || name ]);\n                          // 1830\n\t\t}\n                                                                                                                   // 1831\n\n                                                                                                                      // 1832\n\t\t// if this container is another layout's 'pane', then set child/parent pointers\n                                     // 1833\n\t\tif (isChild) {\n                                                                                                      // 1834\n\t\t\t// update parent flag\n                                                                                              // 1835\n\t\t\tInstance.hasParentLayout = true;\n                                                                                   // 1836\n\t\t\t// set pointers to THIS child-layout (Instance) in parent-layout\n                                                   // 1837\n\t\t\tparent.refreshChildren( pane, Instance );\n                                                                          // 1838\n\t\t}\n                                                                                                                   // 1839\n\n                                                                                                                      // 1840\n\t\t// SAVE original container CSS for use in destroy()\n                                                                 // 1841\n\t\tif (!$N.data(css)) {\n                                                                                                // 1842\n\t\t\t// handle props like overflow different for BODY & HTML - has 'system default' values\n                              // 1843\n\t\t\tif (sC.isBody) {\n                                                                                                   // 1844\n\t\t\t\t// SAVE <BODY> CSS\n                                                                                                // 1845\n\t\t\t\t$N.data(css, $.extend( styles($N, props), {\n                                                                       // 1846\n\t\t\t\t\theight:\t\t$N.css(\"height\")\n                                                                                        // 1847\n\t\t\t\t,\toverflow:\t$N.css(\"overflow\")\n                                                                                    // 1848\n\t\t\t\t,\toverflowX:\t$N.css(\"overflowX\")\n                                                                                  // 1849\n\t\t\t\t,\toverflowY:\t$N.css(\"overflowY\")\n                                                                                  // 1850\n\t\t\t\t}));\n                                                                                                              // 1851\n\t\t\t\t// ALSO SAVE <HTML> CSS\n                                                                                           // 1852\n\t\t\t\t$H.data(css, $.extend( styles($H, 'padding'), {\n                                                                   // 1853\n\t\t\t\t\theight:\t\t\"auto\" // FF would return a fixed px-size!\n                                                              // 1854\n\t\t\t\t,\toverflow:\t$H.css(\"overflow\")\n                                                                                    // 1855\n\t\t\t\t,\toverflowX:\t$H.css(\"overflowX\")\n                                                                                  // 1856\n\t\t\t\t,\toverflowY:\t$H.css(\"overflowY\")\n                                                                                  // 1857\n\t\t\t\t}));\n                                                                                                              // 1858\n\t\t\t}\n                                                                                                                  // 1859\n\t\t\telse // handle props normally for non-body elements\n                                                                // 1860\n\t\t\t\t$N.data(css, styles($N, props+\",top,bottom,left,right,width,height,overflow,overflowX,overflowY\") );\n              // 1861\n\t\t}\n                                                                                                                   // 1862\n\n                                                                                                                      // 1863\n\t\ttry {\n                                                                                                               // 1864\n\t\t\t// common container CSS\n                                                                                            // 1865\n\t\t\tCSS = {\n                                                                                                            // 1866\n\t\t\t\toverflow:\thid\n                                                                                                     // 1867\n\t\t\t,\toverflowX:\thid\n                                                                                                   // 1868\n\t\t\t,\toverflowY:\thid\n                                                                                                   // 1869\n\t\t\t};\n                                                                                                                 // 1870\n\t\t\t$N.css( CSS );\n                                                                                                     // 1871\n\n                                                                                                                      // 1872\n\t\t\tif (o.inset && !$.isPlainObject(o.inset)) {\n                                                                        // 1873\n\t\t\t\t// can specify a single number for equal outset all-around\n                                                        // 1874\n\t\t\t\tn = parseInt(o.inset, 10) || 0\n                                                                                    // 1875\n\t\t\t\to.inset = {\n                                                                                                       // 1876\n\t\t\t\t\ttop:\tn\n                                                                                                           // 1877\n\t\t\t\t,\tbottom:\tn\n                                                                                                       // 1878\n\t\t\t\t,\tleft:\tn\n                                                                                                         // 1879\n\t\t\t\t,\tright:\tn\n                                                                                                        // 1880\n\t\t\t\t};\n                                                                                                                // 1881\n\t\t\t}\n                                                                                                                  // 1882\n\n                                                                                                                      // 1883\n\t\t\t// format html & body if this is a full page layout\n                                                                // 1884\n\t\t\tif (sC.isBody) {\n                                                                                                   // 1885\n\t\t\t\t// if HTML has padding, use this as an outer-spacing around BODY\n                                                  // 1886\n\t\t\t\tif (!o.outset) {\n                                                                                                  // 1887\n\t\t\t\t\t// use padding from parent-elem (HTML) as outset\n                                                                 // 1888\n\t\t\t\t\to.outset = {\n                                                                                                     // 1889\n\t\t\t\t\t\ttop:\tnum($H, \"paddingTop\")\n                                                                                      // 1890\n\t\t\t\t\t,\tbottom:\tnum($H, \"paddingBottom\")\n                                                                               // 1891\n\t\t\t\t\t,\tleft:\tnum($H, \"paddingLeft\")\n                                                                                   // 1892\n\t\t\t\t\t,\tright:\tnum($H, \"paddingRight\")\n                                                                                 // 1893\n\t\t\t\t\t};\n                                                                                                               // 1894\n\t\t\t\t}\n                                                                                                                 // 1895\n\t\t\t\telse if (!$.isPlainObject(o.outset)) {\n                                                                            // 1896\n\t\t\t\t\t// can specify a single number for equal outset all-around\n                                                       // 1897\n\t\t\t\t\tn = parseInt(o.outset, 10) || 0\n                                                                                  // 1898\n\t\t\t\t\to.outset = {\n                                                                                                     // 1899\n\t\t\t\t\t\ttop:\tn\n                                                                                                          // 1900\n\t\t\t\t\t,\tbottom:\tn\n                                                                                                      // 1901\n\t\t\t\t\t,\tleft:\tn\n                                                                                                        // 1902\n\t\t\t\t\t,\tright:\tn\n                                                                                                       // 1903\n\t\t\t\t\t};\n                                                                                                               // 1904\n\t\t\t\t}\n                                                                                                                 // 1905\n\t\t\t\t// HTML\n                                                                                                           // 1906\n\t\t\t\t$H.css( CSS ).css({\n                                                                                               // 1907\n\t\t\t\t\theight:\t\t\"100%\"\n                                                                                                  // 1908\n\t\t\t\t,\tborder:\t\t\"none\"\t// no border or padding allowed when using height = 100%\n                                        // 1909\n\t\t\t\t,\tpadding:\t0\t\t// ditto\n                                                                                            // 1910\n\t\t\t\t,\tmargin:\t\t0\n                                                                                                      // 1911\n\t\t\t\t});\n                                                                                                               // 1912\n\t\t\t\t// BODY\n                                                                                                           // 1913\n\t\t\t\tif (browser.isIE6) {\n                                                                                              // 1914\n\t\t\t\t\t// IE6 CANNOT use the trick of setting absolute positioning on all 4 sides - must have 'height'\n                  // 1915\n\t\t\t\t\t$N.css({\n                                                                                                         // 1916\n\t\t\t\t\t\twidth:\t\t\"100%\"\n                                                                                                  // 1917\n\t\t\t\t\t,\theight:\t\t\"100%\"\n                                                                                                // 1918\n\t\t\t\t\t,\tborder:\t\t\"none\"\t// no border or padding allowed when using height = 100%\n                                       // 1919\n\t\t\t\t\t,\tpadding:\t0\t\t// ditto\n                                                                                           // 1920\n\t\t\t\t\t,\tmargin:\t\t0\n                                                                                                     // 1921\n\t\t\t\t\t,\tposition:\t\"relative\"\n                                                                                           // 1922\n\t\t\t\t\t});\n                                                                                                              // 1923\n\t\t\t\t\t// convert body padding to an inset option - the border cannot be measured in IE6!\n                               // 1924\n\t\t\t\t\tif (!o.inset) o.inset = elDims( $N ).inset;\n                                                                      // 1925\n\t\t\t\t}\n                                                                                                                 // 1926\n\t\t\t\telse { // use absolute positioning for BODY to allow borders & padding without overflow\n                           // 1927\n\t\t\t\t\t$N.css({\n                                                                                                         // 1928\n\t\t\t\t\t\twidth:\t\t\"auto\"\n                                                                                                  // 1929\n\t\t\t\t\t,\theight:\t\t\"auto\"\n                                                                                                // 1930\n\t\t\t\t\t,\tmargin:\t\t0\n                                                                                                     // 1931\n\t\t\t\t\t,\tposition:\t\"absolute\"\t// allows for border and padding on BODY\n                                                  // 1932\n\t\t\t\t\t});\n                                                                                                              // 1933\n\t\t\t\t\t// apply edge-positioning created above\n                                                                          // 1934\n\t\t\t\t\t$N.css( o.outset );\n                                                                                              // 1935\n\t\t\t\t}\n                                                                                                                 // 1936\n\t\t\t\t// set current layout-container dimensions\n                                                                        // 1937\n\t\t\t\t$.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT include insetX values\n                          // 1938\n\t\t\t}\n                                                                                                                  // 1939\n\t\t\telse {\n                                                                                                             // 1940\n\t\t\t\t// container MUST have 'position'\n                                                                                 // 1941\n\t\t\t\tvar\tp = $N.css(\"position\");\n                                                                                       // 1942\n\t\t\t\tif (!p || !p.match(/(fixed|absolute|relative)/))\n                                                                  // 1943\n\t\t\t\t\t$N.css(\"position\",\"relative\");\n                                                                                   // 1944\n\n                                                                                                                      // 1945\n\t\t\t\t// set current layout-container dimensions\n                                                                        // 1946\n\t\t\t\tif ( $N.is(\":visible\") ) {\n                                                                                        // 1947\n\t\t\t\t\t$.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT change insetX (padding) values\n                // 1948\n\t\t\t\t\tif (sC.innerHeight < 1) // container has no 'height' - warn developer\n                                            // 1949\n\t\t\t\t\t\t_log( o.errors.noContainerHeight.replace(/CONTAINER/, sC.ref) );\n                                                // 1950\n\t\t\t\t}\n                                                                                                                 // 1951\n\t\t\t}\n                                                                                                                  // 1952\n\n                                                                                                                      // 1953\n\t\t\t// if container has min-width/height, then enable scrollbar(s)\n                                                     // 1954\n\t\t\tif ( num($N, \"minWidth\")  ) $N.parent().css(\"overflowX\",\"auto\");\n                                                   // 1955\n\t\t\tif ( num($N, \"minHeight\") ) $N.parent().css(\"overflowY\",\"auto\");\n                                                   // 1956\n\n                                                                                                                      // 1957\n\t\t} catch (ex) {}\n                                                                                                     // 1958\n\t}\n                                                                                                                    // 1959\n\n                                                                                                                      // 1960\n\t/**\n                                                                                                                  // 1961\n\t* Bind layout hotkeys - if options enabled\n                                                                           // 1962\n\t*\n                                                                                                                    // 1963\n\t* @see  _create() and addPane()\n                                                                                      // 1964\n\t* @param {string=}\t[panes=\"\"]\tThe edge(s) to process\n                                                                 // 1965\n\t*/\n                                                                                                                   // 1966\n,\tinitHotkeys = function (panes) {\n                                                                                    // 1967\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\n                                                                  // 1968\n\t\t// bind keyDown to capture hotkeys, if option enabled for ANY pane\n                                                  // 1969\n\t\t$.each(panes, function (i, pane) {\n                                                                                  // 1970\n\t\t\tvar o = options[pane];\n                                                                                             // 1971\n\t\t\tif (o.enableCursorHotkey || o.customHotkey) {\n                                                                      // 1972\n\t\t\t\t$(document).bind(\"keydown.\"+ sID, keyDown); // only need to bind this ONCE\n                                        // 1973\n\t\t\t\treturn false; // BREAK - binding was done\n                                                                         // 1974\n\t\t\t}\n                                                                                                                  // 1975\n\t\t});\n                                                                                                                 // 1976\n\t}\n                                                                                                                    // 1977\n\n                                                                                                                      // 1978\n\t/**\n                                                                                                                  // 1979\n\t* Build final OPTIONS data\n                                                                                           // 1980\n\t*\n                                                                                                                    // 1981\n\t* @see  _create()\n                                                                                                    // 1982\n\t*/\n                                                                                                                   // 1983\n,\tinitOptions = function () {\n                                                                                         // 1984\n\t\tvar data, d, pane, key, val, i, c, o;\n                                                                               // 1985\n\n                                                                                                                      // 1986\n\t\t// reprocess user's layout-options to have correct options sub-key structure\n                                        // 1987\n\t\topts = $.layout.transformData( opts, true ); // panes = default subkey\n                                              // 1988\n\n                                                                                                                      // 1989\n\t\t// auto-rename old options for backward compatibility\n                                                               // 1990\n\t\topts = $.layout.backwardCompatibility.renameAllOptions( opts );\n                                                     // 1991\n\n                                                                                                                      // 1992\n\t\t// if user-options has 'panes' key (pane-defaults), clean it...\n                                                     // 1993\n\t\tif (!$.isEmptyObject(opts.panes)) {\n                                                                                 // 1994\n\t\t\t// REMOVE any pane-defaults that MUST be set per-pane\n                                                              // 1995\n\t\t\tdata = $.layout.optionsMap.noDefault;\n                                                                              // 1996\n\t\t\tfor (i=0, c=data.length; i<c; i++) {\n                                                                               // 1997\n\t\t\t\tkey = data[i];\n                                                                                                    // 1998\n\t\t\t\tdelete opts.panes[key]; // OK if does not exist\n                                                                   // 1999\n\t\t\t}\n                                                                                                                  // 2000\n\t\t\t// REMOVE any layout-options specified under opts.panes\n                                                            // 2001\n\t\t\tdata = $.layout.optionsMap.layout;\n                                                                                 // 2002\n\t\t\tfor (i=0, c=data.length; i<c; i++) {\n                                                                               // 2003\n\t\t\t\tkey = data[i];\n                                                                                                    // 2004\n\t\t\t\tdelete opts.panes[key]; // OK if does not exist\n                                                                   // 2005\n\t\t\t}\n                                                                                                                  // 2006\n\t\t}\n                                                                                                                   // 2007\n\n                                                                                                                      // 2008\n\t\t// MOVE any NON-layout-options from opts-root to opts.panes\n                                                         // 2009\n\t\tdata = $.layout.optionsMap.layout;\n                                                                                  // 2010\n\t\tvar rootKeys = $.layout.config.optionRootKeys;\n                                                                      // 2011\n\t\tfor (key in opts) {\n                                                                                                 // 2012\n\t\t\tval = opts[key];\n                                                                                                   // 2013\n\t\t\tif ($.inArray(key, rootKeys) < 0 && $.inArray(key, data) < 0) {\n                                                    // 2014\n\t\t\t\tif (!opts.panes[key])\n                                                                                             // 2015\n\t\t\t\t\topts.panes[key] = $.isPlainObject(val) ? $.extend(true, {}, val) : val;\n                                          // 2016\n\t\t\t\tdelete opts[key]\n                                                                                                  // 2017\n\t\t\t}\n                                                                                                                  // 2018\n\t\t}\n                                                                                                                   // 2019\n\n                                                                                                                      // 2020\n\t\t// START by updating ALL options from opts\n                                                                          // 2021\n\t\t$.extend(true, options, opts);\n                                                                                      // 2022\n\n                                                                                                                      // 2023\n\t\t// CREATE final options (and config) for EACH pane\n                                                                  // 2024\n\t\t$.each(_c.allPanes, function (i, pane) {\n                                                                            // 2025\n\n                                                                                                                      // 2026\n\t\t\t// apply 'pane-defaults' to CONFIG.[PANE]\n                                                                          // 2027\n\t\t\t_c[pane] = $.extend(true, {}, _c.panes, _c[pane]);\n                                                                 // 2028\n\n                                                                                                                      // 2029\n\t\t\td = options.panes;\n                                                                                                 // 2030\n\t\t\to = options[pane];\n                                                                                                 // 2031\n\n                                                                                                                      // 2032\n\t\t\t// center-pane uses SOME keys in defaults.panes branch\n                                                             // 2033\n\t\t\tif (pane === 'center') {\n                                                                                           // 2034\n\t\t\t\t// ONLY copy keys from opts.panes listed in: $.layout.optionsMap.center\n                                           // 2035\n\t\t\t\tdata = $.layout.optionsMap.center;\t\t// list of 'center-pane keys'\n                                                 // 2036\n\t\t\t\tfor (i=0, c=data.length; i<c; i++) {\t// loop the list...\n                                                          // 2037\n\t\t\t\t\tkey = data[i];\n                                                                                                   // 2038\n\t\t\t\t\t// only need to use pane-default if pane-specific value not set\n                                                  // 2039\n\t\t\t\t\tif (!opts.center[key] && (opts.panes[key] || !o[key]))\n                                                           // 2040\n\t\t\t\t\t\to[key] = d[key]; // pane-default\n                                                                                // 2041\n\t\t\t\t}\n                                                                                                                 // 2042\n\t\t\t}\n                                                                                                                  // 2043\n\t\t\telse {\n                                                                                                             // 2044\n\t\t\t\t// border-panes use ALL keys in defaults.panes branch\n                                                             // 2045\n\t\t\t\to = options[pane] = $.extend(true, {}, d, o); // re-apply pane-specific opts AFTER pane-defaults\n                  // 2046\n\t\t\t\tcreateFxOptions( pane );\n                                                                                          // 2047\n\t\t\t\t// ensure all border-pane-specific base-classes exist\n                                                             // 2048\n\t\t\t\tif (!o.resizerClass)\to.resizerClass\t= \"ui-layout-resizer\";\n                                                        // 2049\n\t\t\t\tif (!o.togglerClass)\to.togglerClass\t= \"ui-layout-toggler\";\n                                                        // 2050\n\t\t\t}\n                                                                                                                  // 2051\n\t\t\t// ensure we have base pane-class (ALL panes)\n                                                                      // 2052\n\t\t\tif (!o.paneClass) o.paneClass = \"ui-layout-pane\";\n                                                                  // 2053\n\t\t});\n                                                                                                                 // 2054\n\n                                                                                                                      // 2055\n\t\t// update options.zIndexes if a zIndex-option specified\n                                                             // 2056\n\t\tvar zo\t= opts.zIndex\n                                                                                                // 2057\n\t\t,\tz\t= options.zIndexes;\n                                                                                             // 2058\n\t\tif (zo > 0) {\n                                                                                                       // 2059\n\t\t\tz.pane_normal\t\t= zo;\n                                                                                               // 2060\n\t\t\tz.content_mask\t\t= max(zo+1, z.content_mask);\t// MIN = +1\n                                                           // 2061\n\t\t\tz.resizer_normal\t= max(zo+2, z.resizer_normal);\t// MIN = +2\n                                                        // 2062\n\t\t}\n                                                                                                                   // 2063\n\n                                                                                                                      // 2064\n\t\t// DELETE 'panes' key now that we are done - values were copied to EACH pane\n                                        // 2065\n\t\tdelete options.panes;\n                                                                                               // 2066\n\n                                                                                                                      // 2067\n\n                                                                                                                      // 2068\n\t\tfunction createFxOptions ( pane ) {\n                                                                                 // 2069\n\t\t\tvar\to = options[pane]\n                                                                                              // 2070\n\t\t\t,\td = options.panes;\n                                                                                               // 2071\n\t\t\t// ensure fxSettings key to avoid errors\n                                                                           // 2072\n\t\t\tif (!o.fxSettings) o.fxSettings = {};\n                                                                              // 2073\n\t\t\tif (!d.fxSettings) d.fxSettings = {};\n                                                                              // 2074\n\n                                                                                                                      // 2075\n\t\t\t$.each([\"_open\",\"_close\",\"_size\"], function (i,n) { \n                                                               // 2076\n\t\t\t\tvar\n                                                                                                               // 2077\n\t\t\t\t\tsName\t\t= \"fxName\"+ n\n                                                                                             // 2078\n\t\t\t\t,\tsSpeed\t\t= \"fxSpeed\"+ n\n                                                                                          // 2079\n\t\t\t\t,\tsSettings\t= \"fxSettings\"+ n\n                                                                                     // 2080\n\t\t\t\t\t// recalculate fxName according to specificity rules\n                                                             // 2081\n\t\t\t\t,\tfxName = o[sName] =\n                                                                                             // 2082\n\t\t\t\t\t\to[sName]\t// options.west.fxName_open\n                                                                            // 2083\n\t\t\t\t\t||\td[sName]\t// options.panes.fxName_open\n                                                                         // 2084\n\t\t\t\t\t||\to.fxName\t// options.west.fxName\n                                                                               // 2085\n\t\t\t\t\t||\td.fxName\t// options.panes.fxName\n                                                                              // 2086\n\t\t\t\t\t||\t\"none\"\t\t// MEANS $.layout.defaults.panes.fxName == \"\" || false || null || 0\n                                   // 2087\n\t\t\t\t,\tfxExists\t= $.effects && ($.effects[fxName] || ($.effects.effect && $.effects.effect[fxName]))\n                   // 2088\n\t\t\t\t;\n                                                                                                                 // 2089\n\t\t\t\t// validate fxName to ensure is valid effect - MUST have effect-config data in options.effects\n                    // 2090\n\t\t\t\tif (fxName === \"none\" || !options.effects[fxName] || !fxExists)\n                                                   // 2091\n\t\t\t\t\tfxName = o[sName] = \"none\"; // effect not loaded OR unrecognized fxName\n                                          // 2092\n\n                                                                                                                      // 2093\n\t\t\t\t// set vars for effects subkeys to simplify logic\n                                                                 // 2094\n\t\t\t\tvar\tfx\t\t= options.effects[fxName] || {}\t// effects.slide\n                                                          // 2095\n\t\t\t\t,\tfx_all\t= fx.all\t|| null\t\t\t\t// effects.slide.all\n                                                                 // 2096\n\t\t\t\t,\tfx_pane\t= fx[pane]\t|| null\t\t\t\t// effects.slide.west\n                                                             // 2097\n\t\t\t\t;\n                                                                                                                 // 2098\n\t\t\t\t// create fxSpeed[_open|_close|_size]\n                                                                             // 2099\n\t\t\t\to[sSpeed] =\n                                                                                                       // 2100\n\t\t\t\t\to[sSpeed]\t\t\t\t// options.west.fxSpeed_open\n                                                                        // 2101\n\t\t\t\t||\td[sSpeed]\t\t\t\t// options.west.fxSpeed_open\n                                                                      // 2102\n\t\t\t\t||\to.fxSpeed\t\t\t\t// options.west.fxSpeed\n                                                                           // 2103\n\t\t\t\t||\td.fxSpeed\t\t\t\t// options.panes.fxSpeed\n                                                                          // 2104\n\t\t\t\t||\tnull\t\t\t\t\t// DEFAULT - let fxSetting.duration control speed\n                                                     // 2105\n\t\t\t\t;\n                                                                                                                 // 2106\n\t\t\t\t// create fxSettings[_open|_close|_size]\n                                                                          // 2107\n\t\t\t\to[sSettings] = $.extend(\n                                                                                          // 2108\n\t\t\t\t\ttrue\n                                                                                                             // 2109\n\t\t\t\t,\t{}\n                                                                                                              // 2110\n\t\t\t\t,\tfx_all\t\t\t\t\t// effects.slide.all\n                                                                                 // 2111\n\t\t\t\t,\tfx_pane\t\t\t\t\t// effects.slide.west\n                                                                               // 2112\n\t\t\t\t,\td.fxSettings\t\t\t// options.panes.fxSettings\n                                                                      // 2113\n\t\t\t\t,\to.fxSettings\t\t\t// options.west.fxSettings\n                                                                       // 2114\n\t\t\t\t,\td[sSettings]\t\t\t// options.panes.fxSettings_open\n                                                                 // 2115\n\t\t\t\t,\to[sSettings]\t\t\t// options.west.fxSettings_open\n                                                                  // 2116\n\t\t\t\t);\n                                                                                                                // 2117\n\t\t\t});\n                                                                                                                // 2118\n\n                                                                                                                      // 2119\n\t\t\t// DONE creating action-specific-settings for this pane,\n                                                           // 2120\n\t\t\t// so DELETE generic options - are no longer meaningful\n                                                            // 2121\n\t\t\tdelete o.fxName;\n                                                                                                   // 2122\n\t\t\tdelete o.fxSpeed;\n                                                                                                  // 2123\n\t\t\tdelete o.fxSettings;\n                                                                                               // 2124\n\t\t}\n                                                                                                                   // 2125\n\t}\n                                                                                                                    // 2126\n\n                                                                                                                      // 2127\n\t/**\n                                                                                                                  // 2128\n\t* Initialize module objects, styling, size and position for all panes\n                                                // 2129\n\t*\n                                                                                                                    // 2130\n\t* @see  _initElements()\n                                                                                              // 2131\n\t* @param {string}\tpane\t\tThe pane to process\n                                                                          // 2132\n\t*/\n                                                                                                                   // 2133\n,\tgetPane = function (pane) {\n                                                                                         // 2134\n\t\tvar sel = options[pane].paneSelector\n                                                                                // 2135\n\t\tif (sel.substr(0,1)===\"#\") // ID selector\n                                                                           // 2136\n\t\t\t// NOTE: elements selected 'by ID' DO NOT have to be 'children'\n                                                    // 2137\n\t\t\treturn $N.find(sel).eq(0);\n                                                                                         // 2138\n\t\telse { // class or other selector\n                                                                                   // 2139\n\t\t\tvar $P = $N.children(sel).eq(0);\n                                                                                   // 2140\n\t\t\t// look for the pane nested inside a 'form' element\n                                                                // 2141\n\t\t\treturn $P.length ? $P : $N.children(\"form:first\").children(sel).eq(0);\n                                             // 2142\n\t\t}\n                                                                                                                   // 2143\n\t}\n                                                                                                                    // 2144\n\n                                                                                                                      // 2145\n\t/**\n                                                                                                                  // 2146\n\t* @param {Object=}\t\tevt\n                                                                                              // 2147\n\t*/\n                                                                                                                   // 2148\n,\tinitPanes = function (evt) {\n                                                                                        // 2149\n\t\t// stopPropagation if called by trigger(\"layoutinitpanes\") - use evtPane utility \n                                   // 2150\n\t\tevtPane(evt);\n                                                                                                       // 2151\n\n                                                                                                                      // 2152\n\t\t// NOTE: do north & south FIRST so we can measure their height - do center LAST\n                                     // 2153\n\t\t$.each(_c.allPanes, function (idx, pane) {\n                                                                          // 2154\n\t\t\taddPane( pane, true );\n                                                                                             // 2155\n\t\t});\n                                                                                                                 // 2156\n\n                                                                                                                      // 2157\n\t\t// init the pane-handles NOW in case we have to hide or close the pane below\n                                        // 2158\n\t\tinitHandles();\n                                                                                                      // 2159\n\n                                                                                                                      // 2160\n\t\t// now that all panes have been initialized and initially-sized,\n                                                    // 2161\n\t\t// make sure there is really enough space available for each pane\n                                                   // 2162\n\t\t$.each(_c.borderPanes, function (i, pane) {\n                                                                         // 2163\n\t\t\tif ($Ps[pane] && state[pane].isVisible) { // pane is OPEN\n                                                          // 2164\n\t\t\t\tsetSizeLimits(pane);\n                                                                                              // 2165\n\t\t\t\tmakePaneFit(pane); // pane may be Closed, Hidden or Resized by makePaneFit()\n                                      // 2166\n\t\t\t}\n                                                                                                                  // 2167\n\t\t});\n                                                                                                                 // 2168\n\t\t// size center-pane AGAIN in case we 'closed' a border-pane in loop above\n                                           // 2169\n\t\tsizeMidPanes(\"center\");\n                                                                                             // 2170\n\n                                                                                                                      // 2171\n\t\t//\tChrome/Webkit sometimes fires callbacks BEFORE it completes resizing!\n                                            // 2172\n\t\t//\tBefore RC30.3, there was a 10ms delay here, but that caused layout \n                                              // 2173\n\t\t//\tto load asynchrously, which is BAD, so try skipping delay for now\n                                                // 2174\n\n                                                                                                                      // 2175\n\t\t// process pane contents and callbacks, and init/resize child-layout if exists\n                                      // 2176\n\t\t$.each(_c.allPanes, function (idx, pane) {\n                                                                          // 2177\n\t\t\tafterInitPane(pane);\n                                                                                               // 2178\n\t\t});\n                                                                                                                 // 2179\n\t}\n                                                                                                                    // 2180\n\n                                                                                                                      // 2181\n\t/**\n                                                                                                                  // 2182\n\t* Add a pane to the layout - subroutine of initPanes()\n                                                               // 2183\n\t*\n                                                                                                                    // 2184\n\t* @see  initPanes()\n                                                                                                  // 2185\n\t* @param {string}\tpane\t\t\tThe pane to process\n                                                                         // 2186\n\t* @param {boolean=}\t[force=false]\tSize content after init\n                                                            // 2187\n\t*/\n                                                                                                                   // 2188\n,\taddPane = function (pane, force) {\n                                                                                  // 2189\n\t\tif (!force && !isInitialized()) return;\n                                                                             // 2190\n\t\tvar\n                                                                                                                 // 2191\n\t\t\to\t\t= options[pane]\n                                                                                                 // 2192\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 2193\n\t\t,\tc\t\t= _c[pane]\n                                                                                                     // 2194\n\t\t,\tdir\t\t= c.dir\n                                                                                                      // 2195\n\t\t,\tfx\t\t= s.fx\n                                                                                                        // 2196\n\t\t,\tspacing\t= o.spacing_open || 0\n                                                                                     // 2197\n\t\t,\tisCenter = (pane === \"center\")\n                                                                                    // 2198\n\t\t,\tCSS\t\t= {}\n                                                                                                         // 2199\n\t\t,\t$P\t\t= $Ps[pane]\n                                                                                                   // 2200\n\t\t,\tsize, minSize, maxSize, child\n                                                                                     // 2201\n\t\t;\n                                                                                                                   // 2202\n\t\t// if pane-pointer already exists, remove the old one first\n                                                         // 2203\n\t\tif ($P)\n                                                                                                             // 2204\n\t\t\tremovePane( pane, false, true, false );\n                                                                            // 2205\n\t\telse\n                                                                                                                // 2206\n\t\t\t$Cs[pane] = false; // init\n                                                                                         // 2207\n\n                                                                                                                      // 2208\n\t\t$P = $Ps[pane] = getPane(pane);\n                                                                                     // 2209\n\t\tif (!$P.length) {\n                                                                                                   // 2210\n\t\t\t$Ps[pane] = false; // logic\n                                                                                        // 2211\n\t\t\treturn;\n                                                                                                            // 2212\n\t\t}\n                                                                                                                   // 2213\n\n                                                                                                                      // 2214\n\t\t// SAVE original Pane CSS\n                                                                                           // 2215\n\t\tif (!$P.data(\"layoutCSS\")) {\n                                                                                        // 2216\n\t\t\tvar props = \"position,top,left,bottom,right,width,height,overflow,zIndex,display,backgroundColor,padding,margin,border\";\n\t\t\t$P.data(\"layoutCSS\", styles($P, props));\n                                                                           // 2218\n\t\t}\n                                                                                                                   // 2219\n\n                                                                                                                      // 2220\n\t\t// create alias for pane data in Instance - initHandles will add more\n                                               // 2221\n\t\tInstance[pane] = {\n                                                                                                  // 2222\n\t\t\tname:\t\tpane\n                                                                                                        // 2223\n\t\t,\tpane:\t\t$Ps[pane]\n                                                                                                  // 2224\n\t\t,\tcontent:\t$Cs[pane]\n                                                                                                // 2225\n\t\t,\toptions:\toptions[pane]\n                                                                                            // 2226\n\t\t,\tstate:\t\tstate[pane]\n                                                                                               // 2227\n\t\t,\tchildren:\tchildren[pane]\n                                                                                          // 2228\n\t\t};\n                                                                                                                  // 2229\n\n                                                                                                                      // 2230\n\t\t// add classes, attributes & events\n                                                                                 // 2231\n\t\t$P\t.data({\n                                                                                                          // 2232\n\t\t\t\tparentLayout:\tInstance\t\t// pointer to Layout Instance\n                                                             // 2233\n\t\t\t,\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\n                                                  // 2234\n\t\t\t,\tlayoutEdge:\t\tpane\n                                                                                                // 2235\n\t\t\t,\tlayoutRole:\t\t\"pane\"\n                                                                                              // 2236\n\t\t\t})\n                                                                                                                 // 2237\n\t\t\t.css(c.cssReq).css(\"zIndex\", options.zIndexes.pane_normal)\n                                                         // 2238\n\t\t\t.css(o.applyDemoStyles ? c.cssDemo : {}) // demo styles\n                                                            // 2239\n\t\t\t.addClass( o.paneClass +\" \"+ o.paneClass+\"-\"+pane ) // default = \"ui-layout-pane ui-layout-pane-west\" - may be a dupe of 'paneSelector'\n\t\t\t.bind(\"mouseenter.\"+ sID, addHover )\n                                                                               // 2241\n\t\t\t.bind(\"mouseleave.\"+ sID, removeHover )\n                                                                            // 2242\n\t\t\t;\n                                                                                                                  // 2243\n\t\tvar paneMethods = {\n                                                                                                 // 2244\n\t\t\t\thide:\t\t\t\t''\n                                                                                                       // 2245\n\t\t\t,\tshow:\t\t\t\t''\n                                                                                                      // 2246\n\t\t\t,\ttoggle:\t\t\t\t''\n                                                                                                    // 2247\n\t\t\t,\tclose:\t\t\t\t''\n                                                                                                     // 2248\n\t\t\t,\topen:\t\t\t\t''\n                                                                                                      // 2249\n\t\t\t,\tslideOpen:\t\t\t''\n                                                                                                  // 2250\n\t\t\t,\tslideClose:\t\t\t''\n                                                                                                 // 2251\n\t\t\t,\tslideToggle:\t\t''\n                                                                                                 // 2252\n\t\t\t,\tsize:\t\t\t\t'sizePane'\n                                                                                              // 2253\n\t\t\t,\tsizePane:\t\t\t'sizePane'\n                                                                                           // 2254\n\t\t\t,\tsizeContent:\t\t''\n                                                                                                 // 2255\n\t\t\t,\tsizeHandles:\t\t''\n                                                                                                 // 2256\n\t\t\t,\tenableClosable:\t\t''\n                                                                                              // 2257\n\t\t\t,\tdisableClosable:\t''\n                                                                                              // 2258\n\t\t\t,\tenableSlideable:\t''\n                                                                                              // 2259\n\t\t\t,\tdisableSlideable:\t''\n                                                                                             // 2260\n\t\t\t,\tenableResizable:\t''\n                                                                                              // 2261\n\t\t\t,\tdisableResizable:\t''\n                                                                                             // 2262\n\t\t\t,\tswapPanes:\t\t\t'swapPanes'\n                                                                                         // 2263\n\t\t\t,\tswap:\t\t\t\t'swapPanes'\n                                                                                             // 2264\n\t\t\t,\tmove:\t\t\t\t'swapPanes'\n                                                                                             // 2265\n\t\t\t,\tremovePane:\t\t\t'removePane'\n                                                                                       // 2266\n\t\t\t,\tremove:\t\t\t\t'removePane'\n                                                                                          // 2267\n\t\t\t,\tcreateChildren:\t\t''\n                                                                                              // 2268\n\t\t\t,\tresizeChildren:\t\t''\n                                                                                              // 2269\n\t\t\t,\tresizeAll:\t\t\t'resizeAll'\n                                                                                         // 2270\n\t\t\t,\tresizeLayout:\t\t'resizeAll'\n                                                                                       // 2271\n\t\t\t}\n                                                                                                                  // 2272\n\t\t,\tname;\n                                                                                                             // 2273\n\t\t// loop hash and bind all methods - include layoutID namespacing\n                                                    // 2274\n\t\tfor (name in paneMethods) {\n                                                                                         // 2275\n\t\t\t$P.bind(\"layoutpane\"+ name.toLowerCase() +\".\"+ sID, Instance[ paneMethods[name] || name ]);\n                        // 2276\n\t\t}\n                                                                                                                   // 2277\n\n                                                                                                                      // 2278\n\t\t// see if this pane has a 'scrolling-content element'\n                                                               // 2279\n\t\tinitContent(pane, false); // false = do NOT sizeContent() - called later\n                                            // 2280\n\n                                                                                                                      // 2281\n\t\tif (!isCenter) {\n                                                                                                    // 2282\n\t\t\t// call _parseSize AFTER applying pane classes & styles - but before making visible (if hidden)\n                    // 2283\n\t\t\t// if o.size is auto or not valid, then MEASURE the pane and use that as its 'size'\n                                // 2284\n\t\t\tsize\t= s.size = _parseSize(pane, o.size);\n                                                                          // 2285\n\t\t\tminSize\t= _parseSize(pane,o.minSize) || 1;\n                                                                         // 2286\n\t\t\tmaxSize\t= _parseSize(pane,o.maxSize) || 100000;\n                                                                    // 2287\n\t\t\tif (size > 0) size = max(min(size, maxSize), minSize);\n                                                             // 2288\n\t\t\ts.autoResize = o.autoResize; // used with percentage sizes\n                                                         // 2289\n\n                                                                                                                      // 2290\n\t\t\t// state for border-panes\n                                                                                          // 2291\n\t\t\ts.isClosed  = false; // true = pane is closed\n                                                                      // 2292\n\t\t\ts.isSliding = false; // true = pane is currently open by 'sliding' over adjacent panes\n                             // 2293\n\t\t\ts.isResizing= false; // true = pane is in process of being resized\n                                                 // 2294\n\t\t\ts.isHidden\t= false; // true = pane is hidden - no spacing, resizer or toggler is visible!\n                          // 2295\n\n                                                                                                                      // 2296\n\t\t\t// array for 'pin buttons' whose classNames are auto-updated on pane-open/-close\n                                   // 2297\n\t\t\tif (!s.pins) s.pins = [];\n                                                                                          // 2298\n\t\t}\n                                                                                                                   // 2299\n\t\t//\tstates common to ALL panes\n                                                                                       // 2300\n\t\ts.tagName\t= $P[0].tagName;\n                                                                                          // 2301\n\t\ts.edge\t\t= pane;\t\t// useful if pane is (or about to be) 'swapped' - easy find out where it is (or is going)\n          // 2302\n\t\ts.noRoom\t= false;\t// true = pane 'automatically' hidden due to insufficient room - will unhide automatically\n        // 2303\n\t\ts.isVisible\t= true;\t\t// false = pane is invisible - closed OR hidden - simplify logic\n                               // 2304\n\n                                                                                                                      // 2305\n\t\t// init pane positioning\n                                                                                            // 2306\n\t\tsetPanePosition( pane );\n                                                                                            // 2307\n\n                                                                                                                      // 2308\n\t\t// if pane is not visible, \n                                                                                         // 2309\n\t\tif (dir === \"horz\") // north or south pane\n                                                                          // 2310\n\t\t\tCSS.height = cssH($P, size);\n                                                                                       // 2311\n\t\telse if (dir === \"vert\") // east or west pane\n                                                                       // 2312\n\t\t\tCSS.width = cssW($P, size);\n                                                                                        // 2313\n\t\t//else if (isCenter) {}\n                                                                                             // 2314\n\n                                                                                                                      // 2315\n\t\t$P.css(CSS); // apply size -- top, bottom & height will be set by sizeMidPanes\n                                      // 2316\n\t\tif (dir != \"horz\") sizeMidPanes(pane, true); // true = skipCallback\n                                                 // 2317\n\n                                                                                                                      // 2318\n\t\t// if manually adding a pane AFTER layout initialization, then...\n                                                   // 2319\n\t\tif (state.initialized) {\n                                                                                            // 2320\n\t\t\tinitHandles( pane );\n                                                                                               // 2321\n\t\t\tinitHotkeys( pane );\n                                                                                               // 2322\n\t\t}\n                                                                                                                   // 2323\n\n                                                                                                                      // 2324\n\t\t// close or hide the pane if specified in settings\n                                                                  // 2325\n\t\tif (o.initClosed && o.closable && !o.initHidden)\n                                                                    // 2326\n\t\t\tclose(pane, true, true); // true, true = force, noAnimation\n                                                        // 2327\n\t\telse if (o.initHidden || o.initClosed)\n                                                                              // 2328\n\t\t\thide(pane); // will be completely invisible - no resizer or spacing\n                                                // 2329\n\t\telse if (!s.noRoom)\n                                                                                                 // 2330\n\t\t\t// make the pane visible - in case was initially hidden\n                                                            // 2331\n\t\t\t$P.css(\"display\",\"block\");\n                                                                                         // 2332\n\t\t// ELSE setAsOpen() - called later by initHandles()\n                                                                 // 2333\n\n                                                                                                                      // 2334\n\t\t// RESET visibility now - pane will appear IF display:block\n                                                         // 2335\n\t\t$P.css(\"visibility\",\"visible\");\n                                                                                     // 2336\n\n                                                                                                                      // 2337\n\t\t// check option for auto-handling of pop-ups & drop-downs\n                                                           // 2338\n\t\tif (o.showOverflowOnHover)\n                                                                                          // 2339\n\t\t\t$P.hover( allowOverflow, resetOverflow );\n                                                                          // 2340\n\n                                                                                                                      // 2341\n\t\t// if manually adding a pane AFTER layout initialization, then...\n                                                   // 2342\n\t\tif (state.initialized) {\n                                                                                            // 2343\n\t\t\tafterInitPane( pane );\n                                                                                             // 2344\n\t\t}\n                                                                                                                   // 2345\n\t}\n                                                                                                                    // 2346\n\n                                                                                                                      // 2347\n,\tafterInitPane = function (pane) {\n                                                                                   // 2348\n\t\tvar\t$P\t= $Ps[pane]\n                                                                                                  // 2349\n\t\t,\ts\t= state[pane]\n                                                                                                   // 2350\n\t\t,\to\t= options[pane]\n                                                                                                 // 2351\n\t\t;\n                                                                                                                   // 2352\n\t\tif (!$P) return;\n                                                                                                    // 2353\n\n                                                                                                                      // 2354\n\t\t// see if there is a directly-nested layout inside this pane\n                                                        // 2355\n\t\tif ($P.data(\"layout\"))\n                                                                                              // 2356\n\t\t\trefreshChildren( pane, $P.data(\"layout\") );\n                                                                        // 2357\n\n                                                                                                                      // 2358\n\t\t// process pane contents and callbacks, and init/resize child-layout if exists\n                                      // 2359\n\t\tif (s.isVisible) { // pane is OPEN\n                                                                                  // 2360\n\t\t\tif (state.initialized) // this pane was added AFTER layout was created\n                                             // 2361\n\t\t\t\tresizeAll(); // will also sizeContent\n                                                                             // 2362\n\t\t\telse\n                                                                                                               // 2363\n\t\t\t\tsizeContent(pane);\n                                                                                                // 2364\n\n                                                                                                                      // 2365\n\t\t\tif (o.triggerEventsOnLoad)\n                                                                                         // 2366\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\n                                                                              // 2367\n\t\t\telse // automatic if onresize called, otherwise call it specifically\n                                               // 2368\n\t\t\t\t// resize child - IF inner-layout already exists (created before this layout)\n                                     // 2369\n\t\t\t\tresizeChildren(pane, true); // a previously existing childLayout\n                                                  // 2370\n\t\t}\n                                                                                                                   // 2371\n\n                                                                                                                      // 2372\n\t\t// init childLayouts - even if pane is not visible\n                                                                  // 2373\n\t\tif (o.initChildren && o.children)\n                                                                                   // 2374\n\t\t\tcreateChildren(pane);\n                                                                                              // 2375\n\t}\n                                                                                                                    // 2376\n\n                                                                                                                      // 2377\n\t/**\n                                                                                                                  // 2378\n\t* @param {string=}\tpanes\t\tThe pane(s) to process\n                                                                     // 2379\n\t*/\n                                                                                                                   // 2380\n,\tsetPanePosition = function (panes) {\n                                                                                // 2381\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\n                                                                  // 2382\n\n                                                                                                                      // 2383\n\t\t// create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV\n            // 2384\n\t\t$.each(panes, function (i, pane) {\n                                                                                  // 2385\n\t\t\tvar $P\t= $Ps[pane]\n                                                                                                 // 2386\n\t\t\t,\t$R\t= $Rs[pane]\n                                                                                                   // 2387\n\t\t\t,\to\t= options[pane]\n                                                                                                // 2388\n\t\t\t,\ts\t= state[pane]\n                                                                                                  // 2389\n\t\t\t,\tside =  _c[pane].side\n                                                                                            // 2390\n\t\t\t,\tCSS\t= {}\n                                                                                                         // 2391\n\t\t\t;\n                                                                                                                  // 2392\n\t\t\tif (!$P) return; // pane does not exist - skip\n                                                                     // 2393\n\n                                                                                                                      // 2394\n\t\t\t// set css-position to account for container borders & padding\n                                                     // 2395\n\t\t\tswitch (pane) {\n                                                                                                    // 2396\n\t\t\t\tcase \"north\": \tCSS.top \t= sC.inset.top;\n                                                                           // 2397\n\t\t\t\t\t\t\t\tCSS.left \t= sC.inset.left;\n                                                                                    // 2398\n\t\t\t\t\t\t\t\tCSS.right\t= sC.inset.right;\n                                                                                   // 2399\n\t\t\t\t\t\t\t\tbreak;\n                                                                                                        // 2400\n\t\t\t\tcase \"south\": \tCSS.bottom\t= sC.inset.bottom;\n                                                                      // 2401\n\t\t\t\t\t\t\t\tCSS.left \t= sC.inset.left;\n                                                                                    // 2402\n\t\t\t\t\t\t\t\tCSS.right \t= sC.inset.right;\n                                                                                  // 2403\n\t\t\t\t\t\t\t\tbreak;\n                                                                                                        // 2404\n\t\t\t\tcase \"west\": \tCSS.left \t= sC.inset.left; // top, bottom & height set by sizeMidPanes()\n                            // 2405\n\t\t\t\t\t\t\t\tbreak;\n                                                                                                        // 2406\n\t\t\t\tcase \"east\": \tCSS.right \t= sC.inset.right; // ditto\n                                                               // 2407\n\t\t\t\t\t\t\t\tbreak;\n                                                                                                        // 2408\n\t\t\t\tcase \"center\":\t// top, left, width & height set by sizeMidPanes()\n                                                 // 2409\n\t\t\t}\n                                                                                                                  // 2410\n\t\t\t// apply position\n                                                                                                  // 2411\n\t\t\t$P.css(CSS); \n                                                                                                      // 2412\n\n                                                                                                                      // 2413\n\t\t\t// update resizer position\n                                                                                         // 2414\n\t\t\tif ($R && s.isClosed)\n                                                                                              // 2415\n\t\t\t\t$R.css(side, sC.inset[side]);\n                                                                                     // 2416\n\t\t\telse if ($R && !s.isHidden)\n                                                                                        // 2417\n\t\t\t\t$R.css(side, sC.inset[side] + getPaneSize(pane));\n                                                                 // 2418\n\t\t});\n                                                                                                                 // 2419\n\t}\n                                                                                                                    // 2420\n\n                                                                                                                      // 2421\n\t/**\n                                                                                                                  // 2422\n\t* Initialize module objects, styling, size and position for all resize bars and toggler buttons\n                      // 2423\n\t*\n                                                                                                                    // 2424\n\t* @see  _create()\n                                                                                                    // 2425\n\t* @param {string=}\t[panes=\"\"]\tThe edge(s) to process\n                                                                 // 2426\n\t*/\n                                                                                                                   // 2427\n,\tinitHandles = function (panes) {\n                                                                                    // 2428\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\n                                                                  // 2429\n\n                                                                                                                      // 2430\n\t\t// create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV\n            // 2431\n\t\t$.each(panes, function (i, pane) {\n                                                                                  // 2432\n\t\t\tvar $P\t\t= $Ps[pane];\n                                                                                               // 2433\n\t\t\t$Rs[pane]\t= false; // INIT\n                                                                                         // 2434\n\t\t\t$Ts[pane]\t= false;\n                                                                                                 // 2435\n\t\t\tif (!$P) return; // pane does not exist - skip\n                                                                     // 2436\n\n                                                                                                                      // 2437\n\t\t\tvar\to\t\t= options[pane]\n                                                                                             // 2438\n\t\t\t,\ts\t\t= state[pane]\n                                                                                                 // 2439\n\t\t\t,\tc\t\t= _c[pane]\n                                                                                                    // 2440\n\t\t\t,\tpaneId\t= o.paneSelector.substr(0,1) === \"#\" ? o.paneSelector.substr(1) : \"\"\n                                      // 2441\n\t\t\t,\trClass\t= o.resizerClass\n                                                                                          // 2442\n\t\t\t,\ttClass\t= o.togglerClass\n                                                                                          // 2443\n\t\t\t,\tspacing\t= (s.isVisible ? o.spacing_open : o.spacing_closed)\n                                                      // 2444\n\t\t\t,\t_pane\t= \"-\"+ pane // used for classNames\n                                                                         // 2445\n\t\t\t,\t_state\t= (s.isVisible ? \"-open\" : \"-closed\") // used for classNames\n                                              // 2446\n\t\t\t,\tI\t\t= Instance[pane]\n                                                                                              // 2447\n\t\t\t\t// INIT RESIZER BAR\n                                                                                               // 2448\n\t\t\t,\t$R\t\t= I.resizer = $Rs[pane] = $(\"<div></div>\")\n                                                                   // 2449\n\t\t\t\t// INIT TOGGLER BUTTON\n                                                                                            // 2450\n\t\t\t,\t$T\t\t= I.toggler = (o.closable ? $Ts[pane] = $(\"<div></div>\") : false)\n                                            // 2451\n\t\t\t;\n                                                                                                                  // 2452\n\n                                                                                                                      // 2453\n\t\t\t//if (s.isVisible && o.resizable) ... handled by initResizable\n                                                     // 2454\n\t\t\tif (!s.isVisible && o.slidable)\n                                                                                    // 2455\n\t\t\t\t$R.attr(\"title\", o.tips.Slide).css(\"cursor\", o.sliderCursor);\n                                                     // 2456\n\n                                                                                                                      // 2457\n\t\t\t$R\t// if paneSelector is an ID, then create a matching ID for the resizer, eg: \"#paneLeft\" => \"paneLeft-resizer\"\n   // 2458\n\t\t\t\t.attr(\"id\", paneId ? paneId +\"-resizer\" : \"\" )\n                                                                    // 2459\n\t\t\t\t.data({\n                                                                                                           // 2460\n\t\t\t\t\tparentLayout:\tInstance\n                                                                                           // 2461\n\t\t\t\t,\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\n                                                 // 2462\n\t\t\t\t,\tlayoutEdge:\t\tpane\n                                                                                               // 2463\n\t\t\t\t,\tlayoutRole:\t\t\"resizer\"\n                                                                                          // 2464\n\t\t\t\t})\n                                                                                                                // 2465\n\t\t\t\t.css(_c.resizers.cssReq).css(\"zIndex\", options.zIndexes.resizer_normal)\n                                           // 2466\n\t\t\t\t.css(o.applyDemoStyles ? _c.resizers.cssDemo : {}) // add demo styles\n                                             // 2467\n\t\t\t\t.addClass(rClass +\" \"+ rClass+_pane)\n                                                                              // 2468\n\t\t\t\t.hover(addHover, removeHover) // ALWAYS add hover-classes, even if resizing is not enabled - handle with CSS instead\n\t\t\t\t.hover(onResizerEnter, onResizerLeave) // ALWAYS NEED resizer.mouseleave to balance toggler.mouseenter\n            // 2470\n\t\t\t\t.appendTo($N) // append DIV to container\n                                                                          // 2471\n\t\t\t;\n                                                                                                                  // 2472\n\t\t\tif (o.resizerDblClickToggle)\n                                                                                       // 2473\n\t\t\t\t$R.bind(\"dblclick.\"+ sID, toggle );\n                                                                               // 2474\n\n                                                                                                                      // 2475\n\t\t\tif ($T) {\n                                                                                                          // 2476\n\t\t\t\t$T\t// if paneSelector is an ID, then create a matching ID for the resizer, eg: \"#paneLeft\" => \"#paneLeft-toggler\"\n // 2477\n\t\t\t\t\t.attr(\"id\", paneId ? paneId +\"-toggler\" : \"\" )\n                                                                   // 2478\n\t\t\t\t\t.data({\n                                                                                                          // 2479\n\t\t\t\t\t\tparentLayout:\tInstance\n                                                                                          // 2480\n\t\t\t\t\t,\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\n                                                // 2481\n\t\t\t\t\t,\tlayoutEdge:\t\tpane\n                                                                                              // 2482\n\t\t\t\t\t,\tlayoutRole:\t\t\"toggler\"\n                                                                                         // 2483\n\t\t\t\t\t})\n                                                                                                               // 2484\n\t\t\t\t\t.css(_c.togglers.cssReq) // add base/required styles\n                                                             // 2485\n\t\t\t\t\t.css(o.applyDemoStyles ? _c.togglers.cssDemo : {}) // add demo styles\n                                            // 2486\n\t\t\t\t\t.addClass(tClass +\" \"+ tClass+_pane)\n                                                                             // 2487\n\t\t\t\t\t.hover(addHover, removeHover) // ALWAYS add hover-classes, even if toggling is not enabled - handle with CSS instead\n\t\t\t\t\t.bind(\"mouseenter\", onResizerEnter) // NEED toggler.mouseenter because mouseenter MAY NOT fire on resizer\n        // 2489\n\t\t\t\t\t.appendTo($R) // append SPAN to resizer DIV\n                                                                      // 2490\n\t\t\t\t;\n                                                                                                                 // 2491\n\t\t\t\t// ADD INNER-SPANS TO TOGGLER\n                                                                                     // 2492\n\t\t\t\tif (o.togglerContent_open) // ui-layout-open\n                                                                      // 2493\n\t\t\t\t\t$(\"<span>\"+ o.togglerContent_open +\"</span>\")\n                                                                    // 2494\n\t\t\t\t\t\t.data({\n                                                                                                         // 2495\n\t\t\t\t\t\t\tlayoutEdge:\t\tpane\n                                                                                              // 2496\n\t\t\t\t\t\t,\tlayoutRole:\t\t\"togglerContent\"\n                                                                                 // 2497\n\t\t\t\t\t\t})\n                                                                                                              // 2498\n\t\t\t\t\t\t.data(\"layoutRole\", \"togglerContent\")\n                                                                           // 2499\n\t\t\t\t\t\t.data(\"layoutEdge\", pane)\n                                                                                       // 2500\n\t\t\t\t\t\t.addClass(\"content content-open\")\n                                                                               // 2501\n\t\t\t\t\t\t.css(\"display\",\"none\")\n                                                                                          // 2502\n\t\t\t\t\t\t.appendTo( $T )\n                                                                                                 // 2503\n\t\t\t\t\t\t//.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-open instead!\n                    // 2504\n\t\t\t\t\t;\n                                                                                                                // 2505\n\t\t\t\tif (o.togglerContent_closed) // ui-layout-closed\n                                                                  // 2506\n\t\t\t\t\t$(\"<span>\"+ o.togglerContent_closed +\"</span>\")\n                                                                  // 2507\n\t\t\t\t\t\t.data({\n                                                                                                         // 2508\n\t\t\t\t\t\t\tlayoutEdge:\t\tpane\n                                                                                              // 2509\n\t\t\t\t\t\t,\tlayoutRole:\t\t\"togglerContent\"\n                                                                                 // 2510\n\t\t\t\t\t\t})\n                                                                                                              // 2511\n\t\t\t\t\t\t.addClass(\"content content-closed\")\n                                                                             // 2512\n\t\t\t\t\t\t.css(\"display\",\"none\")\n                                                                                          // 2513\n\t\t\t\t\t\t.appendTo( $T )\n                                                                                                 // 2514\n\t\t\t\t\t\t//.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-closed instead!\n                  // 2515\n\t\t\t\t\t;\n                                                                                                                // 2516\n\t\t\t\t// ADD TOGGLER.click/.hover\n                                                                                       // 2517\n\t\t\t\tenableClosable(pane);\n                                                                                             // 2518\n\t\t\t}\n                                                                                                                  // 2519\n\n                                                                                                                      // 2520\n\t\t\t// add Draggable events\n                                                                                            // 2521\n\t\t\tinitResizable(pane);\n                                                                                               // 2522\n\n                                                                                                                      // 2523\n\t\t\t// ADD CLASSNAMES & SLIDE-BINDINGS - eg: class=\"resizer resizer-west resizer-open\"\n                                 // 2524\n\t\t\tif (s.isVisible)\n                                                                                                   // 2525\n\t\t\t\tsetAsOpen(pane);\t// onOpen will be called, but NOT onResize\n                                                       // 2526\n\t\t\telse {\n                                                                                                             // 2527\n\t\t\t\tsetAsClosed(pane);\t// onClose will be called\n                                                                      // 2528\n\t\t\t\tbindStartSlidingEvents(pane, true); // will enable events IF option is set\n                                        // 2529\n\t\t\t}\n                                                                                                                  // 2530\n\n                                                                                                                      // 2531\n\t\t});\n                                                                                                                 // 2532\n\n                                                                                                                      // 2533\n\t\t// SET ALL HANDLE DIMENSIONS\n                                                                                        // 2534\n\t\tsizeHandles();\n                                                                                                      // 2535\n\t}\n                                                                                                                    // 2536\n\n                                                                                                                      // 2537\n\n                                                                                                                      // 2538\n\t/**\n                                                                                                                  // 2539\n\t* Initialize scrolling ui-layout-content div - if exists\n                                                             // 2540\n\t*\n                                                                                                                    // 2541\n\t* @see  initPane() - or externally after an Ajax injection\n                                                           // 2542\n\t* @param {string}\tpane\t\t\tThe pane to process\n                                                                         // 2543\n\t* @param {boolean=}\t[resize=true]\tSize content after init\n                                                            // 2544\n\t*/\n                                                                                                                   // 2545\n,\tinitContent = function (pane, resize) {\n                                                                             // 2546\n\t\tif (!isInitialized()) return;\n                                                                                       // 2547\n\t\tvar \n                                                                                                                // 2548\n\t\t\to\t= options[pane]\n                                                                                                  // 2549\n\t\t,\tsel\t= o.contentSelector\n                                                                                           // 2550\n\t\t,\tI\t= Instance[pane]\n                                                                                                // 2551\n\t\t,\t$P\t= $Ps[pane]\n                                                                                                    // 2552\n\t\t,\t$C\n                                                                                                                // 2553\n\t\t;\n                                                                                                                   // 2554\n\t\tif (sel) $C = I.content = $Cs[pane] = (o.findNestedContent)\n                                                         // 2555\n\t\t\t? $P.find(sel).eq(0) // match 1-element only\n                                                                       // 2556\n\t\t\t: $P.children(sel).eq(0)\n                                                                                           // 2557\n\t\t;\n                                                                                                                   // 2558\n\t\tif ($C && $C.length) {\n                                                                                              // 2559\n\t\t\t$C.data(\"layoutRole\", \"content\");\n                                                                                  // 2560\n\t\t\t// SAVE original Content CSS\n                                                                                       // 2561\n\t\t\tif (!$C.data(\"layoutCSS\"))\n                                                                                         // 2562\n\t\t\t\t$C.data(\"layoutCSS\", styles($C, \"height\"));\n                                                                       // 2563\n\t\t\t$C.css( _c.content.cssReq );\n                                                                                       // 2564\n\t\t\tif (o.applyDemoStyles) {\n                                                                                           // 2565\n\t\t\t\t$C.css( _c.content.cssDemo ); // add padding & overflow: auto to content-div\n                                      // 2566\n\t\t\t\t$P.css( _c.content.cssDemoPane ); // REMOVE padding/scrolling from pane\n                                           // 2567\n\t\t\t}\n                                                                                                                  // 2568\n\t\t\t// ensure no vertical scrollbar on pane - will mess up measurements\n                                                // 2569\n\t\t\tif ($P.css(\"overflowX\").match(/(scroll|auto)/)) {\n                                                                  // 2570\n\t\t\t\t$P.css(\"overflow\", \"hidden\");\n                                                                                     // 2571\n\t\t\t}\n                                                                                                                  // 2572\n\t\t\tstate[pane].content = {}; // init content state\n                                                                    // 2573\n\t\t\tif (resize !== false) sizeContent(pane);\n                                                                           // 2574\n\t\t\t// sizeContent() is called AFTER init of all elements\n                                                              // 2575\n\t\t}\n                                                                                                                   // 2576\n\t\telse\n                                                                                                                // 2577\n\t\t\tI.content = $Cs[pane] = false;\n                                                                                     // 2578\n\t}\n                                                                                                                    // 2579\n\n                                                                                                                      // 2580\n\n                                                                                                                      // 2581\n\t/**\n                                                                                                                  // 2582\n\t* Add resize-bars to all panes that specify it in options\n                                                            // 2583\n\t* -dependancy: $.fn.resizable - will skip if not found\n                                                               // 2584\n\t*\n                                                                                                                    // 2585\n\t* @see  _create()\n                                                                                                    // 2586\n\t* @param {string=}\t[panes=\"\"]\tThe edge(s) to process\n                                                                 // 2587\n\t*/\n                                                                                                                   // 2588\n,\tinitResizable = function (panes) {\n                                                                                  // 2589\n\t\tvar\tdraggingAvailable = $.layout.plugins.draggable\n                                                                  // 2590\n\t\t,\tside // set in start()\n                                                                                            // 2591\n\t\t;\n                                                                                                                   // 2592\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\n                                                                  // 2593\n\n                                                                                                                      // 2594\n\t\t$.each(panes, function (idx, pane) {\n                                                                                // 2595\n\t\t\tvar o = options[pane];\n                                                                                             // 2596\n\t\t\tif (!draggingAvailable || !$Ps[pane] || !o.resizable) {\n                                                            // 2597\n\t\t\t\to.resizable = false;\n                                                                                              // 2598\n\t\t\t\treturn true; // skip to next\n                                                                                      // 2599\n\t\t\t}\n                                                                                                                  // 2600\n\n                                                                                                                      // 2601\n\t\t\tvar s\t\t= state[pane]\n                                                                                               // 2602\n\t\t\t,\tz\t\t= options.zIndexes\n                                                                                            // 2603\n\t\t\t,\tc\t\t= _c[pane]\n                                                                                                    // 2604\n\t\t\t,\tside\t= c.dir==\"horz\" ? \"top\" : \"left\"\n                                                                            // 2605\n\t\t\t,\t$P \t\t= $Ps[pane]\n                                                                                                 // 2606\n\t\t\t,\t$R\t\t= $Rs[pane]\n                                                                                                  // 2607\n\t\t\t,\tbase\t= o.resizerClass\n                                                                                            // 2608\n\t\t\t,\tlastPos\t= 0 // used when live-resizing\n                                                                           // 2609\n\t\t\t,\tr, live // set in start because may change\n                                                                       // 2610\n\t\t\t//\t'drag' classes are applied to the ORIGINAL resizer-bar while dragging is in process\n                             // 2611\n\t\t\t,\tresizerClass\t\t= base+\"-drag\"\t\t\t\t// resizer-drag\n                                                                  // 2612\n\t\t\t,\tresizerPaneClass\t= base+\"-\"+pane+\"-drag\"\t\t// resizer-north-drag\n                                                  // 2613\n\t\t\t//\t'helper' class is applied to the CLONED resizer-bar while it is being dragged\n                                   // 2614\n\t\t\t,\thelperClass\t\t\t= base+\"-dragging\"\t\t\t// resizer-dragging\n                                                           // 2615\n\t\t\t,\thelperPaneClass\t\t= base+\"-\"+pane+\"-dragging\" // resizer-north-dragging\n                                           // 2616\n\t\t\t,\thelperLimitClass\t= base+\"-dragging-limit\"\t// resizer-drag\n                                                        // 2617\n\t\t\t,\thelperPaneLimitClass = base+\"-\"+pane+\"-dragging-limit\"\t// resizer-north-drag\n                                     // 2618\n\t\t\t,\thelperClassesSet\t= false \t\t\t\t\t// logic var\n                                                                       // 2619\n\t\t\t;\n                                                                                                                  // 2620\n\n                                                                                                                      // 2621\n\t\t\tif (!s.isClosed)\n                                                                                                   // 2622\n\t\t\t\t$R.attr(\"title\", o.tips.Resize)\n                                                                                   // 2623\n\t\t\t\t  .css(\"cursor\", o.resizerCursor); // n-resize, s-resize, etc\n                                                     // 2624\n\n                                                                                                                      // 2625\n\t\t\t$R.draggable({\n                                                                                                     // 2626\n\t\t\t\tcontainment:\t$N[0] // limit resizing to layout container\n                                                          // 2627\n\t\t\t,\taxis:\t\t\t(c.dir==\"horz\" ? \"y\" : \"x\") // limit resizing to horz or vert axis\n                                       // 2628\n\t\t\t,\tdelay:\t\t\t0\n                                                                                                       // 2629\n\t\t\t,\tdistance:\t\t1\n                                                                                                     // 2630\n\t\t\t,\tgrid:\t\t\to.resizingGrid\n                                                                                           // 2631\n\t\t\t//\tbasic format for helper - style it using class: .ui-draggable-dragging\n                                          // 2632\n\t\t\t,\thelper:\t\t\t\"clone\"\n                                                                                                // 2633\n\t\t\t,\topacity:\t\to.resizerDragOpacity\n                                                                                   // 2634\n\t\t\t,\taddClasses:\t\tfalse // avoid ui-state-disabled class when disabled\n                                                // 2635\n\t\t\t//,\tiframeFix:\t\to.draggableIframeFix // TODO: consider using when bug is fixed\n                                     // 2636\n\t\t\t,\tzIndex:\t\t\tz.resizer_drag\n                                                                                         // 2637\n\n                                                                                                                      // 2638\n\t\t\t,\tstart: function (e, ui) {\n                                                                                        // 2639\n\t\t\t\t\t// REFRESH options & state pointers in case we used swapPanes\n                                                    // 2640\n\t\t\t\t\to = options[pane];\n                                                                                               // 2641\n\t\t\t\t\ts = state[pane];\n                                                                                                 // 2642\n\t\t\t\t\t// re-read options\n                                                                                               // 2643\n\t\t\t\t\tlive = o.livePaneResizing;\n                                                                                       // 2644\n\n                                                                                                                      // 2645\n\t\t\t\t\t// ondrag_start callback - will CANCEL hide if returns false\n                                                     // 2646\n\t\t\t\t\t// TODO: dragging CANNOT be cancelled like this, so see if there is a way?\n                                       // 2647\n\t\t\t\t\tif (false === _runCallbacks(\"ondrag_start\", pane)) return false;\n                                                 // 2648\n\n                                                                                                                      // 2649\n\t\t\t\t\ts.isResizing\t\t= true; // prevent pane from closing while resizing\n                                                // 2650\n\t\t\t\t\tstate.paneResizing\t= pane; // easy to see if ANY pane is resizing\n                                                // 2651\n\t\t\t\t\ttimer.clear(pane+\"_closeSlider\"); // just in case already triggered\n                                              // 2652\n\n                                                                                                                      // 2653\n\t\t\t\t\t// SET RESIZER LIMITS - used in drag()\n                                                                           // 2654\n\t\t\t\t\tsetSizeLimits(pane); // update pane/resizer state\n                                                                // 2655\n\t\t\t\t\tr = s.resizerPosition;\n                                                                                           // 2656\n\t\t\t\t\tlastPos = ui.position[ side ]\n                                                                                    // 2657\n\n                                                                                                                      // 2658\n\t\t\t\t\t$R.addClass( resizerClass +\" \"+ resizerPaneClass ); // add drag classes\n                                          // 2659\n\t\t\t\t\thelperClassesSet = false; // reset logic var - see drag()\n                                                        // 2660\n\n                                                                                                                      // 2661\n\t\t\t\t\t// DISABLE TEXT SELECTION (probably already done by resizer.mouseOver)\n                                           // 2662\n\t\t\t\t\t$('body').disableSelection(); \n                                                                                   // 2663\n\n                                                                                                                      // 2664\n\t\t\t\t\t// MASK PANES CONTAINING IFRAMES, APPLETS OR OTHER TROUBLESOME ELEMENTS\n                                          // 2665\n\t\t\t\t\tshowMasks( pane, { resizing: true });\n                                                                            // 2666\n\t\t\t\t}\n                                                                                                                 // 2667\n\n                                                                                                                      // 2668\n\t\t\t,\tdrag: function (e, ui) {\n                                                                                         // 2669\n\t\t\t\t\tif (!helperClassesSet) { // can only add classes after clone has been added to the DOM\n                           // 2670\n\t\t\t\t\t\t//$(\".ui-draggable-dragging\")\n                                                                                   // 2671\n\t\t\t\t\t\tui.helper\n                                                                                                       // 2672\n\t\t\t\t\t\t\t.addClass( helperClass +\" \"+ helperPaneClass ) // add helper classes\n                                           // 2673\n\t\t\t\t\t\t\t.css({ right: \"auto\", bottom: \"auto\" })\t// fix dir=\"rtl\" issue\n                                                 // 2674\n\t\t\t\t\t\t\t.children().css(\"visibility\",\"hidden\")\t// hide toggler inside dragged resizer-bar\n                              // 2675\n\t\t\t\t\t\t;\n                                                                                                               // 2676\n\t\t\t\t\t\thelperClassesSet = true;\n                                                                                        // 2677\n\t\t\t\t\t\t// draggable bug!? RE-SET zIndex to prevent E/W resize-bar showing through N/S pane!\n                            // 2678\n\t\t\t\t\t\tif (s.isSliding) $Ps[pane].css(\"zIndex\", z.pane_sliding);\n                                                       // 2679\n\t\t\t\t\t}\n                                                                                                                // 2680\n\t\t\t\t\t// CONTAIN RESIZER-BAR TO RESIZING LIMITS\n                                                                        // 2681\n\t\t\t\t\tvar limit = 0;\n                                                                                                   // 2682\n\t\t\t\t\tif (ui.position[side] < r.min) {\n                                                                                 // 2683\n\t\t\t\t\t\tui.position[side] = r.min;\n                                                                                      // 2684\n\t\t\t\t\t\tlimit = -1;\n                                                                                                     // 2685\n\t\t\t\t\t}\n                                                                                                                // 2686\n\t\t\t\t\telse if (ui.position[side] > r.max) {\n                                                                            // 2687\n\t\t\t\t\t\tui.position[side] = r.max;\n                                                                                      // 2688\n\t\t\t\t\t\tlimit = 1;\n                                                                                                      // 2689\n\t\t\t\t\t}\n                                                                                                                // 2690\n\t\t\t\t\t// ADD/REMOVE dragging-limit CLASS\n                                                                               // 2691\n\t\t\t\t\tif (limit) {\n                                                                                                     // 2692\n\t\t\t\t\t\tui.helper.addClass( helperLimitClass +\" \"+ helperPaneLimitClass ); // at dragging-limit\n                         // 2693\n\t\t\t\t\t\twindow.defaultStatus = (limit>0 && pane.match(/(north|west)/)) || (limit<0 && pane.match(/(south|east)/)) ? o.tips.maxSizeWarning : o.tips.minSizeWarning;\n\t\t\t\t\t}\n                                                                                                                // 2695\n\t\t\t\t\telse {\n                                                                                                           // 2696\n\t\t\t\t\t\tui.helper.removeClass( helperLimitClass +\" \"+ helperPaneLimitClass ); // not at dragging-limit\n                  // 2697\n\t\t\t\t\t\twindow.defaultStatus = \"\";\n                                                                                      // 2698\n\t\t\t\t\t}\n                                                                                                                // 2699\n\t\t\t\t\t// DYNAMICALLY RESIZE PANES IF OPTION ENABLED\n                                                                    // 2700\n\t\t\t\t\t// won't trigger unless resizer has actually moved!\n                                                              // 2701\n\t\t\t\t\tif (live && Math.abs(ui.position[side] - lastPos) >= o.liveResizingTolerance) {\n                                  // 2702\n\t\t\t\t\t\tlastPos = ui.position[side];\n                                                                                    // 2703\n\t\t\t\t\t\tresizePanes(e, ui, pane)\n                                                                                        // 2704\n\t\t\t\t\t}\n                                                                                                                // 2705\n\t\t\t\t}\n                                                                                                                 // 2706\n\n                                                                                                                      // 2707\n\t\t\t,\tstop: function (e, ui) {\n                                                                                         // 2708\n\t\t\t\t\t$('body').enableSelection(); // RE-ENABLE TEXT SELECTION\n                                                         // 2709\n\t\t\t\t\twindow.defaultStatus = \"\"; // clear 'resizing limit' message from statusbar\n                                      // 2710\n\t\t\t\t\t$R.removeClass( resizerClass +\" \"+ resizerPaneClass ); // remove drag classes from Resizer\n                       // 2711\n\t\t\t\t\ts.isResizing\t\t= false;\n                                                                                           // 2712\n\t\t\t\t\tstate.paneResizing\t= false; // easy to see if ANY pane is resizing\n                                               // 2713\n\t\t\t\t\tresizePanes(e, ui, pane, true); // true = resizingDone\n                                                           // 2714\n\t\t\t\t}\n                                                                                                                 // 2715\n\n                                                                                                                      // 2716\n\t\t\t});\n                                                                                                                // 2717\n\t\t});\n                                                                                                                 // 2718\n\n                                                                                                                      // 2719\n\t\t/**\n                                                                                                                 // 2720\n\t\t* resizePanes\n                                                                                                       // 2721\n\t\t*\n                                                                                                                   // 2722\n\t\t* Sub-routine called from stop() - and drag() if livePaneResizing\n                                                   // 2723\n\t\t*\n                                                                                                                   // 2724\n\t\t* @param {!Object}\t\tevt\n                                                                                             // 2725\n\t\t* @param {!Object}\t\tui\n                                                                                              // 2726\n\t\t* @param {string}\t\tpane\n                                                                                             // 2727\n\t\t* @param {boolean=}\t\t[resizingDone=false]\n                                                                           // 2728\n\t\t*/\n                                                                                                                  // 2729\n\t\tvar resizePanes = function (evt, ui, pane, resizingDone) {\n                                                          // 2730\n\t\t\tvar\tdragPos\t= ui.position\n                                                                                          // 2731\n\t\t\t,\tc\t\t= _c[pane]\n                                                                                                    // 2732\n\t\t\t,\to\t\t= options[pane]\n                                                                                               // 2733\n\t\t\t,\ts\t\t= state[pane]\n                                                                                                 // 2734\n\t\t\t,\tresizerPos\n                                                                                                       // 2735\n\t\t\t;\n                                                                                                                  // 2736\n\t\t\tswitch (pane) {\n                                                                                                    // 2737\n\t\t\t\tcase \"north\":\tresizerPos = dragPos.top; break;\n                                                                    // 2738\n\t\t\t\tcase \"west\":\tresizerPos = dragPos.left; break;\n                                                                    // 2739\n\t\t\t\tcase \"south\":\tresizerPos = sC.layoutHeight - dragPos.top  - o.spacing_open; break;\n                                // 2740\n\t\t\t\tcase \"east\":\tresizerPos = sC.layoutWidth  - dragPos.left - o.spacing_open; break;\n                                 // 2741\n\t\t\t};\n                                                                                                                 // 2742\n\t\t\t// remove container margin from resizer position to get the pane size\n                                              // 2743\n\t\t\tvar newSize = resizerPos - sC.inset[c.side];\n                                                                       // 2744\n\n                                                                                                                      // 2745\n\t\t\t// Disable OR Resize Mask(s) created in drag.start\n                                                                 // 2746\n\t\t\tif (!resizingDone) {\n                                                                                               // 2747\n\t\t\t\t// ensure we meet liveResizingTolerance criteria\n                                                                  // 2748\n\t\t\t\tif (Math.abs(newSize - s.size) < o.liveResizingTolerance)\n                                                         // 2749\n\t\t\t\t\treturn; // SKIP resize this time\n                                                                                 // 2750\n\t\t\t\t// resize the pane\n                                                                                                // 2751\n\t\t\t\tmanualSizePane(pane, newSize, false, true); // true = noAnimation\n                                                 // 2752\n\t\t\t\tsizeMasks(); // resize all visible masks\n                                                                          // 2753\n\t\t\t}\n                                                                                                                  // 2754\n\t\t\telse { // resizingDone\n                                                                                             // 2755\n\t\t\t\t// ondrag_end callback\n                                                                                            // 2756\n\t\t\t\tif (false !== _runCallbacks(\"ondrag_end\", pane))\n                                                                  // 2757\n\t\t\t\t\tmanualSizePane(pane, newSize, false, true); // true = noAnimation\n                                                // 2758\n\t\t\t\thideMasks(true); // true = force hiding all masks even if one is 'sliding'\n                                        // 2759\n\t\t\t\tif (s.isSliding) // RE-SHOW 'object-masks' so objects won't show through sliding pane\n                             // 2760\n\t\t\t\t\tshowMasks( pane, { resizing: true });\n                                                                            // 2761\n\t\t\t}\n                                                                                                                  // 2762\n\t\t};\n                                                                                                                  // 2763\n\t}\n                                                                                                                    // 2764\n\n                                                                                                                      // 2765\n\t/**\n                                                                                                                  // 2766\n\t*\tsizeMask\n                                                                                                           // 2767\n\t*\n                                                                                                                    // 2768\n\t*\tNeeded to overlay a DIV over an IFRAME-pane because mask CANNOT be *inside* the pane\n                               // 2769\n\t*\tCalled when mask created, and during livePaneResizing\n                                                              // 2770\n\t*/\n                                                                                                                   // 2771\n,\tsizeMask = function () {\n                                                                                            // 2772\n\t\tvar $M\t\t= $(this)\n                                                                                                   // 2773\n\t\t,\tpane\t= $M.data(\"layoutMask\") // eg: \"west\"\n                                                                        // 2774\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 2775\n\t\t;\n                                                                                                                   // 2776\n\t\t// only masks over an IFRAME-pane need manual resizing\n                                                              // 2777\n\t\tif (s.tagName == \"IFRAME\" && s.isVisible) // no need to mask closed/hidden panes\n                                    // 2778\n\t\t\t$M.css({\n                                                                                                           // 2779\n\t\t\t\ttop:\ts.offsetTop\n                                                                                                  // 2780\n\t\t\t,\tleft:\ts.offsetLeft\n                                                                                               // 2781\n\t\t\t,\twidth:\ts.outerWidth\n                                                                                              // 2782\n\t\t\t,\theight:\ts.outerHeight\n                                                                                            // 2783\n\t\t\t});\n                                                                                                                // 2784\n\t\t/* ALT Method...\n                                                                                                    // 2785\n\t\tvar $P = $Ps[pane];\n                                                                                                 // 2786\n\t\t$M.css( $P.position() ).css({ width: $P[0].offsetWidth, height: $P[0].offsetHeight });\n                              // 2787\n\t\t*/\n                                                                                                                  // 2788\n\t}\n                                                                                                                    // 2789\n,\tsizeMasks = function () {\n                                                                                           // 2790\n\t\t$Ms.each( sizeMask ); // resize all 'visible' masks\n                                                                 // 2791\n\t}\n                                                                                                                    // 2792\n\n                                                                                                                      // 2793\n\t/**\n                                                                                                                  // 2794\n\t* @param {string}\tpane\t\tThe pane being resized, animated or isSliding\n                                                // 2795\n\t* @param {Object=}\t[args]\t\t(optional) Options: which masks to apply, and to which panes\n                              // 2796\n\t*/\n                                                                                                                   // 2797\n,\tshowMasks = function (pane, args) {\n                                                                                 // 2798\n\t\tvar\tc\t\t= _c[pane]\n                                                                                                   // 2799\n\t\t,\tpanes\t=  [\"center\"]\n                                                                                               // 2800\n\t\t,\tz\t\t= options.zIndexes\n                                                                                             // 2801\n\t\t,\ta\t\t= $.extend({\n                                                                                                   // 2802\n\t\t\t\t\t\tobjectsOnly:\tfalse\n                                                                                              // 2803\n\t\t\t\t\t,\tanimation:\t\tfalse\n                                                                                              // 2804\n\t\t\t\t\t,\tresizing:\t\ttrue\n                                                                                                // 2805\n\t\t\t\t\t,\tsliding:\t\tstate[pane].isSliding\n                                                                                // 2806\n\t\t\t\t\t},\targs )\n                                                                                                        // 2807\n\t\t,\to, s\n                                                                                                              // 2808\n\t\t;\n                                                                                                                   // 2809\n\t\tif (a.resizing)\n                                                                                                     // 2810\n\t\t\tpanes.push( pane );\n                                                                                                // 2811\n\t\tif (a.sliding)\n                                                                                                      // 2812\n\t\t\tpanes.push( _c.oppositeEdge[pane] ); // ADD the oppositeEdge-pane\n                                                  // 2813\n\n                                                                                                                      // 2814\n\t\tif (c.dir === \"horz\") {\n                                                                                             // 2815\n\t\t\tpanes.push(\"west\");\n                                                                                                // 2816\n\t\t\tpanes.push(\"east\");\n                                                                                                // 2817\n\t\t}\n                                                                                                                   // 2818\n\n                                                                                                                      // 2819\n\t\t$.each(panes, function(i,p){\n                                                                                        // 2820\n\t\t\ts = state[p];\n                                                                                                      // 2821\n\t\t\to = options[p];\n                                                                                                    // 2822\n\t\t\tif (s.isVisible && ( o.maskObjects || (!a.objectsOnly && o.maskContents) )) {\n                                      // 2823\n\t\t\t\tgetMasks(p).each(function(){\n                                                                                      // 2824\n\t\t\t\t\tsizeMask.call(this);\n                                                                                             // 2825\n\t\t\t\t\tthis.style.zIndex = s.isSliding ? z.pane_sliding+1 : z.pane_normal+1\n                                             // 2826\n\t\t\t\t\tthis.style.display = \"block\";\n                                                                                    // 2827\n\t\t\t\t});\n                                                                                                               // 2828\n\t\t\t}\n                                                                                                                  // 2829\n\t\t});\n                                                                                                                 // 2830\n\t}\n                                                                                                                    // 2831\n\n                                                                                                                      // 2832\n\t/**\n                                                                                                                  // 2833\n\t* @param {boolean=}\tforce\t\tHide masks even if a pane is sliding\n                                                      // 2834\n\t*/\n                                                                                                                   // 2835\n,\thideMasks = function (force) {\n                                                                                      // 2836\n\t\t// ensure no pane is resizing - could be a timing issue\n                                                             // 2837\n\t\tif (force || !state.paneResizing) {\n                                                                                 // 2838\n\t\t\t$Ms.hide(); // hide ALL masks\n                                                                                      // 2839\n\t\t}\n                                                                                                                   // 2840\n\t\t// if ANY pane is sliding, then DO NOT remove masks from panes with maskObjects enabled\n                             // 2841\n\t\telse if (!force && !$.isEmptyObject( state.panesSliding )) {\n                                                        // 2842\n\t\t\tvar\ti = $Ms.length - 1\n                                                                                             // 2843\n\t\t\t,\tp, $M;\n                                                                                                           // 2844\n\t\t\tfor (; i >= 0; i--) {\n                                                                                              // 2845\n\t\t\t\t$M\t= $Ms.eq(i);\n                                                                                                   // 2846\n\t\t\t\tp\t= $M.data(\"layoutMask\");\n                                                                                        // 2847\n\t\t\t\tif (!options[p].maskObjects) {\n                                                                                    // 2848\n\t\t\t\t\t$M.hide();\n                                                                                                       // 2849\n\t\t\t\t}\n                                                                                                                 // 2850\n\t\t\t}\n                                                                                                                  // 2851\n\t\t}\n                                                                                                                   // 2852\n\t}\n                                                                                                                    // 2853\n\n                                                                                                                      // 2854\n\t/**\n                                                                                                                  // 2855\n\t* @param {string}\tpane\n                                                                                               // 2856\n\t*/\n                                                                                                                   // 2857\n,\tgetMasks = function (pane) {\n                                                                                        // 2858\n\t\tvar $Masks\t= $([])\n                                                                                                  // 2859\n\t\t,\t$M, i = 0, c = $Ms.length\n                                                                                         // 2860\n\t\t;\n                                                                                                                   // 2861\n\t\tfor (; i<c; i++) {\n                                                                                                  // 2862\n\t\t\t$M = $Ms.eq(i);\n                                                                                                    // 2863\n\t\t\tif ($M.data(\"layoutMask\") === pane)\n                                                                                // 2864\n\t\t\t\t$Masks = $Masks.add( $M );\n                                                                                        // 2865\n\t\t}\n                                                                                                                   // 2866\n\t\tif ($Masks.length)\n                                                                                                  // 2867\n\t\t\treturn $Masks;\n                                                                                                     // 2868\n\t\telse\n                                                                                                                // 2869\n\t\t\treturn createMasks(pane);\n                                                                                          // 2870\n\t}\n                                                                                                                    // 2871\n\n                                                                                                                      // 2872\n\t/**\n                                                                                                                  // 2873\n\t* createMasks\n                                                                                                        // 2874\n\t*\n                                                                                                                    // 2875\n\t* Generates both DIV (ALWAYS used) and IFRAME (optional) elements as masks\n                                           // 2876\n\t* An IFRAME mask is created *under* the DIV when maskObjects=true, because a DIV cannot mask an applet\n               // 2877\n\t*\n                                                                                                                    // 2878\n\t* @param {string}\tpane\n                                                                                               // 2879\n\t*/\n                                                                                                                   // 2880\n,\tcreateMasks = function (pane) {\n                                                                                     // 2881\n\t\tvar\n                                                                                                                 // 2882\n\t\t\t$P\t\t= $Ps[pane]\n                                                                                                    // 2883\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 2884\n\t\t,\to\t\t= options[pane]\n                                                                                                // 2885\n\t\t,\tz\t\t= options.zIndexes\n                                                                                             // 2886\n\t\t//,\tobjMask\t= o.maskObjects && s.tagName != \"IFRAME\" // check for option\n                                            // 2887\n\t\t,\t$Masks\t= $([])\n                                                                                                    // 2888\n\t\t,\tisIframe, el, $M, css, i\n                                                                                          // 2889\n\t\t;\n                                                                                                                   // 2890\n\t\tif (!o.maskContents && !o.maskObjects) return $Masks;\n                                                               // 2891\n\t\t// if o.maskObjects=true, then loop TWICE to create BOTH kinds of mask, else only create a DIV\n                      // 2892\n\t\tfor (i=0; i < (o.maskObjects ? 2 : 1); i++) {\n                                                                       // 2893\n\t\t\tisIframe = o.maskObjects && i==0;\n                                                                                  // 2894\n\t\t\tel = document.createElement( isIframe ? \"iframe\" : \"div\" );\n                                                        // 2895\n\t\t\t$M = $(el).data(\"layoutMask\", pane); // add data to relate mask to pane\n                                            // 2896\n\t\t\tel.className = \"ui-layout-mask ui-layout-mask-\"+ pane; // for user styling\n                                         // 2897\n\t\t\tcss = el.style;\n                                                                                                    // 2898\n\t\t\t// styles common to both DIVs and IFRAMES\n                                                                          // 2899\n\t\t\tcss.display\t\t= \"block\";\n                                                                                            // 2900\n\t\t\tcss.position\t= \"absolute\";\n                                                                                         // 2901\n\t\t\tcss.background\t= \"#FFF\";\n                                                                                           // 2902\n\t\t\tif (isIframe) { // IFRAME-only props\n                                                                               // 2903\n\t\t\t\tel.frameborder = 0;\n                                                                                               // 2904\n\t\t\t\tel.src\t\t= \"about:blank\";\n                                                                                          // 2905\n\t\t\t\t//el.allowTransparency = true; - for IE, but breaks masking ability!\n                                              // 2906\n\t\t\t\tcss.opacity\t= 0;\n                                                                                                  // 2907\n\t\t\t\tcss.filter\t= \"Alpha(Opacity='0')\";\n                                                                                // 2908\n\t\t\t\tcss.border\t= 0;\n                                                                                                   // 2909\n\t\t\t}\n                                                                                                                  // 2910\n\t\t\t// if pane is an IFRAME, then must mask the pane itself\n                                                            // 2911\n\t\t\tif (s.tagName == \"IFRAME\") {\n                                                                                       // 2912\n\t\t\t\t// NOTE sizing done by a subroutine so can be called during live-resizing\n                                         // 2913\n\t\t\t\tcss.zIndex\t= z.pane_normal+1; // 1-higher than pane\n                                                               // 2914\n\t\t\t\t$N.append( el ); // append to LAYOUT CONTAINER\n                                                                    // 2915\n\t\t\t}\n                                                                                                                  // 2916\n\t\t\t// otherwise put masks *inside the pane* to mask its contents\n                                                      // 2917\n\t\t\telse {\n                                                                                                             // 2918\n\t\t\t\t$M.addClass(\"ui-layout-mask-inside-pane\");\n                                                                        // 2919\n\t\t\t\tcss.zIndex\t= o.maskZindex || z.content_mask; // usually 1, but customizable\n                                       // 2920\n\t\t\t\tcss.top\t\t= 0;\n                                                                                                     // 2921\n\t\t\t\tcss.left\t= 0;\n                                                                                                     // 2922\n\t\t\t\tcss.width\t= \"100%\";\n                                                                                               // 2923\n\t\t\t\tcss.height\t= \"100%\";\n                                                                                              // 2924\n\t\t\t\t$P.append( el ); // append INSIDE pane element\n                                                                    // 2925\n\t\t\t}\n                                                                                                                  // 2926\n\t\t\t// add to return object\n                                                                                            // 2927\n\t\t\t$Masks = $Masks.add( el );\n                                                                                         // 2928\n\t\t\t// add Mask to cached array so can be resized & reused\n                                                             // 2929\n\t\t\t$Ms = $Ms.add( el );\n                                                                                               // 2930\n\t\t}\n                                                                                                                   // 2931\n\t\treturn $Masks;\n                                                                                                      // 2932\n\t}\n                                                                                                                    // 2933\n\n                                                                                                                      // 2934\n\n                                                                                                                      // 2935\n\t/**\n                                                                                                                  // 2936\n\t* Destroy this layout and reset all elements\n                                                                         // 2937\n\t*\n                                                                                                                    // 2938\n\t* @param {boolean=}\t[destroyChildren=false]\t\tDestory Child-Layouts first?\n                                            // 2939\n\t*/\n                                                                                                                   // 2940\n,\tdestroy = function (evt_or_destroyChildren, destroyChildren) {\n                                                      // 2941\n\t\t// UNBIND layout events and remove global object\n                                                                    // 2942\n\t\t$(window).unbind(\".\"+ sID);\t\t// resize & unload\n                                                                     // 2943\n\t\t$(document).unbind(\".\"+ sID);\t// keyDown (hotkeys)\n                                                                  // 2944\n\n                                                                                                                      // 2945\n\t\tif (typeof evt_or_destroyChildren === \"object\")\n                                                                     // 2946\n\t\t\t// stopPropagation if called by trigger(\"layoutdestroy\") - use evtPane utility \n                                    // 2947\n\t\t\tevtPane(evt_or_destroyChildren);\n                                                                                   // 2948\n\t\telse // no event, so transfer 1st param to destroyChildren param\n                                                    // 2949\n\t\t\tdestroyChildren = evt_or_destroyChildren;\n                                                                          // 2950\n\n                                                                                                                      // 2951\n\t\t// need to look for parent layout BEFORE we remove the container data, else skips a level\n                           // 2952\n\t\t//var parentPane = Instance.hasParentLayout ? $.layout.getParentPaneInstance( $N ) : null;\n                          // 2953\n\n                                                                                                                      // 2954\n\t\t// reset layout-container\n                                                                                           // 2955\n\t\t$N\t.clearQueue()\n                                                                                                    // 2956\n\t\t\t.removeData(\"layout\")\n                                                                                              // 2957\n\t\t\t.removeData(\"layoutContainer\")\n                                                                                     // 2958\n\t\t\t.removeClass(options.containerClass)\n                                                                               // 2959\n\t\t\t.unbind(\".\"+ sID) // remove ALL Layout events\n                                                                      // 2960\n\t\t;\n                                                                                                                   // 2961\n\n                                                                                                                      // 2962\n\t\t// remove all mask elements that have been created\n                                                                  // 2963\n\t\t$Ms.remove();\n                                                                                                       // 2964\n\n                                                                                                                      // 2965\n\t\t// loop all panes to remove layout classes, attributes and bindings\n                                                 // 2966\n\t\t$.each(_c.allPanes, function (i, pane) {\n                                                                            // 2967\n\t\t\tremovePane( pane, false, true, destroyChildren ); // true = skipResize\n                                             // 2968\n\t\t});\n                                                                                                                 // 2969\n\n                                                                                                                      // 2970\n\t\t// do NOT reset container CSS if is a 'pane' (or 'content') in an outer-layout - ie, THIS layout is 'nested'\n        // 2971\n\t\tvar css = \"layoutCSS\";\n                                                                                              // 2972\n\t\tif ($N.data(css) && !$N.data(\"layoutRole\")) // RESET CSS\n                                                            // 2973\n\t\t\t$N.css( $N.data(css) ).removeData(css);\n                                                                            // 2974\n\n                                                                                                                      // 2975\n\t\t// for full-page layouts, also reset the <HTML> CSS\n                                                                 // 2976\n\t\tif (sC.tagName === \"BODY\" && ($N = $(\"html\")).data(css)) // RESET <HTML> CSS\n                                        // 2977\n\t\t\t$N.css( $N.data(css) ).removeData(css);\n                                                                            // 2978\n\n                                                                                                                      // 2979\n\t\t// trigger plugins for this layout, if there are any\n                                                                // 2980\n\t\trunPluginCallbacks( Instance, $.layout.onDestroy );\n                                                                 // 2981\n\n                                                                                                                      // 2982\n\t\t// trigger state-management and onunload callback\n                                                                   // 2983\n\t\tunload();\n                                                                                                           // 2984\n\n                                                                                                                      // 2985\n\t\t// clear the Instance of everything except for container & options (so could recreate)\n                              // 2986\n\t\t// RE-CREATE: myLayout = myLayout.container.layout( myLayout.options );\n                                             // 2987\n\t\tfor (var n in Instance)\n                                                                                             // 2988\n\t\t\tif (!n.match(/^(container|options)$/)) delete Instance[ n ];\n                                                       // 2989\n\t\t// add a 'destroyed' flag to make it easy to check\n                                                                  // 2990\n\t\tInstance.destroyed = true;\n                                                                                          // 2991\n\n                                                                                                                      // 2992\n\t\t// if this is a child layout, CLEAR the child-pointer in the parent\n                                                 // 2993\n\t\t/* for now the pointer REMAINS, but with only container, options and destroyed keys\n                                 // 2994\n\t\tif (parentPane) {\n                                                                                                   // 2995\n\t\t\tvar layout\t= parentPane.pane.data(\"parentLayout\")\n                                                                  // 2996\n\t\t\t,\tkey\t\t= layout.options.instanceKey || 'error';\n                                                                    // 2997\n\t\t\t// THIS SYNTAX MAY BE WRONG!\n                                                                                       // 2998\n\t\t\tparentPane.children[key] = layout.children[ parentPane.name ].children[key] = null;\n                                // 2999\n\t\t}\n                                                                                                                   // 3000\n\t\t*/\n                                                                                                                  // 3001\n\n                                                                                                                      // 3002\n\t\treturn Instance; // for coding convenience\n                                                                          // 3003\n\t}\n                                                                                                                    // 3004\n\n                                                                                                                      // 3005\n\t/**\n                                                                                                                  // 3006\n\t* Remove a pane from the layout - subroutine of destroy()\n                                                            // 3007\n\t*\n                                                                                                                    // 3008\n\t* @see  destroy()\n                                                                                                    // 3009\n\t* @param {(string|Object)}\tevt_or_pane\t\t\tThe pane to process\n                                                         // 3010\n\t* @param {boolean=}\t\t\t[remove=false]\t\tRemove the DOM element?\n                                                        // 3011\n\t* @param {boolean=}\t\t\t[skipResize=false]\tSkip calling resizeAll()?\n                                                   // 3012\n\t* @param {boolean=}\t\t\t[destroyChild=true]\tDestroy Child-layouts? If not passed, obeys options setting\n                // 3013\n\t*/\n                                                                                                                   // 3014\n,\tremovePane = function (evt_or_pane, remove, skipResize, destroyChild) {\n                                             // 3015\n\t\tif (!isInitialized()) return;\n                                                                                       // 3016\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 3017\n\t\t,\t$P\t= $Ps[pane]\n                                                                                                    // 3018\n\t\t,\t$C\t= $Cs[pane]\n                                                                                                    // 3019\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 3020\n\t\t,\t$T\t= $Ts[pane]\n                                                                                                    // 3021\n\t\t;\n                                                                                                                   // 3022\n\t\t// NOTE: elements can still exist even after remove()\n                                                               // 3023\n\t\t//\t\tso check for missing data(), which is cleared by removed()\n                                                      // 3024\n\t\tif ($P && $.isEmptyObject( $P.data() )) $P = false;\n                                                                 // 3025\n\t\tif ($C && $.isEmptyObject( $C.data() )) $C = false;\n                                                                 // 3026\n\t\tif ($R && $.isEmptyObject( $R.data() )) $R = false;\n                                                                 // 3027\n\t\tif ($T && $.isEmptyObject( $T.data() )) $T = false;\n                                                                 // 3028\n\n                                                                                                                      // 3029\n\t\tif ($P) $P.stop(true, true);\n                                                                                        // 3030\n\n                                                                                                                      // 3031\n\t\tvar\to\t= options[pane]\n                                                                                               // 3032\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3033\n\t\t,\td\t= \"layout\"\n                                                                                                      // 3034\n\t\t,\tcss\t= \"layoutCSS\"\n                                                                                                 // 3035\n\t\t,\tpC\t= children[pane]\n                                                                                               // 3036\n\t\t,\thasChildren\t= $.isPlainObject( pC ) && !$.isEmptyObject( pC )\n                                                     // 3037\n\t\t,\tdestroy\t\t= destroyChild !== undefined ? destroyChild : o.destroyChildren\n                                          // 3038\n\t\t;\n                                                                                                                   // 3039\n\t\t// FIRST destroy the child-layout(s)\n                                                                                // 3040\n\t\tif (hasChildren && destroy) {\n                                                                                       // 3041\n\t\t\t$.each( pC, function (key, child) {\n                                                                                // 3042\n\t\t\t\tif (!child.destroyed)\n                                                                                             // 3043\n\t\t\t\t\tchild.destroy(true);// tell child-layout to destroy ALL its child-layouts too\n                                    // 3044\n\t\t\t\tif (child.destroyed)\t// destroy was successful\n                                                                    // 3045\n\t\t\t\t\tdelete pC[key];\n                                                                                                  // 3046\n\t\t\t});\n                                                                                                                // 3047\n\t\t\t// if no more children, remove the children hash\n                                                                   // 3048\n\t\t\tif ($.isEmptyObject( pC )) {\n                                                                                       // 3049\n\t\t\t\tpC = children[pane] = null; // clear children hash\n                                                                // 3050\n\t\t\t\thasChildren = false;\n                                                                                              // 3051\n\t\t\t}\n                                                                                                                  // 3052\n\t\t}\n                                                                                                                   // 3053\n\n                                                                                                                      // 3054\n\t\t// Note: can't 'remove' a pane element with non-destroyed children\n                                                  // 3055\n\t\tif ($P && remove && !hasChildren)\n                                                                                   // 3056\n\t\t\t$P.remove(); // remove the pane-element and everything inside it\n                                                   // 3057\n\t\telse if ($P && $P[0]) {\n                                                                                             // 3058\n\t\t\t//\tcreate list of ALL pane-classes that need to be removed\n                                                         // 3059\n\t\t\tvar\troot\t= o.paneClass // default=\"ui-layout-pane\"\n                                                                 // 3060\n\t\t\t,\tpRoot\t= root +\"-\"+ pane // eg: \"ui-layout-pane-west\"\n                                                             // 3061\n\t\t\t,\t_open\t= \"-open\"\n                                                                                                  // 3062\n\t\t\t,\t_sliding= \"-sliding\"\n                                                                                             // 3063\n\t\t\t,\t_closed\t= \"-closed\"\n                                                                                              // 3064\n\t\t\t,\tclasses\t= [\troot, root+_open, root+_closed, root+_sliding,\t\t// generic classes\n                                   // 3065\n\t\t\t\t\t\t\tpRoot, pRoot+_open, pRoot+_closed, pRoot+_sliding ]\t// pane-specific classes\n                                   // 3066\n\t\t\t;\n                                                                                                                  // 3067\n\t\t\t$.merge(classes, getHoverClasses($P, true)); // ADD hover-classes\n                                                  // 3068\n\t\t\t// remove all Layout classes from pane-element\n                                                                     // 3069\n\t\t\t$P\t.removeClass( classes.join(\" \") ) // remove ALL pane-classes\n                                                    // 3070\n\t\t\t\t.removeData(\"parentLayout\")\n                                                                                       // 3071\n\t\t\t\t.removeData(\"layoutPane\")\n                                                                                         // 3072\n\t\t\t\t.removeData(\"layoutRole\")\n                                                                                         // 3073\n\t\t\t\t.removeData(\"layoutEdge\")\n                                                                                         // 3074\n\t\t\t\t.removeData(\"autoHidden\")\t// in case set\n                                                                          // 3075\n\t\t\t\t.unbind(\".\"+ sID) // remove ALL Layout events\n                                                                     // 3076\n\t\t\t\t// TODO: remove these extra unbind commands when jQuery is fixed\n                                                  // 3077\n\t\t\t\t//.unbind(\"mouseenter\"+ sID)\n                                                                                      // 3078\n\t\t\t\t//.unbind(\"mouseleave\"+ sID)\n                                                                                      // 3079\n\t\t\t;\n                                                                                                                  // 3080\n\t\t\t// do NOT reset CSS if this pane/content is STILL the container of a nested layout!\n                                // 3081\n\t\t\t// the nested layout will reset its 'container' CSS when/if it is destroyed\n                                        // 3082\n\t\t\tif (hasChildren && $C) {\n                                                                                           // 3083\n\t\t\t\t// a content-div may not have a specific width, so give it one to contain the Layout\n                              // 3084\n\t\t\t\t$C.width( $C.width() );\n                                                                                           // 3085\n\t\t\t\t$.each( pC, function (key, child) {\n                                                                               // 3086\n\t\t\t\t\tchild.resizeAll(); // resize the Layout\n                                                                          // 3087\n\t\t\t\t});\n                                                                                                               // 3088\n\t\t\t}\n                                                                                                                  // 3089\n\t\t\telse if ($C)\n                                                                                                       // 3090\n\t\t\t\t$C.css( $C.data(css) ).removeData(css).removeData(\"layoutRole\");\n                                                  // 3091\n\t\t\t// remove pane AFTER content in case there was a nested layout\n                                                     // 3092\n\t\t\tif (!$P.data(d))\n                                                                                                   // 3093\n\t\t\t\t$P.css( $P.data(css) ).removeData(css);\n                                                                           // 3094\n\t\t}\n                                                                                                                   // 3095\n\n                                                                                                                      // 3096\n\t\t// REMOVE pane resizer and toggler elements\n                                                                         // 3097\n\t\tif ($T) $T.remove();\n                                                                                                // 3098\n\t\tif ($R) $R.remove();\n                                                                                                // 3099\n\n                                                                                                                      // 3100\n\t\t// CLEAR all pointers and state data\n                                                                                // 3101\n\t\tInstance[pane] = $Ps[pane] = $Cs[pane] = $Rs[pane] = $Ts[pane] = false;\n                                             // 3102\n\t\ts = { removed: true };\n                                                                                              // 3103\n\n                                                                                                                      // 3104\n\t\tif (!skipResize)\n                                                                                                    // 3105\n\t\t\tresizeAll();\n                                                                                                       // 3106\n\t}\n                                                                                                                    // 3107\n\n                                                                                                                      // 3108\n\n                                                                                                                      // 3109\n/*\n                                                                                                                    // 3110\n * ###########################\n                                                                                        // 3111\n *\t   ACTION METHODS\n                                                                                                  // 3112\n * ###########################\n                                                                                        // 3113\n */\n                                                                                                                   // 3114\n\n                                                                                                                      // 3115\n\t/**\n                                                                                                                  // 3116\n\t* @param {string}\tpane\n                                                                                               // 3117\n\t*/\n                                                                                                                   // 3118\n,\t_hidePane = function (pane) {\n                                                                                       // 3119\n\t\tvar $P\t= $Ps[pane]\n                                                                                                  // 3120\n\t\t,\to\t= options[pane]\n                                                                                                 // 3121\n\t\t,\ts\t= $P[0].style\n                                                                                                   // 3122\n\t\t;\n                                                                                                                   // 3123\n\t\tif (o.useOffscreenClose) {\n                                                                                          // 3124\n\t\t\tif (!$P.data(_c.offscreenReset))\n                                                                                   // 3125\n\t\t\t\t$P.data(_c.offscreenReset, { left: s.left, right: s.right });\n                                                     // 3126\n\t\t\t$P.css( _c.offscreenCSS );\n                                                                                         // 3127\n\t\t}\n                                                                                                                   // 3128\n\t\telse\n                                                                                                                // 3129\n\t\t\t$P.hide().removeData(_c.offscreenReset);\n                                                                           // 3130\n\t}\n                                                                                                                    // 3131\n\n                                                                                                                      // 3132\n\t/**\n                                                                                                                  // 3133\n\t* @param {string}\tpane\n                                                                                               // 3134\n\t*/\n                                                                                                                   // 3135\n,\t_showPane = function (pane) {\n                                                                                       // 3136\n\t\tvar $P\t= $Ps[pane]\n                                                                                                  // 3137\n\t\t,\to\t= options[pane]\n                                                                                                 // 3138\n\t\t,\toff\t= _c.offscreenCSS\n                                                                                             // 3139\n\t\t,\told\t= $P.data(_c.offscreenReset)\n                                                                                  // 3140\n\t\t,\ts\t= $P[0].style\n                                                                                                   // 3141\n\t\t;\n                                                                                                                   // 3142\n\t\t$P\t.show() // ALWAYS show, just in case\n                                                                             // 3143\n\t\t\t.removeData(_c.offscreenReset);\n                                                                                    // 3144\n\t\tif (o.useOffscreenClose && old) {\n                                                                                   // 3145\n\t\t\tif (s.left == off.left)\n                                                                                            // 3146\n\t\t\t\ts.left = old.left;\n                                                                                                // 3147\n\t\t\tif (s.right == off.right)\n                                                                                          // 3148\n\t\t\t\ts.right = old.right;\n                                                                                              // 3149\n\t\t}\n                                                                                                                   // 3150\n\t}\n                                                                                                                    // 3151\n\n                                                                                                                      // 3152\n\n                                                                                                                      // 3153\n\t/**\n                                                                                                                  // 3154\n\t* Completely 'hides' a pane, including its spacing - as if it does not exist\n                                         // 3155\n\t* The pane is not actually 'removed' from the source, so can use 'show' to un-hide it\n                                // 3156\n\t*\n                                                                                                                    // 3157\n\t* @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being hidden, ie: north, south, east, or west\n                      // 3158\n\t* @param {boolean=}\t\t\t[noAnimation=false]\t\n                                                                           // 3159\n\t*/\n                                                                                                                   // 3160\n,\thide = function (evt_or_pane, noAnimation) {\n                                                                        // 3161\n\t\tif (!isInitialized()) return;\n                                                                                       // 3162\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 3163\n\t\t,\to\t= options[pane]\n                                                                                                 // 3164\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3165\n\t\t,\t$P\t= $Ps[pane]\n                                                                                                    // 3166\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 3167\n\t\t;\n                                                                                                                   // 3168\n\t\tif (!$P || s.isHidden) return; // pane does not exist OR is already hidden\n                                          // 3169\n\n                                                                                                                      // 3170\n\t\t// onhide_start callback - will CANCEL hide if returns false\n                                                        // 3171\n\t\tif (state.initialized && false === _runCallbacks(\"onhide_start\", pane)) return;\n                                     // 3172\n\n                                                                                                                      // 3173\n\t\ts.isSliding = false; // just in case\n                                                                                // 3174\n\t\tdelete state.panesSliding[pane];\n                                                                                    // 3175\n\n                                                                                                                      // 3176\n\t\t// now hide the elements\n                                                                                            // 3177\n\t\tif ($R) $R.hide(); // hide resizer-bar\n                                                                              // 3178\n\t\tif (!state.initialized || s.isClosed) {\n                                                                             // 3179\n\t\t\ts.isClosed = true; // to trigger open-animation on show()\n                                                          // 3180\n\t\t\ts.isHidden  = true;\n                                                                                                // 3181\n\t\t\ts.isVisible = false;\n                                                                                               // 3182\n\t\t\tif (!state.initialized)\n                                                                                            // 3183\n\t\t\t\t_hidePane(pane); // no animation when loading page\n                                                                // 3184\n\t\t\tsizeMidPanes(_c[pane].dir === \"horz\" ? \"\" : \"center\");\n                                                             // 3185\n\t\t\tif (state.initialized || o.triggerEventsOnLoad)\n                                                                    // 3186\n\t\t\t\t_runCallbacks(\"onhide_end\", pane);\n                                                                                // 3187\n\t\t}\n                                                                                                                   // 3188\n\t\telse {\n                                                                                                              // 3189\n\t\t\ts.isHiding = true; // used by onclose\n                                                                              // 3190\n\t\t\tclose(pane, false, noAnimation); // adjust all panes to fit\n                                                        // 3191\n\t\t}\n                                                                                                                   // 3192\n\t}\n                                                                                                                    // 3193\n\n                                                                                                                      // 3194\n\t/**\n                                                                                                                  // 3195\n\t* Show a hidden pane - show as 'closed' by default unless openPane = true\n                                            // 3196\n\t*\n                                                                                                                    // 3197\n\t* @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being opened, ie: north, south, east, or west\n                      // 3198\n\t* @param {boolean=}\t\t\t[openPane=false]\n                                                                               // 3199\n\t* @param {boolean=}\t\t\t[noAnimation=false]\n                                                                            // 3200\n\t* @param {boolean=}\t\t\t[noAlert=false]\n                                                                                // 3201\n\t*/\n                                                                                                                   // 3202\n,\tshow = function (evt_or_pane, openPane, noAnimation, noAlert) {\n                                                     // 3203\n\t\tif (!isInitialized()) return;\n                                                                                       // 3204\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 3205\n\t\t,\to\t= options[pane]\n                                                                                                 // 3206\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3207\n\t\t,\t$P\t= $Ps[pane]\n                                                                                                    // 3208\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 3209\n\t\t;\n                                                                                                                   // 3210\n\t\tif (!$P || !s.isHidden) return; // pane does not exist OR is not hidden\n                                             // 3211\n\n                                                                                                                      // 3212\n\t\t// onshow_start callback - will CANCEL show if returns false\n                                                        // 3213\n\t\tif (false === _runCallbacks(\"onshow_start\", pane)) return;\n                                                          // 3214\n\n                                                                                                                      // 3215\n\t\ts.isShowing = true; // used by onopen/onclose\n                                                                       // 3216\n\t\t//s.isHidden  = false; - will be set by open/close - if not cancelled\n                                               // 3217\n\t\ts.isSliding = false; // just in case\n                                                                                // 3218\n\t\tdelete state.panesSliding[pane];\n                                                                                    // 3219\n\n                                                                                                                      // 3220\n\t\t// now show the elements\n                                                                                            // 3221\n\t\t//if ($R) $R.show(); - will be shown by open/close\n                                                                  // 3222\n\t\tif (openPane === false)\n                                                                                             // 3223\n\t\t\tclose(pane, true); // true = force\n                                                                                 // 3224\n\t\telse\n                                                                                                                // 3225\n\t\t\topen(pane, false, noAnimation, noAlert); // adjust all panes to fit\n                                                // 3226\n\t}\n                                                                                                                    // 3227\n\n                                                                                                                      // 3228\n\n                                                                                                                      // 3229\n\t/**\n                                                                                                                  // 3230\n\t* Toggles a pane open/closed by calling either open or close\n                                                         // 3231\n\t*\n                                                                                                                    // 3232\n\t* @param {(string|Object)}\tevt_or_pane\t\tThe pane being toggled, ie: north, south, east, or west\n                      // 3233\n\t* @param {boolean=}\t\t\t[slide=false]\n                                                                                  // 3234\n\t*/\n                                                                                                                   // 3235\n,\ttoggle = function (evt_or_pane, slide) {\n                                                                            // 3236\n\t\tif (!isInitialized()) return;\n                                                                                       // 3237\n\t\tvar\tevt\t\t= evtObj(evt_or_pane)\n                                                                                      // 3238\n\t\t,\tpane\t= evtPane.call(this, evt_or_pane)\n                                                                            // 3239\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 3240\n\t\t;\n                                                                                                                   // 3241\n\t\tif (evt) // called from to $R.dblclick OR triggerPaneEvent\n                                                          // 3242\n\t\t\tevt.stopImmediatePropagation();\n                                                                                    // 3243\n\t\tif (s.isHidden)\n                                                                                                     // 3244\n\t\t\tshow(pane); // will call 'open' after unhiding it\n                                                                  // 3245\n\t\telse if (s.isClosed)\n                                                                                                // 3246\n\t\t\topen(pane, !!slide);\n                                                                                               // 3247\n\t\telse\n                                                                                                                // 3248\n\t\t\tclose(pane);\n                                                                                                       // 3249\n\t}\n                                                                                                                    // 3250\n\n                                                                                                                      // 3251\n\n                                                                                                                      // 3252\n\t/**\n                                                                                                                  // 3253\n\t* Utility method used during init or other auto-processes\n                                                            // 3254\n\t*\n                                                                                                                    // 3255\n\t* @param {string}\tpane   The pane being closed\n                                                                       // 3256\n\t* @param {boolean=}\t[setHandles=false]\n                                                                               // 3257\n\t*/\n                                                                                                                   // 3258\n,\t_closePane = function (pane, setHandles) {\n                                                                          // 3259\n\t\tvar\n                                                                                                                 // 3260\n\t\t\t$P\t= $Ps[pane]\n                                                                                                     // 3261\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3262\n\t\t;\n                                                                                                                   // 3263\n\t\t_hidePane(pane);\n                                                                                                    // 3264\n\t\ts.isClosed = true;\n                                                                                                  // 3265\n\t\ts.isVisible = false;\n                                                                                                // 3266\n\t\tif (setHandles) setAsClosed(pane);\n                                                                                  // 3267\n\t}\n                                                                                                                    // 3268\n\n                                                                                                                      // 3269\n\t/**\n                                                                                                                  // 3270\n\t* Close the specified pane (animation optional), and resize all other panes as needed\n                                // 3271\n\t*\n                                                                                                                    // 3272\n\t* @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being closed, ie: north, south, east, or west\n                      // 3273\n\t* @param {boolean=}\t\t\t[force=false]\n                                                                                  // 3274\n\t* @param {boolean=}\t\t\t[noAnimation=false]\n                                                                            // 3275\n\t* @param {boolean=}\t\t\t[skipCallback=false]\n                                                                           // 3276\n\t*/\n                                                                                                                   // 3277\n,\tclose = function (evt_or_pane, force, noAnimation, skipCallback) {\n                                                  // 3278\n\t\tvar\tpane = evtPane.call(this, evt_or_pane);\n                                                                         // 3279\n\t\t// if pane has been initialized, but NOT the complete layout, close pane instantly\n                                  // 3280\n\t\tif (!state.initialized && $Ps[pane]) {\n                                                                              // 3281\n\t\t\t_closePane(pane, true); // INIT pane as closed\n                                                                     // 3282\n\t\t\treturn;\n                                                                                                            // 3283\n\t\t}\n                                                                                                                   // 3284\n\t\tif (!isInitialized()) return;\n                                                                                       // 3285\n\n                                                                                                                      // 3286\n\t\tvar\n                                                                                                                 // 3287\n\t\t\t$P\t= $Ps[pane]\n                                                                                                     // 3288\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 3289\n\t\t,\t$T\t= $Ts[pane]\n                                                                                                    // 3290\n\t\t,\to\t= options[pane]\n                                                                                                 // 3291\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3292\n\t\t,\tc\t= _c[pane]\n                                                                                                      // 3293\n\t\t,\tdoFX, isShowing, isHiding, wasSliding;\n                                                                            // 3294\n\n                                                                                                                      // 3295\n\t\t// QUEUE in case another action/animation is in progress\n                                                            // 3296\n\t\t$N.queue(function( queueNext ){\n                                                                                     // 3297\n\n                                                                                                                      // 3298\n\t\t\tif ( !$P\n                                                                                                           // 3299\n\t\t\t||\t(!o.closable && !s.isShowing && !s.isHiding)\t// invalid request // (!o.resizable && !o.closable) ???\n            // 3300\n\t\t\t||\t(!force && s.isClosed && !s.isShowing)\t\t\t// already closed\n                                                      // 3301\n\t\t\t) return queueNext();\n                                                                                              // 3302\n\n                                                                                                                      // 3303\n\t\t\t// onclose_start callback - will CANCEL hide if returns false\n                                                      // 3304\n\t\t\t// SKIP if just 'showing' a hidden pane as 'closed'\n                                                                // 3305\n\t\t\tvar abort = !s.isShowing && false === _runCallbacks(\"onclose_start\", pane);\n                                        // 3306\n\n                                                                                                                      // 3307\n\t\t\t// transfer logic vars to temp vars\n                                                                                // 3308\n\t\t\tisShowing\t= s.isShowing;\n                                                                                           // 3309\n\t\t\tisHiding\t= s.isHiding;\n                                                                                             // 3310\n\t\t\twasSliding\t= s.isSliding;\n                                                                                          // 3311\n\t\t\t// now clear the logic vars (REQUIRED before aborting)\n                                                             // 3312\n\t\t\tdelete s.isShowing;\n                                                                                                // 3313\n\t\t\tdelete s.isHiding;\n                                                                                                 // 3314\n\n                                                                                                                      // 3315\n\t\t\tif (abort) return queueNext();\n                                                                                     // 3316\n\n                                                                                                                      // 3317\n\t\t\tdoFX\t\t= !noAnimation && !s.isClosed && (o.fxName_close != \"none\");\n                                                 // 3318\n\t\t\ts.isMoving\t= true;\n                                                                                                 // 3319\n\t\t\ts.isClosed\t= true;\n                                                                                                 // 3320\n\t\t\ts.isVisible\t= false;\n                                                                                               // 3321\n\t\t\t// update isHidden BEFORE sizing panes\n                                                                             // 3322\n\t\t\tif (isHiding) s.isHidden = true;\n                                                                                   // 3323\n\t\t\telse if (isShowing) s.isHidden = false;\n                                                                            // 3324\n\n                                                                                                                      // 3325\n\t\t\tif (s.isSliding) // pane is being closed, so UNBIND trigger events\n                                                 // 3326\n\t\t\t\tbindStopSlidingEvents(pane, false); // will set isSliding=false\n                                                   // 3327\n\t\t\telse // resize panes adjacent to this one\n                                                                          // 3328\n\t\t\t\tsizeMidPanes(_c[pane].dir === \"horz\" ? \"\" : \"center\", false); // false = NOT skipCallback\n                         // 3329\n\n                                                                                                                      // 3330\n\t\t\t// if this pane has a resizer bar, move it NOW - before animation\n                                                  // 3331\n\t\t\tsetAsClosed(pane);\n                                                                                                 // 3332\n\n                                                                                                                      // 3333\n\t\t\t// CLOSE THE PANE\n                                                                                                  // 3334\n\t\t\tif (doFX) { // animate the close\n                                                                                   // 3335\n\t\t\t\tlockPaneForFX(pane, true);\t// need to set left/top so animation will work\n                                         // 3336\n\t\t\t\t$P.hide( o.fxName_close, o.fxSettings_close, o.fxSpeed_close, function () {\n                                       // 3337\n\t\t\t\t\tlockPaneForFX(pane, false); // undo\n                                                                              // 3338\n\t\t\t\t\tif (s.isClosed) close_2();\n                                                                                       // 3339\n\t\t\t\t\tqueueNext();\n                                                                                                     // 3340\n\t\t\t\t});\n                                                                                                               // 3341\n\t\t\t}\n                                                                                                                  // 3342\n\t\t\telse { // hide the pane without animation\n                                                                          // 3343\n\t\t\t\t_hidePane(pane);\n                                                                                                  // 3344\n\t\t\t\tclose_2();\n                                                                                                        // 3345\n\t\t\t\tqueueNext();\n                                                                                                      // 3346\n\t\t\t};\n                                                                                                                 // 3347\n\t\t});\n                                                                                                                 // 3348\n\n                                                                                                                      // 3349\n\t\t// SUBROUTINE\n                                                                                                       // 3350\n\t\tfunction close_2 () {\n                                                                                               // 3351\n\t\t\ts.isMoving\t= false;\n                                                                                                // 3352\n\t\t\tbindStartSlidingEvents(pane, true); // will enable if o.slidable = true\n                                            // 3353\n\n                                                                                                                      // 3354\n\t\t\t// if opposite-pane was autoClosed, see if it can be autoOpened now\n                                                // 3355\n\t\t\tvar altPane = _c.oppositeEdge[pane];\n                                                                               // 3356\n\t\t\tif (state[ altPane ].noRoom) {\n                                                                                     // 3357\n\t\t\t\tsetSizeLimits( altPane );\n                                                                                         // 3358\n\t\t\t\tmakePaneFit( altPane );\n                                                                                           // 3359\n\t\t\t}\n                                                                                                                  // 3360\n\n                                                                                                                      // 3361\n\t\t\tif (!skipCallback && (state.initialized || o.triggerEventsOnLoad)) {\n                                               // 3362\n\t\t\t\t// onclose callback - UNLESS just 'showing' a hidden pane as 'closed'\n                                             // 3363\n\t\t\t\tif (!isShowing)\t_runCallbacks(\"onclose_end\", pane);\n                                                               // 3364\n\t\t\t\t// onhide OR onshow callback\n                                                                                      // 3365\n\t\t\t\tif (isShowing)\t_runCallbacks(\"onshow_end\", pane);\n                                                                 // 3366\n\t\t\t\tif (isHiding)\t_runCallbacks(\"onhide_end\", pane);\n                                                                  // 3367\n\t\t\t}\n                                                                                                                  // 3368\n\t\t}\n                                                                                                                   // 3369\n\t}\n                                                                                                                    // 3370\n\n                                                                                                                      // 3371\n\t/**\n                                                                                                                  // 3372\n\t* @param {string}\tpane\tThe pane just closed, ie: north, south, east, or west\n                                         // 3373\n\t*/\n                                                                                                                   // 3374\n,\tsetAsClosed = function (pane) {\n                                                                                     // 3375\n\t\tif (!$Rs[pane]) return; // handles not initialized yet!\n                                                             // 3376\n\t\tvar\n                                                                                                                 // 3377\n\t\t\t$P\t\t= $Ps[pane]\n                                                                                                    // 3378\n\t\t,\t$R\t\t= $Rs[pane]\n                                                                                                   // 3379\n\t\t,\t$T\t\t= $Ts[pane]\n                                                                                                   // 3380\n\t\t,\to\t\t= options[pane]\n                                                                                                // 3381\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 3382\n\t\t,\tside\t= _c[pane].side\n                                                                                              // 3383\n\t\t,\trClass\t= o.resizerClass\n                                                                                           // 3384\n\t\t,\ttClass\t= o.togglerClass\n                                                                                           // 3385\n\t\t,\t_pane\t= \"-\"+ pane // used for classNames\n                                                                          // 3386\n\t\t,\t_open\t= \"-open\"\n                                                                                                   // 3387\n\t\t,\t_sliding= \"-sliding\"\n                                                                                              // 3388\n\t\t,\t_closed\t= \"-closed\"\n                                                                                               // 3389\n\t\t;\n                                                                                                                   // 3390\n\t\t$R\n                                                                                                                  // 3391\n\t\t\t.css(side, sC.inset[side]) // move the resizer\n                                                                     // 3392\n\t\t\t.removeClass( rClass+_open +\" \"+ rClass+_pane+_open )\n                                                              // 3393\n\t\t\t.removeClass( rClass+_sliding +\" \"+ rClass+_pane+_sliding )\n                                                        // 3394\n\t\t\t.addClass( rClass+_closed +\" \"+ rClass+_pane+_closed )\n                                                             // 3395\n\t\t;\n                                                                                                                   // 3396\n\t\t// DISABLE 'resizing' when closed - do this BEFORE bindStartSlidingEvents?\n                                          // 3397\n\t\tif (o.resizable && $.layout.plugins.draggable)\n                                                                      // 3398\n\t\t\t$R\n                                                                                                                 // 3399\n\t\t\t\t.draggable(\"disable\")\n                                                                                             // 3400\n\t\t\t\t.removeClass(\"ui-state-disabled\") // do NOT apply disabled styling - not suitable here\n                            // 3401\n\t\t\t\t.css(\"cursor\", \"default\")\n                                                                                         // 3402\n\t\t\t\t.attr(\"title\",\"\")\n                                                                                                 // 3403\n\t\t\t;\n                                                                                                                  // 3404\n\n                                                                                                                      // 3405\n\t\t// if pane has a toggler button, adjust that too\n                                                                    // 3406\n\t\tif ($T) {\n                                                                                                           // 3407\n\t\t\t$T\n                                                                                                                 // 3408\n\t\t\t\t.removeClass( tClass+_open +\" \"+ tClass+_pane+_open )\n                                                             // 3409\n\t\t\t\t.addClass( tClass+_closed +\" \"+ tClass+_pane+_closed )\n                                                            // 3410\n\t\t\t\t.attr(\"title\", o.tips.Open) // may be blank\n                                                                       // 3411\n\t\t\t;\n                                                                                                                  // 3412\n\t\t\t// toggler-content - if exists\n                                                                                     // 3413\n\t\t\t$T.children(\".content-open\").hide();\n                                                                               // 3414\n\t\t\t$T.children(\".content-closed\").css(\"display\",\"block\");\n                                                             // 3415\n\t\t}\n                                                                                                                   // 3416\n\n                                                                                                                      // 3417\n\t\t// sync any 'pin buttons'\n                                                                                           // 3418\n\t\tsyncPinBtns(pane, false);\n                                                                                           // 3419\n\n                                                                                                                      // 3420\n\t\tif (state.initialized) {\n                                                                                            // 3421\n\t\t\t// resize 'length' and position togglers for adjacent panes\n                                                        // 3422\n\t\t\tsizeHandles();\n                                                                                                     // 3423\n\t\t}\n                                                                                                                   // 3424\n\t}\n                                                                                                                    // 3425\n\n                                                                                                                      // 3426\n\t/**\n                                                                                                                  // 3427\n\t* Open the specified pane (animation optional), and resize all other panes as needed\n                                 // 3428\n\t*\n                                                                                                                    // 3429\n\t* @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being opened, ie: north, south, east, or west\n                      // 3430\n\t* @param {boolean=}\t\t\t[slide=false]\n                                                                                  // 3431\n\t* @param {boolean=}\t\t\t[noAnimation=false]\n                                                                            // 3432\n\t* @param {boolean=}\t\t\t[noAlert=false]\n                                                                                // 3433\n\t*/\n                                                                                                                   // 3434\n,\topen = function (evt_or_pane, slide, noAnimation, noAlert) {\n                                                        // 3435\n\t\tif (!isInitialized()) return;\n                                                                                       // 3436\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 3437\n\t\t,\t$P\t= $Ps[pane]\n                                                                                                    // 3438\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 3439\n\t\t,\t$T\t= $Ts[pane]\n                                                                                                    // 3440\n\t\t,\to\t= options[pane]\n                                                                                                 // 3441\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3442\n\t\t,\tc\t= _c[pane]\n                                                                                                      // 3443\n\t\t,\tdoFX, isShowing\n                                                                                                   // 3444\n\t\t;\n                                                                                                                   // 3445\n\t\t// QUEUE in case another action/animation is in progress\n                                                            // 3446\n\t\t$N.queue(function( queueNext ){\n                                                                                     // 3447\n\n                                                                                                                      // 3448\n\t\t\tif ( !$P\n                                                                                                           // 3449\n\t\t\t||\t(!o.resizable && !o.closable && !s.isShowing)\t// invalid request\n                                                // 3450\n\t\t\t||\t(s.isVisible && !s.isSliding)\t\t\t\t\t// already open\n                                                               // 3451\n\t\t\t) return queueNext();\n                                                                                              // 3452\n\n                                                                                                                      // 3453\n\t\t\t// pane can ALSO be unhidden by just calling show(), so handle this scenario\n                                       // 3454\n\t\t\tif (s.isHidden && !s.isShowing) {\n                                                                                  // 3455\n\t\t\t\tqueueNext(); // call before show() because it needs the queue free\n                                                // 3456\n\t\t\t\tshow(pane, true);\n                                                                                                 // 3457\n\t\t\t\treturn;\n                                                                                                           // 3458\n\t\t\t}\n                                                                                                                  // 3459\n\n                                                                                                                      // 3460\n\t\t\tif (s.autoResize && s.size != o.size) // resize pane to original size set in options\n                               // 3461\n\t\t\t\tsizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize\n                            // 3462\n\t\t\telse\n                                                                                                               // 3463\n\t\t\t\t// make sure there is enough space available to open the pane\n                                                     // 3464\n\t\t\t\tsetSizeLimits(pane, slide);\n                                                                                       // 3465\n\n                                                                                                                      // 3466\n\t\t\t// onopen_start callback - will CANCEL open if returns false\n                                                       // 3467\n\t\t\tvar cbReturn = _runCallbacks(\"onopen_start\", pane);\n                                                                // 3468\n\n                                                                                                                      // 3469\n\t\t\tif (cbReturn === \"abort\")\n                                                                                          // 3470\n\t\t\t\treturn queueNext();\n                                                                                               // 3471\n\n                                                                                                                      // 3472\n\t\t\t// update pane-state again in case options were changed in onopen_start\n                                            // 3473\n\t\t\tif (cbReturn !== \"NC\") // NC = \"No Callback\"\n                                                                       // 3474\n\t\t\t\tsetSizeLimits(pane, slide);\n                                                                                       // 3475\n\n                                                                                                                      // 3476\n\t\t\tif (s.minSize > s.maxSize) { // INSUFFICIENT ROOM FOR PANE TO OPEN!\n                                                // 3477\n\t\t\t\tsyncPinBtns(pane, false); // make sure pin-buttons are reset\n                                                      // 3478\n\t\t\t\tif (!noAlert && o.tips.noRoomToOpen)\n                                                                              // 3479\n\t\t\t\t\talert(o.tips.noRoomToOpen);\n                                                                                      // 3480\n\t\t\t\treturn queueNext(); // ABORT\n                                                                                      // 3481\n\t\t\t}\n                                                                                                                  // 3482\n\n                                                                                                                      // 3483\n\t\t\tif (slide) // START Sliding - will set isSliding=true\n                                                              // 3484\n\t\t\t\tbindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane\n                                   // 3485\n\t\t\telse if (s.isSliding) // PIN PANE (stop sliding) - open pane 'normally' instead\n                                    // 3486\n\t\t\t\tbindStopSlidingEvents(pane, false); // UNBIND trigger events - will set isSliding=false\n                           // 3487\n\t\t\telse if (o.slidable)\n                                                                                               // 3488\n\t\t\t\tbindStartSlidingEvents(pane, false); // UNBIND trigger events\n                                                     // 3489\n\n                                                                                                                      // 3490\n\t\t\ts.noRoom = false; // will be reset by makePaneFit if 'noRoom'\n                                                      // 3491\n\t\t\tmakePaneFit(pane);\n                                                                                                 // 3492\n\n                                                                                                                      // 3493\n\t\t\t// transfer logic var to temp var\n                                                                                  // 3494\n\t\t\tisShowing = s.isShowing;\n                                                                                           // 3495\n\t\t\t// now clear the logic var\n                                                                                         // 3496\n\t\t\tdelete s.isShowing;\n                                                                                                // 3497\n\n                                                                                                                      // 3498\n\t\t\tdoFX\t\t= !noAnimation && s.isClosed && (o.fxName_open != \"none\");\n                                                   // 3499\n\t\t\ts.isMoving\t= true;\n                                                                                                 // 3500\n\t\t\ts.isVisible\t= true;\n                                                                                                // 3501\n\t\t\ts.isClosed\t= false;\n                                                                                                // 3502\n\t\t\t// update isHidden BEFORE sizing panes - WHY??? Old?\n                                                               // 3503\n\t\t\tif (isShowing) s.isHidden = false;\n                                                                                 // 3504\n\n                                                                                                                      // 3505\n\t\t\tif (doFX) { // ANIMATE\n                                                                                             // 3506\n\t\t\t\t// mask adjacent panes with objects\n                                                                               // 3507\n\t\t\t\tlockPaneForFX(pane, true);\t// need to set left/top so animation will work\n                                         // 3508\n\t\t\t\t\t$P.show( o.fxName_open, o.fxSettings_open, o.fxSpeed_open, function() {\n                                          // 3509\n\t\t\t\t\tlockPaneForFX(pane, false); // undo\n                                                                              // 3510\n\t\t\t\t\tif (s.isVisible) open_2(); // continue\n                                                                           // 3511\n\t\t\t\t\tqueueNext();\n                                                                                                     // 3512\n\t\t\t\t});\n                                                                                                               // 3513\n\t\t\t}\n                                                                                                                  // 3514\n\t\t\telse { // no animation\n                                                                                             // 3515\n\t\t\t\t_showPane(pane);// just show pane and...\n                                                                          // 3516\n\t\t\t\topen_2();\t\t// continue\n                                                                                            // 3517\n\t\t\t\tqueueNext();\n                                                                                                      // 3518\n\t\t\t};\n                                                                                                                 // 3519\n\t\t});\n                                                                                                                 // 3520\n\n                                                                                                                      // 3521\n\t\t// SUBROUTINE\n                                                                                                       // 3522\n\t\tfunction open_2 () {\n                                                                                                // 3523\n\t\t\ts.isMoving\t= false;\n                                                                                                // 3524\n\n                                                                                                                      // 3525\n\t\t\t// cure iframe display issues\n                                                                                      // 3526\n\t\t\t_fixIframe(pane);\n                                                                                                  // 3527\n\n                                                                                                                      // 3528\n\t\t\t// NOTE: if isSliding, then other panes are NOT 'resized'\n                                                          // 3529\n\t\t\tif (!s.isSliding) { // resize all panes adjacent to this one\n                                                       // 3530\n\t\t\t\tsizeMidPanes(_c[pane].dir==\"vert\" ? \"center\" : \"\", false); // false = NOT skipCallback\n                            // 3531\n\t\t\t}\n                                                                                                                  // 3532\n\n                                                                                                                      // 3533\n\t\t\t// set classes, position handles and execute callbacks...\n                                                          // 3534\n\t\t\tsetAsOpen(pane);\n                                                                                                   // 3535\n\t\t};\n                                                                                                                  // 3536\n\t\n                                                                                                                     // 3537\n\t}\n                                                                                                                    // 3538\n\n                                                                                                                      // 3539\n\t/**\n                                                                                                                  // 3540\n\t* @param {string}\tpane\t\tThe pane just opened, ie: north, south, east, or west\n                                        // 3541\n\t* @param {boolean=}\t[skipCallback=false]\n                                                                             // 3542\n\t*/\n                                                                                                                   // 3543\n,\tsetAsOpen = function (pane, skipCallback) {\n                                                                         // 3544\n\t\tvar \n                                                                                                                // 3545\n\t\t\t$P\t\t= $Ps[pane]\n                                                                                                    // 3546\n\t\t,\t$R\t\t= $Rs[pane]\n                                                                                                   // 3547\n\t\t,\t$T\t\t= $Ts[pane]\n                                                                                                   // 3548\n\t\t,\to\t\t= options[pane]\n                                                                                                // 3549\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 3550\n\t\t,\tside\t= _c[pane].side\n                                                                                              // 3551\n\t\t,\trClass\t= o.resizerClass\n                                                                                           // 3552\n\t\t,\ttClass\t= o.togglerClass\n                                                                                           // 3553\n\t\t,\t_pane\t= \"-\"+ pane // used for classNames\n                                                                          // 3554\n\t\t,\t_open\t= \"-open\"\n                                                                                                   // 3555\n\t\t,\t_closed\t= \"-closed\"\n                                                                                               // 3556\n\t\t,\t_sliding= \"-sliding\"\n                                                                                              // 3557\n\t\t;\n                                                                                                                   // 3558\n\t\t$R\n                                                                                                                  // 3559\n\t\t\t.css(side, sC.inset[side] + getPaneSize(pane)) // move the resizer\n                                                 // 3560\n\t\t\t.removeClass( rClass+_closed +\" \"+ rClass+_pane+_closed )\n                                                          // 3561\n\t\t\t.addClass( rClass+_open +\" \"+ rClass+_pane+_open )\n                                                                 // 3562\n\t\t;\n                                                                                                                   // 3563\n\t\tif (s.isSliding)\n                                                                                                    // 3564\n\t\t\t$R.addClass( rClass+_sliding +\" \"+ rClass+_pane+_sliding )\n                                                         // 3565\n\t\telse // in case 'was sliding'\n                                                                                       // 3566\n\t\t\t$R.removeClass( rClass+_sliding +\" \"+ rClass+_pane+_sliding )\n                                                      // 3567\n\n                                                                                                                      // 3568\n\t\tremoveHover( 0, $R ); // remove hover classes\n                                                                       // 3569\n\t\tif (o.resizable && $.layout.plugins.draggable)\n                                                                      // 3570\n\t\t\t$R\t.draggable(\"enable\")\n                                                                                            // 3571\n\t\t\t\t.css(\"cursor\", o.resizerCursor)\n                                                                                   // 3572\n\t\t\t\t.attr(\"title\", o.tips.Resize);\n                                                                                    // 3573\n\t\telse if (!s.isSliding)\n                                                                                              // 3574\n\t\t\t$R.css(\"cursor\", \"default\"); // n-resize, s-resize, etc\n                                                            // 3575\n\n                                                                                                                      // 3576\n\t\t// if pane also has a toggler button, adjust that too\n                                                               // 3577\n\t\tif ($T) {\n                                                                                                           // 3578\n\t\t\t$T\t.removeClass( tClass+_closed +\" \"+ tClass+_pane+_closed )\n                                                       // 3579\n\t\t\t\t.addClass( tClass+_open +\" \"+ tClass+_pane+_open )\n                                                                // 3580\n\t\t\t\t.attr(\"title\", o.tips.Close); // may be blank\n                                                                     // 3581\n\t\t\tremoveHover( 0, $T ); // remove hover classes\n                                                                      // 3582\n\t\t\t// toggler-content - if exists\n                                                                                     // 3583\n\t\t\t$T.children(\".content-closed\").hide();\n                                                                             // 3584\n\t\t\t$T.children(\".content-open\").css(\"display\",\"block\");\n                                                               // 3585\n\t\t}\n                                                                                                                   // 3586\n\n                                                                                                                      // 3587\n\t\t// sync any 'pin buttons'\n                                                                                           // 3588\n\t\tsyncPinBtns(pane, !s.isSliding);\n                                                                                    // 3589\n\n                                                                                                                      // 3590\n\t\t// update pane-state dimensions - BEFORE resizing content\n                                                           // 3591\n\t\t$.extend(s, elDims($P));\n                                                                                            // 3592\n\n                                                                                                                      // 3593\n\t\tif (state.initialized) {\n                                                                                            // 3594\n\t\t\t// resize resizer & toggler sizes for all panes\n                                                                    // 3595\n\t\t\tsizeHandles();\n                                                                                                     // 3596\n\t\t\t// resize content every time pane opens - to be sure\n                                                               // 3597\n\t\t\tsizeContent(pane, true); // true = remeasure headers/footers, even if 'pane.isMoving'\n                              // 3598\n\t\t}\n                                                                                                                   // 3599\n\n                                                                                                                      // 3600\n\t\tif (!skipCallback && (state.initialized || o.triggerEventsOnLoad) && $P.is(\":visible\")) {\n                           // 3601\n\t\t\t// onopen callback\n                                                                                                 // 3602\n\t\t\t_runCallbacks(\"onopen_end\", pane);\n                                                                                 // 3603\n\t\t\t// onshow callback - TODO: should this be here?\n                                                                    // 3604\n\t\t\tif (s.isShowing) _runCallbacks(\"onshow_end\", pane);\n                                                                // 3605\n\n                                                                                                                      // 3606\n\t\t\t// ALSO call onresize because layout-size *may* have changed while pane was closed\n                                 // 3607\n\t\t\tif (state.initialized)\n                                                                                             // 3608\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\n                                                                              // 3609\n\t\t}\n                                                                                                                   // 3610\n\n                                                                                                                      // 3611\n\t\t// TODO: Somehow sizePane(\"north\") is being called after this point???\n                                              // 3612\n\t}\n                                                                                                                    // 3613\n\n                                                                                                                      // 3614\n\n                                                                                                                      // 3615\n\t/**\n                                                                                                                  // 3616\n\t* slideOpen / slideClose / slideToggle\n                                                                               // 3617\n\t*\n                                                                                                                    // 3618\n\t* Pass-though methods for sliding\n                                                                                    // 3619\n\t*/\n                                                                                                                   // 3620\n,\tslideOpen = function (evt_or_pane) {\n                                                                                // 3621\n\t\tif (!isInitialized()) return;\n                                                                                       // 3622\n\t\tvar\tevt\t\t= evtObj(evt_or_pane)\n                                                                                      // 3623\n\t\t,\tpane\t= evtPane.call(this, evt_or_pane)\n                                                                            // 3624\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 3625\n\t\t,\tdelay\t= options[pane].slideDelay_open\n                                                                             // 3626\n\t\t;\n                                                                                                                   // 3627\n\t\t// prevent event from triggering on NEW resizer binding created below\n                                               // 3628\n\t\tif (evt) evt.stopImmediatePropagation();\n                                                                            // 3629\n\n                                                                                                                      // 3630\n\t\tif (s.isClosed && evt && evt.type === \"mouseenter\" && delay > 0)\n                                                    // 3631\n\t\t\t// trigger = mouseenter - use a delay\n                                                                              // 3632\n\t\t\ttimer.set(pane+\"_openSlider\", open_NOW, delay);\n                                                                    // 3633\n\t\telse\n                                                                                                                // 3634\n\t\t\topen_NOW(); // will unbind events if is already open\n                                                               // 3635\n\n                                                                                                                      // 3636\n\t\t/**\n                                                                                                                 // 3637\n\t\t* SUBROUTINE for timed open\n                                                                                         // 3638\n\t\t*/\n                                                                                                                  // 3639\n\t\tfunction open_NOW () {\n                                                                                              // 3640\n\t\t\tif (!s.isClosed) // skip if no longer closed!\n                                                                      // 3641\n\t\t\t\tbindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane\n                                   // 3642\n\t\t\telse if (!s.isMoving)\n                                                                                              // 3643\n\t\t\t\topen(pane, true); // true = slide - open() will handle binding\n                                                    // 3644\n\t\t};\n                                                                                                                  // 3645\n\t}\n                                                                                                                    // 3646\n\n                                                                                                                      // 3647\n,\tslideClose = function (evt_or_pane) {\n                                                                               // 3648\n\t\tif (!isInitialized()) return;\n                                                                                       // 3649\n\t\tvar\tevt\t\t= evtObj(evt_or_pane)\n                                                                                      // 3650\n\t\t,\tpane\t= evtPane.call(this, evt_or_pane)\n                                                                            // 3651\n\t\t,\to\t\t= options[pane]\n                                                                                                // 3652\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 3653\n\t\t,\tdelay\t= s.isMoving ? 1000 : 300 // MINIMUM delay - option may override\n                                            // 3654\n\t\t;\n                                                                                                                   // 3655\n\t\tif (s.isClosed || s.isResizing)\n                                                                                     // 3656\n\t\t\treturn; // skip if already closed OR in process of resizing\n                                                        // 3657\n\t\telse if (o.slideTrigger_close === \"click\")\n                                                                          // 3658\n\t\t\tclose_NOW(); // close immediately onClick\n                                                                          // 3659\n\t\telse if (o.preventQuickSlideClose && s.isMoving)\n                                                                    // 3660\n\t\t\treturn; // handle Chrome quick-close on slide-open\n                                                                 // 3661\n\t\telse if (o.preventPrematureSlideClose && evt && $.layout.isMouseOverElem(evt, $Ps[pane]))\n                           // 3662\n\t\t\treturn; // handle incorrect mouseleave trigger, like when over a SELECT-list in IE\n                                 // 3663\n\t\telse if (evt) // trigger = mouseleave - use a delay\n                                                                 // 3664\n\t\t\t// 1 sec delay if 'opening', else .3 sec\n                                                                           // 3665\n\t\t\ttimer.set(pane+\"_closeSlider\", close_NOW, max(o.slideDelay_close, delay));\n                                         // 3666\n\t\telse // called programically\n                                                                                        // 3667\n\t\t\tclose_NOW();\n                                                                                                       // 3668\n\n                                                                                                                      // 3669\n\t\t/**\n                                                                                                                 // 3670\n\t\t* SUBROUTINE for timed close\n                                                                                        // 3671\n\t\t*/\n                                                                                                                  // 3672\n\t\tfunction close_NOW () {\n                                                                                             // 3673\n\t\t\tif (s.isClosed) // skip 'close' if already closed!\n                                                                 // 3674\n\t\t\t\tbindStopSlidingEvents(pane, false); // UNBIND trigger events - TODO: is this needed here?\n                         // 3675\n\t\t\telse if (!s.isMoving)\n                                                                                              // 3676\n\t\t\t\tclose(pane); // close will handle unbinding\n                                                                       // 3677\n\t\t};\n                                                                                                                  // 3678\n\t}\n                                                                                                                    // 3679\n\n                                                                                                                      // 3680\n\t/**\n                                                                                                                  // 3681\n\t* @param {(string|Object)}\tevt_or_pane\t\tThe pane being opened, ie: north, south, east, or west\n                       // 3682\n\t*/\n                                                                                                                   // 3683\n,\tslideToggle = function (evt_or_pane) {\n                                                                              // 3684\n\t\tvar pane = evtPane.call(this, evt_or_pane);\n                                                                         // 3685\n\t\ttoggle(pane, true);\n                                                                                                 // 3686\n\t}\n                                                                                                                    // 3687\n\n                                                                                                                      // 3688\n\n                                                                                                                      // 3689\n\t/**\n                                                                                                                  // 3690\n\t* Must set left/top on East/South panes so animation will work properly\n                                              // 3691\n\t*\n                                                                                                                    // 3692\n\t* @param {string}\tpane\tThe pane to lock, 'east' or 'south' - any other is ignored!\n                                   // 3693\n\t* @param {boolean}\tdoLock  true = set left/top, false = remove\n                                                       // 3694\n\t*/\n                                                                                                                   // 3695\n,\tlockPaneForFX = function (pane, doLock) {\n                                                                           // 3696\n\t\tvar $P\t= $Ps[pane]\n                                                                                                  // 3697\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3698\n\t\t,\to\t= options[pane]\n                                                                                                 // 3699\n\t\t,\tz\t= options.zIndexes\n                                                                                              // 3700\n\t\t;\n                                                                                                                   // 3701\n\t\tif (doLock) {\n                                                                                                       // 3702\n\t\t\tshowMasks( pane, { animation: true, objectsOnly: true });\n                                                          // 3703\n\t\t\t$P.css({ zIndex: z.pane_animate }); // overlay all elements during animation\n                                       // 3704\n\t\t\tif (pane==\"south\")\n                                                                                                 // 3705\n\t\t\t\t$P.css({ top: sC.inset.top + sC.innerHeight - $P.outerHeight() });\n                                                // 3706\n\t\t\telse if (pane==\"east\")\n                                                                                             // 3707\n\t\t\t\t$P.css({ left: sC.inset.left + sC.innerWidth - $P.outerWidth() });\n                                                // 3708\n\t\t}\n                                                                                                                   // 3709\n\t\telse { // animation DONE - RESET CSS\n                                                                                // 3710\n\t\t\thideMasks();\n                                                                                                       // 3711\n\t\t\t$P.css({ zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal) });\n                                                // 3712\n\t\t\tif (pane==\"south\")\n                                                                                                 // 3713\n\t\t\t\t$P.css({ top: \"auto\" });\n                                                                                          // 3714\n\t\t\t// if pane is positioned 'off-screen', then DO NOT screw with it!\n                                                  // 3715\n\t\t\telse if (pane==\"east\" && !$P.css(\"left\").match(/\\-99999/))\n                                                         // 3716\n\t\t\t\t$P.css({ left: \"auto\" });\n                                                                                         // 3717\n\t\t\t// fix anti-aliasing in IE - only needed for animations that change opacity\n                                        // 3718\n\t\t\tif (browser.msie && o.fxOpacityFix && o.fxName_open != \"slide\" && $P.css(\"filter\") && $P.css(\"opacity\") == 1)\n      // 3719\n\t\t\t\t$P[0].style.removeAttribute('filter');\n                                                                            // 3720\n\t\t}\n                                                                                                                   // 3721\n\t}\n                                                                                                                    // 3722\n\n                                                                                                                      // 3723\n\n                                                                                                                      // 3724\n\t/**\n                                                                                                                  // 3725\n\t* Toggle sliding functionality of a specific pane on/off by adding removing 'slide open' trigger\n                     // 3726\n\t*\n                                                                                                                    // 3727\n\t* @see  open(), close()\n                                                                                              // 3728\n\t* @param {string}\tpane\tThe pane to enable/disable, 'north', 'south', etc.\n                                            // 3729\n\t* @param {boolean}\tenable\tEnable or Disable sliding?\n                                                                 // 3730\n\t*/\n                                                                                                                   // 3731\n,\tbindStartSlidingEvents = function (pane, enable) {\n                                                                  // 3732\n\t\tvar o\t\t= options[pane]\n                                                                                              // 3733\n\t\t,\t$P\t\t= $Ps[pane]\n                                                                                                   // 3734\n\t\t,\t$R\t\t= $Rs[pane]\n                                                                                                   // 3735\n\t\t,\tevtName\t= o.slideTrigger_open.toLowerCase()\n                                                                       // 3736\n\t\t;\n                                                                                                                   // 3737\n\t\tif (!$R || (enable && !o.slidable)) return;\n                                                                         // 3738\n\n                                                                                                                      // 3739\n\t\t// make sure we have a valid event\n                                                                                  // 3740\n\t\tif (evtName.match(/mouseover/))\n                                                                                     // 3741\n\t\t\tevtName = o.slideTrigger_open = \"mouseenter\";\n                                                                      // 3742\n\t\telse if (!evtName.match(/(click|dblclick|mouseenter)/)) \n                                                            // 3743\n\t\t\tevtName = o.slideTrigger_open = \"click\";\n                                                                           // 3744\n\n                                                                                                                      // 3745\n\t\t// must remove double-click-toggle when using dblclick-slide\n                                                        // 3746\n\t\tif (o.resizerDblClickToggle && evtName.match(/click/)) {\n                                                            // 3747\n\t\t\t$R[enable ? \"unbind\" : \"bind\"]('dblclick.'+ sID, toggle)\n                                                           // 3748\n\t\t}\n                                                                                                                   // 3749\n\n                                                                                                                      // 3750\n\t\t$R\n                                                                                                                  // 3751\n\t\t\t// add or remove event\n                                                                                             // 3752\n\t\t\t[enable ? \"bind\" : \"unbind\"](evtName +'.'+ sID, slideOpen)\n                                                         // 3753\n\t\t\t// set the appropriate cursor & title/tip\n                                                                          // 3754\n\t\t\t.css(\"cursor\", enable ? o.sliderCursor : \"default\")\n                                                                // 3755\n\t\t\t.attr(\"title\", enable ? o.tips.Slide : \"\")\n                                                                         // 3756\n\t\t;\n                                                                                                                   // 3757\n\t}\n                                                                                                                    // 3758\n\n                                                                                                                      // 3759\n\t/**\n                                                                                                                  // 3760\n\t* Add or remove 'mouseleave' events to 'slide close' when pane is 'sliding' open or closed\n                           // 3761\n\t* Also increases zIndex when pane is sliding open\n                                                                    // 3762\n\t* See bindStartSlidingEvents for code to control 'slide open'\n                                                        // 3763\n\t*\n                                                                                                                    // 3764\n\t* @see  slideOpen(), slideClose()\n                                                                                    // 3765\n\t* @param {string}\tpane\tThe pane to process, 'north', 'south', etc.\n                                                   // 3766\n\t* @param {boolean}\tenable\tEnable or Disable events?\n                                                                  // 3767\n\t*/\n                                                                                                                   // 3768\n,\tbindStopSlidingEvents = function (pane, enable) {\n                                                                   // 3769\n\t\tvar\to\t\t= options[pane]\n                                                                                              // 3770\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 3771\n\t\t,\tc\t\t= _c[pane]\n                                                                                                     // 3772\n\t\t,\tz\t\t= options.zIndexes\n                                                                                             // 3773\n\t\t,\tevtName\t= o.slideTrigger_close.toLowerCase()\n                                                                      // 3774\n\t\t,\taction\t= (enable ? \"bind\" : \"unbind\")\n                                                                             // 3775\n\t\t,\t$P\t\t= $Ps[pane]\n                                                                                                   // 3776\n\t\t,\t$R\t\t= $Rs[pane]\n                                                                                                   // 3777\n\t\t;\n                                                                                                                   // 3778\n\t\ttimer.clear(pane+\"_closeSlider\"); // just in case\n                                                                   // 3779\n\n                                                                                                                      // 3780\n\t\tif (enable) {\n                                                                                                       // 3781\n\t\t\ts.isSliding = true;\n                                                                                                // 3782\n\t\t\tstate.panesSliding[pane] = true;\n                                                                                   // 3783\n\t\t\t// remove 'slideOpen' event from resizer\n                                                                           // 3784\n\t\t\t// ALSO will raise the zIndex of the pane & resizer\n                                                                // 3785\n\t\t\tbindStartSlidingEvents(pane, false);\n                                                                               // 3786\n\t\t}\n                                                                                                                   // 3787\n\t\telse {\n                                                                                                              // 3788\n\t\t\ts.isSliding = false;\n                                                                                               // 3789\n\t\t\tdelete state.panesSliding[pane];\n                                                                                   // 3790\n\t\t}\n                                                                                                                   // 3791\n\n                                                                                                                      // 3792\n\t\t// RE/SET zIndex - increases when pane is sliding-open, resets to normal when not\n                                   // 3793\n\t\t$P.css(\"zIndex\", enable ? z.pane_sliding : z.pane_normal);\n                                                          // 3794\n\t\t$R.css(\"zIndex\", enable ? z.pane_sliding+2 : z.resizer_normal); // NOTE: mask = pane_sliding+1\n                      // 3795\n\n                                                                                                                      // 3796\n\t\t// make sure we have a valid event\n                                                                                  // 3797\n\t\tif (!evtName.match(/(click|mouseleave)/))\n                                                                           // 3798\n\t\t\tevtName = o.slideTrigger_close = \"mouseleave\"; // also catches 'mouseout'\n                                          // 3799\n\n                                                                                                                      // 3800\n\t\t// add/remove slide triggers\n                                                                                        // 3801\n\t\t$R[action](evtName, slideClose); // base event on resize\n                                                            // 3802\n\t\t// need extra events for mouseleave\n                                                                                 // 3803\n\t\tif (evtName === \"mouseleave\") {\n                                                                                     // 3804\n\t\t\t// also close on pane.mouseleave\n                                                                                   // 3805\n\t\t\t$P[action](\"mouseleave.\"+ sID, slideClose);\n                                                                        // 3806\n\t\t\t// cancel timer when mouse moves between 'pane' and 'resizer'\n                                                      // 3807\n\t\t\t$R[action](\"mouseenter.\"+ sID, cancelMouseOut);\n                                                                    // 3808\n\t\t\t$P[action](\"mouseenter.\"+ sID, cancelMouseOut);\n                                                                    // 3809\n\t\t}\n                                                                                                                   // 3810\n\n                                                                                                                      // 3811\n\t\tif (!enable)\n                                                                                                        // 3812\n\t\t\ttimer.clear(pane+\"_closeSlider\");\n                                                                                  // 3813\n\t\telse if (evtName === \"click\" && !o.resizable) {\n                                                                     // 3814\n\t\t\t// IF pane is not resizable (which already has a cursor and tip) \n                                                  // 3815\n\t\t\t// then set the a cursor & title/tip on resizer when sliding\n                                                       // 3816\n\t\t\t$R.css(\"cursor\", enable ? o.sliderCursor : \"default\");\n                                                             // 3817\n\t\t\t$R.attr(\"title\", enable ? o.tips.Close : \"\"); // use Toggler-tip, eg: \"Close Pane\"\n                                 // 3818\n\t\t}\n                                                                                                                   // 3819\n\n                                                                                                                      // 3820\n\t\t// SUBROUTINE for mouseleave timer clearing\n                                                                         // 3821\n\t\tfunction cancelMouseOut (evt) {\n                                                                                     // 3822\n\t\t\ttimer.clear(pane+\"_closeSlider\");\n                                                                                  // 3823\n\t\t\tevt.stopPropagation();\n                                                                                             // 3824\n\t\t}\n                                                                                                                   // 3825\n\t}\n                                                                                                                    // 3826\n\n                                                                                                                      // 3827\n\n                                                                                                                      // 3828\n\t/**\n                                                                                                                  // 3829\n\t* Hides/closes a pane if there is insufficient room - reverses this when there is room again\n                         // 3830\n\t* MUST have already called setSizeLimits() before calling this method\n                                                // 3831\n\t*\n                                                                                                                    // 3832\n\t* @param {string}\tpane\t\t\t\t\tThe pane being resized\n                                                                    // 3833\n\t* @param {boolean=}\t[isOpening=false]\t\tCalled from onOpen?\n                                                           // 3834\n\t* @param {boolean=}\t[skipCallback=false]\tShould the onresize callback be run?\n                                        // 3835\n\t* @param {boolean=}\t[force=false]\n                                                                                    // 3836\n\t*/\n                                                                                                                   // 3837\n,\tmakePaneFit = function (pane, isOpening, skipCallback, force) {\n                                                     // 3838\n\t\tvar\to\t= options[pane]\n                                                                                               // 3839\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3840\n\t\t,\tc\t= _c[pane]\n                                                                                                      // 3841\n\t\t,\t$P\t= $Ps[pane]\n                                                                                                    // 3842\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 3843\n\t\t,\tisSidePane \t= c.dir===\"vert\"\n                                                                                      // 3844\n\t\t,\thasRoom\t\t= false\n                                                                                                  // 3845\n\t\t;\n                                                                                                                   // 3846\n\t\t// special handling for center & east/west panes\n                                                                    // 3847\n\t\tif (pane === \"center\" || (isSidePane && s.noVerticalRoom)) {\n                                                        // 3848\n\t\t\t// see if there is enough room to display the pane\n                                                                 // 3849\n\t\t\t// ERROR: hasRoom = s.minHeight <= s.maxHeight && (isSidePane || s.minWidth <= s.maxWidth);\n                        // 3850\n\t\t\thasRoom = (s.maxHeight >= 0);\n                                                                                      // 3851\n\t\t\tif (hasRoom && s.noRoom) { // previously hidden due to noRoom, so show now\n                                         // 3852\n\t\t\t\t_showPane(pane);\n                                                                                                  // 3853\n\t\t\t\tif ($R) $R.show();\n                                                                                                // 3854\n\t\t\t\ts.isVisible = true;\n                                                                                               // 3855\n\t\t\t\ts.noRoom = false;\n                                                                                                 // 3856\n\t\t\t\tif (isSidePane) s.noVerticalRoom = false;\n                                                                         // 3857\n\t\t\t\t_fixIframe(pane);\n                                                                                                 // 3858\n\t\t\t}\n                                                                                                                  // 3859\n\t\t\telse if (!hasRoom && !s.noRoom) { // not currently hidden, so hide now\n                                             // 3860\n\t\t\t\t_hidePane(pane);\n                                                                                                  // 3861\n\t\t\t\tif ($R) $R.hide();\n                                                                                                // 3862\n\t\t\t\ts.isVisible = false;\n                                                                                              // 3863\n\t\t\t\ts.noRoom = true;\n                                                                                                  // 3864\n\t\t\t}\n                                                                                                                  // 3865\n\t\t}\n                                                                                                                   // 3866\n\n                                                                                                                      // 3867\n\t\t// see if there is enough room to fit the border-pane\n                                                               // 3868\n\t\tif (pane === \"center\") {\n                                                                                            // 3869\n\t\t\t// ignore center in this block\n                                                                                     // 3870\n\t\t}\n                                                                                                                   // 3871\n\t\telse if (s.minSize <= s.maxSize) { // pane CAN fit\n                                                                  // 3872\n\t\t\thasRoom = true;\n                                                                                                    // 3873\n\t\t\tif (s.size > s.maxSize) // pane is too big - shrink it\n                                                             // 3874\n\t\t\t\tsizePane(pane, s.maxSize, skipCallback, true, force); // true = noAnimation\n                                       // 3875\n\t\t\telse if (s.size < s.minSize) // pane is too small - enlarge it\n                                                     // 3876\n\t\t\t\tsizePane(pane, s.minSize, skipCallback, true, force); // true = noAnimation\n                                       // 3877\n\t\t\t// need s.isVisible because new pseudoClose method keeps pane visible, but off-screen\n                              // 3878\n\t\t\telse if ($R && s.isVisible && $P.is(\":visible\")) {\n                                                                 // 3879\n\t\t\t\t// make sure resizer-bar is positioned correctly\n                                                                  // 3880\n\t\t\t\t// handles situation where nested layout was 'hidden' when initialized\n                                            // 3881\n\t\t\t\tvar\tpos = s.size + sC.inset[c.side];\n                                                                              // 3882\n\t\t\t\tif ($.layout.cssNum( $R, c.side ) != pos) $R.css( c.side, pos );\n                                                  // 3883\n\t\t\t}\n                                                                                                                  // 3884\n\n                                                                                                                      // 3885\n\t\t\t// if was previously hidden due to noRoom, then RESET because NOW there is room\n                                    // 3886\n\t\t\tif (s.noRoom) {\n                                                                                                    // 3887\n\t\t\t\t// s.noRoom state will be set by open or show\n                                                                     // 3888\n\t\t\t\tif (s.wasOpen && o.closable) {\n                                                                                    // 3889\n\t\t\t\t\tif (o.autoReopen)\n                                                                                                // 3890\n\t\t\t\t\t\topen(pane, false, true, true); // true = noAnimation, true = noAlert\n                                            // 3891\n\t\t\t\t\telse // leave the pane closed, so just update state\n                                                              // 3892\n\t\t\t\t\t\ts.noRoom = false;\n                                                                                               // 3893\n\t\t\t\t}\n                                                                                                                 // 3894\n\t\t\t\telse\n                                                                                                              // 3895\n\t\t\t\t\tshow(pane, s.wasOpen, true, true); // true = noAnimation, true = noAlert\n                                         // 3896\n\t\t\t}\n                                                                                                                  // 3897\n\t\t}\n                                                                                                                   // 3898\n\t\telse { // !hasRoom - pane CANNOT fit\n                                                                                // 3899\n\t\t\tif (!s.noRoom) { // pane not set as noRoom yet, so hide or close it now...\n                                         // 3900\n\t\t\t\ts.noRoom = true; // update state\n                                                                                  // 3901\n\t\t\t\ts.wasOpen = !s.isClosed && !s.isSliding;\n                                                                          // 3902\n\t\t\t\tif (s.isClosed){} // SKIP\n                                                                                         // 3903\n\t\t\t\telse if (o.closable) // 'close' if possible\n                                                                       // 3904\n\t\t\t\t\tclose(pane, true, true); // true = force, true = noAnimation\n                                                     // 3905\n\t\t\t\telse // 'hide' pane if cannot just be closed\n                                                                      // 3906\n\t\t\t\t\thide(pane, true); // true = noAnimation\n                                                                          // 3907\n\t\t\t}\n                                                                                                                  // 3908\n\t\t}\n                                                                                                                   // 3909\n\t}\n                                                                                                                    // 3910\n\n                                                                                                                      // 3911\n\n                                                                                                                      // 3912\n\t/**\n                                                                                                                  // 3913\n\t* manualSizePane is an exposed flow-through method allowing extra code when pane is 'manually resized'\n               // 3914\n\t*\n                                                                                                                    // 3915\n\t* @param {(string|Object)}\tevt_or_pane\t\t\t\tThe pane being resized\n                                                     // 3916\n\t* @param {number}\t\t\tsize\t\t\t\t\tThe *desired* new size for this pane - will be validated\n                                // 3917\n\t* @param {boolean=}\t\t\t[skipCallback=false]\tShould the onresize callback be run?\n                                      // 3918\n\t* @param {boolean=}\t\t\t[noAnimation=false]\n                                                                            // 3919\n\t* @param {boolean=}\t\t\t[force=false]\t\t\tForce resizing even if does not seem necessary\n                                 // 3920\n\t*/\n                                                                                                                   // 3921\n,\tmanualSizePane = function (evt_or_pane, size, skipCallback, noAnimation, force) {\n                                   // 3922\n\t\tif (!isInitialized()) return;\n                                                                                       // 3923\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 3924\n\t\t,\to\t= options[pane]\n                                                                                                 // 3925\n\t\t,\ts\t= state[pane]\n                                                                                                   // 3926\n\t\t//\tif resizing callbacks have been delayed and resizing is now DONE, force resizing to complete...\n                  // 3927\n\t\t,\tforceResize = force || (o.livePaneResizing && !s.isResizing)\n                                                      // 3928\n\t\t;\n                                                                                                                   // 3929\n\t\t// ANY call to manualSizePane disables autoResize - ie, percentage sizing\n                                           // 3930\n\t\ts.autoResize = false;\n                                                                                               // 3931\n\t\t// flow-through...\n                                                                                                  // 3932\n\t\tsizePane(pane, size, skipCallback, noAnimation, forceResize); // will animate resize if option enabled\n              // 3933\n\t}\n                                                                                                                    // 3934\n\n                                                                                                                      // 3935\n\t/**\n                                                                                                                  // 3936\n\t* sizePane is called only by internal methods whenever a pane needs to be resized\n                                    // 3937\n\t*\n                                                                                                                    // 3938\n\t* @param {(string|Object)}\tevt_or_pane\t\t\t\tThe pane being resized\n                                                     // 3939\n\t* @param {number}\t\t\tsize\t\t\t\t\tThe *desired* new size for this pane - will be validated\n                                // 3940\n\t* @param {boolean=}\t\t\t[skipCallback=false]\tShould the onresize callback be run?\n                                      // 3941\n\t* @param {boolean=}\t\t\t[noAnimation=false]\n                                                                            // 3942\n\t* @param {boolean=}\t\t\t[force=false]\t\t\tForce resizing even if does not seem necessary\n                                 // 3943\n\t*/\n                                                                                                                   // 3944\n,\tsizePane = function (evt_or_pane, size, skipCallback, noAnimation, force) {\n                                         // 3945\n\t\tif (!isInitialized()) return;\n                                                                                       // 3946\n\t\tvar\tpane\t= evtPane.call(this, evt_or_pane) // probably NEVER called from event?\n                                     // 3947\n\t\t,\to\t\t= options[pane]\n                                                                                                // 3948\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 3949\n\t\t,\t$P\t\t= $Ps[pane]\n                                                                                                   // 3950\n\t\t,\t$R\t\t= $Rs[pane]\n                                                                                                   // 3951\n\t\t,\tside\t= _c[pane].side\n                                                                                              // 3952\n\t\t,\tdimName\t= _c[pane].sizeType.toLowerCase()\n                                                                         // 3953\n\t\t,\tskipResizeWhileDragging = s.isResizing && !o.triggerEventsDuringLiveResize\n                                        // 3954\n\t\t,\tdoFX\t= noAnimation !== true && o.animatePaneSizing\n                                                                // 3955\n\t\t,\toldSize, newSize\n                                                                                                  // 3956\n\t\t;\n                                                                                                                   // 3957\n\t\t// QUEUE in case another action/animation is in progress\n                                                            // 3958\n\t\t$N.queue(function( queueNext ){\n                                                                                     // 3959\n\t\t\t// calculate 'current' min/max sizes\n                                                                               // 3960\n\t\t\tsetSizeLimits(pane); // update pane-state\n                                                                          // 3961\n\t\t\toldSize = s.size;\n                                                                                                  // 3962\n\t\t\tsize = _parseSize(pane, size); // handle percentages & auto\n                                                        // 3963\n\t\t\tsize = max(size, _parseSize(pane, o.minSize));\n                                                                     // 3964\n\t\t\tsize = min(size, s.maxSize);\n                                                                                       // 3965\n\t\t\tif (size < s.minSize) { // not enough room for pane!\n                                                               // 3966\n\t\t\t\tqueueNext(); // call before makePaneFit() because it needs the queue free\n                                         // 3967\n\t\t\t\tmakePaneFit(pane, false, skipCallback);\t// will hide or close pane\n                                                // 3968\n\t\t\t\treturn;\n                                                                                                           // 3969\n\t\t\t}\n                                                                                                                  // 3970\n\n                                                                                                                      // 3971\n\t\t\t// IF newSize is same as oldSize, then nothing to do - abort\n                                                       // 3972\n\t\t\tif (!force && size === oldSize)\n                                                                                    // 3973\n\t\t\t\treturn queueNext();\n                                                                                               // 3974\n\n                                                                                                                      // 3975\n\t\t\ts.newSize = size;\n                                                                                                  // 3976\n\n                                                                                                                      // 3977\n\t\t\t// onresize_start callback CANNOT cancel resizing because this would break the layout!\n                             // 3978\n\t\t\tif (!skipCallback && state.initialized && s.isVisible)\n                                                             // 3979\n\t\t\t\t_runCallbacks(\"onresize_start\", pane);\n                                                                            // 3980\n\n                                                                                                                      // 3981\n\t\t\t// resize the pane, and make sure its visible\n                                                                      // 3982\n\t\t\tnewSize = cssSize(pane, size);\n                                                                                     // 3983\n\n                                                                                                                      // 3984\n\t\t\tif (doFX && $P.is(\":visible\")) { // ANIMATE\n                                                                        // 3985\n\t\t\t\tvar fx\t\t= $.layout.effects.size[pane] || $.layout.effects.size.all\n                                                // 3986\n\t\t\t\t,\teasing\t= o.fxSettings_size.easing || fx.easing\n                                                                  // 3987\n\t\t\t\t,\tz\t\t= options.zIndexes\n                                                                                           // 3988\n\t\t\t\t,\tprops\t= {};\n                                                                                                     // 3989\n\t\t\t\tprops[ dimName ] = newSize +'px';\n                                                                                 // 3990\n\t\t\t\ts.isMoving = true;\n                                                                                                // 3991\n\t\t\t\t// overlay all elements during animation\n                                                                          // 3992\n\t\t\t\t$P.css({ zIndex: z.pane_animate })\n                                                                                // 3993\n\t\t\t\t  .show().animate( props, o.fxSpeed_size, easing, function(){\n                                                     // 3994\n\t\t\t\t\t// reset zIndex after animation\n                                                                                  // 3995\n\t\t\t\t\t$P.css({ zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal) });\n                                              // 3996\n\t\t\t\t\ts.isMoving = false;\n                                                                                              // 3997\n\t\t\t\t\tdelete s.newSize;\n                                                                                                // 3998\n\t\t\t\t\tsizePane_2(); // continue\n                                                                                        // 3999\n\t\t\t\t\tqueueNext();\n                                                                                                     // 4000\n\t\t\t\t});\n                                                                                                               // 4001\n\t\t\t}\n                                                                                                                  // 4002\n\t\t\telse { // no animation\n                                                                                             // 4003\n\t\t\t\t$P.css( dimName, newSize );\t// resize pane\n                                                                        // 4004\n\t\t\t\tdelete s.newSize;\n                                                                                                 // 4005\n\t\t\t\t// if pane is visible, then \n                                                                                      // 4006\n\t\t\t\tif ($P.is(\":visible\"))\n                                                                                            // 4007\n\t\t\t\t\tsizePane_2(); // continue\n                                                                                        // 4008\n\t\t\t\telse {\n                                                                                                            // 4009\n\t\t\t\t\t// pane is NOT VISIBLE, so just update state data...\n                                                             // 4010\n\t\t\t\t\t// when pane is *next opened*, it will have the new size\n                                                         // 4011\n\t\t\t\t\ts.size = size;\t\t\t\t// update state.size\n                                                                           // 4012\n\t\t\t\t\t$.extend(s, elDims($P));\t// update state dimensions\n                                                              // 4013\n\t\t\t\t}\n                                                                                                                 // 4014\n\t\t\t\tqueueNext();\n                                                                                                      // 4015\n\t\t\t};\n                                                                                                                 // 4016\n\n                                                                                                                      // 4017\n\t\t});\n                                                                                                                 // 4018\n\n                                                                                                                      // 4019\n\t\t// SUBROUTINE\n                                                                                                       // 4020\n\t\tfunction sizePane_2 () {\n                                                                                            // 4021\n\t\t\t/*\tPanes are sometimes not sized precisely in some browsers!?\n                                                      // 4022\n\t\t\t *\tThis code will resize the pane up to 3 times to nudge the pane to the correct size\n                              // 4023\n\t\t\t */\n                                                                                                                // 4024\n\t\t\tvar\tactual\t= dimName==='width' ? $P.outerWidth() : $P.outerHeight()\n                                                // 4025\n\t\t\t,\ttries\t= [{\n                                                                                                       // 4026\n\t\t\t\t\t\t   \tpane:\t\tpane\n                                                                                                 // 4027\n\t\t\t\t\t\t,\tcount:\t\t1\n                                                                                                     // 4028\n\t\t\t\t\t\t,\ttarget:\t\tsize\n                                                                                                 // 4029\n\t\t\t\t\t\t,\tactual:\t\tactual\n                                                                                               // 4030\n\t\t\t\t\t\t,\tcorrect:\t(size === actual)\n                                                                                    // 4031\n\t\t\t\t\t\t,\tattempt:\tsize\n                                                                                                 // 4032\n\t\t\t\t\t\t,\tcssSize:\tnewSize\n                                                                                              // 4033\n\t\t\t\t\t\t}]\n                                                                                                              // 4034\n\t\t\t,\tlastTry = tries[0]\n                                                                                               // 4035\n\t\t\t,\tthisTry\t= {}\n                                                                                                     // 4036\n\t\t\t,\tmsg\t\t= 'Inaccurate size after resizing the '+ pane +'-pane.'\n                                                     // 4037\n\t\t\t;\n                                                                                                                  // 4038\n\t\t\twhile ( !lastTry.correct ) {\n                                                                                       // 4039\n\t\t\t\tthisTry = { pane: pane, count: lastTry.count+1, target: size };\n                                                   // 4040\n\n                                                                                                                      // 4041\n\t\t\t\tif (lastTry.actual > size)\n                                                                                        // 4042\n\t\t\t\t\tthisTry.attempt = max(0, lastTry.attempt - (lastTry.actual - size));\n                                             // 4043\n\t\t\t\telse // lastTry.actual < size\n                                                                                     // 4044\n\t\t\t\t\tthisTry.attempt = max(0, lastTry.attempt + (size - lastTry.actual));\n                                             // 4045\n\n                                                                                                                      // 4046\n\t\t\t\tthisTry.cssSize = cssSize(pane, thisTry.attempt);\n                                                                 // 4047\n\t\t\t\t$P.css( dimName, thisTry.cssSize );\n                                                                               // 4048\n\n                                                                                                                      // 4049\n\t\t\t\tthisTry.actual\t= dimName=='width' ? $P.outerWidth() : $P.outerHeight();\n                                           // 4050\n\t\t\t\tthisTry.correct\t= (size === thisTry.actual);\n                                                                      // 4051\n\n                                                                                                                      // 4052\n\t\t\t\t// log attempts and alert the user of this *non-fatal error* (if showDebugMessages)\n                               // 4053\n\t\t\t\tif ( tries.length === 1) {\n                                                                                        // 4054\n\t\t\t\t\t_log(msg, false, true);\n                                                                                          // 4055\n\t\t\t\t\t_log(lastTry, false, true);\n                                                                                      // 4056\n\t\t\t\t}\n                                                                                                                 // 4057\n\t\t\t\t_log(thisTry, false, true);\n                                                                                       // 4058\n\t\t\t\t// after 4 tries, is as close as its gonna get!\n                                                                   // 4059\n\t\t\t\tif (tries.length > 3) break;\n                                                                                      // 4060\n\n                                                                                                                      // 4061\n\t\t\t\ttries.push( thisTry );\n                                                                                            // 4062\n\t\t\t\tlastTry = tries[ tries.length - 1 ];\n                                                                              // 4063\n\t\t\t}\n                                                                                                                  // 4064\n\t\t\t// END TESTING CODE\n                                                                                                // 4065\n\n                                                                                                                      // 4066\n\t\t\t// update pane-state dimensions\n                                                                                    // 4067\n\t\t\ts.size\t= size;\n                                                                                                     // 4068\n\t\t\t$.extend(s, elDims($P));\n                                                                                           // 4069\n\n                                                                                                                      // 4070\n\t\t\tif (s.isVisible && $P.is(\":visible\")) {\n                                                                            // 4071\n\t\t\t\t// reposition the resizer-bar\n                                                                                     // 4072\n\t\t\t\tif ($R) $R.css( side, size + sC.inset[side] );\n                                                                    // 4073\n\t\t\t\t// resize the content-div\n                                                                                         // 4074\n\t\t\t\tsizeContent(pane);\n                                                                                                // 4075\n\t\t\t}\n                                                                                                                  // 4076\n\n                                                                                                                      // 4077\n\t\t\tif (!skipCallback && !skipResizeWhileDragging && state.initialized && s.isVisible)\n                                 // 4078\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\n                                                                              // 4079\n\n                                                                                                                      // 4080\n\t\t\t// resize all the adjacent panes, and adjust their toggler buttons\n                                                 // 4081\n\t\t\t// when skipCallback passed, it means the controlling method will handle 'other panes'\n                             // 4082\n\t\t\tif (!skipCallback) {\n                                                                                               // 4083\n\t\t\t\t// also no callback if live-resize is in progress and NOT triggerEventsDuringLiveResize\n                           // 4084\n\t\t\t\tif (!s.isSliding) sizeMidPanes(_c[pane].dir==\"horz\" ? \"\" : \"center\", skipResizeWhileDragging, force);\n             // 4085\n\t\t\t\tsizeHandles();\n                                                                                                    // 4086\n\t\t\t}\n                                                                                                                  // 4087\n\n                                                                                                                      // 4088\n\t\t\t// if opposite-pane was autoClosed, see if it can be autoOpened now\n                                                // 4089\n\t\t\tvar altPane = _c.oppositeEdge[pane];\n                                                                               // 4090\n\t\t\tif (size < oldSize && state[ altPane ].noRoom) {\n                                                                   // 4091\n\t\t\t\tsetSizeLimits( altPane );\n                                                                                         // 4092\n\t\t\t\tmakePaneFit( altPane, false, skipCallback );\n                                                                      // 4093\n\t\t\t}\n                                                                                                                  // 4094\n\n                                                                                                                      // 4095\n\t\t\t// DEBUG - ALERT user/developer so they know there was a sizing problem\n                                            // 4096\n\t\t\tif (tries.length > 1)\n                                                                                              // 4097\n\t\t\t\t_log(msg +'\\nSee the Error Console for details.', true, true);\n                                                    // 4098\n\t\t}\n                                                                                                                   // 4099\n\t}\n                                                                                                                    // 4100\n\n                                                                                                                      // 4101\n\t/**\n                                                                                                                  // 4102\n\t* @see  initPanes(), sizePane(), \tresizeAll(), open(), close(), hide()\n                                               // 4103\n\t* @param {(Array.<string>|string)}\tpanes\t\t\t\t\tThe pane(s) being resized, comma-delmited string\n                        // 4104\n\t* @param {boolean=}\t\t\t\t\t[skipCallback=false]\tShould the onresize callback be run?\n                                    // 4105\n\t* @param {boolean=}\t\t\t\t\t[force=false]\n                                                                                // 4106\n\t*/\n                                                                                                                   // 4107\n,\tsizeMidPanes = function (panes, skipCallback, force) {\n                                                              // 4108\n\t\tpanes = (panes ? panes : \"east,west,center\").split(\",\");\n                                                            // 4109\n\n                                                                                                                      // 4110\n\t\t$.each(panes, function (i, pane) {\n                                                                                  // 4111\n\t\t\tif (!$Ps[pane]) return; // NO PANE - skip\n                                                                          // 4112\n\t\t\tvar \n                                                                                                               // 4113\n\t\t\t\to\t\t= options[pane]\n                                                                                                // 4114\n\t\t\t,\ts\t\t= state[pane]\n                                                                                                 // 4115\n\t\t\t,\t$P\t\t= $Ps[pane]\n                                                                                                  // 4116\n\t\t\t,\t$R\t\t= $Rs[pane]\n                                                                                                  // 4117\n\t\t\t,\tisCenter= (pane==\"center\")\n                                                                                       // 4118\n\t\t\t,\thasRoom\t= true\n                                                                                                   // 4119\n\t\t\t,\tCSS\t\t= {}\n                                                                                                        // 4120\n\t\t\t//\tif pane is not visible, show it invisibly NOW rather than for *each call* in this script\n                        // 4121\n\t\t\t,\tvisCSS\t= $.layout.showInvisibly($P)\n                                                                              // 4122\n\n                                                                                                                      // 4123\n\t\t\t,\tnewCenter\t= calcNewCenterPaneDims()\n                                                                              // 4124\n\t\t\t;\n                                                                                                                  // 4125\n\n                                                                                                                      // 4126\n\t\t\t// update pane-state dimensions\n                                                                                    // 4127\n\t\t\t$.extend(s, elDims($P));\n                                                                                           // 4128\n\n                                                                                                                      // 4129\n\t\t\tif (pane === \"center\") {\n                                                                                           // 4130\n\t\t\t\tif (!force && s.isVisible && newCenter.width === s.outerWidth && newCenter.height === s.outerHeight) {\n            // 4131\n\t\t\t\t\t$P.css(visCSS);\n                                                                                                  // 4132\n\t\t\t\t\treturn true; // SKIP - pane already the correct size\n                                                             // 4133\n\t\t\t\t}\n                                                                                                                 // 4134\n\t\t\t\t// set state for makePaneFit() logic\n                                                                              // 4135\n\t\t\t\t$.extend(s, cssMinDims(pane), {\n                                                                                   // 4136\n\t\t\t\t\tmaxWidth:\tnewCenter.width\n                                                                                        // 4137\n\t\t\t\t,\tmaxHeight:\tnewCenter.height\n                                                                                     // 4138\n\t\t\t\t});\n                                                                                                               // 4139\n\t\t\t\tCSS = newCenter;\n                                                                                                  // 4140\n\t\t\t\ts.newWidth\t= CSS.width;\n                                                                                           // 4141\n\t\t\t\ts.newHeight\t= CSS.height;\n                                                                                         // 4142\n\t\t\t\t// convert OUTER width/height to CSS width/height \n                                                                // 4143\n\t\t\t\tCSS.width\t= cssW($P, CSS.width);\n                                                                                  // 4144\n\t\t\t\t// NEW - allow pane to extend 'below' visible area rather than hide it\n                                            // 4145\n\t\t\t\tCSS.height\t= cssH($P, CSS.height);\n                                                                                // 4146\n\t\t\t\thasRoom\t\t= CSS.width >= 0 && CSS.height >= 0; // height >= 0 = ALWAYS TRUE NOW\n                                    // 4147\n\n                                                                                                                      // 4148\n\t\t\t\t// during layout init, try to shrink east/west panes to make room for center\n                                      // 4149\n\t\t\t\tif (!state.initialized && o.minWidth > newCenter.width) {\n                                                         // 4150\n\t\t\t\t\tvar\n                                                                                                              // 4151\n\t\t\t\t\t\treqPx\t= o.minWidth - s.outerWidth\n                                                                               // 4152\n\t\t\t\t\t,\tminE\t= options.east.minSize || 0\n                                                                               // 4153\n\t\t\t\t\t,\tminW\t= options.west.minSize || 0\n                                                                               // 4154\n\t\t\t\t\t,\tsizeE\t= state.east.size\n                                                                                        // 4155\n\t\t\t\t\t,\tsizeW\t= state.west.size\n                                                                                        // 4156\n\t\t\t\t\t,\tnewE\t= sizeE\n                                                                                                   // 4157\n\t\t\t\t\t,\tnewW\t= sizeW\n                                                                                                   // 4158\n\t\t\t\t\t;\n                                                                                                                // 4159\n\t\t\t\t\tif (reqPx > 0 && state.east.isVisible && sizeE > minE) {\n                                                         // 4160\n\t\t\t\t\t\tnewE = max( sizeE-minE, sizeE-reqPx );\n                                                                          // 4161\n\t\t\t\t\t\treqPx -= sizeE-newE;\n                                                                                            // 4162\n\t\t\t\t\t}\n                                                                                                                // 4163\n\t\t\t\t\tif (reqPx > 0 && state.west.isVisible && sizeW > minW) {\n                                                         // 4164\n\t\t\t\t\t\tnewW = max( sizeW-minW, sizeW-reqPx );\n                                                                          // 4165\n\t\t\t\t\t\treqPx -= sizeW-newW;\n                                                                                            // 4166\n\t\t\t\t\t}\n                                                                                                                // 4167\n\t\t\t\t\t// IF we found enough extra space, then resize the border panes as calculated\n                                    // 4168\n\t\t\t\t\tif (reqPx === 0) {\n                                                                                               // 4169\n\t\t\t\t\t\tif (sizeE && sizeE != minE)\n                                                                                     // 4170\n\t\t\t\t\t\t\tsizePane('east', newE, true, true, force); // true = skipCallback/noAnimation - initPanes will handle when done\n\t\t\t\t\t\tif (sizeW && sizeW != minW)\n                                                                                     // 4172\n\t\t\t\t\t\t\tsizePane('west', newW, true, true, force); // true = skipCallback/noAnimation\n                                  // 4173\n\t\t\t\t\t\t// now start over!\n                                                                                              // 4174\n\t\t\t\t\t\tsizeMidPanes('center', skipCallback, force);\n                                                                    // 4175\n\t\t\t\t\t\t$P.css(visCSS);\n                                                                                                 // 4176\n\t\t\t\t\t\treturn; // abort this loop\n                                                                                      // 4177\n\t\t\t\t\t}\n                                                                                                                // 4178\n\t\t\t\t}\n                                                                                                                 // 4179\n\t\t\t}\n                                                                                                                  // 4180\n\t\t\telse { // for east and west, set only the height, which is same as center height\n                                   // 4181\n\t\t\t\t// set state.min/maxWidth/Height for makePaneFit() logic\n                                                          // 4182\n\t\t\t\tif (s.isVisible && !s.noVerticalRoom)\n                                                                             // 4183\n\t\t\t\t\t$.extend(s, elDims($P), cssMinDims(pane))\n                                                                        // 4184\n\t\t\t\tif (!force && !s.noVerticalRoom && newCenter.height === s.outerHeight) {\n                                          // 4185\n\t\t\t\t\t$P.css(visCSS);\n                                                                                                  // 4186\n\t\t\t\t\treturn true; // SKIP - pane already the correct size\n                                                             // 4187\n\t\t\t\t}\n                                                                                                                 // 4188\n\t\t\t\t// east/west have same top, bottom & height as center\n                                                             // 4189\n\t\t\t\tCSS.top\t\t= newCenter.top;\n                                                                                         // 4190\n\t\t\t\tCSS.bottom\t= newCenter.bottom;\n                                                                                    // 4191\n\t\t\t\ts.newSize\t= newCenter.height\n                                                                                      // 4192\n\t\t\t\t// NEW - allow pane to extend 'below' visible area rather than hide it\n                                            // 4193\n\t\t\t\tCSS.height\t= cssH($P, newCenter.height);\n                                                                          // 4194\n\t\t\t\ts.maxHeight\t= CSS.height;\n                                                                                         // 4195\n\t\t\t\thasRoom\t\t= (s.maxHeight >= 0); // ALWAYS TRUE NOW\n                                                                 // 4196\n\t\t\t\tif (!hasRoom) s.noVerticalRoom = true; // makePaneFit() logic\n                                                     // 4197\n\t\t\t}\n                                                                                                                  // 4198\n\n                                                                                                                      // 4199\n\t\t\tif (hasRoom) {\n                                                                                                     // 4200\n\t\t\t\t// resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized\n                        // 4201\n\t\t\t\tif (!skipCallback && state.initialized)\n                                                                           // 4202\n\t\t\t\t\t_runCallbacks(\"onresize_start\", pane);\n                                                                           // 4203\n\n                                                                                                                      // 4204\n\t\t\t\t$P.css(CSS); // apply the CSS to pane\n                                                                             // 4205\n\t\t\t\tif (pane !== \"center\")\n                                                                                            // 4206\n\t\t\t\t\tsizeHandles(pane); // also update resizer length\n                                                                 // 4207\n\t\t\t\tif (s.noRoom && !s.isClosed && !s.isHidden)\n                                                                       // 4208\n\t\t\t\t\tmakePaneFit(pane); // will re-open/show auto-closed/hidden pane\n                                                  // 4209\n\t\t\t\tif (s.isVisible) {\n                                                                                                // 4210\n\t\t\t\t\t$.extend(s, elDims($P)); // update pane dimensions\n                                                               // 4211\n\t\t\t\t\tif (state.initialized) sizeContent(pane); // also resize the contents, if exists\n                                 // 4212\n\t\t\t\t}\n                                                                                                                 // 4213\n\t\t\t}\n                                                                                                                  // 4214\n\t\t\telse if (!s.noRoom && s.isVisible) // no room for pane\n                                                             // 4215\n\t\t\t\tmakePaneFit(pane); // will hide or close pane\n                                                                     // 4216\n\n                                                                                                                      // 4217\n\t\t\t// reset visibility, if necessary\n                                                                                  // 4218\n\t\t\t$P.css(visCSS);\n                                                                                                    // 4219\n\n                                                                                                                      // 4220\n\t\t\tdelete s.newSize;\n                                                                                                  // 4221\n\t\t\tdelete s.newWidth;\n                                                                                                 // 4222\n\t\t\tdelete s.newHeight;\n                                                                                                // 4223\n\n                                                                                                                      // 4224\n\t\t\tif (!s.isVisible)\n                                                                                                  // 4225\n\t\t\t\treturn true; // DONE - next pane\n                                                                                  // 4226\n\n                                                                                                                      // 4227\n\t\t\t/*\n                                                                                                                 // 4228\n\t\t\t* Extra CSS for IE6 or IE7 in Quirks-mode - add 'width' to NORTH/SOUTH panes\n                                       // 4229\n\t\t\t* Normally these panes have only 'left' & 'right' positions so pane auto-sizes\n                                     // 4230\n\t\t\t* ALSO required when pane is an IFRAME because will NOT default to 'full width'\n                                    // 4231\n\t\t\t*\tTODO: Can I use width:100% for a north/south iframe?\n                                                             // 4232\n\t\t\t*\tTODO: Sounds like a job for $P.outerWidth( sC.innerWidth ) SETTER METHOD\n                                         // 4233\n\t\t\t*/\n                                                                                                                 // 4234\n\t\t\tif (pane === \"center\") { // finished processing midPanes\n                                                           // 4235\n\t\t\t\tvar fix = browser.isIE6 || !browser.boxModel;\n                                                                     // 4236\n\t\t\t\tif ($Ps.north && (fix || state.north.tagName==\"IFRAME\")) \n                                                         // 4237\n\t\t\t\t\t$Ps.north.css(\"width\", cssW($Ps.north, sC.innerWidth));\n                                                          // 4238\n\t\t\t\tif ($Ps.south && (fix || state.south.tagName==\"IFRAME\"))\n                                                          // 4239\n\t\t\t\t\t$Ps.south.css(\"width\", cssW($Ps.south, sC.innerWidth));\n                                                          // 4240\n\t\t\t}\n                                                                                                                  // 4241\n\n                                                                                                                      // 4242\n\t\t\t// resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized\n                         // 4243\n\t\t\tif (!skipCallback && state.initialized)\n                                                                            // 4244\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\n                                                                              // 4245\n\t\t});\n                                                                                                                 // 4246\n\t}\n                                                                                                                    // 4247\n\n                                                                                                                      // 4248\n\n                                                                                                                      // 4249\n\t/**\n                                                                                                                  // 4250\n\t* @see  window.onresize(), callbacks or custom code\n                                                                  // 4251\n\t* @param {(Object|boolean)=}\tevt_or_refresh\tIf 'true', then also reset pane-positioning\n                              // 4252\n\t*/\n                                                                                                                   // 4253\n,\tresizeAll = function (evt_or_refresh) {\n                                                                             // 4254\n\t\tvar\toldW\t= sC.innerWidth\n                                                                                            // 4255\n\t\t,\toldH\t= sC.innerHeight\n                                                                                             // 4256\n\t\t;\n                                                                                                                   // 4257\n\t\t// stopPropagation if called by trigger(\"layoutdestroy\") - use evtPane utility \n                                     // 4258\n\t\tevtPane(evt_or_refresh);\n                                                                                            // 4259\n\n                                                                                                                      // 4260\n\t\t// cannot size layout when 'container' is hidden or collapsed\n                                                       // 4261\n\t\tif (!$N.is(\":visible\")) return;\n                                                                                     // 4262\n\n                                                                                                                      // 4263\n\t\tif (!state.initialized) {\n                                                                                           // 4264\n\t\t\t_initLayoutElements();\n                                                                                             // 4265\n\t\t\treturn; // no need to resize since we just initialized!\n                                                            // 4266\n\t\t}\n                                                                                                                   // 4267\n\n                                                                                                                      // 4268\n\t\tif (evt_or_refresh === true && $.isPlainObject(options.outset)) {\n                                                   // 4269\n\t\t\t// update container CSS in case outset option has changed\n                                                          // 4270\n\t\t\t$N.css( options.outset );\n                                                                                          // 4271\n\t\t}\n                                                                                                                   // 4272\n\t\t// UPDATE container dimensions\n                                                                                      // 4273\n\t\t$.extend(sC, elDims( $N, options.inset ));\n                                                                          // 4274\n\t\tif (!sC.outerHeight) return;\n                                                                                        // 4275\n\n                                                                                                                      // 4276\n\t\t// if 'true' passed, refresh pane & handle positioning too\n                                                          // 4277\n\t\tif (evt_or_refresh === true) {\n                                                                                      // 4278\n\t\t\tsetPanePosition();\n                                                                                                 // 4279\n\t\t}\n                                                                                                                   // 4280\n\n                                                                                                                      // 4281\n\t\t// onresizeall_start will CANCEL resizing if returns false\n                                                          // 4282\n\t\t// state.container has already been set, so user can access this info for calcuations\n                               // 4283\n\t\tif (false === _runCallbacks(\"onresizeall_start\")) return false;\n                                                     // 4284\n\n                                                                                                                      // 4285\n\t\tvar\t// see if container is now 'smaller' than before\n                                                                // 4286\n\t\t\tshrunkH\t= (sC.innerHeight < oldH)\n                                                                                  // 4287\n\t\t,\tshrunkW\t= (sC.innerWidth < oldW)\n                                                                                  // 4288\n\t\t,\t$P, o, s\n                                                                                                          // 4289\n\t\t;\n                                                                                                                   // 4290\n\t\t// NOTE special order for sizing: S-N-E-W\n                                                                           // 4291\n\t\t$.each([\"south\",\"north\",\"east\",\"west\"], function (i, pane) {\n                                                        // 4292\n\t\t\tif (!$Ps[pane]) return; // no pane - SKIP\n                                                                          // 4293\n\t\t\to = options[pane];\n                                                                                                 // 4294\n\t\t\ts = state[pane];\n                                                                                                   // 4295\n\t\t\tif (s.autoResize && s.size != o.size) // resize pane to original size set in options\n                               // 4296\n\t\t\t\tsizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize\n                            // 4297\n\t\t\telse {\n                                                                                                             // 4298\n\t\t\t\tsetSizeLimits(pane);\n                                                                                              // 4299\n\t\t\t\tmakePaneFit(pane, false, true, true); // true=skipCallback/forceResize\n                                            // 4300\n\t\t\t}\n                                                                                                                  // 4301\n\t\t});\n                                                                                                                 // 4302\n\n                                                                                                                      // 4303\n\t\tsizeMidPanes(\"\", true, true); // true=skipCallback/forceResize\n                                                      // 4304\n\t\tsizeHandles(); // reposition the toggler elements\n                                                                   // 4305\n\n                                                                                                                      // 4306\n\t\t// trigger all individual pane callbacks AFTER layout has finished resizing\n                                         // 4307\n\t\t$.each(_c.allPanes, function (i, pane) {\n                                                                            // 4308\n\t\t\t$P = $Ps[pane];\n                                                                                                    // 4309\n\t\t\tif (!$P) return; // SKIP\n                                                                                           // 4310\n\t\t\tif (state[pane].isVisible) // undefined for non-existent panes\n                                                     // 4311\n\t\t\t\t_runCallbacks(\"onresize_end\", pane); // callback - if exists\n                                                      // 4312\n\t\t});\n                                                                                                                 // 4313\n\n                                                                                                                      // 4314\n\t\t_runCallbacks(\"onresizeall_end\");\n                                                                                   // 4315\n\t\t//_triggerLayoutEvent(pane, 'resizeall');\n                                                                           // 4316\n\t}\n                                                                                                                    // 4317\n\n                                                                                                                      // 4318\n\t/**\n                                                                                                                  // 4319\n\t* Whenever a pane resizes or opens that has a nested layout, trigger resizeAll\n                                       // 4320\n\t*\n                                                                                                                    // 4321\n\t* @param {(string|Object)}\tevt_or_pane\t\tThe pane just resized or opened\n                                              // 4322\n\t*/\n                                                                                                                   // 4323\n,\tresizeChildren = function (evt_or_pane, skipRefresh) {\n                                                              // 4324\n\t\tvar\tpane = evtPane.call(this, evt_or_pane);\n                                                                         // 4325\n\n                                                                                                                      // 4326\n\t\tif (!options[pane].resizeChildren) return;\n                                                                          // 4327\n\n                                                                                                                      // 4328\n\t\t// ensure the pane-children are up-to-date\n                                                                          // 4329\n\t\tif (!skipRefresh) refreshChildren( pane );\n                                                                          // 4330\n\t\tvar pC = children[pane];\n                                                                                            // 4331\n\t\tif ($.isPlainObject( pC )) {\n                                                                                        // 4332\n\t\t\t// resize one or more children\n                                                                                     // 4333\n\t\t\t$.each( pC, function (key, child) {\n                                                                                // 4334\n\t\t\t\tif (!child.destroyed) child.resizeAll();\n                                                                          // 4335\n\t\t\t});\n                                                                                                                // 4336\n\t\t}\n                                                                                                                   // 4337\n\t}\n                                                                                                                    // 4338\n\n                                                                                                                      // 4339\n\t/**\n                                                                                                                  // 4340\n\t* IF pane has a content-div, then resize all elements inside pane to fit pane-height\n                                 // 4341\n\t*\n                                                                                                                    // 4342\n\t* @param {(string|Object)}\tevt_or_panes\t\tThe pane(s) being resized\n                                                   // 4343\n\t* @param {boolean=}\t\t\t[remeasure=false]\tShould the content (header/footer) be remeasured?\n                            // 4344\n\t*/\n                                                                                                                   // 4345\n,\tsizeContent = function (evt_or_panes, remeasure) {\n                                                                  // 4346\n\t\tif (!isInitialized()) return;\n                                                                                       // 4347\n\n                                                                                                                      // 4348\n\t\tvar panes = evtPane.call(this, evt_or_panes);\n                                                                       // 4349\n\t\tpanes = panes ? panes.split(\",\") : _c.allPanes;\n                                                                     // 4350\n\n                                                                                                                      // 4351\n\t\t$.each(panes, function (idx, pane) {\n                                                                                // 4352\n\t\t\tvar\n                                                                                                                // 4353\n\t\t\t\t$P\t= $Ps[pane]\n                                                                                                    // 4354\n\t\t\t,\t$C\t= $Cs[pane]\n                                                                                                   // 4355\n\t\t\t,\to\t= options[pane]\n                                                                                                // 4356\n\t\t\t,\ts\t= state[pane]\n                                                                                                  // 4357\n\t\t\t,\tm\t= s.content // m = measurements\n                                                                                // 4358\n\t\t\t;\n                                                                                                                  // 4359\n\t\t\tif (!$P || !$C || !$P.is(\":visible\")) return true; // NOT VISIBLE - skip\n                                           // 4360\n\n                                                                                                                      // 4361\n\t\t\t// if content-element was REMOVED, update OR remove the pointer\n                                                    // 4362\n\t\t\tif (!$C.length) {\n                                                                                                  // 4363\n\t\t\t\tinitContent(pane, false);\t// false = do NOT sizeContent() - already there!\n                                        // 4364\n\t\t\t\tif (!$C) return;\t\t\t// no replacement element found - pointer have been removed\n                                    // 4365\n\t\t\t}\n                                                                                                                  // 4366\n\n                                                                                                                      // 4367\n\t\t\t// onsizecontent_start will CANCEL resizing if returns false\n                                                       // 4368\n\t\t\tif (false === _runCallbacks(\"onsizecontent_start\", pane)) return;\n                                                  // 4369\n\n                                                                                                                      // 4370\n\t\t\t// skip re-measuring offsets if live-resizing\n                                                                      // 4371\n\t\t\tif ((!s.isMoving && !s.isResizing) || o.liveContentResizing || remeasure || m.top == undefined) {\n                  // 4372\n\t\t\t\t_measure();\n                                                                                                       // 4373\n\t\t\t\t// if any footers are below pane-bottom, they may not measure correctly,\n                                          // 4374\n\t\t\t\t// so allow pane overflow and re-measure\n                                                                          // 4375\n\t\t\t\tif (m.hiddenFooters > 0 && $P.css(\"overflow\") === \"hidden\") {\n                                                     // 4376\n\t\t\t\t\t$P.css(\"overflow\", \"visible\");\n                                                                                   // 4377\n\t\t\t\t\t_measure(); // remeasure while overflowing\n                                                                       // 4378\n\t\t\t\t\t$P.css(\"overflow\", \"hidden\");\n                                                                                    // 4379\n\t\t\t\t}\n                                                                                                                 // 4380\n\t\t\t}\n                                                                                                                  // 4381\n\t\t\t// NOTE: spaceAbove/Below *includes* the pane paddingTop/Bottom, but not pane.borders\n                              // 4382\n\t\t\tvar newH = s.innerHeight - (m.spaceAbove - s.css.paddingTop) - (m.spaceBelow - s.css.paddingBottom);\n               // 4383\n\n                                                                                                                      // 4384\n\t\t\tif (!$C.is(\":visible\") || m.height != newH) {\n                                                                      // 4385\n\t\t\t\t// size the Content element to fit new pane-size - will autoHide if not enough room\n                               // 4386\n\t\t\t\tsetOuterHeight($C, newH, true); // true=autoHide\n                                                                  // 4387\n\t\t\t\tm.height = newH; // save new height\n                                                                               // 4388\n\t\t\t};\n                                                                                                                 // 4389\n\n                                                                                                                      // 4390\n\t\t\tif (state.initialized)\n                                                                                             // 4391\n\t\t\t\t_runCallbacks(\"onsizecontent_end\", pane);\n                                                                         // 4392\n\n                                                                                                                      // 4393\n\t\t\tfunction _below ($E) {\n                                                                                             // 4394\n\t\t\t\treturn max(s.css.paddingBottom, (parseInt($E.css(\"marginBottom\"), 10) || 0));\n                                     // 4395\n\t\t\t};\n                                                                                                                 // 4396\n\n                                                                                                                      // 4397\n\t\t\tfunction _measure () {\n                                                                                             // 4398\n\t\t\t\tvar\n                                                                                                               // 4399\n\t\t\t\t\tignore\t= options[pane].contentIgnoreSelector\n                                                                     // 4400\n\t\t\t\t,\t$Fs\t\t= $C.nextAll().not(\".ui-layout-mask\").not(ignore || \":lt(0)\") // not :lt(0) = ALL\n                          // 4401\n\t\t\t\t,\t$Fs_vis\t= $Fs.filter(':visible')\n                                                                                // 4402\n\t\t\t\t,\t$F\t\t= $Fs_vis.filter(':last')\n                                                                                   // 4403\n\t\t\t\t;\n                                                                                                                 // 4404\n\t\t\t\tm = {\n                                                                                                             // 4405\n\t\t\t\t\ttop:\t\t\t$C[0].offsetTop\n                                                                                           // 4406\n\t\t\t\t,\theight:\t\t\t$C.outerHeight()\n                                                                                      // 4407\n\t\t\t\t,\tnumFooters:\t\t$Fs.length\n                                                                                         // 4408\n\t\t\t\t,\thiddenFooters:\t$Fs.length - $Fs_vis.length\n                                                                      // 4409\n\t\t\t\t,\tspaceBelow:\t\t0 // correct if no content footer ($E)\n                                                             // 4410\n\t\t\t\t}\n                                                                                                                 // 4411\n\t\t\t\t\tm.spaceAbove\t= m.top; // just for state - not used in calc\n                                                       // 4412\n\t\t\t\t\tm.bottom\t\t= m.top + m.height;\n                                                                                    // 4413\n\t\t\t\tif ($F.length)\n                                                                                                    // 4414\n\t\t\t\t\t//spaceBelow = (LastFooter.top + LastFooter.height) [footerBottom] - Content.bottom + max(LastFooter.marginBottom, pane.paddingBotom)\n\t\t\t\t\tm.spaceBelow = ($F[0].offsetTop + $F.outerHeight()) - m.bottom + _below($F);\n                                     // 4416\n\t\t\t\telse // no footer - check marginBottom on Content element itself\n                                                  // 4417\n\t\t\t\t\tm.spaceBelow = _below($C);\n                                                                                       // 4418\n\t\t\t};\n                                                                                                                 // 4419\n\t\t});\n                                                                                                                 // 4420\n\t}\n                                                                                                                    // 4421\n\n                                                                                                                      // 4422\n\n                                                                                                                      // 4423\n\t/**\n                                                                                                                  // 4424\n\t* Called every time a pane is opened, closed, or resized to slide the togglers to 'center' and adjust their length if necessary\n\t*\n                                                                                                                    // 4426\n\t* @see  initHandles(), open(), close(), resizeAll()\n                                                                  // 4427\n\t* @param {(string|Object)=}\t\tevt_or_panes\tThe pane(s) being resized\n                                                  // 4428\n\t*/\n                                                                                                                   // 4429\n,\tsizeHandles = function (evt_or_panes) {\n                                                                             // 4430\n\t\tvar panes = evtPane.call(this, evt_or_panes)\n                                                                        // 4431\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\n                                                                  // 4432\n\n                                                                                                                      // 4433\n\t\t$.each(panes, function (i, pane) {\n                                                                                  // 4434\n\t\t\tvar \n                                                                                                               // 4435\n\t\t\t\to\t= options[pane]\n                                                                                                 // 4436\n\t\t\t,\ts\t= state[pane]\n                                                                                                  // 4437\n\t\t\t,\t$P\t= $Ps[pane]\n                                                                                                   // 4438\n\t\t\t,\t$R\t= $Rs[pane]\n                                                                                                   // 4439\n\t\t\t,\t$T\t= $Ts[pane]\n                                                                                                   // 4440\n\t\t\t,\t$TC\n                                                                                                              // 4441\n\t\t\t;\n                                                                                                                  // 4442\n\t\t\tif (!$P || !$R) return;\n                                                                                            // 4443\n\n                                                                                                                      // 4444\n\t\t\tvar\n                                                                                                                // 4445\n\t\t\t\tdir\t\t\t= _c[pane].dir\n                                                                                              // 4446\n\t\t\t,\t_state\t\t= (s.isClosed ? \"_closed\" : \"_open\")\n                                                                     // 4447\n\t\t\t,\tspacing\t\t= o[\"spacing\"+ _state]\n                                                                                  // 4448\n\t\t\t,\ttogAlign\t= o[\"togglerAlign\"+ _state]\n                                                                             // 4449\n\t\t\t,\ttogLen\t\t= o[\"togglerLength\"+ _state]\n                                                                             // 4450\n\t\t\t,\tpaneLen\n                                                                                                          // 4451\n\t\t\t,\tleft\n                                                                                                             // 4452\n\t\t\t,\toffset\n                                                                                                           // 4453\n\t\t\t,\tCSS = {}\n                                                                                                         // 4454\n\t\t\t;\n                                                                                                                  // 4455\n\n                                                                                                                      // 4456\n\t\t\tif (spacing === 0) {\n                                                                                               // 4457\n\t\t\t\t$R.hide();\n                                                                                                        // 4458\n\t\t\t\treturn;\n                                                                                                           // 4459\n\t\t\t}\n                                                                                                                  // 4460\n\t\t\telse if (!s.noRoom && !s.isHidden) // skip if resizer was hidden for any reason\n                                    // 4461\n\t\t\t\t$R.show(); // in case was previously hidden\n                                                                       // 4462\n\n                                                                                                                      // 4463\n\t\t\t// Resizer Bar is ALWAYS same width/height of pane it is attached to\n                                               // 4464\n\t\t\tif (dir === \"horz\") { // north/south\n                                                                               // 4465\n\t\t\t\t//paneLen = $P.outerWidth(); // s.outerWidth || \n                                                                  // 4466\n\t\t\t\tpaneLen = sC.innerWidth; // handle offscreen-panes\n                                                                // 4467\n\t\t\t\ts.resizerLength = paneLen;\n                                                                                        // 4468\n\t\t\t\tleft = $.layout.cssNum($P, \"left\")\n                                                                                // 4469\n\t\t\t\t$R.css({\n                                                                                                          // 4470\n\t\t\t\t\twidth:\tcssW($R, paneLen) // account for borders & padding\n                                                        // 4471\n\t\t\t\t,\theight:\tcssH($R, spacing) // ditto\n                                                                              // 4472\n\t\t\t\t,\tleft:\tleft > -9999 ? left : sC.inset.left // handle offscreen-panes\n                                             // 4473\n\t\t\t\t});\n                                                                                                               // 4474\n\t\t\t}\n                                                                                                                  // 4475\n\t\t\telse { // east/west\n                                                                                                // 4476\n\t\t\t\tpaneLen = $P.outerHeight(); // s.outerHeight || \n                                                                  // 4477\n\t\t\t\ts.resizerLength = paneLen;\n                                                                                        // 4478\n\t\t\t\t$R.css({\n                                                                                                          // 4479\n\t\t\t\t\theight:\tcssH($R, paneLen) // account for borders & padding\n                                                       // 4480\n\t\t\t\t,\twidth:\tcssW($R, spacing) // ditto\n                                                                               // 4481\n\t\t\t\t,\ttop:\tsC.inset.top + getPaneSize(\"north\", true) // TODO: what if no North pane?\n                                  // 4482\n\t\t\t\t//,\ttop:\t$.layout.cssNum($Ps[\"center\"], \"top\")\n                                                                    // 4483\n\t\t\t\t});\n                                                                                                               // 4484\n\t\t\t}\n                                                                                                                  // 4485\n\n                                                                                                                      // 4486\n\t\t\t// remove hover classes\n                                                                                            // 4487\n\t\t\tremoveHover( o, $R );\n                                                                                              // 4488\n\n                                                                                                                      // 4489\n\t\t\tif ($T) {\n                                                                                                          // 4490\n\t\t\t\tif (togLen === 0 || (s.isSliding && o.hideTogglerOnSlide)) {\n                                                      // 4491\n\t\t\t\t\t$T.hide(); // always HIDE the toggler when 'sliding'\n                                                             // 4492\n\t\t\t\t\treturn;\n                                                                                                          // 4493\n\t\t\t\t}\n                                                                                                                 // 4494\n\t\t\t\telse\n                                                                                                              // 4495\n\t\t\t\t\t$T.show(); // in case was previously hidden\n                                                                      // 4496\n\n                                                                                                                      // 4497\n\t\t\t\tif (!(togLen > 0) || togLen === \"100%\" || togLen > paneLen) {\n                                                     // 4498\n\t\t\t\t\ttogLen = paneLen;\n                                                                                                // 4499\n\t\t\t\t\toffset = 0;\n                                                                                                      // 4500\n\t\t\t\t}\n                                                                                                                 // 4501\n\t\t\t\telse { // calculate 'offset' based on options.PANE.togglerAlign_open/closed\n                                       // 4502\n\t\t\t\t\tif (isStr(togAlign)) {\n                                                                                           // 4503\n\t\t\t\t\t\tswitch (togAlign) {\n                                                                                             // 4504\n\t\t\t\t\t\t\tcase \"top\":\n                                                                                                    // 4505\n\t\t\t\t\t\t\tcase \"left\":\toffset = 0;\n                                                                                       // 4506\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n                                                                                                     // 4507\n\t\t\t\t\t\t\tcase \"bottom\":\n                                                                                                 // 4508\n\t\t\t\t\t\t\tcase \"right\":\toffset = paneLen - togLen;\n                                                                       // 4509\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n                                                                                                     // 4510\n\t\t\t\t\t\t\tcase \"middle\":\n                                                                                                 // 4511\n\t\t\t\t\t\t\tcase \"center\":\n                                                                                                 // 4512\n\t\t\t\t\t\t\tdefault:\t\toffset = round((paneLen - togLen) / 2); // 'default' catches typos\n                                   // 4513\n\t\t\t\t\t\t}\n                                                                                                               // 4514\n\t\t\t\t\t}\n                                                                                                                // 4515\n\t\t\t\t\telse { // togAlign = number\n                                                                                      // 4516\n\t\t\t\t\t\tvar x = parseInt(togAlign, 10); //\n                                                                              // 4517\n\t\t\t\t\t\tif (togAlign >= 0) offset = x;\n                                                                                  // 4518\n\t\t\t\t\t\telse offset = paneLen - togLen + x; // NOTE: x is negative!\n                                                     // 4519\n\t\t\t\t\t}\n                                                                                                                // 4520\n\t\t\t\t}\n                                                                                                                 // 4521\n\n                                                                                                                      // 4522\n\t\t\t\tif (dir === \"horz\") { // north/south\n                                                                              // 4523\n\t\t\t\t\tvar width = cssW($T, togLen);\n                                                                                    // 4524\n\t\t\t\t\t$T.css({\n                                                                                                         // 4525\n\t\t\t\t\t\twidth:\twidth  // account for borders & padding\n                                                                  // 4526\n\t\t\t\t\t,\theight:\tcssH($T, spacing) // ditto\n                                                                             // 4527\n\t\t\t\t\t,\tleft:\toffset // TODO: VERIFY that toggler  positions correctly for ALL values\n                                  // 4528\n\t\t\t\t\t,\ttop:\t0\n                                                                                                         // 4529\n\t\t\t\t\t});\n                                                                                                              // 4530\n\t\t\t\t\t// CENTER the toggler content SPAN\n                                                                               // 4531\n\t\t\t\t\t$T.children(\".content\").each(function(){\n                                                                         // 4532\n\t\t\t\t\t\t$TC = $(this);\n                                                                                                  // 4533\n\t\t\t\t\t\t$TC.css(\"marginLeft\", round((width-$TC.outerWidth())/2)); // could be negative\n                                  // 4534\n\t\t\t\t\t});\n                                                                                                              // 4535\n\t\t\t\t}\n                                                                                                                 // 4536\n\t\t\t\telse { // east/west\n                                                                                               // 4537\n\t\t\t\t\tvar height = cssH($T, togLen);\n                                                                                   // 4538\n\t\t\t\t\t$T.css({\n                                                                                                         // 4539\n\t\t\t\t\t\theight:\theight // account for borders & padding\n                                                                 // 4540\n\t\t\t\t\t,\twidth:\tcssW($T, spacing) // ditto\n                                                                              // 4541\n\t\t\t\t\t,\ttop:\toffset // POSITION the toggler\n                                                                            // 4542\n\t\t\t\t\t,\tleft:\t0\n                                                                                                        // 4543\n\t\t\t\t\t});\n                                                                                                              // 4544\n\t\t\t\t\t// CENTER the toggler content SPAN\n                                                                               // 4545\n\t\t\t\t\t$T.children(\".content\").each(function(){\n                                                                         // 4546\n\t\t\t\t\t\t$TC = $(this);\n                                                                                                  // 4547\n\t\t\t\t\t\t$TC.css(\"marginTop\", round((height-$TC.outerHeight())/2)); // could be negative\n                                 // 4548\n\t\t\t\t\t});\n                                                                                                              // 4549\n\t\t\t\t}\n                                                                                                                 // 4550\n\n                                                                                                                      // 4551\n\t\t\t\t// remove ALL hover classes\n                                                                                       // 4552\n\t\t\t\tremoveHover( 0, $T );\n                                                                                             // 4553\n\t\t\t}\n                                                                                                                  // 4554\n\n                                                                                                                      // 4555\n\t\t\t// DONE measuring and sizing this resizer/toggler, so can be 'hidden' now\n                                          // 4556\n\t\t\tif (!state.initialized && (o.initHidden || s.isHidden)) {\n                                                          // 4557\n\t\t\t\t$R.hide();\n                                                                                                        // 4558\n\t\t\t\tif ($T) $T.hide();\n                                                                                                // 4559\n\t\t\t}\n                                                                                                                  // 4560\n\t\t});\n                                                                                                                 // 4561\n\t}\n                                                                                                                    // 4562\n\n                                                                                                                      // 4563\n\n                                                                                                                      // 4564\n\t/**\n                                                                                                                  // 4565\n\t* @param {(string|Object)}\tevt_or_pane\n                                                                               // 4566\n\t*/\n                                                                                                                   // 4567\n,\tenableClosable = function (evt_or_pane) {\n                                                                           // 4568\n\t\tif (!isInitialized()) return;\n                                                                                       // 4569\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 4570\n\t\t,\t$T\t= $Ts[pane]\n                                                                                                    // 4571\n\t\t,\to\t= options[pane]\n                                                                                                 // 4572\n\t\t;\n                                                                                                                   // 4573\n\t\tif (!$T) return;\n                                                                                                    // 4574\n\t\to.closable = true;\n                                                                                                  // 4575\n\t\t$T\t.bind(\"click.\"+ sID, function(evt){ evt.stopPropagation(); toggle(pane); })\n                                      // 4576\n\t\t\t.css(\"visibility\", \"visible\")\n                                                                                      // 4577\n\t\t\t.css(\"cursor\", \"pointer\")\n                                                                                          // 4578\n\t\t\t.attr(\"title\", state[pane].isClosed ? o.tips.Open : o.tips.Close) // may be blank\n                                  // 4579\n\t\t\t.show();\n                                                                                                           // 4580\n\t}\n                                                                                                                    // 4581\n\t/**\n                                                                                                                  // 4582\n\t* @param {(string|Object)}\tevt_or_pane\n                                                                               // 4583\n\t* @param {boolean=}\t\t\t[hide=false]\n                                                                                   // 4584\n\t*/\n                                                                                                                   // 4585\n,\tdisableClosable = function (evt_or_pane, hide) {\n                                                                    // 4586\n\t\tif (!isInitialized()) return;\n                                                                                       // 4587\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 4588\n\t\t,\t$T\t= $Ts[pane]\n                                                                                                    // 4589\n\t\t;\n                                                                                                                   // 4590\n\t\tif (!$T) return;\n                                                                                                    // 4591\n\t\toptions[pane].closable = false;\n                                                                                     // 4592\n\t\t// is closable is disable, then pane MUST be open!\n                                                                  // 4593\n\t\tif (state[pane].isClosed) open(pane, false, true);\n                                                                  // 4594\n\t\t$T\t.unbind(\".\"+ sID)\n                                                                                                // 4595\n\t\t\t.css(\"visibility\", hide ? \"hidden\" : \"visible\") // instead of hide(), which creates logic issues\n                   // 4596\n\t\t\t.css(\"cursor\", \"default\")\n                                                                                          // 4597\n\t\t\t.attr(\"title\", \"\");\n                                                                                                // 4598\n\t}\n                                                                                                                    // 4599\n\n                                                                                                                      // 4600\n\n                                                                                                                      // 4601\n\t/**\n                                                                                                                  // 4602\n\t* @param {(string|Object)}\tevt_or_pane\n                                                                               // 4603\n\t*/\n                                                                                                                   // 4604\n,\tenableSlidable = function (evt_or_pane) {\n                                                                           // 4605\n\t\tif (!isInitialized()) return;\n                                                                                       // 4606\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 4607\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 4608\n\t\t;\n                                                                                                                   // 4609\n\t\tif (!$R || !$R.data('draggable')) return;\n                                                                           // 4610\n\t\toptions[pane].slidable = true; \n                                                                                     // 4611\n\t\tif (state[pane].isClosed)\n                                                                                           // 4612\n\t\t\tbindStartSlidingEvents(pane, true);\n                                                                                // 4613\n\t}\n                                                                                                                    // 4614\n\t/**\n                                                                                                                  // 4615\n\t* @param {(string|Object)}\tevt_or_pane\n                                                                               // 4616\n\t*/\n                                                                                                                   // 4617\n,\tdisableSlidable = function (evt_or_pane) {\n                                                                          // 4618\n\t\tif (!isInitialized()) return;\n                                                                                       // 4619\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 4620\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 4621\n\t\t;\n                                                                                                                   // 4622\n\t\tif (!$R) return;\n                                                                                                    // 4623\n\t\toptions[pane].slidable = false; \n                                                                                    // 4624\n\t\tif (state[pane].isSliding)\n                                                                                          // 4625\n\t\t\tclose(pane, false, true);\n                                                                                          // 4626\n\t\telse {\n                                                                                                              // 4627\n\t\t\tbindStartSlidingEvents(pane, false);\n                                                                               // 4628\n\t\t\t$R\t.css(\"cursor\", \"default\")\n                                                                                       // 4629\n\t\t\t\t.attr(\"title\", \"\");\n                                                                                               // 4630\n\t\t\tremoveHover(null, $R[0]); // in case currently hovered\n                                                             // 4631\n\t\t}\n                                                                                                                   // 4632\n\t}\n                                                                                                                    // 4633\n\n                                                                                                                      // 4634\n\n                                                                                                                      // 4635\n\t/**\n                                                                                                                  // 4636\n\t* @param {(string|Object)}\tevt_or_pane\n                                                                               // 4637\n\t*/\n                                                                                                                   // 4638\n,\tenableResizable = function (evt_or_pane) {\n                                                                          // 4639\n\t\tif (!isInitialized()) return;\n                                                                                       // 4640\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 4641\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 4642\n\t\t,\to\t= options[pane]\n                                                                                                 // 4643\n\t\t;\n                                                                                                                   // 4644\n\t\tif (!$R || !$R.data('draggable')) return;\n                                                                           // 4645\n\t\to.resizable = true; \n                                                                                                // 4646\n\t\t$R.draggable(\"enable\");\n                                                                                             // 4647\n\t\tif (!state[pane].isClosed)\n                                                                                          // 4648\n\t\t\t$R\t.css(\"cursor\", o.resizerCursor)\n                                                                                 // 4649\n\t\t\t \t.attr(\"title\", o.tips.Resize);\n                                                                                   // 4650\n\t}\n                                                                                                                    // 4651\n\t/**\n                                                                                                                  // 4652\n\t* @param {(string|Object)}\tevt_or_pane\n                                                                               // 4653\n\t*/\n                                                                                                                   // 4654\n,\tdisableResizable = function (evt_or_pane) {\n                                                                         // 4655\n\t\tif (!isInitialized()) return;\n                                                                                       // 4656\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\n                                                                          // 4657\n\t\t,\t$R\t= $Rs[pane]\n                                                                                                    // 4658\n\t\t;\n                                                                                                                   // 4659\n\t\tif (!$R || !$R.data('draggable')) return;\n                                                                           // 4660\n\t\toptions[pane].resizable = false; \n                                                                                   // 4661\n\t\t$R\t.draggable(\"disable\")\n                                                                                            // 4662\n\t\t\t.css(\"cursor\", \"default\")\n                                                                                          // 4663\n\t\t\t.attr(\"title\", \"\");\n                                                                                                // 4664\n\t\tremoveHover(null, $R[0]); // in case currently hovered\n                                                              // 4665\n\t}\n                                                                                                                    // 4666\n\n                                                                                                                      // 4667\n\n                                                                                                                      // 4668\n\t/**\n                                                                                                                  // 4669\n\t* Move a pane from source-side (eg, west) to target-side (eg, east)\n                                                  // 4670\n\t* If pane exists on target-side, move that to source-side, ie, 'swap' the panes\n                                      // 4671\n\t*\n                                                                                                                    // 4672\n\t* @param {(string|Object)}\tevt_or_pane1\tThe pane/edge being swapped\n                                                  // 4673\n\t* @param {string}\t\t\tpane2\t\t\tditto\n                                                                                    // 4674\n\t*/\n                                                                                                                   // 4675\n,\tswapPanes = function (evt_or_pane1, pane2) {\n                                                                        // 4676\n\t\tif (!isInitialized()) return;\n                                                                                       // 4677\n\t\tvar pane1 = evtPane.call(this, evt_or_pane1);\n                                                                       // 4678\n\t\t// change state.edge NOW so callbacks can know where pane is headed...\n                                              // 4679\n\t\tstate[pane1].edge = pane2;\n                                                                                          // 4680\n\t\tstate[pane2].edge = pane1;\n                                                                                          // 4681\n\t\t// run these even if NOT state.initialized\n                                                                          // 4682\n\t\tif (false === _runCallbacks(\"onswap_start\", pane1)\n                                                                  // 4683\n\t\t ||\tfalse === _runCallbacks(\"onswap_start\", pane2)\n                                                                  // 4684\n\t\t) {\n                                                                                                                 // 4685\n\t\t\tstate[pane1].edge = pane1; // reset\n                                                                                // 4686\n\t\t\tstate[pane2].edge = pane2;\n                                                                                         // 4687\n\t\t\treturn;\n                                                                                                            // 4688\n\t\t}\n                                                                                                                   // 4689\n\n                                                                                                                      // 4690\n\t\tvar\n                                                                                                                 // 4691\n\t\t\toPane1\t= copy( pane1 )\n                                                                                             // 4692\n\t\t,\toPane2\t= copy( pane2 )\n                                                                                            // 4693\n\t\t,\tsizes\t= {}\n                                                                                                        // 4694\n\t\t;\n                                                                                                                   // 4695\n\t\tsizes[pane1] = oPane1 ? oPane1.state.size : 0;\n                                                                      // 4696\n\t\tsizes[pane2] = oPane2 ? oPane2.state.size : 0;\n                                                                      // 4697\n\n                                                                                                                      // 4698\n\t\t// clear pointers & state\n                                                                                           // 4699\n\t\t$Ps[pane1] = false; \n                                                                                                // 4700\n\t\t$Ps[pane2] = false;\n                                                                                                 // 4701\n\t\tstate[pane1] = {};\n                                                                                                  // 4702\n\t\tstate[pane2] = {};\n                                                                                                  // 4703\n\t\t\n                                                                                                                    // 4704\n\t\t// ALWAYS remove the resizer & toggler elements\n                                                                     // 4705\n\t\tif ($Ts[pane1]) $Ts[pane1].remove();\n                                                                                // 4706\n\t\tif ($Ts[pane2]) $Ts[pane2].remove();\n                                                                                // 4707\n\t\tif ($Rs[pane1]) $Rs[pane1].remove();\n                                                                                // 4708\n\t\tif ($Rs[pane2]) $Rs[pane2].remove();\n                                                                                // 4709\n\t\t$Rs[pane1] = $Rs[pane2] = $Ts[pane1] = $Ts[pane2] = false;\n                                                          // 4710\n\n                                                                                                                      // 4711\n\t\t// transfer element pointers and data to NEW Layout keys\n                                                            // 4712\n\t\tmove( oPane1, pane2 );\n                                                                                              // 4713\n\t\tmove( oPane2, pane1 );\n                                                                                              // 4714\n\n                                                                                                                      // 4715\n\t\t// cleanup objects\n                                                                                                  // 4716\n\t\toPane1 = oPane2 = sizes = null;\n                                                                                     // 4717\n\n                                                                                                                      // 4718\n\t\t// make panes 'visible' again\n                                                                                       // 4719\n\t\tif ($Ps[pane1]) $Ps[pane1].css(_c.visible);\n                                                                         // 4720\n\t\tif ($Ps[pane2]) $Ps[pane2].css(_c.visible);\n                                                                         // 4721\n\n                                                                                                                      // 4722\n\t\t// fix any size discrepancies caused by swap\n                                                                        // 4723\n\t\tresizeAll();\n                                                                                                        // 4724\n\n                                                                                                                      // 4725\n\t\t// run these even if NOT state.initialized\n                                                                          // 4726\n\t\t_runCallbacks(\"onswap_end\", pane1);\n                                                                                 // 4727\n\t\t_runCallbacks(\"onswap_end\", pane2);\n                                                                                 // 4728\n\n                                                                                                                      // 4729\n\t\treturn;\n                                                                                                             // 4730\n\n                                                                                                                      // 4731\n\t\tfunction copy (n) { // n = pane\n                                                                                     // 4732\n\t\t\tvar\n                                                                                                                // 4733\n\t\t\t\t$P\t= $Ps[n]\n                                                                                                       // 4734\n\t\t\t,\t$C\t= $Cs[n]\n                                                                                                      // 4735\n\t\t\t;\n                                                                                                                  // 4736\n\t\t\treturn !$P ? false : {\n                                                                                             // 4737\n\t\t\t\tpane:\t\tn\n                                                                                                          // 4738\n\t\t\t,\tP:\t\t\t$P ? $P[0] : false\n                                                                                          // 4739\n\t\t\t,\tC:\t\t\t$C ? $C[0] : false\n                                                                                          // 4740\n\t\t\t,\tstate:\t\t$.extend(true, {}, state[n])\n                                                                             // 4741\n\t\t\t,\toptions:\t$.extend(true, {}, options[n])\n                                                                          // 4742\n\t\t\t}\n                                                                                                                  // 4743\n\t\t};\n                                                                                                                  // 4744\n\n                                                                                                                      // 4745\n\t\tfunction move (oPane, pane) {\n                                                                                       // 4746\n\t\t\tif (!oPane) return;\n                                                                                                // 4747\n\t\t\tvar\n                                                                                                                // 4748\n\t\t\t\tP\t\t= oPane.P\n                                                                                                      // 4749\n\t\t\t,\tC\t\t= oPane.C\n                                                                                                     // 4750\n\t\t\t,\toldPane = oPane.pane\n                                                                                             // 4751\n\t\t\t,\tc\t\t= _c[pane]\n                                                                                                    // 4752\n\t\t\t//\tsave pane-options that should be retained\n                                                                       // 4753\n\t\t\t,\ts\t\t= $.extend(true, {}, state[pane])\n                                                                             // 4754\n\t\t\t,\to\t\t= options[pane]\n                                                                                               // 4755\n\t\t\t//\tRETAIN side-specific FX Settings - more below\n                                                                   // 4756\n\t\t\t,\tfx\t\t= { resizerCursor: o.resizerCursor }\n                                                                         // 4757\n\t\t\t,\tre, size, pos\n                                                                                                    // 4758\n\t\t\t;\n                                                                                                                  // 4759\n\t\t\t$.each(\"fxName,fxSpeed,fxSettings\".split(\",\"), function (i, k) {\n                                                   // 4760\n\t\t\t\tfx[k +\"_open\"]  = o[k +\"_open\"];\n                                                                                  // 4761\n\t\t\t\tfx[k +\"_close\"] = o[k +\"_close\"];\n                                                                                 // 4762\n\t\t\t\tfx[k +\"_size\"]  = o[k +\"_size\"];\n                                                                                  // 4763\n\t\t\t});\n                                                                                                                // 4764\n\n                                                                                                                      // 4765\n\t\t\t// update object pointers and attributes\n                                                                           // 4766\n\t\t\t$Ps[pane] = $(P)\n                                                                                                   // 4767\n\t\t\t\t.data({\n                                                                                                           // 4768\n\t\t\t\t\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\n                                                  // 4769\n\t\t\t\t,\tlayoutEdge:\t\tpane\n                                                                                               // 4770\n\t\t\t\t})\n                                                                                                                // 4771\n\t\t\t\t.css(_c.hidden)\n                                                                                                   // 4772\n\t\t\t\t.css(c.cssReq)\n                                                                                                    // 4773\n\t\t\t;\n                                                                                                                  // 4774\n\t\t\t$Cs[pane] = C ? $(C) : false;\n                                                                                      // 4775\n\n                                                                                                                      // 4776\n\t\t\t// set options and state\n                                                                                           // 4777\n\t\t\toptions[pane]\t= $.extend(true, {}, oPane.options, fx);\n                                                             // 4778\n\t\t\tstate[pane]\t\t= $.extend(true, {}, oPane.state);\n                                                                    // 4779\n\n                                                                                                                      // 4780\n\t\t\t// change classNames on the pane, eg: ui-layout-pane-east ==> ui-layout-pane-west\n                                  // 4781\n\t\t\tre = new RegExp(o.paneClass +\"-\"+ oldPane, \"g\");\n                                                                   // 4782\n\t\t\tP.className = P.className.replace(re, o.paneClass +\"-\"+ pane);\n                                                     // 4783\n\n                                                                                                                      // 4784\n\t\t\t// ALWAYS regenerate the resizer & toggler elements\n                                                                // 4785\n\t\t\tinitHandles(pane); // create the required resizer & toggler\n                                                        // 4786\n\n                                                                                                                      // 4787\n\t\t\t// if moving to different orientation, then keep 'target' pane size\n                                                // 4788\n\t\t\tif (c.dir != _c[oldPane].dir) {\n                                                                                    // 4789\n\t\t\t\tsize = sizes[pane] || 0;\n                                                                                          // 4790\n\t\t\t\tsetSizeLimits(pane); // update pane-state\n                                                                         // 4791\n\t\t\t\tsize = max(size, state[pane].minSize);\n                                                                            // 4792\n\t\t\t\t// use manualSizePane to disable autoResize - not useful after panes are swapped\n                                  // 4793\n\t\t\t\tmanualSizePane(pane, size, true, true); // true/true = skipCallback/noAnimation\n                                   // 4794\n\t\t\t}\n                                                                                                                  // 4795\n\t\t\telse // move the resizer here\n                                                                                      // 4796\n\t\t\t\t$Rs[pane].css(c.side, sC.inset[c.side] + (state[pane].isVisible ? getPaneSize(pane) : 0));\n                        // 4797\n\n                                                                                                                      // 4798\n\n                                                                                                                      // 4799\n\t\t\t// ADD CLASSNAMES & SLIDE-BINDINGS\n                                                                                 // 4800\n\t\t\tif (oPane.state.isVisible && !s.isVisible)\n                                                                         // 4801\n\t\t\t\tsetAsOpen(pane, true); // true = skipCallback\n                                                                     // 4802\n\t\t\telse {\n                                                                                                             // 4803\n\t\t\t\tsetAsClosed(pane);\n                                                                                                // 4804\n\t\t\t\tbindStartSlidingEvents(pane, true); // will enable events IF option is set\n                                        // 4805\n\t\t\t}\n                                                                                                                  // 4806\n\n                                                                                                                      // 4807\n\t\t\t// DESTROY the object\n                                                                                              // 4808\n\t\t\toPane = null;\n                                                                                                      // 4809\n\t\t};\n                                                                                                                  // 4810\n\t}\n                                                                                                                    // 4811\n\n                                                                                                                      // 4812\n\n                                                                                                                      // 4813\n\t/**\n                                                                                                                  // 4814\n\t* INTERNAL method to sync pin-buttons when pane is opened or closed\n                                                  // 4815\n\t* Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes\n                                          // 4816\n\t*\n                                                                                                                    // 4817\n\t* @see  open(), setAsOpen(), setAsClosed()\n                                                                           // 4818\n\t* @param {string}\tpane   These are the params returned to callbacks by layout()\n                                      // 4819\n\t* @param {boolean}\tdoPin  True means set the pin 'down', False means 'up'\n                                            // 4820\n\t*/\n                                                                                                                   // 4821\n,\tsyncPinBtns = function (pane, doPin) {\n                                                                              // 4822\n\t\tif ($.layout.plugins.buttons)\n                                                                                       // 4823\n\t\t\t$.each(state[pane].pins, function (i, selector) {\n                                                                  // 4824\n\t\t\t\t$.layout.buttons.setPinState(Instance, $(selector), pane, doPin);\n                                                 // 4825\n\t\t\t});\n                                                                                                                // 4826\n\t}\n                                                                                                                    // 4827\n\n                                                                                                                      // 4828\n;\t// END var DECLARATIONS\n                                                                                             // 4829\n\n                                                                                                                      // 4830\n\t/**\n                                                                                                                  // 4831\n\t* Capture keys when enableCursorHotkey - toggle pane if hotkey pressed\n                                               // 4832\n\t*\n                                                                                                                    // 4833\n\t* @see  document.keydown()\n                                                                                           // 4834\n\t*/\n                                                                                                                   // 4835\n\tfunction keyDown (evt) {\n                                                                                             // 4836\n\t\tif (!evt) return true;\n                                                                                              // 4837\n\t\tvar code = evt.keyCode;\n                                                                                             // 4838\n\t\tif (code < 33) return true; // ignore special keys: ENTER, TAB, etc\n                                                 // 4839\n\n                                                                                                                      // 4840\n\t\tvar\n                                                                                                                 // 4841\n\t\t\tPANE = {\n                                                                                                           // 4842\n\t\t\t\t38: \"north\" // Up Cursor\t- $.ui.keyCode.UP\n                                                                        // 4843\n\t\t\t,\t40: \"south\" // Down Cursor\t- $.ui.keyCode.DOWN\n                                                                   // 4844\n\t\t\t,\t37: \"west\"  // Left Cursor\t- $.ui.keyCode.LEFT\n                                                                   // 4845\n\t\t\t,\t39: \"east\"  // Right Cursor\t- $.ui.keyCode.RIGHT\n                                                                 // 4846\n\t\t\t}\n                                                                                                                  // 4847\n\t\t,\tALT\t\t= evt.altKey // no worky!\n                                                                                    // 4848\n\t\t,\tSHIFT\t= evt.shiftKey\n                                                                                              // 4849\n\t\t,\tCTRL\t= evt.ctrlKey\n                                                                                                // 4850\n\t\t,\tCURSOR\t= (CTRL && code >= 37 && code <= 40)\n                                                                       // 4851\n\t\t,\to, k, m, pane\n                                                                                                     // 4852\n\t\t;\n                                                                                                                   // 4853\n\n                                                                                                                      // 4854\n\t\tif (CURSOR && options[PANE[code]].enableCursorHotkey) // valid cursor-hotkey\n                                        // 4855\n\t\t\tpane = PANE[code];\n                                                                                                 // 4856\n\t\telse if (CTRL || SHIFT) // check to see if this matches a custom-hotkey\n                                             // 4857\n\t\t\t$.each(_c.borderPanes, function (i, p) { // loop each pane to check its hotkey\n                                     // 4858\n\t\t\t\to = options[p];\n                                                                                                   // 4859\n\t\t\t\tk = o.customHotkey;\n                                                                                               // 4860\n\t\t\t\tm = o.customHotkeyModifier; // if missing or invalid, treated as \"CTRL+SHIFT\"\n                                     // 4861\n\t\t\t\tif ((SHIFT && m==\"SHIFT\") || (CTRL && m==\"CTRL\") || (CTRL && SHIFT)) { // Modifier matches\n                        // 4862\n\t\t\t\t\tif (k && code === (isNaN(k) || k <= 9 ? k.toUpperCase().charCodeAt(0) : k)) { // Key matches\n                     // 4863\n\t\t\t\t\t\tpane = p;\n                                                                                                       // 4864\n\t\t\t\t\t\treturn false; // BREAK\n                                                                                          // 4865\n\t\t\t\t\t}\n                                                                                                                // 4866\n\t\t\t\t}\n                                                                                                                 // 4867\n\t\t\t});\n                                                                                                                // 4868\n\n                                                                                                                      // 4869\n\t\t// validate pane\n                                                                                                    // 4870\n\t\tif (!pane || !$Ps[pane] || !options[pane].closable || state[pane].isHidden)\n                                         // 4871\n\t\t\treturn true;\n                                                                                                       // 4872\n\n                                                                                                                      // 4873\n\t\ttoggle(pane);\n                                                                                                       // 4874\n\n                                                                                                                      // 4875\n\t\tevt.stopPropagation();\n                                                                                              // 4876\n\t\tevt.returnValue = false; // CANCEL key\n                                                                              // 4877\n\t\treturn false;\n                                                                                                       // 4878\n\t};\n                                                                                                                   // 4879\n\n                                                                                                                      // 4880\n\n                                                                                                                      // 4881\n/*\n                                                                                                                    // 4882\n * ######################################\n                                                                             // 4883\n *\tUTILITY METHODS\n                                                                                                    // 4884\n *\tcalled externally or by initButtons\n                                                                                // 4885\n * ######################################\n                                                                             // 4886\n */\n                                                                                                                   // 4887\n\n                                                                                                                      // 4888\n\t/**\n                                                                                                                  // 4889\n\t* Change/reset a pane overflow setting & zIndex to allow popups/drop-downs to work\n                                   // 4890\n\t*\n                                                                                                                    // 4891\n\t* @param {Object=}   [el]\t(optional) Can also be 'bound' to a click, mouseOver, or other event\n                       // 4892\n\t*/\n                                                                                                                   // 4893\n\tfunction allowOverflow (el) {\n                                                                                        // 4894\n\t\tif (!isInitialized()) return;\n                                                                                       // 4895\n\t\tif (this && this.tagName) el = this; // BOUND to element\n                                                            // 4896\n\t\tvar $P;\n                                                                                                             // 4897\n\t\tif (isStr(el))\n                                                                                                      // 4898\n\t\t\t$P = $Ps[el];\n                                                                                                      // 4899\n\t\telse if ($(el).data(\"layoutRole\"))\n                                                                                  // 4900\n\t\t\t$P = $(el);\n                                                                                                        // 4901\n\t\telse\n                                                                                                                // 4902\n\t\t\t$(el).parents().each(function(){\n                                                                                   // 4903\n\t\t\t\tif ($(this).data(\"layoutRole\")) {\n                                                                                 // 4904\n\t\t\t\t\t$P = $(this);\n                                                                                                    // 4905\n\t\t\t\t\treturn false; // BREAK\n                                                                                           // 4906\n\t\t\t\t}\n                                                                                                                 // 4907\n\t\t\t});\n                                                                                                                // 4908\n\t\tif (!$P || !$P.length) return; // INVALID\n                                                                           // 4909\n\n                                                                                                                      // 4910\n\t\tvar\n                                                                                                                 // 4911\n\t\t\tpane\t= $P.data(\"layoutEdge\")\n                                                                                       // 4912\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 4913\n\t\t;\n                                                                                                                   // 4914\n\n                                                                                                                      // 4915\n\t\t// if pane is already raised, then reset it before doing it again!\n                                                  // 4916\n\t\t// this would happen if allowOverflow is attached to BOTH the pane and an element \n                                  // 4917\n\t\tif (s.cssSaved)\n                                                                                                     // 4918\n\t\t\tresetOverflow(pane); // reset previous CSS before continuing\n                                                       // 4919\n\n                                                                                                                      // 4920\n\t\t// if pane is raised by sliding or resizing, or its closed, then abort\n                                              // 4921\n\t\tif (s.isSliding || s.isResizing || s.isClosed) {\n                                                                    // 4922\n\t\t\ts.cssSaved = false;\n                                                                                                // 4923\n\t\t\treturn;\n                                                                                                            // 4924\n\t\t}\n                                                                                                                   // 4925\n\n                                                                                                                      // 4926\n\t\tvar\n                                                                                                                 // 4927\n\t\t\tnewCSS\t= { zIndex: (options.zIndexes.resizer_normal + 1) }\n                                                         // 4928\n\t\t,\tcurCSS\t= {}\n                                                                                                       // 4929\n\t\t,\tof\t\t= $P.css(\"overflow\")\n                                                                                          // 4930\n\t\t,\tofX\t\t= $P.css(\"overflowX\")\n                                                                                        // 4931\n\t\t,\tofY\t\t= $P.css(\"overflowY\")\n                                                                                        // 4932\n\t\t;\n                                                                                                                   // 4933\n\t\t// determine which, if any, overflow settings need to be changed\n                                                    // 4934\n\t\tif (of != \"visible\") {\n                                                                                              // 4935\n\t\t\tcurCSS.overflow = of;\n                                                                                              // 4936\n\t\t\tnewCSS.overflow = \"visible\";\n                                                                                       // 4937\n\t\t}\n                                                                                                                   // 4938\n\t\tif (ofX && !ofX.match(/(visible|auto)/)) {\n                                                                          // 4939\n\t\t\tcurCSS.overflowX = ofX;\n                                                                                            // 4940\n\t\t\tnewCSS.overflowX = \"visible\";\n                                                                                      // 4941\n\t\t}\n                                                                                                                   // 4942\n\t\tif (ofY && !ofY.match(/(visible|auto)/)) {\n                                                                          // 4943\n\t\t\tcurCSS.overflowY = ofX;\n                                                                                            // 4944\n\t\t\tnewCSS.overflowY = \"visible\";\n                                                                                      // 4945\n\t\t}\n                                                                                                                   // 4946\n\n                                                                                                                      // 4947\n\t\t// save the current overflow settings - even if blank!\n                                                              // 4948\n\t\ts.cssSaved = curCSS;\n                                                                                                // 4949\n\n                                                                                                                      // 4950\n\t\t// apply new CSS to raise zIndex and, if necessary, make overflow 'visible'\n                                         // 4951\n\t\t$P.css( newCSS );\n                                                                                                   // 4952\n\n                                                                                                                      // 4953\n\t\t// make sure the zIndex of all other panes is normal\n                                                                // 4954\n\t\t$.each(_c.allPanes, function(i, p) {\n                                                                                // 4955\n\t\t\tif (p != pane) resetOverflow(p);\n                                                                                   // 4956\n\t\t});\n                                                                                                                 // 4957\n\n                                                                                                                      // 4958\n\t};\n                                                                                                                   // 4959\n\t/**\n                                                                                                                  // 4960\n\t* @param {Object=}   [el]\t(optional) Can also be 'bound' to a click, mouseOver, or other event\n                       // 4961\n\t*/\n                                                                                                                   // 4962\n\tfunction resetOverflow (el) {\n                                                                                        // 4963\n\t\tif (!isInitialized()) return;\n                                                                                       // 4964\n\t\tif (this && this.tagName) el = this; // BOUND to element\n                                                            // 4965\n\t\tvar $P;\n                                                                                                             // 4966\n\t\tif (isStr(el))\n                                                                                                      // 4967\n\t\t\t$P = $Ps[el];\n                                                                                                      // 4968\n\t\telse if ($(el).data(\"layoutRole\"))\n                                                                                  // 4969\n\t\t\t$P = $(el);\n                                                                                                        // 4970\n\t\telse\n                                                                                                                // 4971\n\t\t\t$(el).parents().each(function(){\n                                                                                   // 4972\n\t\t\t\tif ($(this).data(\"layoutRole\")) {\n                                                                                 // 4973\n\t\t\t\t\t$P = $(this);\n                                                                                                    // 4974\n\t\t\t\t\treturn false; // BREAK\n                                                                                           // 4975\n\t\t\t\t}\n                                                                                                                 // 4976\n\t\t\t});\n                                                                                                                // 4977\n\t\tif (!$P || !$P.length) return; // INVALID\n                                                                           // 4978\n\n                                                                                                                      // 4979\n\t\tvar\n                                                                                                                 // 4980\n\t\t\tpane\t= $P.data(\"layoutEdge\")\n                                                                                       // 4981\n\t\t,\ts\t\t= state[pane]\n                                                                                                  // 4982\n\t\t,\tCSS\t\t= s.cssSaved || {}\n                                                                                           // 4983\n\t\t;\n                                                                                                                   // 4984\n\t\t// reset the zIndex\n                                                                                                 // 4985\n\t\tif (!s.isSliding && !s.isResizing)\n                                                                                  // 4986\n\t\t\t$P.css(\"zIndex\", options.zIndexes.pane_normal);\n                                                                    // 4987\n\n                                                                                                                      // 4988\n\t\t// reset Overflow - if necessary\n                                                                                    // 4989\n\t\t$P.css( CSS );\n                                                                                                      // 4990\n\n                                                                                                                      // 4991\n\t\t// clear var\n                                                                                                        // 4992\n\t\ts.cssSaved = false;\n                                                                                                 // 4993\n\t};\n                                                                                                                   // 4994\n\n                                                                                                                      // 4995\n/*\n                                                                                                                    // 4996\n * #####################\n                                                                                              // 4997\n * CREATE/RETURN LAYOUT\n                                                                                               // 4998\n * #####################\n                                                                                              // 4999\n */\n                                                                                                                   // 5000\n\n                                                                                                                      // 5001\n\t// validate that container exists\n                                                                                    // 5002\n\tvar $N = $(this).eq(0); // FIRST matching Container element\n                                                          // 5003\n\tif (!$N.length) {\n                                                                                                    // 5004\n\t\treturn _log( options.errors.containerMissing );\n                                                                     // 5005\n\t};\n                                                                                                                   // 5006\n\n                                                                                                                      // 5007\n\t// Users retrieve Instance of a layout with: $N.layout() OR $N.data(\"layout\")\n                                        // 5008\n\t// return the Instance-pointer if layout has already been initialized\n                                                // 5009\n\tif ($N.data(\"layoutContainer\") && $N.data(\"layout\"))\n                                                                 // 5010\n\t\treturn $N.data(\"layout\"); // cached pointer\n                                                                         // 5011\n\n                                                                                                                      // 5012\n\t// init global vars\n                                                                                                  // 5013\n\tvar \n                                                                                                                 // 5014\n\t\t$Ps\t= {}\t// Panes x5\t\t- set in initPanes()\n                                                                          // 5015\n\t,\t$Cs\t= {}\t// Content x5\t- set in initPanes()\n                                                                        // 5016\n\t,\t$Rs\t= {}\t// Resizers x4\t- set in initHandles()\n                                                                     // 5017\n\t,\t$Ts\t= {}\t// Togglers x4\t- set in initHandles()\n                                                                     // 5018\n\t,\t$Ms\t= $([])\t// Masks - up to 2 masks per pane (IFRAME + DIV)\n                                                       // 5019\n\t//\taliases for code brevity\n                                                                                          // 5020\n\t,\tsC\t= state.container // alias for easy access to 'container dimensions'\n                                            // 5021\n\t,\tsID\t= state.id // alias for unique layout ID/namespace - eg: \"layout435\"\n                                           // 5022\n\t;\n                                                                                                                    // 5023\n\n                                                                                                                      // 5024\n\t// create Instance object to expose data & option Properties, and primary action Methods\n                             // 5025\n\tvar Instance = {\n                                                                                                     // 5026\n\t//\tlayout data\n                                                                                                       // 5027\n\t\toptions:\t\t\toptions\t\t\t// property - options hash\n                                                                     // 5028\n\t,\tstate:\t\t\t\tstate\t\t\t// property - dimensions hash\n                                                                    // 5029\n\t//\tobject pointers\n                                                                                                   // 5030\n\t,\tcontainer:\t\t\t$N\t\t\t\t// property - object pointers for layout container\n                                              // 5031\n\t,\tpanes:\t\t\t\t$Ps\t\t\t\t// property - object pointers for ALL Panes: panes.north, panes.center\n                            // 5032\n\t,\tcontents:\t\t\t$Cs\t\t\t\t// property - object pointers for ALL Content: contents.north, contents.center\n                  // 5033\n\t,\tresizers:\t\t\t$Rs\t\t\t\t// property - object pointers for ALL Resizers, eg: resizers.north\n                              // 5034\n\t,\ttogglers:\t\t\t$Ts\t\t\t\t// property - object pointers for ALL Togglers, eg: togglers.north\n                              // 5035\n\t//\tborder-pane open/close\n                                                                                            // 5036\n\t,\thide:\t\t\t\thide\t\t\t// method - ditto\n                                                                                  // 5037\n\t,\tshow:\t\t\t\tshow\t\t\t// method - ditto\n                                                                                  // 5038\n\t,\ttoggle:\t\t\t\ttoggle\t\t\t// method - pass a 'pane' (\"north\", \"west\", etc)\n                                               // 5039\n\t,\topen:\t\t\t\topen\t\t\t// method - ditto\n                                                                                  // 5040\n\t,\tclose:\t\t\t\tclose\t\t\t// method - ditto\n                                                                                // 5041\n\t,\tslideOpen:\t\t\tslideOpen\t\t// method - ditto\n                                                                          // 5042\n\t,\tslideClose:\t\t\tslideClose\t\t// method - ditto\n                                                                        // 5043\n\t,\tslideToggle:\t\tslideToggle\t\t// method - ditto\n                                                                       // 5044\n\t//\tpane actions\n                                                                                                      // 5045\n\t,\tsetSizeLimits:\t\tsetSizeLimits\t// method - pass a 'pane' - update state min/max data\n                                // 5046\n\t,\t_sizePane:\t\t\tsizePane\t\t// method -intended for user by plugins only!\n                                               // 5047\n\t,\tsizePane:\t\t\tmanualSizePane\t// method - pass a 'pane' AND an 'outer-size' in pixels or percent, or 'auto'\n           // 5048\n\t,\tsizeContent:\t\tsizeContent\t\t// method - pass a 'pane'\n                                                               // 5049\n\t,\tswapPanes:\t\t\tswapPanes\t\t// method - pass TWO 'panes' - will swap them\n                                              // 5050\n\t,\tshowMasks:\t\t\tshowMasks\t\t// method - pass a 'pane' OR list of panes - default = all panes with mask option set\n      // 5051\n\t,\thideMasks:\t\t\thideMasks\t\t// method - ditto'\n                                                                         // 5052\n\t//\tpane element methods\n                                                                                              // 5053\n\t,\tinitContent:\t\tinitContent\t\t// method - ditto\n                                                                       // 5054\n\t,\taddPane:\t\t\taddPane\t\t\t// method - pass a 'pane'\n                                                                     // 5055\n\t,\tremovePane:\t\t\tremovePane\t\t// method - pass a 'pane' to remove from layout, add 'true' to delete the pane-elem\n      // 5056\n\t,\tcreateChildren:\t\tcreateChildren\t// method - pass a 'pane' and (optional) layout-options (OVERRIDES options[pane].children\n\t,\trefreshChildren:\trefreshChildren\t// method - pass a 'pane' and a layout-instance\n                                   // 5058\n\t//\tspecial pane option setting\n                                                                                       // 5059\n\t,\tenableClosable:\t\tenableClosable\t// method - pass a 'pane'\n                                                          // 5060\n\t,\tdisableClosable:\tdisableClosable\t// method - ditto\n                                                                 // 5061\n\t,\tenableSlidable:\t\tenableSlidable\t// method - ditto\n                                                                  // 5062\n\t,\tdisableSlidable:\tdisableSlidable\t// method - ditto\n                                                                 // 5063\n\t,\tenableResizable:\tenableResizable\t// method - ditto\n                                                                 // 5064\n\t,\tdisableResizable:\tdisableResizable// method - ditto\n                                                                // 5065\n\t//\tutility methods for panes\n                                                                                         // 5066\n\t,\tallowOverflow:\t\tallowOverflow\t// utility - pass calling element (this)\n                                             // 5067\n\t,\tresetOverflow:\t\tresetOverflow\t// utility - ditto\n                                                                   // 5068\n\t//\tlayout control\n                                                                                                    // 5069\n\t,\tdestroy:\t\t\tdestroy\t\t\t// method - no parameters\n                                                                     // 5070\n\t,\tinitPanes:\t\t\tisInitialized\t// method - no parameters\n                                                               // 5071\n\t,\tresizeAll:\t\t\tresizeAll\t\t// method - no parameters\n                                                                  // 5072\n\t//\tcallback triggering\n                                                                                               // 5073\n\t,\trunCallbacks:\t\t_runCallbacks\t// method - pass evtName & pane (if a pane-event), eg: trigger(\"onopen\", \"west\")\n      // 5074\n\t//\talias collections of options, state and children - created in addPane and extended elsewhere\n                      // 5075\n\t,\thasParentLayout:\tfalse\t\t\t// set by initContainer()\n                                                                 // 5076\n\t,\tchildren:\t\t\tchildren\t\t// pointers to child-layouts, eg: Instance.children.west.layoutName\n                          // 5077\n\t,\tnorth:\t\t\t\tfalse\t\t\t// alias group: { name: pane, pane: $Ps[pane], options: options[pane], state: state[pane], children: children[pane] }\n\t,\tsouth:\t\t\t\tfalse\t\t\t// ditto\n                                                                                         // 5079\n\t,\twest:\t\t\t\tfalse\t\t\t// ditto\n                                                                                          // 5080\n\t,\teast:\t\t\t\tfalse\t\t\t// ditto\n                                                                                          // 5081\n\t,\tcenter:\t\t\t\tfalse\t\t\t// ditto\n                                                                                        // 5082\n\t};\n                                                                                                                   // 5083\n\n                                                                                                                      // 5084\n\t// create the border layout NOW\n                                                                                      // 5085\n\tif (_create() === 'cancel') // onload_start callback returned false to CANCEL layout creation\n                        // 5086\n\t\treturn null;\n                                                                                                        // 5087\n\telse // true OR false -- if layout-elements did NOT init (hidden or do not exist), can auto-init later\n               // 5088\n\t\treturn Instance; // return the Instance object\n                                                                      // 5089\n\n                                                                                                                      // 5090\n}\n                                                                                                                     // 5091\n\n                                                                                                                      // 5092\n\n                                                                                                                      // 5093\n})( jQuery );\n                                                                                                         // 5094\n// END Layout - keep internal vars internal!\n                                                                          // 5095\n\n                                                                                                                      // 5096\n\n                                                                                                                      // 5097\n\n                                                                                                                      // 5098\n// START Plugins - shared wrapper, no global vars\n                                                                     // 5099\n(function ($) {\n                                                                                                       // 5100\n\n                                                                                                                      // 5101\n\n                                                                                                                      // 5102\n/**\n                                                                                                                   // 5103\n * jquery.layout.state 1.0\n                                                                                            // 5104\n * $Date: 2011-07-16 08:00:00 (Sat, 16 July 2011) $\n                                                                   // 5105\n *\n                                                                                                                    // 5106\n * Copyright (c) 2012 \n                                                                                                // 5107\n *   Kevin Dalman (http://allpro.net)\n                                                                                 // 5108\n *\n                                                                                                                    // 5109\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\n                                                 // 5110\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\n                                             // 5111\n *\n                                                                                                                    // 5112\n * @requires: UI Layout 1.3.0.rc30.1 or higher\n                                                                        // 5113\n * @requires: $.ui.cookie (above)\n                                                                                     // 5114\n *\n                                                                                                                    // 5115\n * @see: http://groups.google.com/group/jquery-ui-layout\n                                                              // 5116\n */\n                                                                                                                   // 5117\n/*\n                                                                                                                    // 5118\n *\tState-management options stored in options.stateManagement, which includes a .cookie hash\n                          // 5119\n *\tDefault options saves ALL KEYS for ALL PANES, ie: pane.size, pane.isClosed, pane.isHidden\n                          // 5120\n *\n                                                                                                                    // 5121\n *\t// STATE/COOKIE OPTIONS\n                                                                                            // 5122\n *\t@example $(el).layout({\n                                                                                            // 5123\n\t\t\t\tstateManagement: {\n                                                                                                // 5124\n\t\t\t\t\tenabled:\ttrue\n                                                                                                    // 5125\n\t\t\t\t,\tstateKeys:\t\"east.size,west.size,east.isClosed,west.isClosed\"\n                                                    // 5126\n\t\t\t\t,\tcookie:\t\t{ name: \"appLayout\", path: \"/\" }\n                                                                       // 5127\n\t\t\t\t}\n                                                                                                                 // 5128\n\t\t\t})\n                                                                                                                 // 5129\n *\t@example $(el).layout({ stateManagement__enabled: true }) // enable auto-state-management using cookies\n            // 5130\n *\t@example $(el).layout({ stateManagement__cookie: { name: \"appLayout\", path: \"/\" } })\n                               // 5131\n *\t@example $(el).layout({ stateManagement__cookie__name: \"appLayout\", stateManagement__cookie__path: \"/\" })\n          // 5132\n *\n                                                                                                                    // 5133\n *\t// STATE/COOKIE METHODS\n                                                                                            // 5134\n *\t@example myLayout.saveCookie( \"west.isClosed,north.size,south.isHidden\", {expires: 7} );\n                           // 5135\n *\t@example myLayout.loadCookie();\n                                                                                    // 5136\n *\t@example myLayout.deleteCookie();\n                                                                                  // 5137\n *\t@example var JSON = myLayout.readState();\t// CURRENT Layout State\n                                                  // 5138\n *\t@example var JSON = myLayout.readCookie();\t// SAVED Layout State (from cookie)\n                                     // 5139\n *\t@example var JSON = myLayout.state.stateData;\t// LAST LOADED Layout State (cookie saved in layout.state hash)\n      // 5140\n *\n                                                                                                                    // 5141\n *\tCUSTOM STATE-MANAGEMENT (eg, saved in a database)\n                                                                  // 5142\n *\t@example var JSON = myLayout.readState( \"west.isClosed,north.size,south.isHidden\" );\n                               // 5143\n *\t@example myLayout.loadState( JSON );\n                                                                               // 5144\n */\n                                                                                                                   // 5145\n\n                                                                                                                      // 5146\n/**\n                                                                                                                   // 5147\n *\tUI COOKIE UTILITY\n                                                                                                  // 5148\n *\n                                                                                                                    // 5149\n *\tA $.cookie OR $.ui.cookie namespace *should be standard*, but until then...\n                                        // 5150\n *\tThis creates $.ui.cookie so Layout does not need the cookie.jquery.js plugin\n                                       // 5151\n *\tNOTE: This utility is REQUIRED by the layout.state plugin\n                                                          // 5152\n *\n                                                                                                                    // 5153\n *\tCookie methods in Layout are created as part of State Management \n                                                  // 5154\n */\n                                                                                                                   // 5155\nif (!$.ui) $.ui = {};\n                                                                                                 // 5156\n$.ui.cookie = {\n                                                                                                       // 5157\n\n                                                                                                                      // 5158\n\t// cookieEnabled is not in DOM specs, but DOES works in all browsers,including IE6\n                                   // 5159\n\tacceptsCookies: !!navigator.cookieEnabled\n                                                                            // 5160\n\n                                                                                                                      // 5161\n,\tread: function (name) {\n                                                                                             // 5162\n\t\tvar\tc\t\t= document.cookie\n                                                                                            // 5163\n\t\t,\tcs\t\t= c ? c.split(';') : []\n                                                                                       // 5164\n\t\t,\tpair\t// loop var\n                                                                                                  // 5165\n\t\t;\n                                                                                                                   // 5166\n\t\tfor (var i=0, n=cs.length; i < n; i++) {\n                                                                            // 5167\n\t\t\tpair = $.trim(cs[i]).split('='); // name=value pair\n                                                                // 5168\n\t\t\tif (pair[0] == name) // found the layout cookie\n                                                                    // 5169\n\t\t\t\treturn decodeURIComponent(pair[1]);\n                                                                               // 5170\n\t\t}\n                                                                                                                   // 5171\n\t\treturn null;\n                                                                                                        // 5172\n\t}\n                                                                                                                    // 5173\n\n                                                                                                                      // 5174\n,\twrite: function (name, val, cookieOpts) {\n                                                                           // 5175\n\t\tvar\tparams\t= \"\"\n                                                                                                     // 5176\n\t\t,\tdate\t= \"\"\n                                                                                                         // 5177\n\t\t,\tclear\t= false\n                                                                                                     // 5178\n\t\t,\to\t\t= cookieOpts || {}\n                                                                                             // 5179\n\t\t,\tx\t\t= o.expires  || null\n                                                                                           // 5180\n\t\t,\tt\t\t= $.type(x)\n                                                                                                    // 5181\n\t\t;\n                                                                                                                   // 5182\n\t\tif (t === \"date\")\n                                                                                                   // 5183\n\t\t\tdate = x;\n                                                                                                          // 5184\n\t\telse if (t === \"string\" && x > 0) {\n                                                                                 // 5185\n\t\t\tx = parseInt(x,10);\n                                                                                                // 5186\n\t\t\tt = \"number\";\n                                                                                                      // 5187\n\t\t}\n                                                                                                                   // 5188\n\t\tif (t === \"number\") {\n                                                                                               // 5189\n\t\t\tdate = new Date();\n                                                                                                 // 5190\n\t\t\tif (x > 0)\n                                                                                                         // 5191\n\t\t\t\tdate.setDate(date.getDate() + x);\n                                                                                 // 5192\n\t\t\telse {\n                                                                                                             // 5193\n\t\t\t\tdate.setFullYear(1970);\n                                                                                           // 5194\n\t\t\t\tclear = true;\n                                                                                                     // 5195\n\t\t\t}\n                                                                                                                  // 5196\n\t\t}\n                                                                                                                   // 5197\n\t\tif (date)\t\tparams += \";expires=\"+ date.toUTCString();\n                                                               // 5198\n\t\tif (o.path)\t\tparams += \";path=\"+ o.path;\n                                                                            // 5199\n\t\tif (o.domain)\tparams += \";domain=\"+ o.domain;\n                                                                       // 5200\n\t\tif (o.secure)\tparams += \";secure\";\n                                                                                  // 5201\n\t\tdocument.cookie = name +\"=\"+ (clear ? \"\" : encodeURIComponent( val )) + params; // write or clear cookie\n            // 5202\n\t}\n                                                                                                                    // 5203\n\n                                                                                                                      // 5204\n,\tclear: function (name) {\n                                                                                            // 5205\n\t\t$.ui.cookie.write(name, \"\", {expires: -1});\n                                                                         // 5206\n\t}\n                                                                                                                    // 5207\n\n                                                                                                                      // 5208\n};\n                                                                                                                    // 5209\n// if cookie.jquery.js is not loaded, create an alias to replicate it\n                                                 // 5210\n// this may be useful to other plugins or code dependent on that plugin\n                                               // 5211\nif (!$.cookie) $.cookie = function (k, v, o) {\n                                                                        // 5212\n\tvar C = $.ui.cookie;\n                                                                                                 // 5213\n\tif (v === null)\n                                                                                                      // 5214\n\t\tC.clear(k);\n                                                                                                         // 5215\n\telse if (v === undefined)\n                                                                                            // 5216\n\t\treturn C.read(k);\n                                                                                                   // 5217\n\telse\n                                                                                                                 // 5218\n\t\tC.write(k, v, o);\n                                                                                                   // 5219\n};\n                                                                                                                    // 5220\n\n                                                                                                                      // 5221\n\n                                                                                                                      // 5222\n// tell Layout that the state plugin is available\n                                                                     // 5223\n$.layout.plugins.stateManagement = true;\n                                                                              // 5224\n\n                                                                                                                      // 5225\n//\tAdd State-Management options to layout.defaults\n                                                                    // 5226\n$.layout.config.optionRootKeys.push(\"stateManagement\");\n                                                               // 5227\n$.layout.defaults.stateManagement = {\n                                                                                 // 5228\n\tenabled:\t\tfalse\t// true = enable state-management, even if not using cookies\n                                         // 5229\n,\tautoSave:\t\ttrue\t// Save a state-cookie when page exits?\n                                                             // 5230\n,\tautoLoad:\t\ttrue\t// Load the state-cookie when Layout inits?\n                                                         // 5231\n,\tanimateLoad:\ttrue\t// animate panes when loading state into an active layout\n                                         // 5232\n,\tincludeChildren: true\t// recurse into child layouts to include their state as well\n                                  // 5233\n\t// List state-data to save - must be pane-specific\n                                                                   // 5234\n,\tstateKeys:\t\"north.size,south.size,east.size,west.size,\"+\n                                                            // 5235\n\t\t\t\t\"north.isClosed,south.isClosed,east.isClosed,west.isClosed,\"+\n                                                     // 5236\n\t\t\t\t\"north.isHidden,south.isHidden,east.isHidden,west.isHidden\"\n                                                       // 5237\n,\tcookie: {\n                                                                                                           // 5238\n\t\tname:\t\"\"\t// If not specified, will use Layout.name, else just \"Layout\"\n                                              // 5239\n\t,\tdomain:\t\"\"\t// blank = current domain\n                                                                               // 5240\n\t,\tpath:\t\"\"\t// blank = current page, \"/\" = entire website\n                                                             // 5241\n\t,\texpires: \"\"\t// 'days' to keep cookie - leave blank for 'session cookie'\n                                            // 5242\n\t,\tsecure:\tfalse\n                                                                                                      // 5243\n\t}\n                                                                                                                    // 5244\n};\n                                                                                                                    // 5245\n// Set stateManagement as a layout-option, NOT a pane-option\n                                                          // 5246\n$.layout.optionsMap.layout.push(\"stateManagement\");\n                                                                   // 5247\n\n                                                                                                                      // 5248\n/*\n                                                                                                                    // 5249\n *\tState Management methods\n                                                                                           // 5250\n */\n                                                                                                                   // 5251\n$.layout.state = {\n                                                                                                    // 5252\n\n                                                                                                                      // 5253\n\t/**\n                                                                                                                  // 5254\n\t * Get the current layout state and save it to a cookie\n                                                              // 5255\n\t *\n                                                                                                                   // 5256\n\t * myLayout.saveCookie( keys, cookieOpts )\n                                                                           // 5257\n\t *\n                                                                                                                   // 5258\n\t * @param {Object}\t\t\tinst\n                                                                                            // 5259\n\t * @param {(string|Array)=}\tkeys\n                                                                                     // 5260\n\t * @param {Object=}\t\t\tcookieOpts\n                                                                                     // 5261\n\t */\n                                                                                                                  // 5262\n\tsaveCookie: function (inst, keys, cookieOpts) {\n                                                                      // 5263\n\t\tvar o\t= inst.options\n                                                                                                // 5264\n\t\t,\tsm\t= o.stateManagement\n                                                                                            // 5265\n\t\t,\toC\t= $.extend(true, {}, sm.cookie, cookieOpts || null)\n                                                            // 5266\n\t\t,\tdata = inst.state.stateData = inst.readState( keys || sm.stateKeys ) // read current panes-state\n                  // 5267\n\t\t;\n                                                                                                                   // 5268\n\t\t$.ui.cookie.write( oC.name || o.name || \"Layout\", $.layout.state.encodeJSON(data), oC );\n                            // 5269\n\t\treturn $.extend(true, {}, data); // return COPY of state.stateData data\n                                             // 5270\n\t}\n                                                                                                                    // 5271\n\n                                                                                                                      // 5272\n\t/**\n                                                                                                                  // 5273\n\t * Remove the state cookie\n                                                                                           // 5274\n\t *\n                                                                                                                   // 5275\n\t * @param {Object}\tinst\n                                                                                              // 5276\n\t */\n                                                                                                                  // 5277\n,\tdeleteCookie: function (inst) {\n                                                                                     // 5278\n\t\tvar o = inst.options;\n                                                                                               // 5279\n\t\t$.ui.cookie.clear( o.stateManagement.cookie.name || o.name || \"Layout\" );\n                                           // 5280\n\t}\n                                                                                                                    // 5281\n\n                                                                                                                      // 5282\n\t/**\n                                                                                                                  // 5283\n\t * Read & return data from the cookie - as JSON\n                                                                      // 5284\n\t *\n                                                                                                                   // 5285\n\t * @param {Object}\tinst\n                                                                                              // 5286\n\t */\n                                                                                                                  // 5287\n,\treadCookie: function (inst) {\n                                                                                       // 5288\n\t\tvar o = inst.options;\n                                                                                               // 5289\n\t\tvar c = $.ui.cookie.read( o.stateManagement.cookie.name || o.name || \"Layout\" );\n                                    // 5290\n\t\t// convert cookie string back to a hash and return it\n                                                               // 5291\n\t\treturn c ? $.layout.state.decodeJSON(c) : {};\n                                                                       // 5292\n\t}\n                                                                                                                    // 5293\n\n                                                                                                                      // 5294\n\t/**\n                                                                                                                  // 5295\n\t * Get data from the cookie and USE IT to loadState\n                                                                  // 5296\n\t *\n                                                                                                                   // 5297\n\t * @param {Object}\tinst\n                                                                                              // 5298\n\t */\n                                                                                                                  // 5299\n,\tloadCookie: function (inst) {\n                                                                                       // 5300\n\t\tvar c = $.layout.state.readCookie(inst); // READ the cookie\n                                                         // 5301\n\t\tif (c) {\n                                                                                                            // 5302\n\t\t\tinst.state.stateData = $.extend(true, {}, c); // SET state.stateData\n                                               // 5303\n\t\t\tinst.loadState(c); // LOAD the retrieved state\n                                                                     // 5304\n\t\t}\n                                                                                                                   // 5305\n\t\treturn c;\n                                                                                                           // 5306\n\t}\n                                                                                                                    // 5307\n\n                                                                                                                      // 5308\n\t/**\n                                                                                                                  // 5309\n\t * Update layout options from the cookie, if one exists\n                                                              // 5310\n\t *\n                                                                                                                   // 5311\n\t * @param {Object}\t\tinst\n                                                                                             // 5312\n\t * @param {Object=}\t\tstateData\n                                                                                       // 5313\n\t * @param {boolean=}\tanimate\n                                                                                         // 5314\n\t */\n                                                                                                                  // 5315\n,\tloadState: function (inst, data, opts) {\n                                                                            // 5316\n\t\tif (!$.isPlainObject( data ) || $.isEmptyObject( data )) return;\n                                                    // 5317\n\n                                                                                                                      // 5318\n\t\t// normalize data & cache in the state object\n                                                                       // 5319\n\t\tdata = inst.state.stateData = $.layout.transformData( data ); // panes = default subkey\n                             // 5320\n\n                                                                                                                      // 5321\n\t\t// add missing/default state-restore options\n                                                                        // 5322\n\t\tvar smo = inst.options.stateManagement;\n                                                                             // 5323\n\t\topts = $.extend({\n                                                                                                   // 5324\n\t\t\tanimateLoad:\t\tfalse //smo.animateLoad\n                                                                              // 5325\n\t\t,\tincludeChildren:\tsmo.includeChildren\n                                                                              // 5326\n\t\t}, opts );\n                                                                                                          // 5327\n\n                                                                                                                      // 5328\n\t\tif (!inst.state.initialized) {\n                                                                                      // 5329\n\t\t\t/*\n                                                                                                                 // 5330\n\t\t\t *\tlayout NOT initialized, so just update its options\n                                                              // 5331\n\t\t\t */\n                                                                                                                // 5332\n\t\t\t// MUST remove pane.children keys before applying to options\n                                                       // 5333\n\t\t\t// use a copy so we don't remove keys from original data\n                                                           // 5334\n\t\t\tvar o = $.extend(true, {}, data);\n                                                                                  // 5335\n\t\t\t//delete o.center; // center has no state-data - only children\n                                                     // 5336\n\t\t\t$.each($.layout.config.allPanes, function (idx, pane) {\n                                                            // 5337\n\t\t\t\tif (o[pane]) delete o[pane].children;\t\t   \n                                                                        // 5338\n\t\t\t });\n                                                                                                               // 5339\n\t\t\t// update CURRENT layout-options with saved state data\n                                                             // 5340\n\t\t\t$.extend(true, inst.options, o);\n                                                                                   // 5341\n\t\t}\n                                                                                                                   // 5342\n\t\telse {\n                                                                                                              // 5343\n\t\t\t/*\n                                                                                                                 // 5344\n\t\t\t *\tlayout already initialized, so modify layout's configuration\n                                                    // 5345\n\t\t\t */\n                                                                                                                // 5346\n\t\t\tvar noAnimate = !opts.animateLoad\n                                                                                  // 5347\n\t\t\t,\to, c, h, state, open\n                                                                                             // 5348\n\t\t\t;\n                                                                                                                  // 5349\n\t\t\t$.each($.layout.config.borderPanes, function (idx, pane) {\n                                                         // 5350\n\t\t\t\to = data[ pane ];\n                                                                                                 // 5351\n\t\t\t\tif (!$.isPlainObject( o )) return; // no key, skip pane\n                                                           // 5352\n\n                                                                                                                      // 5353\n\t\t\t\ts\t= o.size;\n                                                                                                       // 5354\n\t\t\t\tc\t= o.initClosed;\n                                                                                                 // 5355\n\t\t\t\th\t= o.initHidden;\n                                                                                                 // 5356\n\t\t\t\tar\t= o.autoResize\n                                                                                                 // 5357\n\t\t\t\tstate\t= inst.state[pane];\n                                                                                         // 5358\n\t\t\t\topen\t= state.isVisible;\n                                                                                           // 5359\n\n                                                                                                                      // 5360\n\t\t\t\t// reset autoResize\n                                                                                               // 5361\n\t\t\t\tif (ar)\n                                                                                                           // 5362\n\t\t\t\t\tstate.autoResize = ar;\n                                                                                           // 5363\n\t\t\t\t// resize BEFORE opening\n                                                                                          // 5364\n\t\t\t\tif (!open)\n                                                                                                        // 5365\n\t\t\t\t\tinst._sizePane(pane, s, false, false, false); // false=skipCallback/noAnimation/forceResize\n                      // 5366\n\t\t\t\t// open/close as necessary - DO NOT CHANGE THIS ORDER!\n                                                            // 5367\n\t\t\t\tif (h === true)\t\t\tinst.hide(pane, noAnimate);\n                                                                     // 5368\n\t\t\t\telse if (c === true)\tinst.close(pane, false, noAnimate);\n                                                          // 5369\n\t\t\t\telse if (c === false)\tinst.open (pane, false, noAnimate);\n                                                         // 5370\n\t\t\t\telse if (h === false)\tinst.show (pane, false, noAnimate);\n                                                         // 5371\n\t\t\t\t// resize AFTER any other actions\n                                                                                 // 5372\n\t\t\t\tif (open)\n                                                                                                         // 5373\n\t\t\t\t\tinst._sizePane(pane, s, false, false, noAnimate); // animate resize if option passed\n                             // 5374\n\t\t\t});\n                                                                                                                // 5375\n\n                                                                                                                      // 5376\n\t\t\t/*\n                                                                                                                 // 5377\n\t\t\t *\tRECURSE INTO CHILD-LAYOUTS\n                                                                                      // 5378\n\t\t\t */\n                                                                                                                // 5379\n\t\t\tif (opts.includeChildren) {\n                                                                                        // 5380\n\t\t\t\tvar paneStateChildren, childState;\n                                                                                // 5381\n\t\t\t\t$.each(inst.children, function (pane, paneChildren) {\n                                                             // 5382\n\t\t\t\t\tpaneStateChildren = data[pane] ? data[pane].children : 0;\n                                                        // 5383\n\t\t\t\t\tif (paneStateChildren && paneChildren) {\n                                                                         // 5384\n\t\t\t\t\t\t$.each(paneChildren, function (stateKey, child) {\n                                                               // 5385\n\t\t\t\t\t\t\tchildState = paneStateChildren[stateKey];\n                                                                      // 5386\n\t\t\t\t\t\t\tif (child && childState)\n                                                                                       // 5387\n\t\t\t\t\t\t\t\tchild.loadState( childState );\n                                                                                // 5388\n\t\t\t\t\t\t});\n                                                                                                             // 5389\n\t\t\t\t\t}\n                                                                                                                // 5390\n\t\t\t\t});\n                                                                                                               // 5391\n\t\t\t}\n                                                                                                                  // 5392\n\t\t}\n                                                                                                                   // 5393\n\t}\n                                                                                                                    // 5394\n\n                                                                                                                      // 5395\n\t/**\n                                                                                                                  // 5396\n\t * Get the *current layout state* and return it as a hash\n                                                            // 5397\n\t *\n                                                                                                                   // 5398\n\t * @param {Object=}\t\tinst\t// Layout instance to get state for\n                                                        // 5399\n\t * @param {object=}\t\t[opts]\t// State-Managements override options\n                                                    // 5400\n\t */\n                                                                                                                  // 5401\n,\treadState: function (inst, opts) {\n                                                                                  // 5402\n\t\t// backward compatility\n                                                                                             // 5403\n\t\tif ($.type(opts) === 'string') opts = { keys: opts };\n                                                               // 5404\n\t\tif (!opts) opts = {};\n                                                                                               // 5405\n\t\tvar\tsm\t\t= inst.options.stateManagement\n                                                                              // 5406\n\t\t,\tic\t\t= opts.includeChildren\n                                                                                        // 5407\n\t\t,\trecurse\t= ic !== undefined ? ic : sm.includeChildren\n                                                              // 5408\n\t\t,\tkeys\t= opts.stateKeys || sm.stateKeys\n                                                                             // 5409\n\t\t,\talt\t\t= { isClosed: 'initClosed', isHidden: 'initHidden' }\n                                                         // 5410\n\t\t,\tstate\t= inst.state\n                                                                                                // 5411\n\t\t,\tpanes\t= $.layout.config.allPanes\n                                                                                  // 5412\n\t\t,\tdata\t= {}\n                                                                                                         // 5413\n\t\t,\tpair, pane, key, val\n                                                                                              // 5414\n\t\t,\tps, pC, child, array, count, branch\n                                                                               // 5415\n\t\t;\n                                                                                                                   // 5416\n\t\tif ($.isArray(keys)) keys = keys.join(\",\");\n                                                                         // 5417\n\t\t// convert keys to an array and change delimiters from '__' to '.'\n                                                  // 5418\n\t\tkeys = keys.replace(/__/g, \".\").split(',');\n                                                                         // 5419\n\t\t// loop keys and create a data hash\n                                                                                 // 5420\n\t\tfor (var i=0, n=keys.length; i < n; i++) {\n                                                                          // 5421\n\t\t\tpair = keys[i].split(\".\");\n                                                                                         // 5422\n\t\t\tpane = pair[0];\n                                                                                                    // 5423\n\t\t\tkey  = pair[1];\n                                                                                                    // 5424\n\t\t\tif ($.inArray(pane, panes) < 0) continue; // bad pane!\n                                                             // 5425\n\t\t\tval = state[ pane ][ key ];\n                                                                                        // 5426\n\t\t\tif (val == undefined) continue;\n                                                                                    // 5427\n\t\t\tif (key==\"isClosed\" && state[pane][\"isSliding\"])\n                                                                   // 5428\n\t\t\t\tval = true; // if sliding, then *really* isClosed\n                                                                 // 5429\n\t\t\t( data[pane] || (data[pane]={}) )[ alt[key] ? alt[key] : key ] = val;\n                                              // 5430\n\t\t}\n                                                                                                                   // 5431\n\n                                                                                                                      // 5432\n\t\t// recurse into the child-layouts for each pane\n                                                                     // 5433\n\t\tif (recurse) {\n                                                                                                      // 5434\n\t\t\t$.each(panes, function (idx, pane) {\n                                                                               // 5435\n\t\t\t\tpC = inst.children[pane];\n                                                                                         // 5436\n\t\t\t\tps = state.stateData[pane];\n                                                                                       // 5437\n\t\t\t\tif ($.isPlainObject( pC ) && !$.isEmptyObject( pC )) {\n                                                            // 5438\n\t\t\t\t\t// ensure a key exists for this 'pane', eg: branch = data.center\n                                                 // 5439\n\t\t\t\t\tbranch = data[pane] || (data[pane] = {});\n                                                                        // 5440\n\t\t\t\t\tif (!branch.children) branch.children = {};\n                                                                      // 5441\n\t\t\t\t\t$.each( pC, function (key, child) {\n                                                                              // 5442\n\t\t\t\t\t\t// ONLY read state from an initialize layout\n                                                                    // 5443\n\t\t\t\t\t\tif ( child.state.initialized )\n                                                                                  // 5444\n\t\t\t\t\t\t\tbranch.children[ key ] = $.layout.state.readState( child );\n                                                    // 5445\n\t\t\t\t\t\t// if we have PREVIOUS (onLoad) state for this child-layout, KEEP IT!\n                                           // 5446\n\t\t\t\t\t\telse if ( ps && ps.children && ps.children[ key ] ) {\n                                                           // 5447\n\t\t\t\t\t\t\tbranch.children[ key ] = $.extend(true, {}, ps.children[ key ] );\n                                              // 5448\n\t\t\t\t\t\t}\n                                                                                                               // 5449\n\t\t\t\t\t});\n                                                                                                              // 5450\n\t\t\t\t}\n                                                                                                                 // 5451\n\t\t\t});\n                                                                                                                // 5452\n\t\t}\n                                                                                                                   // 5453\n\n                                                                                                                      // 5454\n\t\treturn data;\n                                                                                                        // 5455\n\t}\n                                                                                                                    // 5456\n\n                                                                                                                      // 5457\n\t/**\n                                                                                                                  // 5458\n\t *\tStringify a JSON hash so can save in a cookie or db-field\n                                                         // 5459\n\t */\n                                                                                                                  // 5460\n,\tencodeJSON: function (JSON) {\n                                                                                       // 5461\n\t\treturn parse(JSON);\n                                                                                                 // 5462\n\t\tfunction parse (h) {\n                                                                                                // 5463\n\t\t\tvar D=[], i=0, k, v, t // k = key, v = value\n                                                                       // 5464\n\t\t\t,\ta = $.isArray(h)\n                                                                                                 // 5465\n\t\t\t;\n                                                                                                                  // 5466\n\t\t\tfor (k in h) {\n                                                                                                     // 5467\n\t\t\t\tv = h[k];\n                                                                                                         // 5468\n\t\t\t\tt = typeof v;\n                                                                                                     // 5469\n\t\t\t\tif (t == 'string')\t\t// STRING - add quotes\n                                                                        // 5470\n\t\t\t\t\tv = '\"'+ v +'\"';\n                                                                                                 // 5471\n\t\t\t\telse if (t == 'object')\t// SUB-KEY - recurse into it\n                                                              // 5472\n\t\t\t\t\tv = parse(v);\n                                                                                                    // 5473\n\t\t\t\tD[i++] = (!a ? '\"'+ k +'\":' : '') + v;\n                                                                            // 5474\n\t\t\t}\n                                                                                                                  // 5475\n\t\t\treturn (a ? '[' : '{') + D.join(',') + (a ? ']' : '}');\n                                                            // 5476\n\t\t};\n                                                                                                                  // 5477\n\t}\n                                                                                                                    // 5478\n\n                                                                                                                      // 5479\n\t/**\n                                                                                                                  // 5480\n\t *\tConvert stringified JSON back to a hash object\n                                                                    // 5481\n\t *\t@see\t\t$.parseJSON(), adding in jQuery 1.4.1\n                                                                       // 5482\n\t */\n                                                                                                                  // 5483\n,\tdecodeJSON: function (str) {\n                                                                                        // 5484\n\t\ttry { return $.parseJSON ? $.parseJSON(str) : window[\"eval\"](\"(\"+ str +\")\") || {}; }\n                                // 5485\n\t\tcatch (e) { return {}; }\n                                                                                            // 5486\n\t}\n                                                                                                                    // 5487\n\n                                                                                                                      // 5488\n\n                                                                                                                      // 5489\n,\t_create: function (inst) {\n                                                                                          // 5490\n\t\tvar _\t= $.layout.state\n                                                                                              // 5491\n\t\t,\to\t= inst.options\n                                                                                                  // 5492\n\t\t,\tsm\t= o.stateManagement\n                                                                                            // 5493\n\t\t;\n                                                                                                                   // 5494\n\t\t//\tADD State-Management plugin methods to inst\n                                                                      // 5495\n\t\t $.extend( inst, {\n                                                                                                  // 5496\n\t\t//\treadCookie - update options from cookie - returns hash of cookie data\n                                            // 5497\n\t\t\treadCookie:\t\tfunction () { return _.readCookie(inst); }\n                                                            // 5498\n\t\t//\tdeleteCookie\n                                                                                                     // 5499\n\t\t,\tdeleteCookie:\tfunction () { _.deleteCookie(inst); }\n                                                               // 5500\n\t\t//\tsaveCookie - optionally pass keys-list and cookie-options (hash)\n                                                 // 5501\n\t\t,\tsaveCookie:\t\tfunction (keys, cookieOpts) { return _.saveCookie(inst, keys, cookieOpts); }\n                         // 5502\n\t\t//\tloadCookie - readCookie and use to loadState() - returns hash of cookie data\n                                     // 5503\n\t\t,\tloadCookie:\t\tfunction () { return _.loadCookie(inst); }\n                                                           // 5504\n\t\t//\tloadState - pass a hash of state to use to update options\n                                                        // 5505\n\t\t,\tloadState:\t\tfunction (stateData, opts) { _.loadState(inst, stateData, opts); }\n                                    // 5506\n\t\t//\treadState - returns hash of current layout-state\n                                                                 // 5507\n\t\t,\treadState:\t\tfunction (keys) { return _.readState(inst, keys); }\n                                                   // 5508\n\t\t//\tadd JSON utility methods too...\n                                                                                  // 5509\n\t\t,\tencodeJSON:\t\t_.encodeJSON\n                                                                                         // 5510\n\t\t,\tdecodeJSON:\t\t_.decodeJSON\n                                                                                         // 5511\n\t\t});\n                                                                                                                 // 5512\n\n                                                                                                                      // 5513\n\t\t// init state.stateData key, even if plugin is initially disabled\n                                                   // 5514\n\t\tinst.state.stateData = {};\n                                                                                          // 5515\n\n                                                                                                                      // 5516\n\t\t// autoLoad MUST BE one of: data-array, data-hash, callback-function, or TRUE\n                                       // 5517\n\t\tif ( !sm.autoLoad ) return;\n                                                                                         // 5518\n\n                                                                                                                      // 5519\n\t\t//\tWhen state-data exists in the autoLoad key USE IT,\n                                                               // 5520\n\t\t//\teven if stateManagement.enabled == false\n                                                                         // 5521\n\t\tif ($.isPlainObject( sm.autoLoad )) {\n                                                                               // 5522\n\t\t\tif (!$.isEmptyObject( sm.autoLoad )) {\n                                                                             // 5523\n\t\t\t\tinst.loadState( sm.autoLoad );\n                                                                                    // 5524\n\t\t\t}\n                                                                                                                  // 5525\n\t\t}\n                                                                                                                   // 5526\n\t\telse if ( sm.enabled ) {\n                                                                                            // 5527\n\t\t\t// update the options from cookie or callback\n                                                                      // 5528\n\t\t\t// if options is a function, call it to get stateData\n                                                              // 5529\n\t\t\tif ($.isFunction( sm.autoLoad )) {\n                                                                                 // 5530\n\t\t\t\tvar d = {};\n                                                                                                       // 5531\n\t\t\t\ttry {\n                                                                                                             // 5532\n\t\t\t\t\td = sm.autoLoad( inst, inst.state, inst.options, inst.options.name || '' ); // try to get data from fn\n           // 5533\n\t\t\t\t} catch (e) {}\n                                                                                                    // 5534\n\t\t\t\tif (d && $.isPlainObject( d ) && !$.isEmptyObject( d ))\n                                                           // 5535\n\t\t\t\t\tinst.loadState(d);\n                                                                                               // 5536\n\t\t\t}\n                                                                                                                  // 5537\n\t\t\telse // any other truthy value will trigger loadCookie\n                                                             // 5538\n\t\t\t\tinst.loadCookie();\n                                                                                                // 5539\n\t\t}\n                                                                                                                   // 5540\n\t}\n                                                                                                                    // 5541\n\n                                                                                                                      // 5542\n,\t_unload: function (inst) {\n                                                                                          // 5543\n\t\tvar sm = inst.options.stateManagement;\n                                                                              // 5544\n\t\tif (sm.enabled && sm.autoSave) {\n                                                                                    // 5545\n\t\t\t// if options is a function, call it to save the stateData\n                                                         // 5546\n\t\t\tif ($.isFunction( sm.autoSave )) {\n                                                                                 // 5547\n\t\t\t\ttry {\n                                                                                                             // 5548\n\t\t\t\t\tsm.autoSave( inst, inst.state, inst.options, inst.options.name || '' ); // try to get data from fn\n               // 5549\n\t\t\t\t} catch (e) {}\n                                                                                                    // 5550\n\t\t\t}\n                                                                                                                  // 5551\n\t\t\telse // any truthy value will trigger saveCookie\n                                                                   // 5552\n\t\t\t\tinst.saveCookie();\n                                                                                                // 5553\n\t\t}\n                                                                                                                   // 5554\n\t}\n                                                                                                                    // 5555\n\n                                                                                                                      // 5556\n};\n                                                                                                                    // 5557\n\n                                                                                                                      // 5558\n// add state initialization method to Layout's onCreate array of functions\n                                            // 5559\n$.layout.onCreate.push( $.layout.state._create );\n                                                                     // 5560\n$.layout.onUnload.push( $.layout.state._unload );\n                                                                     // 5561\n\n                                                                                                                      // 5562\n\n                                                                                                                      // 5563\n\n                                                                                                                      // 5564\n\n                                                                                                                      // 5565\n/**\n                                                                                                                   // 5566\n * jquery.layout.buttons 1.0\n                                                                                          // 5567\n * $Date: 2011-07-16 08:00:00 (Sat, 16 July 2011) $\n                                                                   // 5568\n *\n                                                                                                                    // 5569\n * Copyright (c) 2012 \n                                                                                                // 5570\n *   Kevin Dalman (http://allpro.net)\n                                                                                 // 5571\n *\n                                                                                                                    // 5572\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\n                                                 // 5573\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\n                                             // 5574\n *\n                                                                                                                    // 5575\n * @requires: UI Layout 1.3.0.rc30.1 or higher\n                                                                        // 5576\n *\n                                                                                                                    // 5577\n * @see: http://groups.google.com/group/jquery-ui-layout\n                                                              // 5578\n *\n                                                                                                                    // 5579\n * Docs: [ to come ]\n                                                                                                  // 5580\n * Tips: [ to come ]\n                                                                                                  // 5581\n */\n                                                                                                                   // 5582\n\n                                                                                                                      // 5583\n// tell Layout that the state plugin is available\n                                                                     // 5584\n$.layout.plugins.buttons = true;\n                                                                                      // 5585\n\n                                                                                                                      // 5586\n//\tAdd buttons options to layout.defaults\n                                                                             // 5587\n$.layout.defaults.autoBindCustomButtons = false;\n                                                                      // 5588\n// Specify autoBindCustomButtons as a layout-option, NOT a pane-option\n                                                // 5589\n$.layout.optionsMap.layout.push(\"autoBindCustomButtons\");\n                                                             // 5590\n\n                                                                                                                      // 5591\n/*\n                                                                                                                    // 5592\n *\tButton methods\n                                                                                                     // 5593\n */\n                                                                                                                   // 5594\n$.layout.buttons = {\n                                                                                                  // 5595\n\n                                                                                                                      // 5596\n\t/**\n                                                                                                                  // 5597\n\t* Searches for .ui-layout-button-xxx elements and auto-binds them as layout-buttons\n                                  // 5598\n\t*\n                                                                                                                    // 5599\n\t* @see  _create()\n                                                                                                    // 5600\n\t*\n                                                                                                                    // 5601\n\t* @param  {Object}\t\tinst\tLayout Instance object\n                                                                      // 5602\n\t*/\n                                                                                                                   // 5603\n\tinit: function (inst) {\n                                                                                              // 5604\n\t\tvar pre\t\t= \"ui-layout-button-\"\n                                                                                      // 5605\n\t\t,\tlayout\t= inst.options.name || \"\"\n                                                                                  // 5606\n\t\t,\tname;\n                                                                                                             // 5607\n\t\t$.each(\"toggle,open,close,pin,toggle-slide,open-slide\".split(\",\"), function (i, action) {\n                           // 5608\n\t\t\t$.each($.layout.config.borderPanes, function (ii, pane) {\n                                                          // 5609\n\t\t\t\t$(\".\"+pre+action+\"-\"+pane).each(function(){\n                                                                       // 5610\n\t\t\t\t\t// if button was previously 'bound', data.layoutName was set, but is blank if layout has no 'name'\n               // 5611\n\t\t\t\t\tname = $(this).data(\"layoutName\") || $(this).attr(\"layoutName\");\n                                                 // 5612\n\t\t\t\t\tif (name == undefined || name === layout)\n                                                                        // 5613\n\t\t\t\t\t\tinst.bindButton(this, action, pane);\n                                                                            // 5614\n\t\t\t\t});\n                                                                                                               // 5615\n\t\t\t});\n                                                                                                                // 5616\n\t\t});\n                                                                                                                 // 5617\n\t}\n                                                                                                                    // 5618\n\n                                                                                                                      // 5619\n\t/**\n                                                                                                                  // 5620\n\t* Helper function to validate params received by addButton utilities\n                                                 // 5621\n\t*\n                                                                                                                    // 5622\n\t* Two classes are added to the element, based on the buttonClass...\n                                                  // 5623\n\t* The type of button is appended to create the 2nd className:\n                                                        // 5624\n\t*  - ui-layout-button-pin\t\t// action btnClass\n                                                                        // 5625\n\t*  - ui-layout-button-pin-west\t// action btnClass + pane\n                                                             // 5626\n\t*  - ui-layout-button-toggle\n                                                                                         // 5627\n\t*  - ui-layout-button-open\n                                                                                           // 5628\n\t*  - ui-layout-button-close\n                                                                                          // 5629\n\t*\n                                                                                                                    // 5630\n\t* @param {Object}\t\t\tinst\t\tLayout Instance object\n                                                                     // 5631\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\n  // 5632\n\t* @param {string}   \t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\n                              // 5633\n\t*\n                                                                                                                    // 5634\n\t* @return {Array.<Object>}\tIf both params valid, the element matching 'selector' in a jQuery wrapper - otherwise returns null\n\t*/\n                                                                                                                   // 5636\n,\tget: function (inst, selector, pane, action) {\n                                                                      // 5637\n\t\tvar $E\t= $(selector)\n                                                                                                // 5638\n\t\t,\to\t= inst.options\n                                                                                                  // 5639\n\t\t,\terr\t= o.errors.addButtonError\n                                                                                     // 5640\n\t\t;\n                                                                                                                   // 5641\n\t\tif (!$E.length) { // element not found\n                                                                              // 5642\n\t\t\t$.layout.msg(err +\" \"+ o.errors.selector +\": \"+ selector, true);\n                                                   // 5643\n\t\t}\n                                                                                                                   // 5644\n\t\telse if ($.inArray(pane, $.layout.config.borderPanes) < 0) { // invalid 'pane' sepecified\n                           // 5645\n\t\t\t$.layout.msg(err +\" \"+ o.errors.pane +\": \"+ pane, true);\n                                                           // 5646\n\t\t\t$E = $(\"\");  // NO BUTTON\n                                                                                          // 5647\n\t\t}\n                                                                                                                   // 5648\n\t\telse { // VALID\n                                                                                                     // 5649\n\t\t\tvar btn = o[pane].buttonClass +\"-\"+ action;\n                                                                        // 5650\n\t\t\t$E\t.addClass( btn +\" \"+ btn +\"-\"+ pane )\n                                                                           // 5651\n\t\t\t\t.data(\"layoutName\", o.name); // add layout identifier - even if blank!\n                                            // 5652\n\t\t}\n                                                                                                                   // 5653\n\t\treturn $E;\n                                                                                                          // 5654\n\t}\n                                                                                                                    // 5655\n\n                                                                                                                      // 5656\n\n                                                                                                                      // 5657\n\t/**\n                                                                                                                  // 5658\n\t* NEW syntax for binding layout-buttons - will eventually replace addToggle, addOpen, etc.\n                           // 5659\n\t*\n                                                                                                                    // 5660\n\t* @param {Object}\t\t\tinst\t\tLayout Instance object\n                                                                     // 5661\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\n  // 5662\n\t* @param {string}\t\t\taction\n                                                                                           // 5663\n\t* @param {string}\t\t\tpane\n                                                                                             // 5664\n\t*/\n                                                                                                                   // 5665\n,\tbind: function (inst, selector, action, pane) {\n                                                                     // 5666\n\t\tvar _ = $.layout.buttons;\n                                                                                           // 5667\n\t\tswitch (action.toLowerCase()) {\n                                                                                     // 5668\n\t\t\tcase \"toggle\":\t\t\t_.addToggle\t(inst, selector, pane); break;\t\n                                                       // 5669\n\t\t\tcase \"open\":\t\t\t_.addOpen\t(inst, selector, pane); break;\n                                                            // 5670\n\t\t\tcase \"close\":\t\t\t_.addClose\t(inst, selector, pane); break;\n                                                          // 5671\n\t\t\tcase \"pin\":\t\t\t\t_.addPin\t(inst, selector, pane); break;\n                                                             // 5672\n\t\t\tcase \"toggle-slide\":\t_.addToggle\t(inst, selector, pane, true); break;\t\n                                             // 5673\n\t\t\tcase \"open-slide\":\t\t_.addOpen\t(inst, selector, pane, true); break;\n                                                 // 5674\n\t\t}\n                                                                                                                   // 5675\n\t\treturn inst;\n                                                                                                        // 5676\n\t}\n                                                                                                                    // 5677\n\n                                                                                                                      // 5678\n\t/**\n                                                                                                                  // 5679\n\t* Add a custom Toggler button for a pane\n                                                                             // 5680\n\t*\n                                                                                                                    // 5681\n\t* @param {Object}\t\t\tinst\t\tLayout Instance object\n                                                                     // 5682\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\n  // 5683\n\t* @param {string}  \t\t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\n                              // 5684\n\t* @param {boolean=}\t\t\tslide \t\ttrue = slide-open, false = pin-open\n                                                    // 5685\n\t*/\n                                                                                                                   // 5686\n,\taddToggle: function (inst, selector, pane, slide) {\n                                                                 // 5687\n\t\t$.layout.buttons.get(inst, selector, pane, \"toggle\")\n                                                                // 5688\n\t\t\t.click(function(evt){\n                                                                                              // 5689\n\t\t\t\tinst.toggle(pane, !!slide);\n                                                                                       // 5690\n\t\t\t\tevt.stopPropagation();\n                                                                                            // 5691\n\t\t\t});\n                                                                                                                // 5692\n\t\treturn inst;\n                                                                                                        // 5693\n\t}\n                                                                                                                    // 5694\n\n                                                                                                                      // 5695\n\t/**\n                                                                                                                  // 5696\n\t* Add a custom Open button for a pane\n                                                                                // 5697\n\t*\n                                                                                                                    // 5698\n\t* @param {Object}\t\t\tinst\t\tLayout Instance object\n                                                                     // 5699\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\n  // 5700\n\t* @param {string}\t\t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\n                                // 5701\n\t* @param {boolean=}\t\t\tslide \t\ttrue = slide-open, false = pin-open\n                                                    // 5702\n\t*/\n                                                                                                                   // 5703\n,\taddOpen: function (inst, selector, pane, slide) {\n                                                                   // 5704\n\t\t$.layout.buttons.get(inst, selector, pane, \"open\")\n                                                                  // 5705\n\t\t\t.attr(\"title\", inst.options[pane].tips.Open)\n                                                                       // 5706\n\t\t\t.click(function (evt) {\n                                                                                            // 5707\n\t\t\t\tinst.open(pane, !!slide);\n                                                                                         // 5708\n\t\t\t\tevt.stopPropagation();\n                                                                                            // 5709\n\t\t\t});\n                                                                                                                // 5710\n\t\treturn inst;\n                                                                                                        // 5711\n\t}\n                                                                                                                    // 5712\n\n                                                                                                                      // 5713\n\t/**\n                                                                                                                  // 5714\n\t* Add a custom Close button for a pane\n                                                                               // 5715\n\t*\n                                                                                                                    // 5716\n\t* @param {Object}\t\t\tinst\t\tLayout Instance object\n                                                                     // 5717\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\n  // 5718\n\t* @param {string}   \t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\n                              // 5719\n\t*/\n                                                                                                                   // 5720\n,\taddClose: function (inst, selector, pane) {\n                                                                         // 5721\n\t\t$.layout.buttons.get(inst, selector, pane, \"close\")\n                                                                 // 5722\n\t\t\t.attr(\"title\", inst.options[pane].tips.Close)\n                                                                      // 5723\n\t\t\t.click(function (evt) {\n                                                                                            // 5724\n\t\t\t\tinst.close(pane);\n                                                                                                 // 5725\n\t\t\t\tevt.stopPropagation();\n                                                                                            // 5726\n\t\t\t});\n                                                                                                                // 5727\n\t\treturn inst;\n                                                                                                        // 5728\n\t}\n                                                                                                                    // 5729\n\n                                                                                                                      // 5730\n\t/**\n                                                                                                                  // 5731\n\t* Add a custom Pin button for a pane\n                                                                                 // 5732\n\t*\n                                                                                                                    // 5733\n\t* Four classes are added to the element, based on the paneClass for the associated pane...\n                           // 5734\n\t* Assuming the default paneClass and the pin is 'up', these classes are added for a west-pane pin:\n                   // 5735\n\t*  - ui-layout-pane-pin\n                                                                                              // 5736\n\t*  - ui-layout-pane-west-pin\n                                                                                         // 5737\n\t*  - ui-layout-pane-pin-up\n                                                                                           // 5738\n\t*  - ui-layout-pane-west-pin-up\n                                                                                      // 5739\n\t*\n                                                                                                                    // 5740\n\t* @param {Object}\t\t\tinst\t\tLayout Instance object\n                                                                     // 5741\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\n  // 5742\n\t* @param {string}   \t\tpane \t\tName of the pane the pin is for: 'north', 'south', etc.\n                                 // 5743\n\t*/\n                                                                                                                   // 5744\n,\taddPin: function (inst, selector, pane) {\n                                                                           // 5745\n\t\tvar\t_\t= $.layout.buttons\n                                                                                            // 5746\n\t\t,\t$E\t= _.get(inst, selector, pane, \"pin\");\n                                                                          // 5747\n\t\tif ($E.length) {\n                                                                                                    // 5748\n\t\t\tvar s = inst.state[pane];\n                                                                                          // 5749\n\t\t\t$E.click(function (evt) {\n                                                                                          // 5750\n\t\t\t\t_.setPinState(inst, $(this), pane, (s.isSliding || s.isClosed));\n                                                  // 5751\n\t\t\t\tif (s.isSliding || s.isClosed) inst.open( pane ); // change from sliding to open\n                                  // 5752\n\t\t\t\telse inst.close( pane ); // slide-closed\n                                                                          // 5753\n\t\t\t\tevt.stopPropagation();\n                                                                                            // 5754\n\t\t\t});\n                                                                                                                // 5755\n\t\t\t// add up/down pin attributes and classes\n                                                                          // 5756\n\t\t\t_.setPinState(inst, $E, pane, (!s.isClosed && !s.isSliding));\n                                                      // 5757\n\t\t\t// add this pin to the pane data so we can 'sync it' automatically\n                                                 // 5758\n\t\t\t// PANE.pins key is an array so we can store multiple pins for each pane\n                                           // 5759\n\t\t\ts.pins.push( selector ); // just save the selector string\n                                                          // 5760\n\t\t}\n                                                                                                                   // 5761\n\t\treturn inst;\n                                                                                                        // 5762\n\t}\n                                                                                                                    // 5763\n\n                                                                                                                      // 5764\n\t/**\n                                                                                                                  // 5765\n\t* Change the class of the pin button to make it look 'up' or 'down'\n                                                  // 5766\n\t*\n                                                                                                                    // 5767\n\t* @see  addPin(), syncPins()\n                                                                                         // 5768\n\t*\n                                                                                                                    // 5769\n\t* @param {Object}\t\t\tinst\tLayout Instance object\n                                                                      // 5770\n\t* @param {Array.<Object>}\t$Pin\tThe pin-span element in a jQuery wrapper\n                                              // 5771\n\t* @param {string}\t\t\tpane\tThese are the params returned to callbacks by layout()\n                                      // 5772\n\t* @param {boolean}\t\t\tdoPin\ttrue = set the pin 'down', false = set it 'up'\n                                            // 5773\n\t*/\n                                                                                                                   // 5774\n,\tsetPinState: function (inst, $Pin, pane, doPin) {\n                                                                   // 5775\n\t\tvar updown = $Pin.attr(\"pin\");\n                                                                                      // 5776\n\t\tif (updown && doPin === (updown==\"down\")) return; // already in correct state\n                                       // 5777\n\t\tvar\n                                                                                                                 // 5778\n\t\t\to\t\t= inst.options[pane]\n                                                                                            // 5779\n\t\t,\tpin\t\t= o.buttonClass +\"-pin\"\n                                                                                      // 5780\n\t\t,\tside\t= pin +\"-\"+ pane\n                                                                                             // 5781\n\t\t,\tUP\t\t= pin +\"-up \"+\tside +\"-up\"\n                                                                                    // 5782\n\t\t,\tDN\t\t= pin +\"-down \"+side +\"-down\"\n                                                                                 // 5783\n\t\t;\n                                                                                                                   // 5784\n\t\t$Pin\n                                                                                                                // 5785\n\t\t\t.attr(\"pin\", doPin ? \"down\" : \"up\") // logic\n                                                                       // 5786\n\t\t\t.attr(\"title\", doPin ? o.tips.Unpin : o.tips.Pin)\n                                                                  // 5787\n\t\t\t.removeClass( doPin ? UP : DN ) \n                                                                                   // 5788\n\t\t\t.addClass( doPin ? DN : UP ) \n                                                                                      // 5789\n\t\t;\n                                                                                                                   // 5790\n\t}\n                                                                                                                    // 5791\n\n                                                                                                                      // 5792\n\t/**\n                                                                                                                  // 5793\n\t* INTERNAL function to sync 'pin buttons' when pane is opened or closed\n                                              // 5794\n\t* Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes\n                                          // 5795\n\t*\n                                                                                                                    // 5796\n\t* @see  open(), close()\n                                                                                              // 5797\n\t*\n                                                                                                                    // 5798\n\t* @param {Object}\t\t\tinst\tLayout Instance object\n                                                                      // 5799\n\t* @param {string}\tpane\tThese are the params returned to callbacks by layout()\n                                        // 5800\n\t* @param {boolean}\tdoPin\tTrue means set the pin 'down', False means 'up'\n                                             // 5801\n\t*/\n                                                                                                                   // 5802\n,\tsyncPinBtns: function (inst, pane, doPin) {\n                                                                         // 5803\n\t\t// REAL METHOD IS _INSIDE_ LAYOUT - THIS IS HERE JUST FOR REFERENCE\n                                                 // 5804\n\t\t$.each(inst.state[pane].pins, function (i, selector) {\n                                                              // 5805\n\t\t\t$.layout.buttons.setPinState(inst, $(selector), pane, doPin);\n                                                      // 5806\n\t\t});\n                                                                                                                 // 5807\n\t}\n                                                                                                                    // 5808\n\n                                                                                                                      // 5809\n\n                                                                                                                      // 5810\n,\t_load: function (inst) {\n                                                                                            // 5811\n\t\tvar\t_\t= $.layout.buttons;\n                                                                                           // 5812\n\t\t// ADD Button methods to Layout Instance\n                                                                            // 5813\n\t\t// Note: sel = jQuery Selector string\n                                                                               // 5814\n\t\t$.extend( inst, {\n                                                                                                   // 5815\n\t\t\tbindButton:\t\tfunction (sel, action, pane) { return _.bind(inst, sel, action, pane); }\n                              // 5816\n\t\t//\tDEPRECATED METHODS\n                                                                                               // 5817\n\t\t,\taddToggleBtn:\tfunction (sel, pane, slide) { return _.addToggle(inst, sel, pane, slide); }\n                         // 5818\n\t\t,\taddOpenBtn:\t\tfunction (sel, pane, slide) { return _.addOpen(inst, sel, pane, slide); }\n                            // 5819\n\t\t,\taddCloseBtn:\tfunction (sel, pane) { return _.addClose(inst, sel, pane); }\n                                         // 5820\n\t\t,\taddPinBtn:\t\tfunction (sel, pane) { return _.addPin(inst, sel, pane); }\n                                            // 5821\n\t\t});\n                                                                                                                 // 5822\n\n                                                                                                                      // 5823\n\t\t// init state array to hold pin-buttons\n                                                                             // 5824\n\t\tfor (var i=0; i<4; i++) {\n                                                                                           // 5825\n\t\t\tvar pane = $.layout.config.borderPanes[i];\n                                                                         // 5826\n\t\t\tinst.state[pane].pins = [];\n                                                                                        // 5827\n\t\t}\n                                                                                                                   // 5828\n\n                                                                                                                      // 5829\n\t\t// auto-init buttons onLoad if option is enabled\n                                                                    // 5830\n\t\tif ( inst.options.autoBindCustomButtons )\n                                                                           // 5831\n\t\t\t_.init(inst);\n                                                                                                      // 5832\n\t}\n                                                                                                                    // 5833\n\n                                                                                                                      // 5834\n,\t_unload: function (inst) {\n                                                                                          // 5835\n\t\t// TODO: unbind all buttons???\n                                                                                      // 5836\n\t}\n                                                                                                                    // 5837\n\n                                                                                                                      // 5838\n};\n                                                                                                                    // 5839\n\n                                                                                                                      // 5840\n// add initialization method to Layout's onLoad array of functions\n                                                    // 5841\n$.layout.onLoad.push(  $.layout.buttons._load );\n                                                                      // 5842\n//$.layout.onUnload.push( $.layout.buttons._unload );\n                                                                 // 5843\n\n                                                                                                                      // 5844\n\n                                                                                                                      // 5845\n\n                                                                                                                      // 5846\n/**\n                                                                                                                   // 5847\n * jquery.layout.browserZoom 1.0\n                                                                                      // 5848\n * $Date: 2011-12-29 08:00:00 (Thu, 29 Dec 2011) $\n                                                                    // 5849\n *\n                                                                                                                    // 5850\n * Copyright (c) 2012 \n                                                                                                // 5851\n *   Kevin Dalman (http://allpro.net)\n                                                                                 // 5852\n *\n                                                                                                                    // 5853\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\n                                                 // 5854\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\n                                             // 5855\n *\n                                                                                                                    // 5856\n * @requires: UI Layout 1.3.0.rc30.1 or higher\n                                                                        // 5857\n *\n                                                                                                                    // 5858\n * @see: http://groups.google.com/group/jquery-ui-layout\n                                                              // 5859\n *\n                                                                                                                    // 5860\n * TODO: Extend logic to handle other problematic zooming in browsers\n                                                 // 5861\n * TODO: Add hotkey/mousewheel bindings to _instantly_ respond to these zoom event\n                                    // 5862\n */\n                                                                                                                   // 5863\n\n                                                                                                                      // 5864\n// tell Layout that the plugin is available\n                                                                           // 5865\n$.layout.plugins.browserZoom = true;\n                                                                                  // 5866\n\n                                                                                                                      // 5867\n$.layout.defaults.browserZoomCheckInterval = 1000;\n                                                                    // 5868\n$.layout.optionsMap.layout.push(\"browserZoomCheckInterval\");\n                                                          // 5869\n\n                                                                                                                      // 5870\n/*\n                                                                                                                    // 5871\n *\tbrowserZoom methods\n                                                                                                // 5872\n */\n                                                                                                                   // 5873\n$.layout.browserZoom = {\n                                                                                              // 5874\n\n                                                                                                                      // 5875\n\t_init: function (inst) {\n                                                                                             // 5876\n\t\t// abort if browser does not need this check\n                                                                        // 5877\n\t\tif ($.layout.browserZoom.ratio() !== false)\n                                                                         // 5878\n\t\t\t$.layout.browserZoom._setTimer(inst);\n                                                                              // 5879\n\t}\n                                                                                                                    // 5880\n\n                                                                                                                      // 5881\n,\t_setTimer: function (inst) {\n                                                                                        // 5882\n\t\t// abort if layout destroyed or browser does not need this check\n                                                    // 5883\n\t\tif (inst.destroyed) return;\n                                                                                         // 5884\n\t\tvar o\t= inst.options\n                                                                                                // 5885\n\t\t,\ts\t= inst.state\n                                                                                                    // 5886\n\t\t//\tdon't need check if inst has parentLayout, but check occassionally in case parent destroyed!\n                     // 5887\n\t\t//\tMINIMUM 100ms interval, for performance\n                                                                          // 5888\n\t\t,\tms\t= inst.hasParentLayout ?  5000 : Math.max( o.browserZoomCheckInterval, 100 )\n                                   // 5889\n\t\t;\n                                                                                                                   // 5890\n\t\t// set the timer\n                                                                                                    // 5891\n\t\tsetTimeout(function(){\n                                                                                              // 5892\n\t\t\tif (inst.destroyed || !o.resizeWithWindow) return;\n                                                                 // 5893\n\t\t\tvar d = $.layout.browserZoom.ratio();\n                                                                              // 5894\n\t\t\tif (d !== s.browserZoom) {\n                                                                                         // 5895\n\t\t\t\ts.browserZoom = d;\n                                                                                                // 5896\n\t\t\t\tinst.resizeAll();\n                                                                                                 // 5897\n\t\t\t}\n                                                                                                                  // 5898\n\t\t\t// set a NEW timeout\n                                                                                               // 5899\n\t\t\t$.layout.browserZoom._setTimer(inst);\n                                                                              // 5900\n\t\t}\n                                                                                                                   // 5901\n\t\t,\tms );\n                                                                                                             // 5902\n\t}\n                                                                                                                    // 5903\n\n                                                                                                                      // 5904\n,\tratio: function () {\n                                                                                                // 5905\n\t\tvar w\t= window\n                                                                                                      // 5906\n\t\t,\ts\t= screen\n                                                                                                        // 5907\n\t\t,\td\t= document\n                                                                                                      // 5908\n\t\t,\tdE\t= d.documentElement || d.body\n                                                                                  // 5909\n\t\t,\tb\t= $.layout.browser\n                                                                                              // 5910\n\t\t,\tv\t= b.version\n                                                                                                     // 5911\n\t\t,\tr, sW, cW\n                                                                                                         // 5912\n\t\t;\n                                                                                                                   // 5913\n\t\t// we can ignore all browsers that fire window.resize event onZoom\n                                                  // 5914\n\t\tif ((b.msie && v > 8)\n                                                                                               // 5915\n\t\t||\t!b.msie\n                                                                                                          // 5916\n\t\t) return false; // don't need to track zoom\n                                                                         // 5917\n\n                                                                                                                      // 5918\n\t\tif (s.deviceXDPI && s.systemXDPI) // syntax compiler hack\n                                                           // 5919\n\t\t\treturn calc(s.deviceXDPI, s.systemXDPI);\n                                                                           // 5920\n\t\t// everything below is just for future reference!\n                                                                   // 5921\n\t\tif (b.webkit && (r = d.body.getBoundingClientRect))\n                                                                 // 5922\n\t\t\treturn calc((r.left - r.right), d.body.offsetWidth);\n                                                               // 5923\n\t\tif (b.webkit && (sW = w.outerWidth))\n                                                                                // 5924\n\t\t\treturn calc(sW, w.innerWidth);\n                                                                                     // 5925\n\t\tif ((sW = s.width) && (cW = dE.clientWidth))\n                                                                        // 5926\n\t\t\treturn calc(sW, cW);\n                                                                                               // 5927\n\t\treturn false; // no match, so cannot - or don't need to - track zoom\n                                                // 5928\n\n                                                                                                                      // 5929\n\t\tfunction calc (x,y) { return (parseInt(x,10) / parseInt(y,10) * 100).toFixed(); }\n                                   // 5930\n\t}\n                                                                                                                    // 5931\n\n                                                                                                                      // 5932\n};\n                                                                                                                    // 5933\n// add initialization method to Layout's onLoad array of functions\n                                                    // 5934\n$.layout.onReady.push( $.layout.browserZoom._init );\n                                                                  // 5935\n\n                                                                                                                      // 5936\n\n                                                                                                                      // 5937\n})( jQuery );                                                                                                          // 5938\n                                                                                                                       // 5939\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['jquery-layout'] = {};\n\n})();\n","servePath":"/packages/jquery-layout.js"}]