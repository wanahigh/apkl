[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reactive-dict\":{\"migration.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/reactive-dict/migration.js                                                                             //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule.export({                                                                                                    // 1\n  ReactiveDict: function () {                                                                                      // 1\n    return ReactiveDict;                                                                                           // 1\n  }                                                                                                                // 1\n});                                                                                                                // 1\nvar ReactiveDict = void 0;                                                                                         // 1\nmodule.watch(require(\"./reactive-dict\"), {                                                                         // 1\n  ReactiveDict: function (v) {                                                                                     // 1\n    ReactiveDict = v;                                                                                              // 1\n  }                                                                                                                // 1\n}, 0);                                                                                                             // 1\nReactiveDict._migratedDictData = {}; // name -> data                                                               // 3\n                                                                                                                   //\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                         // 4\n                                                                                                                   //\nReactiveDict._loadMigratedDict = function (dictName) {                                                             // 6\n  if (_.has(ReactiveDict._migratedDictData, dictName)) {                                                           // 7\n    var data = ReactiveDict._migratedDictData[dictName];                                                           // 8\n    delete ReactiveDict._migratedDictData[dictName];                                                               // 9\n    return data;                                                                                                   // 10\n  }                                                                                                                // 11\n                                                                                                                   //\n  return null;                                                                                                     // 13\n};                                                                                                                 // 14\n                                                                                                                   //\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                                                 // 16\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);  // 17\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                                                   // 20\n};                                                                                                                 // 21\n                                                                                                                   //\nif (Meteor.isClient && Package.reload) {                                                                           // 23\n  // Put old migrated data into ReactiveDict._migratedDictData,                                                    // 24\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                                                   // 25\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');                                       // 26\n                                                                                                                   //\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // On migration, assemble the data from all the dicts that have been\n  // registered.                                                                                                   // 31\n                                                                                                                   //\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                                                  // 32\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                                             // 33\n    var dataToMigrate = {};                                                                                        // 34\n                                                                                                                   //\n    for (var dictName in meteorBabelHelpers.sanitizeForInObject(dictsToMigrate)) {                                 // 36\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();                                      // 37\n    }                                                                                                              // 36\n                                                                                                                   //\n    return [true, {                                                                                                // 39\n      dicts: dataToMigrate                                                                                         // 39\n    }];                                                                                                            // 39\n  });                                                                                                              // 40\n}                                                                                                                  // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"reactive-dict.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/reactive-dict/reactive-dict.js                                                                         //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                            //\n                                                                                                                   //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                   //\n                                                                                                                   //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                            //\n                                                                                                                   //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                   //\n                                                                                                                   //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                  //\n                                                                                                                   //\nmodule.export({                                                                                                    // 1\n  ReactiveDict: function () {                                                                                      // 1\n    return ReactiveDict;                                                                                           // 1\n  }                                                                                                                // 1\n});                                                                                                                // 1\n                                                                                                                   //\n// XXX come up with a serialization method which canonicalizes object key                                          // 1\n// order, which would allow us to use objects as values for equals.                                                // 2\nfunction stringify(value) {                                                                                        // 3\n  if (value === undefined) {                                                                                       // 4\n    return 'undefined';                                                                                            // 5\n  }                                                                                                                // 6\n                                                                                                                   //\n  return EJSON.stringify(value);                                                                                   // 7\n}                                                                                                                  // 8\n                                                                                                                   //\nfunction parse(serialized) {                                                                                       // 10\n  if (serialized === undefined || serialized === 'undefined') {                                                    // 11\n    return undefined;                                                                                              // 12\n  }                                                                                                                // 13\n                                                                                                                   //\n  return EJSON.parse(serialized);                                                                                  // 14\n}                                                                                                                  // 15\n                                                                                                                   //\nfunction changed(v) {                                                                                              // 17\n  v && v.changed();                                                                                                // 18\n} // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                              // 19\n                                                                                                                   //\n                                                                                                                   //\nvar ReactiveDict = function () {                                                                                   //\n  function ReactiveDict(dictName, dictData) {                                                                      // 23\n    (0, _classCallCheck3.default)(this, ReactiveDict);                                                             // 23\n    // this.keys: key -> value                                                                                     // 24\n    this.keys = {};                                                                                                // 25\n                                                                                                                   //\n    if (dictName) {                                                                                                // 27\n      // name given; migration will be performed                                                                   // 28\n      if (typeof dictName === 'string') {                                                                          // 29\n        // the normal case, argument is a string name.                                                             // 30\n        // Only run migration logic on client, it will cause                                                       // 32\n        // duplicate name errors on server during reloads.                                                         // 33\n        // _registerDictForMigrate will throw an error on duplicate name.                                          // 34\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);                                   // 35\n                                                                                                                   //\n        var migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);                            // 36\n                                                                                                                   //\n        if (migratedData) {                                                                                        // 38\n          // Don't stringify migrated data                                                                         // 39\n          this.keys = migratedData;                                                                                // 40\n        } else {                                                                                                   // 41\n          // Use _setObject to make sure values are stringified                                                    // 42\n          this._setObject(dictData || {});                                                                         // 43\n        }                                                                                                          // 44\n                                                                                                                   //\n        this.name = dictName;                                                                                      // 45\n      } else if ((typeof dictName === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(dictName)) === 'object') {\n        // back-compat case: dictName is actually migrationData                                                    // 47\n        // Use _setObject to make sure values are stringified                                                      // 48\n        this._setObject(dictName);                                                                                 // 49\n      } else {                                                                                                     // 50\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                                             // 51\n      }                                                                                                            // 52\n    } else if ((typeof dictData === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(dictData)) === 'object') {   // 53\n      this._setObject(dictData);                                                                                   // 54\n    }                                                                                                              // 55\n                                                                                                                   //\n    this.allDeps = new Tracker.Dependency();                                                                       // 57\n    this.keyDeps = {}; // key -> Dependency                                                                        // 58\n                                                                                                                   //\n    this.keyValueDeps = {}; // key -> Dependency                                                                   // 59\n  } // set() began as a key/value method, but we are now overloading it                                            // 60\n  // to take an object of key/value pairs, similar to backbone                                                     // 63\n  // http://backbonejs.org/#Model-set                                                                              // 64\n                                                                                                                   //\n                                                                                                                   //\n  ReactiveDict.prototype.set = function () {                                                                       //\n    function set(keyOrObject, value) {                                                                             //\n      if ((typeof keyOrObject === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(keyOrObject)) === 'object' && value === undefined) {\n        // Called as `dict.set({...})`                                                                             // 67\n        this._setObject(keyOrObject);                                                                              // 68\n                                                                                                                   //\n        return;                                                                                                    // 69\n      } // the input isn't an object, so it must be a key                                                          // 70\n      // and we resume with the rest of the function                                                               // 72\n                                                                                                                   //\n                                                                                                                   //\n      var key = keyOrObject;                                                                                       // 73\n      value = stringify(value);                                                                                    // 75\n                                                                                                                   //\n      var keyExisted = _.has(this.keys, key);                                                                      // 77\n                                                                                                                   //\n      var oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';                                          // 78\n      var isNewValue = value !== oldSerializedValue;                                                               // 79\n      this.keys[key] = value;                                                                                      // 81\n                                                                                                                   //\n      if (isNewValue || !keyExisted) {                                                                             // 83\n        // Using the changed utility function here because this.allDeps might not exist yet,                       // 84\n        // when setting initial data from constructor                                                              // 85\n        changed(this.allDeps);                                                                                     // 86\n      } // Don't trigger changes when setting initial data from constructor,                                       // 87\n      // this.KeyDeps is undefined in this case                                                                    // 90\n                                                                                                                   //\n                                                                                                                   //\n      if (isNewValue && this.keyDeps) {                                                                            // 91\n        changed(this.keyDeps[key]);                                                                                // 92\n                                                                                                                   //\n        if (this.keyValueDeps[key]) {                                                                              // 93\n          changed(this.keyValueDeps[key][oldSerializedValue]);                                                     // 94\n          changed(this.keyValueDeps[key][value]);                                                                  // 95\n        }                                                                                                          // 96\n      }                                                                                                            // 97\n    }                                                                                                              // 98\n                                                                                                                   //\n    return set;                                                                                                    //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype.setDefault = function () {                                                                //\n    function setDefault(keyOrObject, value) {                                                                      //\n      if ((typeof keyOrObject === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(keyOrObject)) === 'object' && value === undefined) {\n        // Called as `dict.setDefault({...})`                                                                      // 102\n        this._setDefaultObject(keyOrObject);                                                                       // 103\n                                                                                                                   //\n        return;                                                                                                    // 104\n      } // the input isn't an object, so it must be a key                                                          // 105\n      // and we resume with the rest of the function                                                               // 107\n                                                                                                                   //\n                                                                                                                   //\n      var key = keyOrObject;                                                                                       // 108\n                                                                                                                   //\n      if (!_.has(this.keys, key)) {                                                                                // 110\n        this.set(key, value);                                                                                      // 111\n      }                                                                                                            // 112\n    }                                                                                                              // 113\n                                                                                                                   //\n    return setDefault;                                                                                             //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype.get = function () {                                                                       //\n    function get(key) {                                                                                            //\n      this._ensureKey(key);                                                                                        // 116\n                                                                                                                   //\n      this.keyDeps[key].depend();                                                                                  // 117\n      return parse(this.keys[key]);                                                                                // 118\n    }                                                                                                              // 119\n                                                                                                                   //\n    return get;                                                                                                    //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype.equals = function () {                                                                    //\n    function equals(key, value) {                                                                                  //\n      var _this = this;                                                                                            // 121\n                                                                                                                   //\n      // Mongo.ObjectID is in the 'mongo' package                                                                  // 122\n      var ObjectID = null;                                                                                         // 123\n                                                                                                                   //\n      if (Package.mongo) {                                                                                         // 124\n        ObjectID = Package.mongo.Mongo.ObjectID;                                                                   // 125\n      } // We don't allow objects (or arrays that might include objects) for                                       // 126\n      // .equals, because JSON.stringify doesn't canonicalize object key                                           // 128\n      // order. (We can make equals have the right return value by parsing the                                     // 129\n      // current value and using EJSON.equals, but we won't have a canonical                                       // 130\n      // element of keyValueDeps[key] to store the dependency.) You can still use                                  // 131\n      // \"EJSON.equals(reactiveDict.get(key), value)\".                                                             // 132\n      //                                                                                                           // 133\n      // XXX we could allow arrays as long as we recursively check that there                                      // 134\n      // are no objects                                                                                            // 135\n                                                                                                                   //\n                                                                                                                   //\n      if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n        throw new Error(\"ReactiveDict.equals: value must be scalar\");                                              // 143\n      }                                                                                                            // 144\n                                                                                                                   //\n      var serializedValue = stringify(value);                                                                      // 145\n                                                                                                                   //\n      if (Tracker.active) {                                                                                        // 147\n        this._ensureKey(key);                                                                                      // 148\n                                                                                                                   //\n        if (!_.has(this.keyValueDeps[key], serializedValue)) {                                                     // 150\n          this.keyValueDeps[key][serializedValue] = new Tracker.Dependency();                                      // 151\n        }                                                                                                          // 152\n                                                                                                                   //\n        var isNew = this.keyValueDeps[key][serializedValue].depend();                                              // 154\n                                                                                                                   //\n        if (isNew) {                                                                                               // 155\n          Tracker.onInvalidate(function () {                                                                       // 156\n            // clean up [key][serializedValue] if it's now empty, so we don't                                      // 157\n            // use O(n) memory for n = values seen ever                                                            // 158\n            if (!_this.keyValueDeps[key][serializedValue].hasDependents()) {                                       // 159\n              delete _this.keyValueDeps[key][serializedValue];                                                     // 160\n            }                                                                                                      // 161\n          });                                                                                                      // 162\n        }                                                                                                          // 163\n      }                                                                                                            // 164\n                                                                                                                   //\n      var oldValue = undefined;                                                                                    // 166\n                                                                                                                   //\n      if (_.has(this.keys, key)) {                                                                                 // 167\n        oldValue = parse(this.keys[key]);                                                                          // 168\n      }                                                                                                            // 169\n                                                                                                                   //\n      return EJSON.equals(oldValue, value);                                                                        // 170\n    }                                                                                                              // 171\n                                                                                                                   //\n    return equals;                                                                                                 //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype.all = function () {                                                                       //\n    function all() {                                                                                               //\n      this.allDeps.depend();                                                                                       // 174\n      var ret = {};                                                                                                // 175\n                                                                                                                   //\n      _.each(this.keys, function (value, key) {                                                                    // 176\n        ret[key] = parse(value);                                                                                   // 177\n      });                                                                                                          // 178\n                                                                                                                   //\n      return ret;                                                                                                  // 179\n    }                                                                                                              // 180\n                                                                                                                   //\n    return all;                                                                                                    //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype.clear = function () {                                                                     //\n    function clear() {                                                                                             //\n      var _this2 = this;                                                                                           // 182\n                                                                                                                   //\n      var oldKeys = this.keys;                                                                                     // 183\n      this.keys = {};                                                                                              // 184\n      this.allDeps.changed();                                                                                      // 186\n                                                                                                                   //\n      _.each(oldKeys, function (value, key) {                                                                      // 188\n        changed(_this2.keyDeps[key]);                                                                              // 189\n                                                                                                                   //\n        if (_this2.keyValueDeps[key]) {                                                                            // 190\n          changed(_this2.keyValueDeps[key][value]);                                                                // 191\n          changed(_this2.keyValueDeps[key]['undefined']);                                                          // 192\n        }                                                                                                          // 193\n      });                                                                                                          // 194\n    }                                                                                                              // 195\n                                                                                                                   //\n    return clear;                                                                                                  //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype.delete = function () {                                                                    //\n    function _delete(key) {                                                                                        //\n      var didRemove = false;                                                                                       // 198\n                                                                                                                   //\n      if (_.has(this.keys, key)) {                                                                                 // 200\n        var oldValue = this.keys[key];                                                                             // 201\n        delete this.keys[key];                                                                                     // 202\n        changed(this.keyDeps[key]);                                                                                // 203\n                                                                                                                   //\n        if (this.keyValueDeps[key]) {                                                                              // 204\n          changed(this.keyValueDeps[key][oldValue]);                                                               // 205\n          changed(this.keyValueDeps[key]['undefined']);                                                            // 206\n        }                                                                                                          // 207\n                                                                                                                   //\n        this.allDeps.changed();                                                                                    // 208\n        didRemove = true;                                                                                          // 209\n      }                                                                                                            // 210\n                                                                                                                   //\n      return didRemove;                                                                                            // 211\n    }                                                                                                              // 212\n                                                                                                                   //\n    return _delete;                                                                                                //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype.destroy = function () {                                                                   //\n    function destroy() {                                                                                           //\n      this.clear();                                                                                                // 215\n                                                                                                                   //\n      if (this.name && _.has(ReactiveDict._dictsToMigrate, this.name)) {                                           // 216\n        delete ReactiveDict._dictsToMigrate[this.name];                                                            // 217\n      }                                                                                                            // 218\n    }                                                                                                              // 219\n                                                                                                                   //\n    return destroy;                                                                                                //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype._setObject = function () {                                                                //\n    function _setObject(object) {                                                                                  //\n      var _this3 = this;                                                                                           // 221\n                                                                                                                   //\n      _.each(object, function (value, key) {                                                                       // 222\n        _this3.set(key, value);                                                                                    // 223\n      });                                                                                                          // 224\n    }                                                                                                              // 225\n                                                                                                                   //\n    return _setObject;                                                                                             //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype._setDefaultObject = function () {                                                         //\n    function _setDefaultObject(object) {                                                                           //\n      var _this4 = this;                                                                                           // 227\n                                                                                                                   //\n      _.each(object, function (value, key) {                                                                       // 228\n        _this4.setDefault(key, value);                                                                             // 229\n      });                                                                                                          // 230\n    }                                                                                                              // 231\n                                                                                                                   //\n    return _setDefaultObject;                                                                                      //\n  }();                                                                                                             //\n                                                                                                                   //\n  ReactiveDict.prototype._ensureKey = function () {                                                                //\n    function _ensureKey(key) {                                                                                     //\n      if (!(key in this.keyDeps)) {                                                                                // 234\n        this.keyDeps[key] = new Tracker.Dependency();                                                              // 235\n        this.keyValueDeps[key] = {};                                                                               // 236\n      }                                                                                                            // 237\n    }                                                                                                              // 238\n                                                                                                                   //\n    return _ensureKey;                                                                                             //\n  }(); // Get a JSON value that can be passed to the constructor to                                                //\n  // create a new ReactiveDict with the same contents as this one                                                  // 241\n                                                                                                                   //\n                                                                                                                   //\n  ReactiveDict.prototype._getMigrationData = function () {                                                         //\n    function _getMigrationData() {                                                                                 //\n      // XXX sanitize and make sure it's JSONible?                                                                 // 243\n      return this.keys;                                                                                            // 244\n    }                                                                                                              // 245\n                                                                                                                   //\n    return _getMigrationData;                                                                                      //\n  }();                                                                                                             //\n                                                                                                                   //\n  return ReactiveDict;                                                                                             //\n}();                                                                                                               //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/reactive-dict/migration.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-dict'] = exports, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["packages/reactive-dict/migration.js","packages/reactive-dict/reactive-dict.js"],"names":["module","export","ReactiveDict","watch","require","v","_migratedDictData","_dictsToMigrate","_loadMigratedDict","dictName","_","has","data","_registerDictForMigrate","dict","Error","Meteor","isClient","Package","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate","_getMigrationData","stringify","value","undefined","EJSON","parse","serialized","changed","dictData","keys","migratedData","_setObject","name","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","set","keyOrObject","key","keyExisted","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","each","clear","oldKeys","delete","didRemove","destroy","object"],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["import { ReactiveDict } from './reactive-dict';\n\nReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) {\n    const data = ReactiveDict._migratedDictData[dictName];\n    delete ReactiveDict._migratedDictData[dictName];\n    return data;\n  }\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n\nexport { ReactiveDict };\n","// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nexport class ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency;\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  set(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    value = stringify(value);\n\n    const keyExisted = _.has(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = (value !== oldSerializedValue);\n\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  setDefault(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    if (! _.has(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (! _.has(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n    if (_.has(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    _.each(this.keys, (value, key) => {\n      ret[key] = parse(value);\n    });\n    return ret;\n  }\n\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n\n    this.allDeps.changed();\n\n    _.each(oldKeys, (value, key) => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][value]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  delete(key) {\n    let didRemove = false;\n\n    if (_.has(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n  \n  destroy() {\n    this.clear();\n    if (this.name && _.has(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    _.each(object, (value, key) => {\n      this.set(key, value);\n    });\n  }\n\n  _setDefaultObject(object) {\n    _.each(object, (value, key) => {\n      this.setDefault(key, value);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency;\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}\n"]}}]