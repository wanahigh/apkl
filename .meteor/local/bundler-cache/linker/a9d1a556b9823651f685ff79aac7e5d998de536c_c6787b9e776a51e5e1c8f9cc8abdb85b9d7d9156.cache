[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Match = Package.check.Match;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar MDl;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"zodiase:mdl\":{\"node_modules\":{\"webcomponents.js\":{\"MutationObserver.min.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/zodiase_mdl/node_modules/webcomponents.js/MutationObserver.min.js                                   //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n/**                                                                                                             // 1\n * @license                                                                                                     // 2\n * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.                                         // 3\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt         // 4\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt                             // 5\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt                   // 6\n * Code distributed by Google as part of the polymer project is also                                            // 7\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt                       // 8\n */                                                                                                             // 9\n// @version 0.7.24                                                                                              // 10\n\"undefined\"==typeof WeakMap&&!function(){var e=Object.defineProperty,t=Date.now()%1e9,r=function(){this.name=\"__st\"+(1e9*Math.random()>>>0)+(t++ +\"__\")};r.prototype={set:function(t,r){var i=t[this.name];return i&&i[0]===t?i[1]=r:e(t,this.name,{value:[t,r],writable:!0}),this},get:function(e){var t;return(t=e[this.name])&&t[0]===e?t[1]:void 0},\"delete\":function(e){var t=e[this.name];return!(!t||t[0]!==e)&&(t[0]=t[1]=void 0,!0)},has:function(e){var t=e[this.name];return!!t&&t[0]===e}},window.WeakMap=r}(),function(e){function t(e){N.push(e),O||(O=!0,b(i))}function r(e){return window.ShadowDOMPolyfill&&window.ShadowDOMPolyfill.wrapIfNeeded(e)||e}function i(){O=!1;var e=N;N=[],e.sort(function(e,t){return e.uid_-t.uid_});var t=!1;e.forEach(function(e){var r=e.takeRecords();n(e),r.length&&(e.callback_(r,e),t=!0)}),t&&i()}function n(e){e.nodes_.forEach(function(t){var r=p.get(t);r&&r.forEach(function(t){t.observer===e&&t.removeTransientObservers()})})}function a(e,t){for(var r=e;r;r=r.parentNode){var i=p.get(r);if(i)for(var n=0;n<i.length;n++){var a=i[n],s=a.options;if(r===e||s.subtree){var o=t(s);o&&a.enqueue(o)}}}}function s(e){this.callback_=e,this.nodes_=[],this.records_=[],this.uid_=++M}function o(e,t){this.type=e,this.target=t,this.addedNodes=[],this.removedNodes=[],this.previousSibling=null,this.nextSibling=null,this.attributeName=null,this.attributeNamespace=null,this.oldValue=null}function d(e){var t=new o(e.type,e.target);return t.addedNodes=e.addedNodes.slice(),t.removedNodes=e.removedNodes.slice(),t.previousSibling=e.previousSibling,t.nextSibling=e.nextSibling,t.attributeName=e.attributeName,t.attributeNamespace=e.attributeNamespace,t.oldValue=e.oldValue,t}function u(e,t){return D=new o(e,t)}function h(e){return w?w:(w=d(D),w.oldValue=e,w)}function c(){D=w=void 0}function v(e){return e===w||e===D}function l(e,t){return e===t?e:w&&v(e)?w:null}function f(e,t,r){this.observer=e,this.target=t,this.options=r,this.transientObservedNodes=[]}if(!e.JsMutationObserver){var b,p=new WeakMap;if(/Trident|Edge/.test(navigator.userAgent))b=setTimeout;else if(window.setImmediate)b=window.setImmediate;else{var g=[],m=String(Math.random());window.addEventListener(\"message\",function(e){if(e.data===m){var t=g;g=[],t.forEach(function(e){e()})}}),b=function(e){g.push(e),window.postMessage(m,\"*\")}}var O=!1,N=[],M=0;s.prototype={observe:function(e,t){if(e=r(e),!t.childList&&!t.attributes&&!t.characterData||t.attributeOldValue&&!t.attributes||t.attributeFilter&&t.attributeFilter.length&&!t.attributes||t.characterDataOldValue&&!t.characterData)throw new SyntaxError;var i=p.get(e);i||p.set(e,i=[]);for(var n,a=0;a<i.length;a++)if(i[a].observer===this){n=i[a],n.removeListeners(),n.options=t;break}n||(n=new f(this,e,t),i.push(n),this.nodes_.push(e)),n.addListeners()},disconnect:function(){this.nodes_.forEach(function(e){for(var t=p.get(e),r=0;r<t.length;r++){var i=t[r];if(i.observer===this){i.removeListeners(),t.splice(r,1);break}}},this),this.records_=[]},takeRecords:function(){var e=this.records_;return this.records_=[],e}};var D,w;f.prototype={enqueue:function(e){var r=this.observer.records_,i=r.length;if(r.length>0){var n=r[i-1],a=l(n,e);if(a)return void(r[i-1]=a)}else t(this.observer);r[i]=e},addListeners:function(){this.addListeners_(this.target)},addListeners_:function(e){var t=this.options;t.attributes&&e.addEventListener(\"DOMAttrModified\",this,!0),t.characterData&&e.addEventListener(\"DOMCharacterDataModified\",this,!0),t.childList&&e.addEventListener(\"DOMNodeInserted\",this,!0),(t.childList||t.subtree)&&e.addEventListener(\"DOMNodeRemoved\",this,!0)},removeListeners:function(){this.removeListeners_(this.target)},removeListeners_:function(e){var t=this.options;t.attributes&&e.removeEventListener(\"DOMAttrModified\",this,!0),t.characterData&&e.removeEventListener(\"DOMCharacterDataModified\",this,!0),t.childList&&e.removeEventListener(\"DOMNodeInserted\",this,!0),(t.childList||t.subtree)&&e.removeEventListener(\"DOMNodeRemoved\",this,!0)},addTransientObserver:function(e){if(e!==this.target){this.addListeners_(e),this.transientObservedNodes.push(e);var t=p.get(e);t||p.set(e,t=[]),t.push(this)}},removeTransientObservers:function(){var e=this.transientObservedNodes;this.transientObservedNodes=[],e.forEach(function(e){this.removeListeners_(e);for(var t=p.get(e),r=0;r<t.length;r++)if(t[r]===this){t.splice(r,1);break}},this)},handleEvent:function(e){switch(e.stopImmediatePropagation(),e.type){case\"DOMAttrModified\":var t=e.attrName,r=e.relatedNode.namespaceURI,i=e.target,n=new u(\"attributes\",i);n.attributeName=t,n.attributeNamespace=r;var s=e.attrChange===MutationEvent.ADDITION?null:e.prevValue;a(i,function(e){if(e.attributes&&(!e.attributeFilter||!e.attributeFilter.length||e.attributeFilter.indexOf(t)!==-1||e.attributeFilter.indexOf(r)!==-1))return e.attributeOldValue?h(s):n});break;case\"DOMCharacterDataModified\":var i=e.target,n=u(\"characterData\",i),s=e.prevValue;a(i,function(e){if(e.characterData)return e.characterDataOldValue?h(s):n});break;case\"DOMNodeRemoved\":this.addTransientObserver(e.target);case\"DOMNodeInserted\":var o,d,v=e.target;\"DOMNodeInserted\"===e.type?(o=[v],d=[]):(o=[],d=[v]);var l=v.previousSibling,f=v.nextSibling,n=u(\"childList\",e.target.parentNode);n.addedNodes=o,n.removedNodes=d,n.previousSibling=l,n.nextSibling=f,a(e.relatedNode,function(e){if(e.childList)return n})}c()}},e.JsMutationObserver=s,e.MutationObserver||(e.MutationObserver=s,s._isPolyfilled=!0)}}(self);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"setup.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/zodiase_mdl/setup.js                                                                                //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// This file prepares variables for the rest of the package.                                                    // 1\nif (typeof Package !== 'undefined') {                                                                           // 2\n  // Add an alias. \"Lite\" is lowercase because I think it's not at the same level at \"Material Design\".         // 3\n  /*global MDl:true*/MDl = {};                                                                                  // 4\n}                                                                                                               // 6\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"check.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/zodiase_mdl/check.js                                                                                //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n// When the document is loaded, check if MDl is correctly initialized.                                          // 1\nif (Meteor.isClient) {                                                                                          // 2\n  Meteor.startup(function () {                                                                                  // 3\n    check(this, Match.ObjectIncluding({                                                                         // 4\n      \"settings\": Match.Optional(Object),                                                                       // 5\n      \"componentHandler\": Match.Optional(Object)                                                                // 6\n    }), 'Package is corrupted.');                                                                               // 4\n                                                                                                                //\n    if (!this.settings) {                                                                                       // 9\n      console.warn(\"MDl disabled. Create a file named 'zodiase-mdl.json' at the root of the app to enable.\");   // 10\n    }                                                                                                           // 11\n  }.bind(MDl));                                                                                                 // 12\n}                                                                                                               // 13\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"patch\":{\"autoUpgrade.js\":function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/zodiase_mdl/patch/autoUpgrade.js                                                                    //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                         //\n                                                                                                                //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                //\n                                                                                                                //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }               //\n                                                                                                                //\n// This patch is used for auto-upgrading when DOM is changed by blaze.                                          // 1\n// Well, maybe not just blaze.                                                                                  // 2\n// But when you are manipulating the DOM by yourself, you should remember to upgrade.                           // 3\n//                                                                                                              // 4\n// Browser compatibility: check https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver               // 5\n// also http://caniuse.com/#search=MutationObserver                                                             // 6\n/*global MDl:true*/if (Meteor.isClient) {                                                                       // 8\n  var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;                              // 11\n  var ObjectHasOwnProperty = Object.prototype.hasOwnProperty;                                                   // 12\n                                                                                                                //\n  var AutoUpgrade = function () {                                                                               // 10\n    AutoUpgrade.handleMutation = function () {                                                                  // 10\n      function handleMutation(mutation) {                                                                       // 10\n        switch (mutation.type) {                                                                                // 16\n          case 'attributes':                                                                                    // 17\n            //! Try to upgrade this element.                                                                    // 18\n            break;                                                                                              // 19\n                                                                                                                //\n          case 'characterData':                                                                                 // 20\n            // Ignore character changes.                                                                        // 21\n            break;                                                                                              // 22\n                                                                                                                //\n          case 'childList':                                                                                     // 23\n            // Upgrade the new children.                                                                        // 24\n            if (mutation.addedNodes.length > 0 && mutation.target instanceof Element) {                         // 25\n              MDl.componentHandler.upgradeElements(mutation.target);                                            // 26\n            }                                                                                                   // 27\n                                                                                                                //\n            break;                                                                                              // 28\n                                                                                                                //\n          default:                                                                                              // 29\n            throw new Error('Invalid type of mutation.');                                                       // 30\n            break;                                                                                              // 31\n        }                                                                                                       // 16\n      }                                                                                                         // 33\n                                                                                                                //\n      return handleMutation;                                                                                    // 10\n    }();                                                                                                        // 10\n                                                                                                                //\n    function AutoUpgrade(MutationObserver) {                                                                    // 34\n      (0, _classCallCheck3.default)(this, AutoUpgrade);                                                         // 34\n      this._upgradeStyle = false;                                                                               // 35\n      this._upgradeBehavior = null;                                                                             // 36\n      this._observer = new MutationObserver(this.onMutationObserved.bind(this));                                // 37\n    }                                                                                                           // 38\n                                                                                                                //\n    AutoUpgrade.prototype.onMutationObserved = function () {                                                    // 10\n      function onMutationObserved(mutations, observer) {                                                        // 10\n        if (this._upgradeBehavior) {                                                                            // 40\n          this._upgradeBehavior(mutations, observer);                                                           // 41\n        }                                                                                                       // 42\n      }                                                                                                         // 43\n                                                                                                                //\n      return onMutationObserved;                                                                                // 10\n    }();                                                                                                        // 10\n                                                                                                                //\n    AutoUpgrade.prototype.setUpgradeStyle = function () {                                                       // 10\n      function setUpgradeStyle(style) {                                                                         // 10\n        if (ObjectHasOwnProperty.call(AutoUpgrade.upgradeBehaviors, style)) {                                   // 45\n          this._upgradeStyle = style;                                                                           // 46\n          this._upgradeBehavior = AutoUpgrade.upgradeBehaviors[style];                                          // 47\n                                                                                                                //\n          if (style === 'none') {                                                                               // 49\n            this._observer.disconnect();                                                                        // 50\n          } else {                                                                                              // 51\n            this._observer.observe(document.body, AutoUpgrade.observeConfig);                                   // 52\n          }                                                                                                     // 53\n        } else {                                                                                                // 54\n          throw new Error(\"Invalid upgrade style.\");                                                            // 55\n        }                                                                                                       // 56\n      }                                                                                                         // 57\n                                                                                                                //\n      return setUpgradeStyle;                                                                                   // 10\n    }();                                                                                                        // 10\n                                                                                                                //\n    AutoUpgrade.prototype.getUpgradeStyle = function () {                                                       // 10\n      function getUpgradeStyle() {                                                                              // 10\n        return this._upgradeStyle;                                                                              // 59\n      }                                                                                                         // 60\n                                                                                                                //\n      return getUpgradeStyle;                                                                                   // 10\n    }();                                                                                                        // 10\n                                                                                                                //\n    return AutoUpgrade;                                                                                         // 10\n  }();                                                                                                          // 10\n                                                                                                                //\n  AutoUpgrade.upgradeBehaviors = {                                                                              // 62\n    \"fullUpgrade\": function (mutations, observer) {                                                             // 63\n      MDl.componentHandler.upgradeAllRegistered();                                                              // 64\n    },                                                                                                          // 65\n    \"mutationOnly\": function (mutations, observer) {                                                            // 66\n      for (var i = 0, n = mutations.length; i < n; i++) {                                                       // 67\n        AutoUpgrade.handleMutation(mutations[i]);                                                               // 68\n      }                                                                                                         // 69\n    },                                                                                                          // 70\n    \"none\": function (mutations, observer) {}                                                                   // 71\n  };                                                                                                            // 62\n  AutoUpgrade.observeConfig = {                                                                                 // 73\n    childList: true,                                                                                            // 74\n    attributes: true,                                                                                           // 75\n    characterData: false,                                                                                       // 76\n    subtree: true //attributeOldValue: false,                                                                   // 77\n    //characterDataOldValue: false                                                                              // 79\n    //attributeFilter: []                                                                                       // 80\n                                                                                                                //\n  };                                                                                                            // 73\n  Meteor.startup(function () {                                                                                  // 83\n    // Check if settings is loaded.                                                                             // 84\n    if (typeof this.settings === 'undefined') {                                                                 // 85\n      return;                                                                                                   // 86\n    } //else                                                                                                    // 87\n    // Read settings.                                                                                           // 90\n                                                                                                                //\n                                                                                                                //\n    var upgradeStyle = this.settings.patches.autoUpgrade; // If upgradeStyle is `false`, disable everything.    // 91\n                                                                                                                //\n    if (upgradeStyle === false) {                                                                               // 93\n      this.autoUpgrade = null;                                                                                  // 94\n    } else {                                                                                                    // 95\n      // If MutationObserver is not available on this platform, there's little we can do.                       // 96\n      if (!MutationObserver) {                                                                                  // 97\n        throw new Error(\"MDl AutoUpgrade doesn't support your current client environment. Please disable it.\");\n      } else {                                                                                                  // 99\n        this.autoUpgrade = new AutoUpgrade(MutationObserver);                                                   // 100\n        this.autoUpgrade.setUpgradeStyle(upgradeStyle);                                                         // 101\n      }                                                                                                         // 102\n    }                                                                                                           // 103\n  }.bind(MDl));                                                                                                 // 104\n}                                                                                                               // 105\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".scss\"\n  ]\n});\nrequire(\"./node_modules/meteor/zodiase:mdl/node_modules/webcomponents.js/MutationObserver.min.js\");\nrequire(\"./node_modules/meteor/zodiase:mdl/setup.js\");\nrequire(\"./node_modules/meteor/zodiase:mdl/check.js\");\nrequire(\"./node_modules/meteor/zodiase:mdl/patch/autoUpgrade.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['zodiase:mdl'] = {}, {\n  MDl: MDl\n});\n\n})();\n","servePath":"/packages/zodiase_mdl.js","sourceMap":{"version":3,"sources":["packages/zodiase:mdl/setup.js","packages/zodiase:mdl/check.js","packages/zodiase:mdl/patch/autoUpgrade.js"],"names":["Package","MDl","Meteor","isClient","startup","check","Match","ObjectIncluding","Optional","Object","settings","console","warn","bind","MutationObserver","window","WebKitMutationObserver","ObjectHasOwnProperty","prototype","hasOwnProperty","AutoUpgrade","handleMutation","mutation","type","addedNodes","length","target","Element","componentHandler","upgradeElements","Error","_upgradeStyle","_upgradeBehavior","_observer","onMutationObserved","mutations","observer","setUpgradeStyle","style","call","upgradeBehaviors","disconnect","observe","document","body","observeConfig","getUpgradeStyle","upgradeAllRegistered","i","n","childList","attributes","characterData","subtree","upgradeStyle","patches","autoUpgrade"],"mappings":"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","file":"/packages/zodiase_mdl.js","sourcesContent":["// This file prepares variables for the rest of the package.\nif (typeof Package !== 'undefined') {\n  // Add an alias. \"Lite\" is lowercase because I think it's not at the same level at \"Material Design\".\n  /*global MDl:true*/\n  MDl = {};\n}\n","// When the document is loaded, check if MDl is correctly initialized.\nif (Meteor.isClient) {\n  Meteor.startup(function () {\n    check(this, Match.ObjectIncluding({\n      \"settings\": Match.Optional(Object),\n      \"componentHandler\": Match.Optional(Object)\n    }), 'Package is corrupted.');\n\n    if (!this.settings) {\n      console.warn(\"MDl disabled. Create a file named 'zodiase-mdl.json' at the root of the app to enable.\");\n    }\n  }.bind(MDl));\n}\n","// This patch is used for auto-upgrading when DOM is changed by blaze.\n// Well, maybe not just blaze.\n// But when you are manipulating the DOM by yourself, you should remember to upgrade.\n//\n// Browser compatibility: check https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n// also http://caniuse.com/#search=MutationObserver\n\n/*global MDl:true*/\n\nif (Meteor.isClient) {\n  const MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n  const ObjectHasOwnProperty = Object.prototype.hasOwnProperty;\n\n  class AutoUpgrade {\n    static handleMutation(mutation) {\n      switch (mutation.type) {\n        case 'attributes':\n          //! Try to upgrade this element.\n          break;\n        case 'characterData':\n          // Ignore character changes.\n          break;\n        case 'childList':\n          // Upgrade the new children.\n          if (mutation.addedNodes.length > 0 && mutation.target instanceof Element) {\n            MDl.componentHandler.upgradeElements(mutation.target);\n          }\n          break;\n        default:\n          throw new Error('Invalid type of mutation.');\n          break;\n      }\n    }\n    constructor(MutationObserver) {\n      this._upgradeStyle = false;\n      this._upgradeBehavior = null;\n      this._observer = new MutationObserver(this.onMutationObserved.bind(this));\n    }\n    onMutationObserved(mutations, observer) {\n      if (this._upgradeBehavior) {\n        this._upgradeBehavior(mutations, observer);\n      }\n    }\n    setUpgradeStyle(style) {\n      if (ObjectHasOwnProperty.call(AutoUpgrade.upgradeBehaviors, style)) {\n        this._upgradeStyle = style;\n        this._upgradeBehavior = AutoUpgrade.upgradeBehaviors[style];\n\n        if (style === 'none') {\n          this._observer.disconnect();\n        } else {\n          this._observer.observe(document.body, AutoUpgrade.observeConfig);\n        }\n      } else {\n        throw new Error(\"Invalid upgrade style.\");\n      }\n    }\n    getUpgradeStyle() {\n      return this._upgradeStyle;\n    }\n  }\n  AutoUpgrade.upgradeBehaviors = {\n    \"fullUpgrade\": function (mutations, observer) {\n      MDl.componentHandler.upgradeAllRegistered();\n    },\n    \"mutationOnly\": function (mutations, observer) {\n      for (let i = 0, n = mutations.length; i < n; i++) {\n        AutoUpgrade.handleMutation(mutations[i]);\n      }\n    },\n    \"none\": function (mutations, observer) {}\n  };\n  AutoUpgrade.observeConfig = {\n    childList: true,\n    attributes: true,\n    characterData: false,\n    subtree: true\n    //attributeOldValue: false,\n    //characterDataOldValue: false\n    //attributeFilter: []\n  };\n\n  Meteor.startup(function () {\n    // Check if settings is loaded.\n    if (typeof this.settings === 'undefined') {\n      return;\n    }\n    //else\n\n    // Read settings.\n    let upgradeStyle = this.settings.patches.autoUpgrade;\n    // If upgradeStyle is `false`, disable everything.\n    if (upgradeStyle === false) {\n      this.autoUpgrade = null;\n    } else {\n      // If MutationObserver is not available on this platform, there's little we can do.\n      if (!MutationObserver) {\n        throw new Error(\"MDl AutoUpgrade doesn't support your current client environment. Please disable it.\");\n      } else {\n        this.autoUpgrade = new AutoUpgrade(MutationObserver);\n        this.autoUpgrade.setUpgradeStyle(upgradeStyle);\n      }\n    }\n  }.bind(MDl));\n}\n"]}}]