[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nEmail = Package.email.Email;\nEmailInternals = Package.email.EmailInternals;\n_ = Package.underscore._;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nTerminal = Package['channikhabra:terminal'].Terminal;\nTerminalBuffer = Package['channikhabra:terminal'].TerminalBuffer;\nModel = Package['channikhabra:stupid-models'].Model;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nGoogle = Package['google-oauth'].Google;\nGithub = Package['github-oauth'].Github;\nFacebook = Package['facebook-oauth'].Facebook;\n_mdlGetAsset = Package['zodiase:mdl-assets']._mdlGetAsset;\nAccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nHTML = Package.htmljs.HTML;\nAutoupdate = Package.autoupdate.Autoupdate;\nT9n = Package['softwarerero:accounts-t9n'].T9n;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"collections\":{\"UserCol.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// lib/collections/UserCol.js                                                                                    //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nUserID = new Mongo.Collection('userID');\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"comments.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// lib/collections/comments.js                                                                                   //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nComments = new Mongo.Collection('comments');\nMeteor.methods({\n  commentInsert: function (commentAttributes) {\n    check(this.userId, String);\n    check(commentAttributes, {\n      postId: String,\n      body: String\n    });\n    var user = Meteor.user();\n    var post = Posts.findOne(commentAttributes.postId);\n    if (!post) throw new Meteor.Error('invalid-comment', 'You must comment on a post');\n    comment = _.extend(commentAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date()\n    }); // update the post with the number of comments\n\n    Posts.update(comment.postId, {\n      $inc: {\n        commentsCount: 1\n      }\n    }); // create the comment, save the id\n\n    comment._id = Comments.insert(comment); // now create a notification, informing the user that there's been a comment\n\n    createCommentNotification(comment);\n    return comment._id;\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notifications.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// lib/collections/notifications.js                                                                              //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nNotifications = new Mongo.Collection('notifications');\nNotifications.allow({\n  update: function (userId, doc, fieldNames) {\n    return ownsDocument(userId, doc) && fieldNames.length === 1 && fieldNames[0] === 'read';\n  }\n});\n\ncreateCommentNotification = function (comment) {\n  var post = Posts.findOne(comment.postId);\n\n  if (comment.userId !== post.userId) {\n    Notifications.insert({\n      userId: post.userId,\n      postId: post._id,\n      commentId: comment._id,\n      commenterName: comment.author,\n      read: false\n    });\n  }\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"posts.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// lib/collections/posts.js                                                                                      //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nPosts = new Mongo.Collection('posts');\nPosts.allow({\n  update: function (userId, post) {\n    return ownsDocument(userId, post);\n  },\n  remove: function (userId, post) {\n    return ownsDocument(userId, post);\n  }\n});\nPosts.deny({\n  update: function (userId, post, fieldNames) {\n    // may only edit the following two fields:\n    return _.without(fieldNames, 'url', 'title').length > 0;\n  }\n});\nPosts.deny({\n  update: function (userId, post, fieldNames, modifier) {\n    var errors = validatePost(modifier.$set);\n    return errors.title || errors.url;\n  }\n});\n\nvalidatePost = function (post) {\n  var errors = {};\n  if (!post.title) errors.title = \"Please fill in a headline\";\n  if (!post.url) errors.url = \"Please fill in a URL\";\n  return errors;\n};\n\nMeteor.methods({\n  postInsert: function (postAttributes) {\n    check(this.userId, String);\n    check(postAttributes, {\n      title: String,\n      url: String\n    });\n    var errors = validatePost(postAttributes);\n    if (errors.title || errors.url) throw new Meteor.Error('invalid-post', \"You must set a title and URL for your post\");\n    var postWithSameLink = Posts.findOne({\n      url: postAttributes.url\n    });\n\n    if (postWithSameLink) {\n      return {\n        postExists: true,\n        _id: postWithSameLink._id\n      };\n    }\n\n    var user = Meteor.user();\n\n    var post = _.extend(postAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date(),\n      commentsCount: 0,\n      upvoters: [],\n      votes: 0\n    });\n\n    var postId = Posts.insert(post);\n    return {\n      _id: postId\n    };\n  },\n  upvote: function (postId) {\n    check(this.userId, String);\n    check(postId, String);\n    var affected = Posts.update({\n      _id: postId,\n      upvoters: {\n        $ne: this.userId\n      }\n    }, {\n      $addToSet: {\n        upvoters: this.userId\n      },\n      $inc: {\n        votes: 1\n      }\n    });\n    if (!affected) throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"permissions.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// lib/permissions.js                                                                                            //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n// check that the userId specified owns the documents\nownsDocument = function (userId, doc) {\n  return doc && doc.userId === userId;\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"router.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// lib/router.js                                                                                                 //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nRouter.configure({\n    layoutTemplate: 'layout',\n    notFoundTemplate: 'notFound'\n});\nRouter.route('/tuto', {\n    name: 'tuto'\n});\nRouter.route('/exo', {\n    name: 'exo'\n});\nRouter.route('/DL', {\n    name: 'DL'\n});\nRouter.route('/AP', {\n    name: 'AP'\n});\nRouter.route('/VPN', {\n    name: 'VPN'\n});\nRouter.route('/CTC', {\n    name: 'contact'\n});\nRouter.route('/FLC', {\n    name: 'FLC'\n});\nRouter.route('/pub', {\n    name: 'publication'\n});\nPostsListController = RouteController.extend({\n    template: 'postsList',\n    increment: 5,\n    postsLimit: function () {\n        return parseInt(this.params.postsLimit) || this.increment;\n    },\n    findOptions: function () {\n        return {\n            sort: this.sort,\n            limit: this.postsLimit()\n        };\n    },\n    subscriptions: function () {\n        this.postsSub = Meteor.subscribe('posts', this.findOptions());\n    },\n    posts: function () {\n        return Posts.find({}, this.findOptions());\n    },\n    data: function () {\n        var self = this;\n        return {\n            posts: self.posts(),\n            ready: self.postsSub.ready,\n            nextPath: function () {\n                if (self.posts().count() === self.postsLimit()) return self.nextPath();\n            }\n        };\n    }\n});\nNewPostsController = PostsListController.extend({\n    sort: {\n        submitted: -1,\n        _id: -1\n    },\n    nextPath: function () {\n        return Router.routes.newPosts.path({\n            postsLimit: this.postsLimit() + this.increment\n        });\n    }\n});\nBestPostsController = PostsListController.extend({\n    sort: {\n        votes: -1,\n        submitted: -1,\n        _id: -1\n    },\n    nextPath: function () {\n        return Router.routes.bestPosts.path({\n            postsLimit: this.postsLimit() + this.increment\n        });\n    }\n});\nRouter.route('/', {\n    name: 'home'\n});\nRouter.route('/new/:postsLimit?', {\n    name: 'newPosts'\n});\nRouter.route('/best/:postsLimit?', {\n    name: 'bestPosts'\n});\nRouter.route('/posts/:_id', {\n    name: 'postPage',\n    waitOn: function () {\n        return [Meteor.subscribe('singlePost', this.params._id), Meteor.subscribe('comments', this.params._id)];\n    },\n    data: function () {\n        return Posts.findOne(this.params._id);\n    }\n});\nRouter.route('/posts/:_id/edit', {\n    name: 'postEdit',\n    waitOn: function () {\n        return Meteor.subscribe('singlePost', this.params._id);\n    },\n    data: function () {\n        return Posts.findOne(this.params._id);\n    }\n});\nRouter.route('/submit', {\n    name: 'postSubmit'\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"fixtures.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// server/fixtures.js                                                                                            //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n// Fixture data \nif (Posts.find().count() === 0) {\n  var now = new Date().getTime(); // create two users\n\n  var tomId = Meteor.users.insert({\n    profile: {\n      name: 'Tom Coleman'\n    }\n  });\n  var tom = Meteor.users.findOne(tomId);\n  var sachaId = Meteor.users.insert({\n    profile: {\n      name: 'Sacha Greif'\n    }\n  });\n  var sacha = Meteor.users.findOne(sachaId);\n  var telescopeId = Posts.insert({\n    title: 'Introducing Telescope',\n    userId: sacha._id,\n    author: sacha.profile.name,\n    url: 'http://sachagreif.com/introducing-telescope/',\n    submitted: new Date(now - 7 * 3600 * 1000),\n    commentsCount: 2,\n    upvoters: [],\n    votes: 0\n  });\n  Comments.insert({\n    postId: telescopeId,\n    userId: tom._id,\n    author: tom.profile.name,\n    submitted: new Date(now - 5 * 3600 * 1000),\n    body: 'Interesting project Sacha, can I get involved?'\n  });\n  Comments.insert({\n    postId: telescopeId,\n    userId: sacha._id,\n    author: sacha.profile.name,\n    submitted: new Date(now - 3 * 3600 * 1000),\n    body: 'You sure can Tom!'\n  });\n  Posts.insert({\n    title: 'Meteor',\n    userId: tom._id,\n    author: tom.profile.name,\n    url: 'http://meteor.com',\n    submitted: new Date(now - 10 * 3600 * 1000),\n    commentsCount: 0,\n    upvoters: [],\n    votes: 0\n  });\n  Posts.insert({\n    title: 'The Meteor Book',\n    userId: tom._id,\n    author: tom.profile.name,\n    url: 'http://themeteorbook.com',\n    submitted: new Date(now - 12 * 3600 * 1000),\n    commentsCount: 0,\n    upvoters: [],\n    votes: 0\n  });\n\n  for (var i = 0; i < 10; i++) {\n    Posts.insert({\n      title: 'Test post #' + i,\n      author: sacha.profile.name,\n      userId: sacha._id,\n      url: 'http://google.com/?q=test-' + i,\n      submitted: new Date(now - i * 3600 * 1000 + 1),\n      commentsCount: 0,\n      upvoters: [],\n      votes: 0\n    });\n  }\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// server/main.js                                                                                                //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nMeteor.startup(() => {// code to run on server at startup\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./lib/collections/UserCol.js\");\nrequire(\"./lib/collections/comments.js\");\nrequire(\"./lib/collections/notifications.js\");\nrequire(\"./lib/collections/posts.js\");\nrequire(\"./lib/permissions.js\");\nrequire(\"./lib/router.js\");\nrequire(\"./server/fixtures.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["lib/collections/UserCol.js","lib/collections/comments.js","lib/collections/notifications.js","lib/collections/posts.js","lib/permissions.js","lib/router.js","server/fixtures.js","server/main.js"],"names":["UserID","Mongo","Collection","Comments","Meteor","methods","commentInsert","commentAttributes","check","userId","String","postId","body","user","post","Posts","findOne","Error","comment","_","extend","_id","author","username","submitted","Date","update","$inc","commentsCount","insert","createCommentNotification","Notifications","allow","doc","fieldNames","ownsDocument","length","commentId","commenterName","read","remove","deny","without","modifier","errors","validatePost","$set","title","url","postInsert","postAttributes","postWithSameLink","postExists","upvoters","votes","upvote","affected","$ne","$addToSet","Router","configure","layoutTemplate","notFoundTemplate","route","name","PostsListController","RouteController","template","increment","postsLimit","parseInt","params","findOptions","sort","limit","subscriptions","postsSub","subscribe","posts","find","data","self","ready","nextPath","count","NewPostsController","routes","newPosts","path","BestPostsController","bestPosts","waitOn","now","getTime","tomId","users","profile","tom","sachaId","sacha","telescopeId","i","module","watch","require","v","startup"],"mappings":";;;;;;;;AAAAA,SAAS,IAAIC,MAAMC,UAAV,CAAqB,QAArB,CAAT,C;;;;;;;;;;;ACAAC,WAAW,IAAIF,MAAMC,UAAV,CAAqB,UAArB,CAAX;AAEAE,OAAOC,OAAP,CAAe;AACbC,iBAAe,UAASC,iBAAT,EAA4B;AACzCC,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAMD,iBAAN,EAAyB;AACvBI,cAAQD,MADe;AAEvBE,YAAMF;AAFiB,KAAzB;AAKA,QAAIG,OAAOT,OAAOS,IAAP,EAAX;AACA,QAAIC,OAAOC,MAAMC,OAAN,CAAcT,kBAAkBI,MAAhC,CAAX;AAEA,QAAI,CAACG,IAAL,EACE,MAAM,IAAIV,OAAOa,KAAX,CAAiB,iBAAjB,EAAoC,4BAApC,CAAN;AAEFC,cAAUC,EAAEC,MAAF,CAASb,iBAAT,EAA4B;AACpCE,cAAQI,KAAKQ,GADuB;AAEpCC,cAAQT,KAAKU,QAFuB;AAGpCC,iBAAW,IAAIC,IAAJ;AAHyB,KAA5B,CAAV,CAbyC,CAmBzC;;AACAV,UAAMW,MAAN,CAAaR,QAAQP,MAArB,EAA6B;AAACgB,YAAM;AAACC,uBAAe;AAAhB;AAAP,KAA7B,EApByC,CAsBzC;;AACAV,YAAQG,GAAR,GAAclB,SAAS0B,MAAT,CAAgBX,OAAhB,CAAd,CAvByC,CAyBzC;;AACAY,8BAA0BZ,OAA1B;AAEA,WAAOA,QAAQG,GAAf;AACD;AA9BY,CAAf,E;;;;;;;;;;;ACFAU,gBAAgB,IAAI9B,MAAMC,UAAV,CAAqB,eAArB,CAAhB;AAEA6B,cAAcC,KAAd,CAAoB;AAClBN,UAAQ,UAASjB,MAAT,EAAiBwB,GAAjB,EAAsBC,UAAtB,EAAkC;AACxC,WAAOC,aAAa1B,MAAb,EAAqBwB,GAArB,KACLC,WAAWE,MAAX,KAAsB,CADjB,IACsBF,WAAW,CAAX,MAAkB,MAD/C;AAED;AAJiB,CAApB;;AAOAJ,4BAA4B,UAASZ,OAAT,EAAkB;AAC5C,MAAIJ,OAAOC,MAAMC,OAAN,CAAcE,QAAQP,MAAtB,CAAX;;AACA,MAAIO,QAAQT,MAAR,KAAmBK,KAAKL,MAA5B,EAAoC;AAClCsB,kBAAcF,MAAd,CAAqB;AACnBpB,cAAQK,KAAKL,MADM;AAEnBE,cAAQG,KAAKO,GAFM;AAGnBgB,iBAAWnB,QAAQG,GAHA;AAInBiB,qBAAepB,QAAQI,MAJJ;AAKnBiB,YAAM;AALa,KAArB;AAOD;AACF,CAXD,C;;;;;;;;;;;ACTAxB,QAAQ,IAAId,MAAMC,UAAV,CAAqB,OAArB,CAAR;AAEAa,MAAMiB,KAAN,CAAY;AACVN,UAAQ,UAASjB,MAAT,EAAiBK,IAAjB,EAAuB;AAAE,WAAOqB,aAAa1B,MAAb,EAAqBK,IAArB,CAAP;AAAoC,GAD3D;AAEV0B,UAAQ,UAAS/B,MAAT,EAAiBK,IAAjB,EAAuB;AAAE,WAAOqB,aAAa1B,MAAb,EAAqBK,IAArB,CAAP;AAAoC;AAF3D,CAAZ;AAKAC,MAAM0B,IAAN,CAAW;AACTf,UAAQ,UAASjB,MAAT,EAAiBK,IAAjB,EAAuBoB,UAAvB,EAAmC;AACzC;AACA,WAAQf,EAAEuB,OAAF,CAAUR,UAAV,EAAsB,KAAtB,EAA6B,OAA7B,EAAsCE,MAAtC,GAA+C,CAAvD;AACD;AAJQ,CAAX;AAOArB,MAAM0B,IAAN,CAAW;AACTf,UAAQ,UAASjB,MAAT,EAAiBK,IAAjB,EAAuBoB,UAAvB,EAAmCS,QAAnC,EAA6C;AACnD,QAAIC,SAASC,aAAaF,SAASG,IAAtB,CAAb;AACA,WAAOF,OAAOG,KAAP,IAAgBH,OAAOI,GAA9B;AACD;AAJQ,CAAX;;AAOAH,eAAe,UAAU/B,IAAV,EAAgB;AAC7B,MAAI8B,SAAS,EAAb;AAEA,MAAI,CAAC9B,KAAKiC,KAAV,EACEH,OAAOG,KAAP,GAAe,2BAAf;AAEF,MAAI,CAACjC,KAAKkC,GAAV,EACEJ,OAAOI,GAAP,GAAc,sBAAd;AAEF,SAAOJ,MAAP;AACD,CAVD;;AAYAxC,OAAOC,OAAP,CAAe;AACb4C,cAAY,UAASC,cAAT,EAAyB;AACnC1C,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAM0C,cAAN,EAAsB;AACpBH,aAAOrC,MADa;AAEpBsC,WAAKtC;AAFe,KAAtB;AAKA,QAAIkC,SAASC,aAAaK,cAAb,CAAb;AACA,QAAIN,OAAOG,KAAP,IAAgBH,OAAOI,GAA3B,EACE,MAAM,IAAI5C,OAAOa,KAAX,CAAiB,cAAjB,EAAiC,4CAAjC,CAAN;AAEF,QAAIkC,mBAAmBpC,MAAMC,OAAN,CAAc;AAACgC,WAAKE,eAAeF;AAArB,KAAd,CAAvB;;AACA,QAAIG,gBAAJ,EAAsB;AACpB,aAAO;AACLC,oBAAY,IADP;AAEL/B,aAAK8B,iBAAiB9B;AAFjB,OAAP;AAID;;AAED,QAAIR,OAAOT,OAAOS,IAAP,EAAX;;AACA,QAAIC,OAAOK,EAAEC,MAAF,CAAS8B,cAAT,EAAyB;AAClCzC,cAAQI,KAAKQ,GADqB;AAElCC,cAAQT,KAAKU,QAFqB;AAGlCC,iBAAW,IAAIC,IAAJ,EAHuB;AAIlCG,qBAAe,CAJmB;AAKlCyB,gBAAU,EALwB;AAMlCC,aAAO;AAN2B,KAAzB,CAAX;;AASA,QAAI3C,SAASI,MAAMc,MAAN,CAAaf,IAAb,CAAb;AAEA,WAAO;AACLO,WAAKV;AADA,KAAP;AAGD,GAnCY;AAqCb4C,UAAQ,UAAS5C,MAAT,EAAiB;AACvBH,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAMG,MAAN,EAAcD,MAAd;AAEA,QAAI8C,WAAWzC,MAAMW,MAAN,CAAa;AAC1BL,WAAKV,MADqB;AAE1B0C,gBAAU;AAACI,aAAK,KAAKhD;AAAX;AAFgB,KAAb,EAGZ;AACDiD,iBAAW;AAACL,kBAAU,KAAK5C;AAAhB,OADV;AAEDkB,YAAM;AAAC2B,eAAO;AAAR;AAFL,KAHY,CAAf;AAQA,QAAI,CAAEE,QAAN,EACE,MAAM,IAAIpD,OAAOa,KAAX,CAAiB,SAAjB,EAA4B,sCAA5B,CAAN;AACH;AAnDY,CAAf,E;;;;;;;;;;;ACjCA;AACAkB,eAAe,UAAS1B,MAAT,EAAiBwB,GAAjB,EAAsB;AACnC,SAAOA,OAAOA,IAAIxB,MAAJ,KAAeA,MAA7B;AACD,CAFD,C;;;;;;;;;;;ACDAkD,OAAOC,SAAP,CAAiB;AACbC,oBAAgB,QADH;AAEbC,sBAAkB;AAFL,CAAjB;AAKAH,OAAOI,KAAP,CAAa,OAAb,EAAsB;AAACC,UAAO;AAAR,CAAtB;AACAL,OAAOI,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAL,OAAOI,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAL,OAAOI,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAL,OAAOI,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAL,OAAOI,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAL,OAAOI,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAL,OAAOI,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AAIAC,sBAAsBC,gBAAgB9C,MAAhB,CAAuB;AACzC+C,cAAU,WAD+B;AAEzCC,eAAW,CAF8B;AAGzCC,gBAAY,YAAW;AACnB,eAAOC,SAAS,KAAKC,MAAL,CAAYF,UAArB,KAAoC,KAAKD,SAAhD;AACH,KALwC;AAMzCI,iBAAa,YAAW;AACpB,eAAO;AAACC,kBAAM,KAAKA,IAAZ;AAAkBC,mBAAO,KAAKL,UAAL;AAAzB,SAAP;AACH,KARwC;AASzCM,mBAAe,YAAW;AACtB,aAAKC,QAAL,GAAgBxE,OAAOyE,SAAP,CAAiB,OAAjB,EAA0B,KAAKL,WAAL,EAA1B,CAAhB;AACH,KAXwC;AAYzCM,WAAO,YAAW;AACd,eAAO/D,MAAMgE,IAAN,CAAW,EAAX,EAAe,KAAKP,WAAL,EAAf,CAAP;AACH,KAdwC;AAezCQ,UAAM,YAAW;AACb,YAAIC,OAAO,IAAX;AACA,eAAO;AACHH,mBAAOG,KAAKH,KAAL,EADJ;AAEHI,mBAAOD,KAAKL,QAAL,CAAcM,KAFlB;AAGHC,sBAAU,YAAW;AACjB,oBAAIF,KAAKH,KAAL,GAAaM,KAAb,OAAyBH,KAAKZ,UAAL,EAA7B,EACI,OAAOY,KAAKE,QAAL,EAAP;AACP;AANE,SAAP;AAQH;AAzBwC,CAAvB,CAAtB;AA4BAE,qBAAqBpB,oBAAoB7C,MAApB,CAA2B;AAC5CqD,UAAM;AAACjD,mBAAW,CAAC,CAAb;AAAgBH,aAAK,CAAC;AAAtB,KADsC;AAE5C8D,cAAU,YAAW;AACjB,eAAOxB,OAAO2B,MAAP,CAAcC,QAAd,CAAuBC,IAAvB,CAA4B;AAACnB,wBAAY,KAAKA,UAAL,KAAoB,KAAKD;AAAtC,SAA5B,CAAP;AACH;AAJ2C,CAA3B,CAArB;AAOAqB,sBAAsBxB,oBAAoB7C,MAApB,CAA2B;AAC7CqD,UAAM;AAACnB,eAAO,CAAC,CAAT;AAAY9B,mBAAW,CAAC,CAAxB;AAA2BH,aAAK,CAAC;AAAjC,KADuC;AAE7C8D,cAAU,YAAW;AACjB,eAAOxB,OAAO2B,MAAP,CAAcI,SAAd,CAAwBF,IAAxB,CAA6B;AAACnB,wBAAY,KAAKA,UAAL,KAAoB,KAAKD;AAAtC,SAA7B,CAAP;AACH;AAJ4C,CAA3B,CAAtB;AAOAT,OAAOI,KAAP,CAAa,GAAb,EAAkB;AACdC,UAAM;AADQ,CAAlB;AAIAL,OAAOI,KAAP,CAAa,mBAAb,EAAkC;AAACC,UAAM;AAAP,CAAlC;AAEAL,OAAOI,KAAP,CAAa,oBAAb,EAAmC;AAACC,UAAM;AAAP,CAAnC;AAGAL,OAAOI,KAAP,CAAa,aAAb,EAA4B;AACxBC,UAAM,UADkB;AAExB2B,YAAQ,YAAW;AACf,eAAO,CACHvF,OAAOyE,SAAP,CAAiB,YAAjB,EAA+B,KAAKN,MAAL,CAAYlD,GAA3C,CADG,EAEHjB,OAAOyE,SAAP,CAAiB,UAAjB,EAA6B,KAAKN,MAAL,CAAYlD,GAAzC,CAFG,CAAP;AAIH,KAPuB;AAQxB2D,UAAM,YAAW;AAAE,eAAOjE,MAAMC,OAAN,CAAc,KAAKuD,MAAL,CAAYlD,GAA1B,CAAP;AAAwC;AARnC,CAA5B;AAWAsC,OAAOI,KAAP,CAAa,kBAAb,EAAiC;AAC7BC,UAAM,UADuB;AAE7B2B,YAAQ,YAAW;AACf,eAAOvF,OAAOyE,SAAP,CAAiB,YAAjB,EAA+B,KAAKN,MAAL,CAAYlD,GAA3C,CAAP;AACH,KAJ4B;AAK7B2D,UAAM,YAAW;AAAE,eAAOjE,MAAMC,OAAN,CAAc,KAAKuD,MAAL,CAAYlD,GAA1B,CAAP;AAAwC;AAL9B,CAAjC;AAQAsC,OAAOI,KAAP,CAAa,SAAb,EAAwB;AAACC,UAAM;AAAP,CAAxB,E;;;;;;;;;;;ACtFA;AACA,IAAIjD,MAAMgE,IAAN,GAAaK,KAAb,OAAyB,CAA7B,EAAgC;AAC9B,MAAIQ,MAAM,IAAInE,IAAJ,GAAWoE,OAAX,EAAV,CAD8B,CAG9B;;AACA,MAAIC,QAAQ1F,OAAO2F,KAAP,CAAalE,MAAb,CAAoB;AAC9BmE,aAAS;AAAEhC,YAAM;AAAR;AADqB,GAApB,CAAZ;AAGA,MAAIiC,MAAM7F,OAAO2F,KAAP,CAAa/E,OAAb,CAAqB8E,KAArB,CAAV;AACA,MAAII,UAAU9F,OAAO2F,KAAP,CAAalE,MAAb,CAAoB;AAChCmE,aAAS;AAAEhC,YAAM;AAAR;AADuB,GAApB,CAAd;AAGA,MAAImC,QAAQ/F,OAAO2F,KAAP,CAAa/E,OAAb,CAAqBkF,OAArB,CAAZ;AAEA,MAAIE,cAAcrF,MAAMc,MAAN,CAAa;AAC7BkB,WAAO,uBADsB;AAE7BtC,YAAQ0F,MAAM9E,GAFe;AAG7BC,YAAQ6E,MAAMH,OAAN,CAAchC,IAHO;AAI7BhB,SAAK,8CAJwB;AAK7BxB,eAAW,IAAIC,IAAJ,CAASmE,MAAM,IAAI,IAAJ,GAAW,IAA1B,CALkB;AAM7BhE,mBAAe,CANc;AAO7ByB,cAAU,EAPmB;AAOfC,WAAO;AAPQ,GAAb,CAAlB;AAUAnD,WAAS0B,MAAT,CAAgB;AACdlB,YAAQyF,WADM;AAEd3F,YAAQwF,IAAI5E,GAFE;AAGdC,YAAQ2E,IAAID,OAAJ,CAAYhC,IAHN;AAIdxC,eAAW,IAAIC,IAAJ,CAASmE,MAAM,IAAI,IAAJ,GAAW,IAA1B,CAJG;AAKdhF,UAAM;AALQ,GAAhB;AAQAT,WAAS0B,MAAT,CAAgB;AACdlB,YAAQyF,WADM;AAEd3F,YAAQ0F,MAAM9E,GAFA;AAGdC,YAAQ6E,MAAMH,OAAN,CAAchC,IAHR;AAIdxC,eAAW,IAAIC,IAAJ,CAASmE,MAAM,IAAI,IAAJ,GAAW,IAA1B,CAJG;AAKdhF,UAAM;AALQ,GAAhB;AAQAG,QAAMc,MAAN,CAAa;AACXkB,WAAO,QADI;AAEXtC,YAAQwF,IAAI5E,GAFD;AAGXC,YAAQ2E,IAAID,OAAJ,CAAYhC,IAHT;AAIXhB,SAAK,mBAJM;AAKXxB,eAAW,IAAIC,IAAJ,CAASmE,MAAM,KAAK,IAAL,GAAY,IAA3B,CALA;AAMXhE,mBAAe,CANJ;AAOXyB,cAAU,EAPC;AAOGC,WAAO;AAPV,GAAb;AAUAvC,QAAMc,MAAN,CAAa;AACXkB,WAAO,iBADI;AAEXtC,YAAQwF,IAAI5E,GAFD;AAGXC,YAAQ2E,IAAID,OAAJ,CAAYhC,IAHT;AAIXhB,SAAK,0BAJM;AAKXxB,eAAW,IAAIC,IAAJ,CAASmE,MAAM,KAAK,IAAL,GAAY,IAA3B,CALA;AAMXhE,mBAAe,CANJ;AAOXyB,cAAU,EAPC;AAOGC,WAAO;AAPV,GAAb;;AAUA,OAAK,IAAI+C,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3BtF,UAAMc,MAAN,CAAa;AACXkB,aAAO,gBAAgBsD,CADZ;AAEX/E,cAAQ6E,MAAMH,OAAN,CAAchC,IAFX;AAGXvD,cAAQ0F,MAAM9E,GAHH;AAIX2B,WAAK,+BAA+BqD,CAJzB;AAKX7E,iBAAW,IAAIC,IAAJ,CAASmE,MAAMS,IAAI,IAAJ,GAAW,IAAjB,GAAwB,CAAjC,CALA;AAMXzE,qBAAe,CANJ;AAOXyB,gBAAU,EAPC;AAOGC,aAAO;AAPV,KAAb;AASD;AACF,C;;;;;;;;;;;ACvED,IAAIlD,MAAJ;AAAWkG,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACpG,SAAOqG,CAAP,EAAS;AAACrG,aAAOqG,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAEXrG,OAAOsG,OAAP,CAAe,MAAM,CACnB;AACD,CAFD,E","file":"/app.js","sourcesContent":["UserID = new Mongo.Collection('userID');","Comments = new Mongo.Collection('comments');\n\nMeteor.methods({\n  commentInsert: function(commentAttributes) {\n    check(this.userId, String);\n    check(commentAttributes, {\n      postId: String,\n      body: String\n    });\n    \n    var user = Meteor.user();\n    var post = Posts.findOne(commentAttributes.postId);\n\n    if (!post)\n      throw new Meteor.Error('invalid-comment', 'You must comment on a post');\n    \n    comment = _.extend(commentAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date()\n    });\n    \n    // update the post with the number of comments\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\n    \n    // create the comment, save the id\n    comment._id = Comments.insert(comment);\n    \n    // now create a notification, informing the user that there's been a comment\n    createCommentNotification(comment);\n    \n    return comment._id;\n  }\n});\n","Notifications = new Mongo.Collection('notifications');\n\nNotifications.allow({\n  update: function(userId, doc, fieldNames) {\n    return ownsDocument(userId, doc) && \n      fieldNames.length === 1 && fieldNames[0] === 'read';\n  }\n});\n\ncreateCommentNotification = function(comment) {\n  var post = Posts.findOne(comment.postId);\n  if (comment.userId !== post.userId) {\n    Notifications.insert({\n      userId: post.userId,\n      postId: post._id,\n      commentId: comment._id,\n      commenterName: comment.author,\n      read: false\n    });\n  }\n};","Posts = new Mongo.Collection('posts');\n\nPosts.allow({\n  update: function(userId, post) { return ownsDocument(userId, post); },\n  remove: function(userId, post) { return ownsDocument(userId, post); }\n});\n\nPosts.deny({\n  update: function(userId, post, fieldNames) {\n    // may only edit the following two fields:\n    return (_.without(fieldNames, 'url', 'title').length > 0);\n  }\n});\n\nPosts.deny({\n  update: function(userId, post, fieldNames, modifier) {\n    var errors = validatePost(modifier.$set);\n    return errors.title || errors.url;\n  }\n});\n\nvalidatePost = function (post) {\n  var errors = {};\n\n  if (!post.title)\n    errors.title = \"Please fill in a headline\";\n  \n  if (!post.url)\n    errors.url =  \"Please fill in a URL\";\n\n  return errors;\n}\n\nMeteor.methods({\n  postInsert: function(postAttributes) {\n    check(this.userId, String);\n    check(postAttributes, {\n      title: String,\n      url: String\n    });\n    \n    var errors = validatePost(postAttributes);\n    if (errors.title || errors.url)\n      throw new Meteor.Error('invalid-post', \"You must set a title and URL for your post\");\n    \n    var postWithSameLink = Posts.findOne({url: postAttributes.url});\n    if (postWithSameLink) {\n      return {\n        postExists: true,\n        _id: postWithSameLink._id\n      }\n    }\n    \n    var user = Meteor.user();\n    var post = _.extend(postAttributes, {\n      userId: user._id, \n      author: user.username, \n      submitted: new Date(),\n      commentsCount: 0,\n      upvoters: [], \n      votes: 0\n    });\n    \n    var postId = Posts.insert(post);\n    \n    return {\n      _id: postId\n    };\n  },\n  \n  upvote: function(postId) {\n    check(this.userId, String);\n    check(postId, String);\n    \n    var affected = Posts.update({\n      _id: postId, \n      upvoters: {$ne: this.userId}\n    }, {\n      $addToSet: {upvoters: this.userId},\n      $inc: {votes: 1}\n    });\n    \n    if (! affected)\n      throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\n  }\n});\n","// check that the userId specified owns the documents\nownsDocument = function(userId, doc) {\n  return doc && doc.userId === userId;\n}\n\n","Router.configure({\n    layoutTemplate: 'layout',\n    notFoundTemplate: 'notFound',\n});\n\nRouter.route('/tuto', {name : 'tuto'});\nRouter.route('/exo', {name : 'exo'});\nRouter.route('/DL', {name : 'DL'});\nRouter.route('/AP', {name : 'AP'});\nRouter.route('/VPN', {name : 'VPN'});\nRouter.route('/CTC', {name : 'contact'});\nRouter.route('/FLC', {name : 'FLC'});\nRouter.route('/pub', {name : 'publication'});\n\n\n\nPostsListController = RouteController.extend({\n    template: 'postsList',\n    increment: 5,\n    postsLimit: function() {\n        return parseInt(this.params.postsLimit) || this.increment;\n    },\n    findOptions: function() {\n        return {sort: this.sort, limit: this.postsLimit()};\n    },\n    subscriptions: function() {\n        this.postsSub = Meteor.subscribe('posts', this.findOptions());\n    },\n    posts: function() {\n        return Posts.find({}, this.findOptions());\n    },\n    data: function() {\n        var self = this;\n        return {\n            posts: self.posts(),\n            ready: self.postsSub.ready,\n            nextPath: function() {\n                if (self.posts().count() === self.postsLimit())\n                    return self.nextPath();\n            }\n        };\n    }\n});\n\nNewPostsController = PostsListController.extend({\n    sort: {submitted: -1, _id: -1},\n    nextPath: function() {\n        return Router.routes.newPosts.path({postsLimit: this.postsLimit() + this.increment})\n    }\n});\n\nBestPostsController = PostsListController.extend({\n    sort: {votes: -1, submitted: -1, _id: -1},\n    nextPath: function() {\n        return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})\n    }\n});\n\nRouter.route('/', {\n    name: 'home',\n});\n\nRouter.route('/new/:postsLimit?', {name: 'newPosts'});\n\nRouter.route('/best/:postsLimit?', {name: 'bestPosts'});\n\n\nRouter.route('/posts/:_id', {\n    name: 'postPage',\n    waitOn: function() {\n        return [\n            Meteor.subscribe('singlePost', this.params._id),\n            Meteor.subscribe('comments', this.params._id)\n        ];\n    },\n    data: function() { return Posts.findOne(this.params._id); }\n});\n\nRouter.route('/posts/:_id/edit', {\n    name: 'postEdit',\n    waitOn: function() {\n        return Meteor.subscribe('singlePost', this.params._id);\n    },\n    data: function() { return Posts.findOne(this.params._id); }\n});\n\nRouter.route('/submit', {name: 'postSubmit'});\n","// Fixture data \nif (Posts.find().count() === 0) {\n  var now = new Date().getTime();\n  \n  // create two users\n  var tomId = Meteor.users.insert({\n    profile: { name: 'Tom Coleman' }\n  });\n  var tom = Meteor.users.findOne(tomId);\n  var sachaId = Meteor.users.insert({\n    profile: { name: 'Sacha Greif' }\n  });\n  var sacha = Meteor.users.findOne(sachaId);\n  \n  var telescopeId = Posts.insert({\n    title: 'Introducing Telescope',\n    userId: sacha._id,\n    author: sacha.profile.name,\n    url: 'http://sachagreif.com/introducing-telescope/',\n    submitted: new Date(now - 7 * 3600 * 1000),\n    commentsCount: 2,\n    upvoters: [], votes: 0\n  });\n  \n  Comments.insert({\n    postId: telescopeId,\n    userId: tom._id,\n    author: tom.profile.name,\n    submitted: new Date(now - 5 * 3600 * 1000),\n    body: 'Interesting project Sacha, can I get involved?'\n  });\n  \n  Comments.insert({\n    postId: telescopeId,\n    userId: sacha._id,\n    author: sacha.profile.name,\n    submitted: new Date(now - 3 * 3600 * 1000),\n    body: 'You sure can Tom!'\n  });\n  \n  Posts.insert({\n    title: 'Meteor',\n    userId: tom._id,\n    author: tom.profile.name,\n    url: 'http://meteor.com',\n    submitted: new Date(now - 10 * 3600 * 1000),\n    commentsCount: 0,\n    upvoters: [], votes: 0\n  });\n  \n  Posts.insert({\n    title: 'The Meteor Book',\n    userId: tom._id,\n    author: tom.profile.name,\n    url: 'http://themeteorbook.com',\n    submitted: new Date(now - 12 * 3600 * 1000),\n    commentsCount: 0,\n    upvoters: [], votes: 0\n  });\n  \n  for (var i = 0; i < 10; i++) {\n    Posts.insert({\n      title: 'Test post #' + i,\n      author: sacha.profile.name,\n      userId: sacha._id,\n      url: 'http://google.com/?q=test-' + i,\n      submitted: new Date(now - i * 3600 * 1000 + 1),\n      commentsCount: 0,\n      upvoters: [], votes: 0\n    });\n  }\n}","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]