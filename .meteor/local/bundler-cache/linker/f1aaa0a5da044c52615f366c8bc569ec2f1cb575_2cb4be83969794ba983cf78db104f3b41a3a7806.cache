[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMDl = Package['zodiase:mdl'].MDl;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nMaterialize = Package['materialize:materialize'].Materialize;\n_ = Package.underscore._;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nSession = Package.session.Session;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nModel = Package['channikhabra:stupid-models'].Model;\nGoogle = Package['google-oauth'].Google;\nAlgoliaSearch = Package['acemtp:algolia'].AlgoliaSearch;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package['templating-runtime'].Template;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nGithub = Package['github-oauth'].Github;\nFacebook = Package['facebook-oauth'].Facebook;\nAccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nHTML = Package.htmljs.HTML;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nSymbol = Package['ecmascript-runtime-client'].Symbol;\nMap = Package['ecmascript-runtime-client'].Map;\nSet = Package['ecmascript-runtime-client'].Set;\nT9n = Package['softwarerero:accounts-t9n'].T9n;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"template\":{\"template.Contact.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/template.Contact.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"contact\");                                                                                       // 2\nTemplate[\"contact\"] = new Template(\"Template.contact\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return [ HTML.Raw('<div class=\"row\">\\n        <form class=\"col s12\" method=\"post\" action=\"/FLC\">\\n            <div class=\"row\">\\n                <div class=\"input-field col s6\">\\n                    <input required=\"required\" id=\"first_name\" type=\"text\" class=\"validate\">\\n                    <label for=\"first_name\">First Name</label>\\n                </div>\\n                <div class=\"input-field col s6\">\\n                    <input required=\"required\" id=\"last_name\" type=\"text\" class=\"validate\">\\n                    <label for=\"last_name\">Last Name</label>\\n                </div>\\n            </div>\\n\\n            <div class=\"row\">\\n                <div class=\"input-field col s12\">\\n                    <input required=\"required\" id=\"message\" type=\"text\" class=\"validate\">\\n                    <label for=\"password\">message</label>\\n                </div>\\n            </div>\\n            <div class=\"row\">\\n                <div class=\"input-field col s12\">\\n                    <input required=\"required\" id=\"email\" type=\"email\" class=\"validate\">\\n                    <label for=\"email\">Email</label>\\n                </div>\\n            </div>\\n                        <button class=\"btn waves-effect waves-light pulse\" type=\"submit\" name=\"action\">Submit\\n                <i class=\"material-icons right\">send</i>\\n            </button>\\n        </form>\\n    </div>\\n\\n    '), HTML.SCRIPT(\"// Server: Define a method that the client can call.\\n    Meteor.methods({\\n        sendEmail(to, from, subject, text) {\\n            // Make sure that all arguments are strings.\\n            check([to, from, subject, text], [String]);\\n            // Let other method calls from the same client start running, without\\n            // waiting for the email sending to complete.\\n            this.unblock();\\n            Email.send({ to, from, subject, text });\\n        }\\n    });\\n    // Client: Asynchronously send an email.\\n    Meteor.call(\\n        'sendEmail',\\n        'Alice : fabienruault@gmail.com ',\\n        'bob@example.com',\\n        'Hello from Meteor!',\\n        'This is a test of Email.send.'\\n    );\") ];\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.Download.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/template.Download.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"DL\");                                                                                            // 2\nTemplate[\"DL\"] = new Template(\"Template.DL\", (function() {                                                             // 3\n  var view = this;                                                                                                     // 4\n  return \"\";                                                                                                           // 5\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.Home.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/template.Home.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"home\");                                                                                          // 2\nTemplate[\"home\"] = new Template(\"Template.home\", (function() {                                                         // 3\n  var view = this;                                                                                                     // 4\n  return [ HTML.MAIN(\"\\n    \", HTML.Raw('<div class=\"parallax-container\">\\n        <div class=\"parallax\"><img src=\"datacenter2\"></div>\\n    </div>'), \"\\n    \", HTML.Raw('<div class=\"section white\">\\n        <div class=\"row container\">\\n            <h2 class=\"header\">Parallax</h2>\\n            <p class=\"grey-text text-darken-3 lighten-3\">Parallax is an effect where the background content or image in this case, is moved at a different speed than the foreground content while scrolling.</p>\\n        </div>\\n    </div>'), \"\\n    \", HTML.Raw('<div class=\"parallax-container\">\\n        <div class=\"parallax\"><img src=\"programming-world-map-on.jpg\"></div>\\n    </div>'), \"\\n\\n\\n    \", HTML.SCRIPT(\"$(document).ready(function(){\\n        $('.parallax').parallax();\\n    }); \"), \"\\n\\n\\n    \", HTML.Raw(\"<!--&lt;!&ndash; Tap Target Structure &ndash;&gt;-->\"), \"\\n            \", HTML.Raw('<!--<div class=\"tap-target\" data-activates=\"menu\">-->'), \"\\n                \", HTML.Raw('<!--<div class=\"tap-target-content\">-->'), \"\\n                    \", HTML.Raw(\"<!--<h5>Qui developpe cette appli?</h5>-->\"), \"\\n                    \", HTML.Raw(\"<!--<p>je m'appelle Fabien, j'ai 26 ans, et suis termine actuellement ma formation de developpeur logiciel, l'application est dévellopé sous méteorJS, framework mobile très pratique permettant de compiller une application mobile codé en language de programmation web (html, css, javascript) quand la majorité des application android sont programmé en Java</p>-->\"), \"\\n                \", HTML.Raw(\"<!--</div>-->\"), \"\\n            \", HTML.Raw(\"<!--</div>-->\"), \"\\n\\n\\n        \", HTML.Raw(\"<!--</div>-->\"), \"\\n        \", HTML.Raw('<!--<div id=\"home2\" class=\"col m8\">  <div class=\"card\">-->'), \"\\n            \", HTML.Raw('<!--<div class=\"card-content\">-->'), \"\\n                \", HTML.Raw(\"<!--<p>Apprendre/Appliquer/Download FTWOTL</p>-->\"), \"\\n            \", HTML.Raw(\"<!--</div>-->\"), \"\\n            \", HTML.Raw('<!--<div class=\"card-tabs\">-->'), \"\\n                \", HTML.Raw('<!--<ul class=\"tabs tabs-fixed-width\">-->'), \"\\n                    \", HTML.Raw('<!--<li class=\"tab\"><a href=\"#test4\">Apprendre</a></li>-->'), \"\\n                    \", HTML.Raw('<!--<li class=\"tab\"><a class=\"active\" href=\"#test5\">Tester</a></li>-->'), \"\\n                    \", HTML.Raw('<!--<li class=\"tab\"><a href=\"#test6\">Télécharger</a></li>-->'), \"\\n                    \", HTML.Raw(\"<!--<li> &lt;!&ndash; Element Showed &ndash;&gt;-->\"), \"\\n                        \", HTML.Raw('<!--<a id=\"menu\" class=\"waves-effect waves-light btn btn-floating transparent\" ><i class=\"material-icons\">plus</i></a></li>-->'), \"\\n                \", HTML.Raw(\"<!--</ul>-->\"), \"\\n            \", HTML.Raw(\"<!--</div>-->\"), \"\\n            \", HTML.Raw('<!--<div class=\"card-content pink\">-->'), \"\\n                \", HTML.Raw('<!--<div id=\"test4\">  <div class=\"row\">-->'), \"\\n                    \", HTML.Raw('<!--<div class=\"col s12\">-->'), \"\\n                        \", HTML.Raw('<!--<div class=\"card-panel blue\">-->'), \"\\n          \", HTML.Raw('<!--<span class=\"white-text\">I am a very simple card. I am good at containing small bits of information.-->'), \"\\n          \", HTML.Raw(\"<!--I am convenient because I require little markup to use effectively. I am similar to what is called a panel in other frameworks.-->\"), \"\\n          \", HTML.Raw(\"<!--</span>-->\"), \"\\n                        \", HTML.Raw(\"<!--</div>-->\"), \"\\n                    \", HTML.Raw(\"<!--</div>-->\"), \"\\n                \", HTML.Raw('<!--</div><i class=\"\"></i></div>-->'), \"\\n                \", HTML.Raw('<!--<div id=\"test5\">Test 2</div>-->'), \"\\n                \", HTML.Raw('<!--<div id=\"test6\">Test 3</div>-->'), \"\\n            \", HTML.Raw(\"<!--</div>-->\"), \"\\n\\n        \", HTML.Raw(\"<!--</div>-->\"), \"\\n\\n            \", HTML.Raw('<!--<div class=\"card card-reveal \">-->'), \"\\n                \", HTML.Raw('<!--<div class=\"card-image waves-effect waves-block waves-light\">-->'), \"\\n                    \", HTML.Raw('<!--<img class=\"activator\" src=\"css_code.jpg\">-->'), \"\\n                \", HTML.Raw(\"<!--</div>-->\"), \"\\n                \", HTML.Raw('<!--<div class=\"card-content\">-->'), \"\\n                    \", HTML.Raw('<!--<span class=\"card-title activator grey-text text-darken-4\">Proxy c\\'est quoi ?<i class=\"material-icons right\">more_vert</i></span>-->'), \"\\n                \", HTML.Raw(\"<!--</div>-->\"), \"\\n                \", HTML.Raw('<!--<div class=\"card-reveal\">-->'), \"\\n                    \", HTML.Raw('<!--<span class=\"card-title grey-text text-darken-4\">C\\'est un exercice !<i class=\"material-icons right\">close</i></span>-->'), \"\\n                    \", HTML.Raw(\"<!--<p>Ce site est dévellopé dans le but d'être presenté lors de mon exament de fin d'année, il est en cours de devellopement, et n'est motivé que par l'obtention d'un titre pro, n'a aucune vocation a proner l'annonymas sur le net</p>-->\"), \"\\n                \", HTML.Raw(\"<!--</div>-->\"), \"\\n            \", HTML.Raw(\"<!--</div>-->\"), \"\\n\\n\\n        \", HTML.Raw(\"<!--</div>-->\"), \"\\n    \", HTML.Raw(\"<!--</div>-->\"), \"\\n\"), \"\\n\\n\\n\\n    \", HTML.SCRIPT(\" $('.collapsible').collapsible();7\\n    $('.dropdown-button').dropdown('open');\\n\\n    $('.tap-target').tapTarget('open');\\n    $('.tap-target').tapTarget('close');\") ];\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.Vpn.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/template.Vpn.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"VPN\");                                                                                           // 2\nTemplate[\"VPN\"] = new Template(\"Template.VPN\", (function() {                                                           // 3\n  var view = this;                                                                                                     // 4\n  return [ HTML.DIV({                                                                                                  // 5\n    class: \"carousel carousel-slider center\",                                                                          // 6\n    \"data-indicators\": \"true\"                                                                                          // 7\n  }, \"\\n        \", HTML.DIV({                                                                                          // 8\n    class: \"carousel-fixed-item center\"                                                                                // 9\n  }, \"\\n            \", HTML.Raw('<button id=\"demo-show-toast\" class=\"mdl-button mdl-js-button mdl-button--raised\" type=\"button\">Show Toast</button>'), \"\\n            \", HTML.Raw('<div id=\"demo-toast-example\" class=\"mdl-js-snackbar mdl-snackbar\">\\n                <div class=\"mdl-snackbar__text\"></div>\\n                <button class=\"mdl-snackbar__action\" type=\"button\"></button>\\n            </div>'), \"\\n            \", HTML.SCRIPT(\"\\n                (function() {\\n                    'use strict';\\n                    window['counter'] = 0;\\n                    var snackbarContainer = document.querySelector('#demo-toast-example');\\n                    var showToastButton = document.querySelector('#demo-show-toast');\\n                    showToastButton.addEventListener('click', function() {\\n                        'use strict';\\n                        var data = {message: \\\"Définition du VPN. Le terme VPN (Virtual Private Network) ou réseau privé virtuel, est devenu un terme courant dans l\\\\'informatique d\\\\'entreprise et le domaine des réseaux. Néanmoins, beaucoup de petites entreprises ont du mal à comprendre le concept et les bénéfices que cela peuvent leur apporter.',\\\">Hover me!</a>\\n            + ++counter};\\n                        snackbarContainer.MaterialSnackbar.showSnackbar(data);\\n                    });\\n                }());\\n                \"), \"\\n        \"), \"\\n        \", HTML.Raw('<div class=\"carousel-item red white-text\" href=\"#one!\">\\n            <h2>La sphere Numerique</h2>\\n            <img src=\"programming-world-map-on.jpg\" alt=\"\">\\n            <p class=\"white-text\">This is your first panel</p>\\n        </div>'), \"\\n        \", HTML.Raw('<div class=\"carousel-item amber white-text\" href=\"#two!\">\\n            <h2>Methode d\\'encryption des requetes I/O</h2>\\n            <img src=\"VPN-Featured-Image.png\" alt=\"\">\\n            <p class=\"white-text\">This is your second panel</p>\\n        </div>'), \"\\n        \", HTML.Raw('<div class=\"carousel-item green white-text\" href=\"#three!\">\\n            <h2>Utilisateur final apparent</h2>\\n            <img src=\"img_how_vpn_works.png\" alt=\"\">\\n            <p class=\"white-text\">This is your third panel</p>\\n        </div>'), \"\\n        \", HTML.Raw('<div class=\"carousel-item blue white-text\" href=\"#four!\">\\n            <h2>Algorythmes de chiffrements</h2>\\n            <img src=\"pace-oregon-state-php-mysql-programming-code-web-design.jpg\" alt=\"\">\\n            <p class=\"white-text\">This is your fourth panel</p>\\n        </div>'), \"\\n    \"), \"\\n\\n    \", HTML.SCRIPT(\"\\n        $(document).ready(function(){\\n            $('.tooltipped').tooltip({delay: 50});\\n        });\\n\\n\\n        $(document).ready(function(){\\n            $('.carousel').carousel();\\n        });\\n        $('.carousel.carousel-slider').carousel({fullWidth: true});\") ];\n}));                                                                                                                   // 11\n                                                                                                                       // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.exo.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/template.exo.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"exo\");                                                                                           // 2\nTemplate[\"exo\"] = new Template(\"Template.exo\", (function() {                                                           // 3\n  var view = this;                                                                                                     // 4\n  return \"\";                                                                                                           // 5\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.layout.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/template.layout.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"layout\");                                                                                        // 2\nTemplate[\"layout\"] = new Template(\"Template.layout\", (function() {                                                     // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SECTION(\"\\n\\n\\n    \", HTML.UL({                                                                          // 5\n    id: \"slide-out\",                                                                                                   // 6\n    class: \"side-nav\"                                                                                                  // 7\n  }, \"\\n        \", HTML.Raw('<li><div class=\"user-view\">\\n            <div class=\"background\">\\n                <img src=\"images/office.jpg\">\\n            </div>\\n            <a href=\"#!user\"><img class=\"circle\" src=\"004-code.png\"></a>\\n            <a href=\"#!name\"><span class=\"white-text name\">John Doe</span></a>\\n            <a href=\"#!email\"><span class=\"white-text email\">jdandturk@gmail.com</span></a>\\n        </div></li>'), \"\\n        \", HTML.Raw('<li><a href=\"/\"><i class=\"material-icons\">home</i>Accueil</a></li>'), \"\\n        \", HTML.Raw('<li><a href=\"/tuto\"><i class=\"material-icons\">school</i>Tutoriels</a></li>'), \"\\n        \", HTML.Raw('<li><a href=\"/exo\"><i class=\"material-icons\">work</i>Exercices</a></li>'), \"\\n        \", HTML.Raw('<li><a href=\"/DL\"><i class=\"material-icons\">sync</i>Downloads</a></li>'), \"\\n        \", HTML.Raw('<li><a href=\"/Note\"><i class=\"material-icons\">work</i>Notes</a></li>'), \"\\n        \", HTML.LI(HTML.A({\n    href: \"#\"                                                                                                          // 9\n  }, Spacebars.include(view.lookupTemplate(\"loginButtons\")))), \"\\n\\n\\n    \"), HTML.Raw('\\n    <a href=\"#\" data-activates=\"slide-out\" class=\"button-collapse\"><i class=\"material-icons\">menu</i></a>\\n\\n    <nav>\\n        <div class=\"nav-wrapper pink\">\\n            <form>\\n                <div class=\"input-field\">\\n                    <input id=\"search\" type=\"search\" required=\"\">\\n                    <label class=\"label-icon\" for=\"search\"><i class=\"material-icons\">search</i></label>\\n                    <i class=\"material-icons\">close</i>\\n                </div>\\n            </form>\\n        </div>\\n    </nav>\\n\\n    <div id=\"modal1\" class=\"modal\">\\n        <div class=\"modal-content\">\\n            <h4>Modal Header</h4>\\n            <p>Ce site ne collecte aucune information, votre compte est privée, et n\\'a aucune vovation a inciter l\\'annonymas sur internet dans une autre demarche que celle de pouvoir controller l\\'emprunte numérique que laisse tout utilisateur et pouvoir eviter par exemple la publicité ciblié par collectes des donées de navigations. Verifiez les lois en vigueur dans votre pays afin d\\'être sur que les logiciels proposé sont utilisable legalement.\\n                Enfin, cette application est un exercice, sa seule raison d\\'être est l\\'obtention d\\'un diplôme dans le cadre de mes études. </p>\\n        </div>\\n        <div class=\"modal-footer\">\\n\\n            <a href=\"#!\" class=\"modal-action modal-close waves-effect waves-green btn-flat green\">Je comprends</a>\\n            <a href=\"https://www.google.com\" class=\"modal-action modal-close waves-effect waves-red btn-flat red\">Pas d\\'accord</a>\\n        </div>\\n    </div>\\n\\n\\n\\n\\n\\n    '), Spacebars.include(view.lookupTemplate(\"yield\")), HTML.Raw('\\n\\n\\n\\n    <!-- Tap Target Structure -->\\n    <div id=\"ancre\" class=\"tap-target pink\" data-activates=\"menu\">\\n        <div class=\"tap-target-content\">\\n            <h5>A propos?</h5>\\n            <p>Je m\\'appelle Fabien j\\'ai 26 ans, et voici mon projet de fin d\\'etude pour valider mon titre de developpeur logiciel!</p>\\n        </div>\\n    </div>\\n\\n\\n    <footer class=\"page-footer\">\\n        <div class=\"container\">\\n            <div class=\"row\">\\n                <div class=\"col l6 s12\">\\n                    <h5 class=\"white-text\">Footer Content</h5>\\n                    <p class=\"grey-text text-lighten-4\">Proxy, retrouvez votre liberté ! .</p>\\n                </div>\\n                <div class=\"col l4 offset-l2 s12\">\\n                    <h5 class=\"white-text\">Liens</h5>\\n                    <ul>\\n                        <li><a href=\"/\"><i class=\"material-icons\">home</i>Accueil</a></li>\\n                        <li><a href=\"/tuto\"><i class=\"material-icons\">school</i>Tutoriels</a></li>\\n                        <li><a href=\"/exo\"><i class=\"material-icons\">work</i>Exercices</a></li>\\n                        <li><a href=\"/Note\"><i class=\"material-icons\">work</i>Notes</a></li>\\n                        <li><a href=\"/DL\"><i class=\"material-icons\">sync</i>Downloads</a></li>\\n                        <li> <!-- Modal Trigger -->\\n                            <a class=\"waves-effect waves-light btn modal-trigger pink pulse\" href=\"#modal1\">C.G.U</a></li>\\n                    </ul>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\"footer-copyright\">\\n            <div class=\"container\">\\n                ©  2017 proxyApp Copyright\\n            </div>\\n        </div>\\n    </footer>\\n\\n\\n\\n\\n\\n        '), HTML.SCRIPT(\"$('.modal').modal({\\n                dismissible: true, // Modal can be dismissed by clicking outside of the modal\\n                opacity: .5, // Opacity of modal background\\n                inDuration: 300, // Transition in duration\\n                outDuration: 200, // Transition out duration\\n                startingTop: '4%', // Starting top style attribute\\n                endingTop: '10%', // Ending top style attribute\\n                ready: function(modal, trigger) { // Callback for Modal open. Modal and trigger parameters available.\\n                    console.log(\\\"Ready\\\");\\n                    console.log(modal, trigger);\\n                },\\n                complete: function() { console.log('Closed'); } // Callback for Modal close\\n            },\\n\\n        $('.button-collapse').sideNav({\\n            menuWidth: 300, // Default is 300\\n            edge: 'right', // Choose the horizontal origin\\n            closeOnClick: true, // Closes side-nav on <a> clicks, useful for Angular/Meteor\\n            draggable: true, //\\n        })\\n    )\\n\\n\\n        \"), \"\\n\\n    \", HTML.SCRIPT({\n    src: \"https://www.gstatic.com/firebasejs/4.7.0/firebase.js\"                                                        // 11\n  }), \"\\n\\n\");                                                                                                         // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"template.tuto.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/template.tuto.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"tuto\");                                                                                          // 2\nTemplate[\"tuto\"] = new Template(\"Template.tuto\", (function() {                                                         // 3\n  var view = this;                                                                                                     // 4\n  return [ HTML.Raw('<div class=\"row\">\\n        <div class=\"col s12\">\\n            <ul class=\"tabs\">\\n                <li class=\"tab col s3\"><a href=\"#test1\">Pourquoi et comment : le vpn</a></li>\\n                <li class=\"tab col s3\"><a class=\"active\" href=\"#test2\">L\\'installation</a></li>\\n                <li class=\"tab col s3\"><a href=\"#test3\">Configurer son par feu</a></li>\\n                <li class=\"tab col s3\"><a href=\"#test4\">A voir aussi</a></li>\\n            </ul>\\n        </div>\\n        <div id=\"test1\" class=\"col s12\"><h1>Pourquoi et Comment installer un VPN?</h1>\\n           <p>Nous allons vous expliquer comment installer un client VPN sur votre ordinateur. D’abord il est impératif de savoir quel est le but de cette installation, pourquoi vous voulez un VPN. Le VPN est initialement utilisé par les services informatiques des sociétés afin de permettre au personnel de l’entreprise  de pouvoir se connecter en toute sécurité au réseau de la société. VPN veut dire « Virtual Private Network » réseau privé virtuel, en français. La sécurité des systèmes VPN se base sur la création d’un tunnel informatique appelé le tunneling. C’est dans ce tunnel que passent toutes les données. Ce tunnel a la particularité de chiffrer (crypter) les données en 256 bits pour les VPN les plus performants. Comme ça, dans le cas où un pirate arrive à intercepter les données, elles seront indéchiffrables. Les données sont visibles que quand elles arrivent à destinations, c’est à dire qu’il y a que l’utilisateur d’un VPN ou le destinataire des données qui pourront y accéder pendant le transfert. Une fois arrivé à destination elles redeviennent des données normales. La sécurité contre le vol d’information est vraiment optimale lors du transfert par le biais d’internet.</p>\\n\\n\\n        </div>\\n        <div id=\"test2\" class=\"col s12\">\\n            <h1>VPN : Comment l’installer</h1>\\n            <p>Pour les particuliers l’installation est très simple. En vous rendant sur le site d’un fournisseur VPN, il suffit de vous inscrire et d’installer le logiciel. Le logiciel est très simple à installer. Généralement elle se fait en quelques clics sans connaissances informatique particulières. Dès que le logiciel est installé, vous devez le lancer en cliquant sur un éventuel raccourci créé sur votre bureau. Ensuite c’est vous qui faite le choix du serveur représenté  par un pays. Si vous voulez être anonyme en vous faisant passer pour un internaute canadien, il suffit simplement de choisir un serveur canadien et au passage nous vous rappelons que tous les sites canadiens seront débloqués de chez vous ou d’ailleurs n’importe quelle connexion internet suffit. Un minimum de débit est recommandé si vous voulez faire du streaming. En un seul clic vous pourrez changer de serveur, tous dépend bien évidement des services proposés par le fournisseur VPN.</p>\\n\\n        </div>\\n        <div id=\"test3\" class=\"col s12\">\\n            <h1>Iptables</h1>\\n               <p> Iptables est une interface en ligne de commande permettant de configurer Netfilter. En plus de Iptables, depuis la version 8.04, Ubuntu est installé avec la surcouche UFW qui permet de contrôler simplement Netfilter, UFW est toutefois moins complet que iptables.\\n\\n                Cette documentation est une introduction à Iptables, elle est destinée à ceux qui souhaitent mettre en place un pare-feu et/ou un partage de connexion, sur une machine Linux, sans passer par une interface graphique. Seule la table par défaut (Filter) d\\'Iptables est présenté ici et seules les chaînes utilisées par Filter (Input, Forward et Output) y sont exposées.\\n\\n                Les lecteurs désirant approfondir leur recherche et aborder l\\'utilisation des autres tables (Nat, Mangle, Row et Security) ainsi que des chaînes non utilisables par Filter (Prerouting et Postrouting) se tourneront vers les nombreuses documentations disponibles sur l\\'Internet (voir notamment ici). Ceux désirant configurer un pare-feu par l\\'intermédiaire d\\'une interface graphique se tourneront vers Gufw ou encore vers Shorewall pour une utilisation sur serveur.\\n\\n                iptables existe aussi pour ipv6, pour cela il suffit d\\'utiliser la commande ip6tables au lieu de iptables.\\n\\n                Pour une bonne compréhension d\\'Iptables (et des pare-feux en général) il est conseillé d\\'avoir des notions en réseaux informatiques, au minima connaître le principe de fonctionnement des protocoles TCP et UDP.</p>\\n\\n            <h1>Configuration du pare-feu</h1>\\n            <p>Nous allons configurer notre pare-feu de la manière suivante :\\n\\n                On bloque tout le trafic entrant par défaut.\\n                On autorise au cas par cas : le trafic appartenant ou lié à des connexions déjà établies et le trafic à destination des serveurs (web, ssh, etc.) que nous souhaitons mettre à disposition.\\n                Afin de ne pas avoir de problème au moment où on crée ces règles, nous allons d\\'abord créer les autorisations, puis nous enverrons le reste en enfer.\\n\\n                En tapant « sudo iptables -L », une liste de vos règles actuelles est affichée. Si vous (ou un logiciel) n\\'avez encore jamais touché à iptables, les chaines sont vides, et vous devriez voir :</p>\\n\\n\\n                <div style=\"color:greenyellow\" class=\"col s4 flex card-panel hoverable black\">\\n                <p>Chain INPUT (policy ACCEPT)</p>\\n                <p>target    prot opt source             destination</p>\\n                </div>\\n                <div style=\"color:greenyellow\" class=\"col s4 flex card-panel hoverable black\">\\n                <p>Chain FORWARD (policy ACCEPT)</p>\\n                <p>target     prot opt source               destination</p>\\n                </div>\\n                <div style=\"color:greenyellow\" class=\"col s4 flex card-panel hoverable black\">\\n                <p>Chain OUTPUT (policy ACCEPT)</p>\\n                <p>target     prot opt source               destination</p>\\n            </div>\\n\\n            <p>Pour l\\'instant, tout passe dans toutes les directions (policy ACCEPT). Pour cette configuration basique, seul le trafic entrant (chaine input) nous intéresse.\\n\\n                Par défaut, « sudo iptables -L » n\\'affiche que la table \"filter\". Pour consulter les autres tables, vous devez ajouter l\\'option -t suivie de \"nat\", \"mangle\" ou \"raw\". Pour la configuration d\\'un pare-feu la table \"filter\" est toutefois la seule nécessaire.</p>\\n\\n                <div style=\"color:white;\" class=\"col s12 card-panel hoverable red\">\\n                    <i class=\"material-icons\">vpn_key</i>ATTENTION, si vous avez modifié la règle par défaut pour le blocage (iptables -P INPUT DROP voir plus bas) et que vous tapez iptables -F vous bloquerez tous les accès … y compris celui en cours. Ceci est particulièrement problématique sur une machine sur laquelle vous accédez à distance (serveur etc.).\\n                </div>\\n\\n                <p>Si vous avez déjà modifié la configuration et que vous voulez la réinitialiser, tapez :</p>\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"># sudo iptables -F</p>\\n                <p style=\"color:greenyellow\"># sudo iptables -X</p>\\n            </div>\\n\\n            <h3>Autoriser le trafic entrant d\\'une connexion déjà établie</h3>\\n            <p>Pour permettre à une connexion déjà ouverte de recevoir du trafic :</p>\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"># iptables -A INPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT</p>\\n            </div>\\n\\n                <p>Si vous utilisez une ancienne version de iptables la commande ci-dessus peut ne pas fonctionner, dans ce cas utilisez celle-ci :</p>\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"># iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT</p>\\n            </div>\\n\\n                <div style=\"color:white;\" class=\"col s12 red hoverable\"> <i class=\"material-icons\">vpn_key</i>Une ancienne configuration avec l\\'état \"–state RELATED\" est toujours sur internet, or cette option peut permettre l\\'ouverture de port non désirée sur votre machine par un attaquant. L\\'option \"RELATED\" est à utiliser avec prudence. Pour plus d\\'information : https://gist.github.com/azlux/6a70bd38bb7c525ab26efe7e3a7ea8ac</div>\\n\\n\\n                <h3>Permettre le trafic entrant sur un port spécifique</h3>\\n\\n                <p>Pour permettre le trafic entrant sur le port 22 (traditionnellement utilisé par SSH, vous devrez indiquer à iptables tout le trafic TCP sur le port 22 de votre adaptateur réseau.</p>\\n\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"># iptables -A INPUT -p tcp -i eth0 --dport ssh -j ACCEPT</p>\\n            </div>\\n\\n            <p>Cette commande ajoute une règle (-A) à la chaine contrôlant le trafic entrant INPUT, pour autoriser le trafic (-j ACCEPT), vers l\\'interface (-i) eth0 et à destination du port (--dport) SSH (on aurait pu mettre 22).\\n\\n                Maintenant vous pouvez vérifier vos règles iptables :</p>\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"># iptables -L</p>\\n                <p style=\"color:greenyellow\">Chain INPUT (policy ACCEPT)</p>\\n                <p style=\"color:greenyellow\">target     prot opt source               destination  </p>\\n                <p style=\"color:greenyellow\">ACCEPT     all  --  anywhere             anywhere            state RELATED,ESTABLISHED</p>\\n                <p style=\"color:greenyellow\">ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh</p>\\n            </div>\\n\\n            <p>Maintenant, acceptons tout le trafic web (www) entrant :</p>\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"> # iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT</p>\\n            </div>\\n\\n            <p>En regardant nos règles, nous avons :</p>\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"># iptables -L</p>\\n                <p style=\"color:greenyellow\">Chain INPUT (policy ACCEPT)</p>\\n                <p style=\"color:greenyellow\">  target     prot opt source               destination</p>\\n                <p style=\"color:greenyellow\">ACCEPT     all  --  anywhere             anywhere            state RELATED,ESTABLISHED</p>\\n                <p style=\"color:greenyellow\">     ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh</p>\\n                <p style=\"color:greenyellow\">            ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:www\\n                </p>\\n            </div>\\n\\n            <p>Nous avons exceptionnellement autorisé le trafic tcp pour ssh et les ports web, mais comme nous n\\'avons rien bloqué, tout le trafic passe quand même.</p>\\n\\n            <h3>Bloquer le trafic</h3>\\n\\n            <p>Maintenant que nous avons fini avec les autorisations, il faut maintenant bloquer le reste. Nous allons en fait modifier la « politique par défaut » (policy) de la chaine INPUT : cette décision (DROP) s\\'applique lorsqu\\'aucune règle n\\'a été appliquée à un paquet. Donc, si la tentative de connexion n\\'est permise par aucune des règles précédentes, elle sera rejetée.</p>\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"> # iptables -P INPUT DROP #warning : a ne pas utiliser sur un serveur distant !</p>\\n                <p style=\"color:greenyellow\"> # iptables -L</p>\\n                <p style=\"color:greenyellow\">target     prot opt source               destination</p>\\n                <p style=\"color:greenyellow\">ACCEPT     all  --  anywhere             anywhere            state RELATED,ESTABLISHED</p>\\n                <p style=\"color:greenyellow\">ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh</p>\\n                <p style=\"color:greenyellow\">ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:www</p>\\n            </div>\\n\\n            <strong>Un autre moyen de procéder</strong><p>est l\\'ajout en fin de chaine d\\'une règle supprimant les paquets (les paquets autorisés par les règles précédentes n\\'atteindraient pas celle-ci), via iptables -A INPUT -j DROP, mais il faudrait alors faire attention à la position des futures règles.</p>\\n\\n\\n            <h3>Autoriser le trafic local</h3>\\n\\n            <p>Un p\\'tit problème de notre configuration est que même l\\'interface locale (loopback) est bloquée. Nous pourrions avoir écrit les règles de rejet seulement pour eth0 en spécifiant -i eth0, mais nous pouvons aussi ajouter une règle pour loopback. Par exemple, nous pourrions l\\'insérer en 2e position :\\n\\n            </p>\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"># iptables -I INPUT 2 -i lo -j ACCEPT</p>\\n            </div>\\n\\n            <p>Pour lister les règles plus en détail.</p>\\n\\n\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n                <p style=\"color:greenyellow\"> # iptables -L -v -n   </p>\\n            </div>\\n\\n\\n           <h3>Autoriser les requêtes ICMP (ping)</h3>\\n            <p>Il peut-être utile de valider les réponses aux requêtes \"ping\", ne serait-ce que pour s\\'assurer que le poste est toujours en activité.</p>\\n\\n\\n             <div class=\"col s12 flex card-panel hoverable black\">\\n                 <p style=\"color:greenyellow\"> # On autorise le PC a faire des pings sur des IP externes et à répondre aux requêtes \"ping\" </p>\\n                 <p style=\"color:greenyellow\"> iptables -A OUTPUT -p icmp -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT </p>\\n                 <p style=\"color:greenyellow\"># Si vous utilisez une ancienne version de iptables la commande ci-dessus peut ne pas fonctionner, dans ce cas entrez la commande suivante : </p>\\n                 <p style=\"color:greenyellow\">iptables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT     </p>\\n                 <p style=\"color:greenyellow\"># On autorise les pings </p>\\n             </div>\\n\\n\\n                <h3>Supprimer une règle</h3>\\n            <p>Si vous vous êtes trompé dans la création d\\'une règle et que cela vous bloque une connexion, vous pouvez supprimer une seule entrée plutôt que de tout réinitialise\\n\\n                Tout d\\'abord vous listez l\\'ensemble de vos régles avec l\\'affichage des lignes :</p>\\n\\n\\n                       <div class=\"col s12 flex card-panel hoverable black\">\\n                           <p style=\"color:greenyellow\">iptables -L --line-numbers</p>\\n\\n\\n                    <p>Ce qui personnellement me retourne :</p>\\n                       </div>\\n            <div class=\"col s12 flex card-panel hoverable black\">\\n            <p style=\"color:greenyellow\">Chain INPUT (policy DROP)                                                            </p>\\n            <p style=\"color:greenyellow\">num  target     prot opt source               destination                            </p>\\n            <p style=\"color:greenyellow\">1    DROP       icmp --  anywhere             anywhere                               </p>\\n            <p style=\"color:greenyellow\">2    ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:ssh        </p>\\n            <p style=\"color:greenyellow\">3    ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:www        </p>\\n            <p style=\"color:greenyellow\">4    ACCEPT     tcp  --  anywhere             anywhere            tcp dpt:webmin     </p>\\n            <p style=\"color:greenyellow\">Chain FORWARD (policy ACCEPT)                                                        </p>\\n            <p style=\"color:greenyellow\">num  target     prot opt source               destination                            </p>\\n            <p style=\"color:greenyellow\">Chain OUTPUT (policy ACCEPT)                                                         </p>\\n            <p style=\"color:greenyellow\">num  target     prot opt source               destination                            </p>\\n            <p style=\"color:greenyellow\">1    ACCEPT     tcp  --  anywhere             anywhere            tcp spt:www        </p>\\n            <p style=\"color:greenyellow\">2    ACCEPT     tcp  --  anywhere             anywhere            tcp spt:12345      </p>\\n                      </div>\\n\\n            <p>Je souhaite supprimer la ligne 2 de la chaîne OUTPUT Syntaxe : iptables -D chaine numéro_de_ligne </p>\\n\\n\\n             <div class=\"col s12 flex card-panel hoverable black\">\\n                 <p style=\"color:greenyellow\">iptables -D OUTPUT 2</p>\\n             </div>\\n\\n\\n\\n\\n            <h3>Sauvegarder vos règles</h3>\\n\\n            <p>Passer en mode superutilisateur</p>\\n                   <div class=\"col s12 flex card-panel hoverable black\">\\n                       <p style=\"color:greenyellow\"> sudo -s iptables-save -c</p>\\n                   </div>\\n\\n\\n\\n\\n              <h2>Script iptables e.g</h2>\\n\\n              <div class=\"col s12 flex card-panel hoverable black\">\\n              <p style=\"color:greenyellow\"> #!/bin/bash                                                                </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## Script iptables by BeAvEr.                                              </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## Règles iptables.                                                        </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## On flush iptables.                                                      </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -F                                                                </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## On supprime toutes les chaînes utilisateurs.                            </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -X                                                                </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## On drop tout le trafic entrant.                                         </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -P INPUT DROP                                                     </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## On drop tout le trafic sortant.                                         </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -P OUTPUT DROP                                                    </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## On drop le forward.                                                     </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -P FORWARD DROP                                                   </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## On drop les scans XMAS et NULL.                                         </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -A INPUT -p tcp --tcp-flags FIN,URG,PSH FIN,URG,PSH -j DROP       </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP                       </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP                      </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP               </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## Dropper silencieusement tous les paquets broadcastés.                   </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP                  </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n              <p style=\"color:greenyellow\"> ## Permettre à une connexion ouverte de recevoir du trafic en entrée.      </p>\\n              <p style=\"color:greenyellow\">                                                                            </p>\\n                        </div>\\n        </div>\\n\\n        <div id=\"test4\" class=\"col s12\">Test 4</div>\\n    </div>\\n\\n\\n    '), HTML.SCRIPT(\"\\n        $(document).ready(function(){\\n            $('ul.tabs').tabs();\\n        });\\n\\n    \") ];\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"homeHelper.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/homeHelper.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntemplate.home.onRendered($(document).ready(function () {                                                               // 1\n    $('.collapsible').collapsible();                                                                                   // 3\n    $('.button-collapse').sideNav({                                                                                    // 6\n        menuWidth: 300,                                                                                                // 7\n        // Default is 300                                                                                              // 7\n        edge: 'left   ',                                                                                               // 8\n        draggable: true,                                                                                               // 9\n        onClick: close                                                                                                 // 10\n    }); // Choose     sss                                                                                              // 6\n}));                                                                                                                   // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"layoutHelper.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/layoutHelper.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntemplate.layout.onRendered($('.button-collapse').sideNav({                                                             // 1\n    menuWidth: 300,                                                                                                    // 3\n    // Default is 300                                                                                                  // 3\n    edge: 'right',                                                                                                     // 4\n    // Choose the horizontal origin                                                                                    // 4\n    closeOnClick: true,                                                                                                // 5\n    // Closes side-nav on <a> clicks, useful for Angular/Meteor                                                        // 5\n    draggable: true // Choose whether you can drag to open on touch screens,                                           // 6\n                                                                                                                       //\n}));                                                                                                                   // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sideBarHelper.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/template/sideBarHelper.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.layout.onRendered(function () {                                                                               // 2\n    function nav() {                                                                                                   // 2\n        $('.button-collapse').sideNav({                                                                                // 3\n            closeOnClick: true                                                                                         // 4\n        }); // http://materializecss.com/side-nav.html                                                                 // 3\n    }                                                                                                                  // 6\n                                                                                                                       //\n    return nav;                                                                                                        // 2\n}());                                                                                                                  // 2\n                                                                                                                       //\nTemplate.layout.rendered = function () {                                                                               // 8\n    this.$().dropdown({                                                                                                // 9\n        inDuration: 300,                                                                                               // 10\n        outDuration: 225,                                                                                              // 11\n        constrain_width: false,                                                                                        // 12\n        // Does not change width of dropdown to that of the activator                                                  // 12\n        hover: true,                                                                                                   // 13\n        // Activate on hover                                                                                           // 13\n        gutter: 0,                                                                                                     // 14\n        // Spacing from edge                                                                                           // 14\n        belowOrigin: false // Displays dropdown below the button                                                       // 15\n                                                                                                                       //\n    });                                                                                                                // 9\n    $(document).ready(function () {                                                                                    // 17\n        $.getJSON(\"http://jsonip.com/?callback=?\", function (data) {                                                   // 18\n            console.log(data);                                                                                         // 19\n            tab = [];                                                                                                  // 20\n            tab.push(data.ip);                                                                                         // 21\n            UserID.insert(tab);                                                                                        // 22\n        });                                                                                                            // 24\n    });                                                                                                                // 26\n                                                                                                                       //\n    function vst() {                                                                                                   // 27\n        alert(UserID.find().count());                                                                                  // 28\n    }                                                                                                                  // 30\n};                                                                                                                     // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"helpers\":{\"config.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/helpers/config.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"errors.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/helpers/errors.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Local (client-only) collection                                                                                      // 1\nErrors = new Mongo.Collection(null);                                                                                   // 2\n                                                                                                                       //\nthrowError = function (message) {                                                                                      // 4\n  Errors.insert({                                                                                                      // 5\n    message: message                                                                                                   // 5\n  });                                                                                                                  // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"handlebars.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/helpers/handlebars.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.registerHelper('pluralize', function (n, thing) {                                                             // 1\n  // fairly stupid pluralizer                                                                                          // 2\n  if (n === 1) {                                                                                                       // 3\n    return '1 ' + thing;                                                                                               // 4\n  } else {                                                                                                             // 5\n    return n + ' ' + thing + 's';                                                                                      // 6\n  }                                                                                                                    // 7\n});                                                                                                                    // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/main.js                                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"../imports/ui/body.js\"));                                                                        // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"imports\":{\"ui\":{\"body.html\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/ui/body.html                                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nthrow new Error(\"Expected \\\"div\\\" end tag\\n...rm>         </header>          <ul>     <...\\n                        ^\");\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"body.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/ui/body.js                                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Template = void 0;                                                                                                 // 1\nmodule.watch(require(\"meteor/templating\"), {                                                                           // 1\n    Template: function (v) {                                                                                           // 1\n        Template = v;                                                                                                  // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar Tasks = void 0;                                                                                                    // 1\nmodule.watch(require(\"../api/tasks.js\"), {                                                                             // 1\n    Tasks: function (v) {                                                                                              // 1\n        Tasks = v;                                                                                                     // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nmodule.watch(require(\"./body.html\"));                                                                                  // 1\nTemplate.body.helpers({                                                                                                // 7\n    tasks: function () {                                                                                               // 8\n        return Tasks.find({}, {                                                                                        // 9\n            sort: {                                                                                                    // 9\n                createdAt: -1                                                                                          // 9\n            }                                                                                                          // 9\n        });                                                                                                            // 9\n    }                                                                                                                  // 10\n});                                                                                                                    // 7\nTemplate.body.events({                                                                                                 // 14\n    'submit .new-task': function (event) {                                                                             // 15\n        // Prevent default browser form submit                                                                         // 16\n        event.preventDefault(); // Get value from form element                                                         // 17\n                                                                                                                       //\n        var target = event.target;                                                                                     // 20\n        var text = target.text.value; // Insert a task into the collection                                             // 21\n                                                                                                                       //\n        Tasks.insert({                                                                                                 // 24\n            text: text,                                                                                                // 25\n            createdAt: new Date() // current time                                                                      // 26\n                                                                                                                       //\n        }); // Clear form                                                                                              // 24\n                                                                                                                       //\n        target.text.value = '';                                                                                        // 30\n    }                                                                                                                  // 31\n});                                                                                                                    // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"api\":{\"tasks.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/tasks.js                                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  Tasks: function () {                                                                                                 // 1\n    return Tasks;                                                                                                      // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                                // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Tasks = new Mongo.Collection('tasks');                                                                             // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"lib\":{\"collections\":{\"UserCol.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// lib/collections/UserCol.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\néUserID = new Mongo.Collection('userID');                                                                              // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"comments.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// lib/collections/comments.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nComments = new Mongo.Collection('comments');                                                                           // 1\nMeteor.methods({                                                                                                       // 3\n  commentInsert: function (commentAttributes) {                                                                        // 4\n    check(this.userId, String);                                                                                        // 5\n    check(commentAttributes, {                                                                                         // 6\n      postId: String,                                                                                                  // 7\n      body: String                                                                                                     // 8\n    });                                                                                                                // 6\n    var user = Meteor.user();                                                                                          // 11\n    var post = Posts.findOne(commentAttributes.postId);                                                                // 12\n    if (!post) throw new Meteor.Error('invalid-comment', 'You must comment on a post');                                // 14\n    comment = _.extend(commentAttributes, {                                                                            // 17\n      userId: user._id,                                                                                                // 18\n      author: user.username,                                                                                           // 19\n      submitted: new Date()                                                                                            // 20\n    }); // update the post with the number of comments                                                                 // 17\n                                                                                                                       //\n    Posts.update(comment.postId, {                                                                                     // 24\n      $inc: {                                                                                                          // 24\n        commentsCount: 1                                                                                               // 24\n      }                                                                                                                // 24\n    }); // create the comment, save the id                                                                             // 24\n                                                                                                                       //\n    comment._id = Comments.insert(comment); // now create a notification, informing the user that there's been a comment\n                                                                                                                       //\n    createCommentNotification(comment);                                                                                // 30\n    return comment._id;                                                                                                // 32\n  }                                                                                                                    // 33\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notifications.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// lib/collections/notifications.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nNotifications = new Mongo.Collection('notifications');                                                                 // 1\nNotifications.allow({                                                                                                  // 3\n  update: function (userId, doc, fieldNames) {                                                                         // 4\n    return ownsDocument(userId, doc) && fieldNames.length === 1 && fieldNames[0] === 'read';                           // 5\n  }                                                                                                                    // 7\n});                                                                                                                    // 3\n                                                                                                                       //\ncreateCommentNotification = function (comment) {                                                                       // 10\n  var post = Posts.findOne(comment.postId);                                                                            // 11\n                                                                                                                       //\n  if (comment.userId !== post.userId) {                                                                                // 12\n    Notifications.insert({                                                                                             // 13\n      userId: post.userId,                                                                                             // 14\n      postId: post._id,                                                                                                // 15\n      commentId: comment._id,                                                                                          // 16\n      commenterName: comment.author,                                                                                   // 17\n      read: false                                                                                                      // 18\n    });                                                                                                                // 13\n  }                                                                                                                    // 20\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"posts.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// lib/collections/posts.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nPosts = new Mongo.Collection('posts');                                                                                 // 1\nPosts.allow({                                                                                                          // 3\n  update: function (userId, post) {                                                                                    // 4\n    return ownsDocument(userId, post);                                                                                 // 4\n  },                                                                                                                   // 4\n  remove: function (userId, post) {                                                                                    // 5\n    return ownsDocument(userId, post);                                                                                 // 5\n  }                                                                                                                    // 5\n});                                                                                                                    // 3\nPosts.deny({                                                                                                           // 8\n  update: function (userId, post, fieldNames) {                                                                        // 9\n    // may only edit the following two fields:                                                                         // 10\n    return _.without(fieldNames, 'url', 'title').length > 0;                                                           // 11\n  }                                                                                                                    // 12\n});                                                                                                                    // 8\nPosts.deny({                                                                                                           // 15\n  update: function (userId, post, fieldNames, modifier) {                                                              // 16\n    var errors = validatePost(modifier.$set);                                                                          // 17\n    return errors.title || errors.url;                                                                                 // 18\n  }                                                                                                                    // 19\n});                                                                                                                    // 15\n                                                                                                                       //\nvalidatePost = function (post) {                                                                                       // 22\n  var errors = {};                                                                                                     // 23\n  if (!post.title) errors.title = \"Please fill in a headline\";                                                         // 25\n  if (!post.url) errors.url = \"Please fill in a URL\";                                                                  // 28\n  return errors;                                                                                                       // 31\n};                                                                                                                     // 32\n                                                                                                                       //\nMeteor.methods({                                                                                                       // 34\n  postInsert: function (postAttributes) {                                                                              // 35\n    check(this.userId, String);                                                                                        // 36\n    check(postAttributes, {                                                                                            // 37\n      title: String,                                                                                                   // 38\n      url: String                                                                                                      // 39\n    });                                                                                                                // 37\n    var errors = validatePost(postAttributes);                                                                         // 42\n    if (errors.title || errors.url) throw new Meteor.Error('invalid-post', \"You must set a title and URL for your post\");\n    var postWithSameLink = Posts.findOne({                                                                             // 46\n      url: postAttributes.url                                                                                          // 46\n    });                                                                                                                // 46\n                                                                                                                       //\n    if (postWithSameLink) {                                                                                            // 47\n      return {                                                                                                         // 48\n        postExists: true,                                                                                              // 49\n        _id: postWithSameLink._id                                                                                      // 50\n      };                                                                                                               // 48\n    }                                                                                                                  // 52\n                                                                                                                       //\n    var user = Meteor.user();                                                                                          // 54\n                                                                                                                       //\n    var post = _.extend(postAttributes, {                                                                              // 55\n      userId: user._id,                                                                                                // 56\n      author: user.username,                                                                                           // 57\n      submitted: new Date(),                                                                                           // 58\n      commentsCount: 0,                                                                                                // 59\n      upvoters: [],                                                                                                    // 60\n      votes: 0                                                                                                         // 61\n    });                                                                                                                // 55\n                                                                                                                       //\n    var postId = Posts.insert(post);                                                                                   // 64\n    return {                                                                                                           // 66\n      _id: postId                                                                                                      // 67\n    };                                                                                                                 // 66\n  },                                                                                                                   // 69\n  upvote: function (postId) {                                                                                          // 71\n    check(this.userId, String);                                                                                        // 72\n    check(postId, String);                                                                                             // 73\n    var affected = Posts.update({                                                                                      // 75\n      _id: postId,                                                                                                     // 76\n      upvoters: {                                                                                                      // 77\n        $ne: this.userId                                                                                               // 77\n      }                                                                                                                // 77\n    }, {                                                                                                               // 75\n      $addToSet: {                                                                                                     // 79\n        upvoters: this.userId                                                                                          // 79\n      },                                                                                                               // 79\n      $inc: {                                                                                                          // 80\n        votes: 1                                                                                                       // 80\n      }                                                                                                                // 80\n    });                                                                                                                // 78\n    if (!affected) throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");                          // 83\n  }                                                                                                                    // 85\n});                                                                                                                    // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"permissions.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// lib/permissions.js                                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// check that the userId specified owns the documents                                                                  // 1\nownsDocument = function (userId, doc) {                                                                                // 2\n  return doc && doc.userId === userId;                                                                                 // 3\n};                                                                                                                     // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"router.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// lib/router.js                                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Meteor = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                               // 1\n    Meteor: function (v) {                                                                                             // 1\n        Meteor = v;                                                                                                    // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nRouter.configure({                                                                                                     // 3\n    layoutTemplate: 'layout'                                                                                           // 4\n});                                                                                                                    // 3\nRouter.route('/', {                                                                                                    // 7\n    name: 'home'                                                                                                       // 7\n});                                                                                                                    // 7\nRouter.route('/tuto', {                                                                                                // 8\n    name: 'tuto'                                                                                                       // 8\n});                                                                                                                    // 8\nRouter.route('/exo', {                                                                                                 // 9\n    name: 'exo'                                                                                                        // 9\n});                                                                                                                    // 9\nRouter.route('/DL', {                                                                                                  // 10\n    name: 'DL'                                                                                                         // 10\n});                                                                                                                    // 10\nRouter.route('/AP', {                                                                                                  // 11\n    name: 'AP'                                                                                                         // 11\n});                                                                                                                    // 11\nRouter.route('/VPN', {                                                                                                 // 12\n    name: 'VPN'                                                                                                        // 12\n});                                                                                                                    // 12\nRouter.route('/CTC', {                                                                                                 // 13\n    name: 'contact'                                                                                                    // 13\n});                                                                                                                    // 13\nRouter.route('/FLC', {                                                                                                 // 14\n    name: 'FLC'                                                                                                        // 14\n});                                                                                                                    // 14\nRouter.route('/Note', {                                                                                                // 15\n    name: 'Note'                                                                                                       // 15\n}); // PostsListController = RouteController.extend({                                                                  // 15\n//     template: 'postsList',                                                                                          // 21\n//     increment: 5,                                                                                                   // 22\n//     postsLimit: function() {                                                                                        // 23\n//         return parseInt(this.params.postsLimit) || this.increment;                                                  // 24\n//     },                                                                                                              // 25\n//     findOptions: function() {                                                                                       // 26\n//         return {sort: this.sort, limit: this.postsLimit()};                                                         // 27\n//     },                                                                                                              // 28\n//     subscriptions: function() {                                                                                     // 29\n//         this.postsSub = Meteor.subscribe('posts', this.findOptions());                                              // 30\n//     },                                                                                                              // 31\n//     posts: function() {                                                                                             // 32\n//         return Posts.find({}, this.findOptions());                                                                  // 33\n//     },                                                                                                              // 34\n//     data: function() {                                                                                              // 35\n//         var self = this;                                                                                            // 36\n//         return {                                                                                                    // 37\n//             posts: self.posts(),                                                                                    // 38\n//             ready: self.postsSub.ready,                                                                             // 39\n//             nextPath: function() {                                                                                  // 40\n//                 if (self.posts().count() === self.postsLimit())                                                     // 41\n//                     return self.nextPath();                                                                         // 42\n//             }                                                                                                       // 43\n//         };                                                                                                          // 44\n//     }                                                                                                               // 45\n// });                                                                                                                 // 46\n//                                                                                                                     // 47\n// NewPostsController = PostsListController.extend({                                                                   // 48\n//     sort: {submitted: -1, _id: -1},                                                                                 // 49\n//     nextPath: function() {                                                                                          // 50\n//         return Router.routes.newPosts.path({postsLimit: this.postsLimit() + this.increment})                        // 51\n//     }                                                                                                               // 52\n// });                                                                                                                 // 53\n//                                                                                                                     // 54\n// BestPostsController = PostsListController.extend({                                                                  // 55\n//     sort: {votes: -1, submitted: -1, _id: -1},                                                                      // 56\n//     nextPath: function() {                                                                                          // 57\n//         return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})                       // 58\n//     }                                                                                                               // 59\n// });                                                                                                                 // 60\n//                                                                                                                     // 61\n// Router.route('/pub', {                                                                                              // 62\n//     name: 'publication',                                                                                            // 63\n//     controller: NewPostsController                                                                                  // 64\n// });                                                                                                                 // 65\n//                                                                                                                     // 66\n// Router.route('/new/:postsLimit?', {name: 'newPosts'});                                                              // 67\n//                                                                                                                     // 68\n// Router.route('/best/:postsLimit?', {name: 'bestPosts'});                                                            // 69\n//                                                                                                                     // 70\n//                                                                                                                     // 71\n// Router.route('/posts/:_id', {                                                                                       // 72\n//     name: 'postPage',                                                                                               // 73\n//     waitOn: function() {                                                                                            // 74\n//         return [                                                                                                    // 75\n//             Meteor.subscribe('singlePost', this.params._id),                                                        // 76\n//             Meteor.subscribe('comments', this.params._id)                                                           // 77\n//         ];                                                                                                          // 78\n//     },                                                                                                              // 79\n//     data: function() { return Posts.findOne(this.params._id); }                                                     // 80\n// });                                                                                                                 // 81\n//                                                                                                                     // 82\n// Router.route('/posts/:_id/edit', {                                                                                  // 83\n//     name: 'postEdit',                                                                                               // 84\n//     waitOn: function() {                                                                                            // 85\n//         return Meteor.subscribe('singlePost', this.params._id);                                                     // 86\n//     },                                                                                                              // 87\n//     data: function() { return Posts.findOne(this.params._id); }                                                     // 88\n// });                                                                                                                 // 89\n//                                                                                                                     // 90\n// Router.route('/submit', {name: 'postSubmit'});                                                                      // 91\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".css\"\n  ]\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/lib/settings-file-checked.generated.js                                                                       //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMDl.settings = JSON.parse(decodeURI(\"%7B%22jsLib%22:%7B%22minified%22:false%7D,%22theme%22:false,%22patches%22:%7B%22autoUpgrade%22:%22fullUpgrade%22%7D,%22verbose%22:false%7D\"));\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/lib/dist/material.js                                                                                         //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function() {                                                                                                         // 1\n\"use strict\";                                                                                                          // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * @license                                                                                                            // 5\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 6\n *                                                                                                                     // 7\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 8\n * you may not use this file except in compliance with the License.                                                    // 9\n * You may obtain a copy of the License at                                                                             // 10\n *                                                                                                                     // 11\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 12\n *                                                                                                                     // 13\n * Unless required by applicable law or agreed to in writing, software                                                 // 14\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 15\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16\n * See the License for the specific language governing permissions and                                                 // 17\n * limitations under the License.                                                                                      // 18\n */                                                                                                                    // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * A component handler interface using the revealing module design pattern.                                            // 22\n * More details on this design pattern here:                                                                           // 23\n * https://github.com/jasonmayes/mdl-component-design-pattern                                                          // 24\n *                                                                                                                     // 25\n * @author Jason Mayes.                                                                                                // 26\n */                                                                                                                    // 27\n/* exported componentHandler */                                                                                        // 28\n                                                                                                                       // 29\n// Pre-defining the componentHandler interface, for closure documentation and                                          // 30\n// static verification.                                                                                                // 31\nvar componentHandler = {                                                                                               // 32\n  /**                                                                                                                  // 33\n   * Searches existing DOM for elements of our component type and upgrades them                                        // 34\n   * if they have not already been upgraded.                                                                           // 35\n   *                                                                                                                   // 36\n   * @param {string=} optJsClass the programatic name of the element class we                                          // 37\n   * need to create a new instance of.                                                                                 // 38\n   * @param {string=} optCssClass the name of the CSS class elements of this                                           // 39\n   * type will have.                                                                                                   // 40\n   */                                                                                                                  // 41\n  upgradeDom: function(optJsClass, optCssClass) {},                                                                    // 42\n  /**                                                                                                                  // 43\n   * Upgrades a specific element rather than all in the DOM.                                                           // 44\n   *                                                                                                                   // 45\n   * @param {!Element} element The element we wish to upgrade.                                                         // 46\n   * @param {string=} optJsClass Optional name of the class we want to upgrade                                         // 47\n   * the element to.                                                                                                   // 48\n   */                                                                                                                  // 49\n  upgradeElement: function(element, optJsClass) {},                                                                    // 50\n  /**                                                                                                                  // 51\n   * Upgrades a specific list of elements rather than all in the DOM.                                                  // 52\n   *                                                                                                                   // 53\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements                                             // 54\n   * The elements we wish to upgrade.                                                                                  // 55\n   */                                                                                                                  // 56\n  upgradeElements: function(elements) {},                                                                              // 57\n  /**                                                                                                                  // 58\n   * Upgrades all registered components found in the current DOM. This is                                              // 59\n   * automatically called on window load.                                                                              // 60\n   */                                                                                                                  // 61\n  upgradeAllRegistered: function() {},                                                                                 // 62\n  /**                                                                                                                  // 63\n   * Allows user to be alerted to any upgrades that are performed for a given                                          // 64\n   * component type                                                                                                    // 65\n   *                                                                                                                   // 66\n   * @param {string} jsClass The class name of the MDL component we wish                                               // 67\n   * to hook into for any upgrades performed.                                                                          // 68\n   * @param {function(!HTMLElement)} callback The function to call upon an                                             // 69\n   * upgrade. This function should expect 1 parameter - the HTMLElement which                                          // 70\n   * got upgraded.                                                                                                     // 71\n   */                                                                                                                  // 72\n  registerUpgradedCallback: function(jsClass, callback) {},                                                            // 73\n  /**                                                                                                                  // 74\n   * Registers a class for future use and attempts to upgrade existing DOM.                                            // 75\n   *                                                                                                                   // 76\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration                             // 77\n   */                                                                                                                  // 78\n  register: function(config) {},                                                                                       // 79\n  /**                                                                                                                  // 80\n   * Downgrade either a given node, an array of nodes, or a NodeList.                                                  // 81\n   *                                                                                                                   // 82\n   * @param {!Node|!Array<!Node>|!NodeList} nodes                                                                      // 83\n   */                                                                                                                  // 84\n  downgradeElements: function(nodes) {}                                                                                // 85\n};                                                                                                                     // 86\n                                                                                                                       // 87\ncomponentHandler = (function() {                                                                                       // 88\n  'use strict';                                                                                                        // 89\n                                                                                                                       // 90\n  /** @type {!Array<componentHandler.ComponentConfig>} */                                                              // 91\n  var registeredComponents_ = [];                                                                                      // 92\n                                                                                                                       // 93\n  /** @type {!Array<componentHandler.Component>} */                                                                    // 94\n  var createdComponents_ = [];                                                                                         // 95\n                                                                                                                       // 96\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';                                                        // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Searches registered components for a class we are interested in using.                                            // 100\n   * Optionally replaces a match with passed object if specified.                                                      // 101\n   *                                                                                                                   // 102\n   * @param {string} name The name of a class we want to use.                                                          // 103\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.                      // 104\n   * @return {!Object|boolean}                                                                                         // 105\n   * @private                                                                                                          // 106\n   */                                                                                                                  // 107\n  function findRegisteredClass_(name, optReplace) {                                                                    // 108\n    for (var i = 0; i < registeredComponents_.length; i++) {                                                           // 109\n      if (registeredComponents_[i].className === name) {                                                               // 110\n        if (typeof optReplace !== 'undefined') {                                                                       // 111\n          registeredComponents_[i] = optReplace;                                                                       // 112\n        }                                                                                                              // 113\n        return registeredComponents_[i];                                                                               // 114\n      }                                                                                                                // 115\n    }                                                                                                                  // 116\n    return false;                                                                                                      // 117\n  }                                                                                                                    // 118\n                                                                                                                       // 119\n  /**                                                                                                                  // 120\n   * Returns an array of the classNames of the upgraded classes on the element.                                        // 121\n   *                                                                                                                   // 122\n   * @param {!Element} element The element to fetch data from.                                                         // 123\n   * @return {!Array<string>}                                                                                          // 124\n   * @private                                                                                                          // 125\n   */                                                                                                                  // 126\n  function getUpgradedListOfElement_(element) {                                                                        // 127\n    var dataUpgraded = element.getAttribute('data-upgraded');                                                          // 128\n    // Use `['']` as default value to conform the `,name,name...` style.                                               // 129\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');                                                     // 130\n  }                                                                                                                    // 131\n                                                                                                                       // 132\n  /**                                                                                                                  // 133\n   * Returns true if the given element has already been upgraded for the given                                         // 134\n   * class.                                                                                                            // 135\n   *                                                                                                                   // 136\n   * @param {!Element} element The element we want to check.                                                           // 137\n   * @param {string} jsClass The class to check for.                                                                   // 138\n   * @returns {boolean}                                                                                                // 139\n   * @private                                                                                                          // 140\n   */                                                                                                                  // 141\n  function isElementUpgraded_(element, jsClass) {                                                                      // 142\n    var upgradedList = getUpgradedListOfElement_(element);                                                             // 143\n    return upgradedList.indexOf(jsClass) !== -1;                                                                       // 144\n  }                                                                                                                    // 145\n                                                                                                                       // 146\n  /**                                                                                                                  // 147\n   * Create an event object.                                                                                           // 148\n   *                                                                                                                   // 149\n   * @param {string} eventType The type name of the event.                                                             // 150\n   * @param {boolean} bubbles Whether the event should bubble up the DOM.                                              // 151\n   * @param {boolean} cancelable Whether the event can be canceled.                                                    // 152\n   * @returns {!Event}                                                                                                 // 153\n   */                                                                                                                  // 154\n  function createEvent_(eventType, bubbles, cancelable) {                                                              // 155\n    if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {                                         // 156\n      return new CustomEvent(eventType, {                                                                              // 157\n        bubbles: bubbles,                                                                                              // 158\n        cancelable: cancelable                                                                                         // 159\n      });                                                                                                              // 160\n    } else {                                                                                                           // 161\n      var ev = document.createEvent('Events');                                                                         // 162\n      ev.initEvent(eventType, bubbles, cancelable);                                                                    // 163\n      return ev;                                                                                                       // 164\n    }                                                                                                                  // 165\n  }                                                                                                                    // 166\n                                                                                                                       // 167\n  /**                                                                                                                  // 168\n   * Searches existing DOM for elements of our component type and upgrades them                                        // 169\n   * if they have not already been upgraded.                                                                           // 170\n   *                                                                                                                   // 171\n   * @param {string=} optJsClass the programatic name of the element class we                                          // 172\n   * need to create a new instance of.                                                                                 // 173\n   * @param {string=} optCssClass the name of the CSS class elements of this                                           // 174\n   * type will have.                                                                                                   // 175\n   */                                                                                                                  // 176\n  function upgradeDomInternal(optJsClass, optCssClass) {                                                               // 177\n    if (typeof optJsClass === 'undefined' &&                                                                           // 178\n        typeof optCssClass === 'undefined') {                                                                          // 179\n      for (var i = 0; i < registeredComponents_.length; i++) {                                                         // 180\n        upgradeDomInternal(registeredComponents_[i].className,                                                         // 181\n            registeredComponents_[i].cssClass);                                                                        // 182\n      }                                                                                                                // 183\n    } else {                                                                                                           // 184\n      var jsClass = /** @type {string} */ (optJsClass);                                                                // 185\n      if (typeof optCssClass === 'undefined') {                                                                        // 186\n        var registeredClass = findRegisteredClass_(jsClass);                                                           // 187\n        if (registeredClass) {                                                                                         // 188\n          optCssClass = registeredClass.cssClass;                                                                      // 189\n        }                                                                                                              // 190\n      }                                                                                                                // 191\n                                                                                                                       // 192\n      var elements = document.querySelectorAll('.' + optCssClass);                                                     // 193\n      for (var n = 0; n < elements.length; n++) {                                                                      // 194\n        upgradeElementInternal(elements[n], jsClass);                                                                  // 195\n      }                                                                                                                // 196\n    }                                                                                                                  // 197\n  }                                                                                                                    // 198\n                                                                                                                       // 199\n  /**                                                                                                                  // 200\n   * Upgrades a specific element rather than all in the DOM.                                                           // 201\n   *                                                                                                                   // 202\n   * @param {!Element} element The element we wish to upgrade.                                                         // 203\n   * @param {string=} optJsClass Optional name of the class we want to upgrade                                         // 204\n   * the element to.                                                                                                   // 205\n   */                                                                                                                  // 206\n  function upgradeElementInternal(element, optJsClass) {                                                               // 207\n    // Verify argument type.                                                                                           // 208\n    if (!(typeof element === 'object' && element instanceof Element)) {                                                // 209\n      throw new Error('Invalid argument provided to upgrade MDL element.');                                            // 210\n    }                                                                                                                  // 211\n    // Allow upgrade to be canceled by canceling emitted event.                                                        // 212\n    var upgradingEv = createEvent_('mdl-componentupgrading', true, true);                                              // 213\n    element.dispatchEvent(upgradingEv);                                                                                // 214\n    if (upgradingEv.defaultPrevented) {                                                                                // 215\n      return;                                                                                                          // 216\n    }                                                                                                                  // 217\n                                                                                                                       // 218\n    var upgradedList = getUpgradedListOfElement_(element);                                                             // 219\n    var classesToUpgrade = [];                                                                                         // 220\n    // If jsClass is not provided scan the registered components to find the                                           // 221\n    // ones matching the element's CSS classList.                                                                      // 222\n    if (!optJsClass) {                                                                                                 // 223\n      var classList = element.classList;                                                                               // 224\n      registeredComponents_.forEach(function(component) {                                                              // 225\n        // Match CSS & Not to be upgraded & Not upgraded.                                                              // 226\n        if (classList.contains(component.cssClass) &&                                                                  // 227\n            classesToUpgrade.indexOf(component) === -1 &&                                                              // 228\n            !isElementUpgraded_(element, component.className)) {                                                       // 229\n          classesToUpgrade.push(component);                                                                            // 230\n        }                                                                                                              // 231\n      });                                                                                                              // 232\n    } else if (!isElementUpgraded_(element, optJsClass)) {                                                             // 233\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));                                                         // 234\n    }                                                                                                                  // 235\n                                                                                                                       // 236\n    // Upgrade the element for each classes.                                                                           // 237\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {                                        // 238\n      registeredClass = classesToUpgrade[i];                                                                           // 239\n      if (registeredClass) {                                                                                           // 240\n        // Mark element as upgraded.                                                                                   // 241\n        upgradedList.push(registeredClass.className);                                                                  // 242\n        element.setAttribute('data-upgraded', upgradedList.join(','));                                                 // 243\n        var instance = new registeredClass.classConstructor(element);                                                  // 244\n        instance[componentConfigProperty_] = registeredClass;                                                          // 245\n        createdComponents_.push(instance);                                                                             // 246\n        // Call any callbacks the user has registered with this component type.                                        // 247\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {                                            // 248\n          registeredClass.callbacks[j](element);                                                                       // 249\n        }                                                                                                              // 250\n                                                                                                                       // 251\n        if (registeredClass.widget) {                                                                                  // 252\n          // Assign per element instance for control over API                                                          // 253\n          element[registeredClass.className] = instance;                                                               // 254\n        }                                                                                                              // 255\n      } else {                                                                                                         // 256\n        throw new Error(                                                                                               // 257\n          'Unable to find a registered component for the given class.');                                               // 258\n      }                                                                                                                // 259\n                                                                                                                       // 260\n      var upgradedEv = createEvent_('mdl-componentupgraded', true, false);                                             // 261\n      element.dispatchEvent(upgradedEv);                                                                               // 262\n    }                                                                                                                  // 263\n  }                                                                                                                    // 264\n                                                                                                                       // 265\n  /**                                                                                                                  // 266\n   * Upgrades a specific list of elements rather than all in the DOM.                                                  // 267\n   *                                                                                                                   // 268\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements                                             // 269\n   * The elements we wish to upgrade.                                                                                  // 270\n   */                                                                                                                  // 271\n  function upgradeElementsInternal(elements) {                                                                         // 272\n    if (!Array.isArray(elements)) {                                                                                    // 273\n      if (elements instanceof Element) {                                                                               // 274\n        elements = [elements];                                                                                         // 275\n      } else {                                                                                                         // 276\n        elements = Array.prototype.slice.call(elements);                                                               // 277\n      }                                                                                                                // 278\n    }                                                                                                                  // 279\n    for (var i = 0, n = elements.length, element; i < n; i++) {                                                        // 280\n      element = elements[i];                                                                                           // 281\n      if (element instanceof HTMLElement) {                                                                            // 282\n        upgradeElementInternal(element);                                                                               // 283\n        if (element.children.length > 0) {                                                                             // 284\n          upgradeElementsInternal(element.children);                                                                   // 285\n        }                                                                                                              // 286\n      }                                                                                                                // 287\n    }                                                                                                                  // 288\n  }                                                                                                                    // 289\n                                                                                                                       // 290\n  /**                                                                                                                  // 291\n   * Registers a class for future use and attempts to upgrade existing DOM.                                            // 292\n   *                                                                                                                   // 293\n   * @param {componentHandler.ComponentConfigPublic} config                                                            // 294\n   */                                                                                                                  // 295\n  function registerInternal(config) {                                                                                  // 296\n    // In order to support both Closure-compiled and uncompiled code accessing                                         // 297\n    // this method, we need to allow for both the dot and array syntax for                                             // 298\n    // property access. You'll therefore see the `foo.bar || foo['bar']`                                               // 299\n    // pattern repeated across this method.                                                                            // 300\n    var widgetMissing = (typeof config.widget === 'undefined' &&                                                       // 301\n        typeof config['widget'] === 'undefined');                                                                      // 302\n    var widget = true;                                                                                                 // 303\n                                                                                                                       // 304\n    if (!widgetMissing) {                                                                                              // 305\n      widget = config.widget || config['widget'];                                                                      // 306\n    }                                                                                                                  // 307\n                                                                                                                       // 308\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({                                                 // 309\n      classConstructor: config.constructor || config['constructor'],                                                   // 310\n      className: config.classAsString || config['classAsString'],                                                      // 311\n      cssClass: config.cssClass || config['cssClass'],                                                                 // 312\n      widget: widget,                                                                                                  // 313\n      callbacks: []                                                                                                    // 314\n    });                                                                                                                // 315\n                                                                                                                       // 316\n    registeredComponents_.forEach(function(item) {                                                                     // 317\n      if (item.cssClass === newConfig.cssClass) {                                                                      // 318\n        throw new Error('The provided cssClass has already been registered: ' + item.cssClass);                        // 319\n      }                                                                                                                // 320\n      if (item.className === newConfig.className) {                                                                    // 321\n        throw new Error('The provided className has already been registered');                                         // 322\n      }                                                                                                                // 323\n    });                                                                                                                // 324\n                                                                                                                       // 325\n    if (config.constructor.prototype                                                                                   // 326\n        .hasOwnProperty(componentConfigProperty_)) {                                                                   // 327\n      throw new Error(                                                                                                 // 328\n          'MDL component classes must not have ' + componentConfigProperty_ +                                          // 329\n          ' defined as a property.');                                                                                  // 330\n    }                                                                                                                  // 331\n                                                                                                                       // 332\n    var found = findRegisteredClass_(config.classAsString, newConfig);                                                 // 333\n                                                                                                                       // 334\n    if (!found) {                                                                                                      // 335\n      registeredComponents_.push(newConfig);                                                                           // 336\n    }                                                                                                                  // 337\n  }                                                                                                                    // 338\n                                                                                                                       // 339\n  /**                                                                                                                  // 340\n   * Allows user to be alerted to any upgrades that are performed for a given                                          // 341\n   * component type                                                                                                    // 342\n   *                                                                                                                   // 343\n   * @param {string} jsClass The class name of the MDL component we wish                                               // 344\n   * to hook into for any upgrades performed.                                                                          // 345\n   * @param {function(!HTMLElement)} callback The function to call upon an                                             // 346\n   * upgrade. This function should expect 1 parameter - the HTMLElement which                                          // 347\n   * got upgraded.                                                                                                     // 348\n   */                                                                                                                  // 349\n  function registerUpgradedCallbackInternal(jsClass, callback) {                                                       // 350\n    var regClass = findRegisteredClass_(jsClass);                                                                      // 351\n    if (regClass) {                                                                                                    // 352\n      regClass.callbacks.push(callback);                                                                               // 353\n    }                                                                                                                  // 354\n  }                                                                                                                    // 355\n                                                                                                                       // 356\n  /**                                                                                                                  // 357\n   * Upgrades all registered components found in the current DOM. This is                                              // 358\n   * automatically called on window load.                                                                              // 359\n   */                                                                                                                  // 360\n  function upgradeAllRegisteredInternal() {                                                                            // 361\n    for (var n = 0; n < registeredComponents_.length; n++) {                                                           // 362\n      upgradeDomInternal(registeredComponents_[n].className);                                                          // 363\n    }                                                                                                                  // 364\n  }                                                                                                                    // 365\n                                                                                                                       // 366\n  /**                                                                                                                  // 367\n   * Check the component for the downgrade method.                                                                     // 368\n   * Execute if found.                                                                                                 // 369\n   * Remove component from createdComponents list.                                                                     // 370\n   *                                                                                                                   // 371\n   * @param {?componentHandler.Component} component                                                                    // 372\n   */                                                                                                                  // 373\n  function deconstructComponentInternal(component) {                                                                   // 374\n    if (component) {                                                                                                   // 375\n      var componentIndex = createdComponents_.indexOf(component);                                                      // 376\n      createdComponents_.splice(componentIndex, 1);                                                                    // 377\n                                                                                                                       // 378\n      var upgrades = component.element_.getAttribute('data-upgraded').split(',');                                      // 379\n      var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);                        // 380\n      upgrades.splice(componentPlace, 1);                                                                              // 381\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));                                            // 382\n                                                                                                                       // 383\n      var ev = createEvent_('mdl-componentdowngraded', true, false);                                                   // 384\n      component.element_.dispatchEvent(ev);                                                                            // 385\n    }                                                                                                                  // 386\n  }                                                                                                                    // 387\n                                                                                                                       // 388\n  /**                                                                                                                  // 389\n   * Downgrade either a given node, an array of nodes, or a NodeList.                                                  // 390\n   *                                                                                                                   // 391\n   * @param {!Node|!Array<!Node>|!NodeList} nodes                                                                      // 392\n   */                                                                                                                  // 393\n  function downgradeNodesInternal(nodes) {                                                                             // 394\n    /**                                                                                                                // 395\n     * Auxiliary function to downgrade a single node.                                                                  // 396\n     * @param  {!Node} node the node to be downgraded                                                                  // 397\n     */                                                                                                                // 398\n    var downgradeNode = function(node) {                                                                               // 399\n      createdComponents_.filter(function(item) {                                                                       // 400\n        return item.element_ === node;                                                                                 // 401\n      }).forEach(deconstructComponentInternal);                                                                        // 402\n    };                                                                                                                 // 403\n    if (nodes instanceof Array || nodes instanceof NodeList) {                                                         // 404\n      for (var n = 0; n < nodes.length; n++) {                                                                         // 405\n        downgradeNode(nodes[n]);                                                                                       // 406\n      }                                                                                                                // 407\n    } else if (nodes instanceof Node) {                                                                                // 408\n      downgradeNode(nodes);                                                                                            // 409\n    } else {                                                                                                           // 410\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');                                            // 411\n    }                                                                                                                  // 412\n  }                                                                                                                    // 413\n                                                                                                                       // 414\n  // Now return the functions that should be made public with their publicly                                           // 415\n  // facing names...                                                                                                   // 416\n  return {                                                                                                             // 417\n    upgradeDom: upgradeDomInternal,                                                                                    // 418\n    upgradeElement: upgradeElementInternal,                                                                            // 419\n    upgradeElements: upgradeElementsInternal,                                                                          // 420\n    upgradeAllRegistered: upgradeAllRegisteredInternal,                                                                // 421\n    registerUpgradedCallback: registerUpgradedCallbackInternal,                                                        // 422\n    register: registerInternal,                                                                                        // 423\n    downgradeElements: downgradeNodesInternal                                                                          // 424\n  };                                                                                                                   // 425\n})();                                                                                                                  // 426\n                                                                                                                       // 427\n/**                                                                                                                    // 428\n * Describes the type of a registered component type managed by                                                        // 429\n * componentHandler. Provided for benefit of the Closure compiler.                                                     // 430\n *                                                                                                                     // 431\n * @typedef {{                                                                                                         // 432\n *   constructor: Function,                                                                                            // 433\n *   classAsString: string,                                                                                            // 434\n *   cssClass: string,                                                                                                 // 435\n *   widget: (string|boolean|undefined)                                                                                // 436\n * }}                                                                                                                  // 437\n */                                                                                                                    // 438\ncomponentHandler.ComponentConfigPublic;  // jshint ignore:line                                                         // 439\n                                                                                                                       // 440\n/**                                                                                                                    // 441\n * Describes the type of a registered component type managed by                                                        // 442\n * componentHandler. Provided for benefit of the Closure compiler.                                                     // 443\n *                                                                                                                     // 444\n * @typedef {{                                                                                                         // 445\n *   constructor: !Function,                                                                                           // 446\n *   className: string,                                                                                                // 447\n *   cssClass: string,                                                                                                 // 448\n *   widget: (string|boolean),                                                                                         // 449\n *   callbacks: !Array<function(!HTMLElement)>                                                                         // 450\n * }}                                                                                                                  // 451\n */                                                                                                                    // 452\ncomponentHandler.ComponentConfig;  // jshint ignore:line                                                               // 453\n                                                                                                                       // 454\n/**                                                                                                                    // 455\n * Created component (i.e., upgraded element) type as managed by                                                       // 456\n * componentHandler. Provided for benefit of the Closure compiler.                                                     // 457\n *                                                                                                                     // 458\n * @typedef {{                                                                                                         // 459\n *   element_: !HTMLElement,                                                                                           // 460\n *   className: string,                                                                                                // 461\n *   classAsString: string,                                                                                            // 462\n *   cssClass: string,                                                                                                 // 463\n *   widget: string                                                                                                    // 464\n * }}                                                                                                                  // 465\n */                                                                                                                    // 466\ncomponentHandler.Component;  // jshint ignore:line                                                                     // 467\n                                                                                                                       // 468\n// Export all symbols, for the benefit of Closure compiler.                                                            // 469\n// No effect on uncompiled code.                                                                                       // 470\ncomponentHandler['upgradeDom'] = componentHandler.upgradeDom;                                                          // 471\ncomponentHandler['upgradeElement'] = componentHandler.upgradeElement;                                                  // 472\ncomponentHandler['upgradeElements'] = componentHandler.upgradeElements;                                                // 473\ncomponentHandler['upgradeAllRegistered'] =                                                                             // 474\n    componentHandler.upgradeAllRegistered;                                                                             // 475\ncomponentHandler['registerUpgradedCallback'] =                                                                         // 476\n    componentHandler.registerUpgradedCallback;                                                                         // 477\ncomponentHandler['register'] = componentHandler.register;                                                              // 478\ncomponentHandler['downgradeElements'] = componentHandler.downgradeElements;                                            // 479\nwindow.componentHandler = componentHandler;                                                                            // 480\nwindow['componentHandler'] = componentHandler;                                                                         // 481\n                                                                                                                       // 482\nwindow.addEventListener('load', function() {                                                                           // 483\n  'use strict';                                                                                                        // 484\n                                                                                                                       // 485\n  /**                                                                                                                  // 486\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features                                       // 487\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL                                       // 488\n   * components requiring JavaScript.                                                                                  // 489\n   */                                                                                                                  // 490\n  if ('classList' in document.createElement('div') &&                                                                  // 491\n      'querySelector' in document &&                                                                                   // 492\n      'addEventListener' in window && Array.prototype.forEach) {                                                       // 493\n    document.documentElement.classList.add('mdl-js');                                                                  // 494\n    componentHandler.upgradeAllRegistered();                                                                           // 495\n  } else {                                                                                                             // 496\n    /**                                                                                                                // 497\n     * Dummy function to avoid JS errors.                                                                              // 498\n     */                                                                                                                // 499\n    componentHandler.upgradeElement = function() {};                                                                   // 500\n    /**                                                                                                                // 501\n     * Dummy function to avoid JS errors.                                                                              // 502\n     */                                                                                                                // 503\n    componentHandler.register = function() {};                                                                         // 504\n  }                                                                                                                    // 505\n});                                                                                                                    // 506\n                                                                                                                       // 507\n// Source: https://github.com/darius/requestAnimationFrame/blob/master/requestAnimationFrame.js                        // 508\n// Adapted from https://gist.github.com/paulirish/1579671 which derived from                                           // 509\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/                                                // 510\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating                            // 511\n// requestAnimationFrame polyfill by Erik Möller.                                                                      // 512\n// Fixes from Paul Irish, Tino Zijdel, Andrew Mao, Klemen Slavič, Darius Bacon                                         // 513\n// MIT license                                                                                                         // 514\nif (!Date.now) {                                                                                                       // 515\n    /**                                                                                                                // 516\n     * Date.now polyfill.                                                                                              // 517\n     * @return {number} the current Date                                                                               // 518\n     */                                                                                                                // 519\n    Date.now = function () {                                                                                           // 520\n        return new Date().getTime();                                                                                   // 521\n    };                                                                                                                 // 522\n    Date['now'] = Date.now;                                                                                            // 523\n}                                                                                                                      // 524\nvar vendors = [                                                                                                        // 525\n    'webkit',                                                                                                          // 526\n    'moz'                                                                                                              // 527\n];                                                                                                                     // 528\nfor (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {                                            // 529\n    var vp = vendors[i];                                                                                               // 530\n    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];                                               // 531\n    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];   // 532\n    window['requestAnimationFrame'] = window.requestAnimationFrame;                                                    // 533\n    window['cancelAnimationFrame'] = window.cancelAnimationFrame;                                                      // 534\n}                                                                                                                      // 535\nif (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\n    var lastTime = 0;                                                                                                  // 537\n    /**                                                                                                                // 538\n     * requestAnimationFrame polyfill.                                                                                 // 539\n     * @param  {!Function} callback the callback function.                                                             // 540\n     */                                                                                                                // 541\n    window.requestAnimationFrame = function (callback) {                                                               // 542\n        var now = Date.now();                                                                                          // 543\n        var nextTime = Math.max(lastTime + 16, now);                                                                   // 544\n        return setTimeout(function () {                                                                                // 545\n            callback(lastTime = nextTime);                                                                             // 546\n        }, nextTime - now);                                                                                            // 547\n    };                                                                                                                 // 548\n    window.cancelAnimationFrame = clearTimeout;                                                                        // 549\n    window['requestAnimationFrame'] = window.requestAnimationFrame;                                                    // 550\n    window['cancelAnimationFrame'] = window.cancelAnimationFrame;                                                      // 551\n}                                                                                                                      // 552\n/**                                                                                                                    // 553\n * @license                                                                                                            // 554\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 555\n *                                                                                                                     // 556\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 557\n * you may not use this file except in compliance with the License.                                                    // 558\n * You may obtain a copy of the License at                                                                             // 559\n *                                                                                                                     // 560\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 561\n *                                                                                                                     // 562\n * Unless required by applicable law or agreed to in writing, software                                                 // 563\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 564\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 565\n * See the License for the specific language governing permissions and                                                 // 566\n * limitations under the License.                                                                                      // 567\n */                                                                                                                    // 568\n/**                                                                                                                    // 569\n   * Class constructor for Button MDL component.                                                                       // 570\n   * Implements MDL component design pattern defined at:                                                               // 571\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 572\n   *                                                                                                                   // 573\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 574\n   */                                                                                                                  // 575\nvar MaterialButton = function MaterialButton(element) {                                                                // 576\n    this.element_ = element;                                                                                           // 577\n    // Initialize instance.                                                                                            // 578\n    this.init();                                                                                                       // 579\n};                                                                                                                     // 580\nwindow['MaterialButton'] = MaterialButton;                                                                             // 581\n/**                                                                                                                    // 582\n   * Store constants in one place so they can be updated easily.                                                       // 583\n   *                                                                                                                   // 584\n   * @enum {string | number}                                                                                           // 585\n   * @private                                                                                                          // 586\n   */                                                                                                                  // 587\nMaterialButton.prototype.Constant_ = {};                                                                               // 588\n/**                                                                                                                    // 589\n   * Store strings for class names defined by this component that are used in                                          // 590\n   * JavaScript. This allows us to simply change it in one place should we                                             // 591\n   * decide to modify at a later date.                                                                                 // 592\n   *                                                                                                                   // 593\n   * @enum {string}                                                                                                    // 594\n   * @private                                                                                                          // 595\n   */                                                                                                                  // 596\nMaterialButton.prototype.CssClasses_ = {                                                                               // 597\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 598\n    RIPPLE_CONTAINER: 'mdl-button__ripple-container',                                                                  // 599\n    RIPPLE: 'mdl-ripple'                                                                                               // 600\n};                                                                                                                     // 601\n/**                                                                                                                    // 602\n   * Handle blur of element.                                                                                           // 603\n   *                                                                                                                   // 604\n   * @param {Event} event The event that fired.                                                                        // 605\n   * @private                                                                                                          // 606\n   */                                                                                                                  // 607\nMaterialButton.prototype.blurHandler_ = function (event) {                                                             // 608\n    if (event) {                                                                                                       // 609\n        this.element_.blur();                                                                                          // 610\n    }                                                                                                                  // 611\n};                                                                                                                     // 612\n// Public methods.                                                                                                     // 613\n/**                                                                                                                    // 614\n   * Disable button.                                                                                                   // 615\n   *                                                                                                                   // 616\n   * @public                                                                                                           // 617\n   */                                                                                                                  // 618\nMaterialButton.prototype.disable = function () {                                                                       // 619\n    this.element_.disabled = true;                                                                                     // 620\n};                                                                                                                     // 621\nMaterialButton.prototype['disable'] = MaterialButton.prototype.disable;                                                // 622\n/**                                                                                                                    // 623\n   * Enable button.                                                                                                    // 624\n   *                                                                                                                   // 625\n   * @public                                                                                                           // 626\n   */                                                                                                                  // 627\nMaterialButton.prototype.enable = function () {                                                                        // 628\n    this.element_.disabled = false;                                                                                    // 629\n};                                                                                                                     // 630\nMaterialButton.prototype['enable'] = MaterialButton.prototype.enable;                                                  // 631\n/**                                                                                                                    // 632\n   * Initialize element.                                                                                               // 633\n   */                                                                                                                  // 634\nMaterialButton.prototype.init = function () {                                                                          // 635\n    if (this.element_) {                                                                                               // 636\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 637\n            var rippleContainer = document.createElement('span');                                                      // 638\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                                          // 639\n            this.rippleElement_ = document.createElement('span');                                                      // 640\n            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);                                                // 641\n            rippleContainer.appendChild(this.rippleElement_);                                                          // 642\n            this.boundRippleBlurHandler = this.blurHandler_.bind(this);                                                // 643\n            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);                              // 644\n            this.element_.appendChild(rippleContainer);                                                                // 645\n        }                                                                                                              // 646\n        this.boundButtonBlurHandler = this.blurHandler_.bind(this);                                                    // 647\n        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);                                        // 648\n        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);                                     // 649\n    }                                                                                                                  // 650\n};                                                                                                                     // 651\n// The component registers itself. It can assume componentHandler is available                                         // 652\n// in the global scope.                                                                                                // 653\ncomponentHandler.register({                                                                                            // 654\n    constructor: MaterialButton,                                                                                       // 655\n    classAsString: 'MaterialButton',                                                                                   // 656\n    cssClass: 'mdl-js-button',                                                                                         // 657\n    widget: true                                                                                                       // 658\n});                                                                                                                    // 659\n/**                                                                                                                    // 660\n * @license                                                                                                            // 661\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 662\n *                                                                                                                     // 663\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 664\n * you may not use this file except in compliance with the License.                                                    // 665\n * You may obtain a copy of the License at                                                                             // 666\n *                                                                                                                     // 667\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 668\n *                                                                                                                     // 669\n * Unless required by applicable law or agreed to in writing, software                                                 // 670\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 671\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 672\n * See the License for the specific language governing permissions and                                                 // 673\n * limitations under the License.                                                                                      // 674\n */                                                                                                                    // 675\n/**                                                                                                                    // 676\n   * Class constructor for Checkbox MDL component.                                                                     // 677\n   * Implements MDL component design pattern defined at:                                                               // 678\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 679\n   *                                                                                                                   // 680\n   * @constructor                                                                                                      // 681\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 682\n   */                                                                                                                  // 683\nvar MaterialCheckbox = function MaterialCheckbox(element) {                                                            // 684\n    this.element_ = element;                                                                                           // 685\n    // Initialize instance.                                                                                            // 686\n    this.init();                                                                                                       // 687\n};                                                                                                                     // 688\nwindow['MaterialCheckbox'] = MaterialCheckbox;                                                                         // 689\n/**                                                                                                                    // 690\n   * Store constants in one place so they can be updated easily.                                                       // 691\n   *                                                                                                                   // 692\n   * @enum {string | number}                                                                                           // 693\n   * @private                                                                                                          // 694\n   */                                                                                                                  // 695\nMaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                        // 696\n/**                                                                                                                    // 697\n   * Store strings for class names defined by this component that are used in                                          // 698\n   * JavaScript. This allows us to simply change it in one place should we                                             // 699\n   * decide to modify at a later date.                                                                                 // 700\n   *                                                                                                                   // 701\n   * @enum {string}                                                                                                    // 702\n   * @private                                                                                                          // 703\n   */                                                                                                                  // 704\nMaterialCheckbox.prototype.CssClasses_ = {                                                                             // 705\n    INPUT: 'mdl-checkbox__input',                                                                                      // 706\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',                                                                          // 707\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',                                                                        // 708\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',                                                                        // 709\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 710\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 711\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',                                                                // 712\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 713\n    RIPPLE: 'mdl-ripple',                                                                                              // 714\n    IS_FOCUSED: 'is-focused',                                                                                          // 715\n    IS_DISABLED: 'is-disabled',                                                                                        // 716\n    IS_CHECKED: 'is-checked',                                                                                          // 717\n    IS_UPGRADED: 'is-upgraded'                                                                                         // 718\n};                                                                                                                     // 719\n/**                                                                                                                    // 720\n   * Handle change of state.                                                                                           // 721\n   *                                                                                                                   // 722\n   * @param {Event} event The event that fired.                                                                        // 723\n   * @private                                                                                                          // 724\n   */                                                                                                                  // 725\nMaterialCheckbox.prototype.onChange_ = function (event) {                                                              // 726\n    this.updateClasses_();                                                                                             // 727\n};                                                                                                                     // 728\n/**                                                                                                                    // 729\n   * Handle focus of element.                                                                                          // 730\n   *                                                                                                                   // 731\n   * @param {Event} event The event that fired.                                                                        // 732\n   * @private                                                                                                          // 733\n   */                                                                                                                  // 734\nMaterialCheckbox.prototype.onFocus_ = function (event) {                                                               // 735\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 736\n};                                                                                                                     // 737\n/**                                                                                                                    // 738\n   * Handle lost focus of element.                                                                                     // 739\n   *                                                                                                                   // 740\n   * @param {Event} event The event that fired.                                                                        // 741\n   * @private                                                                                                          // 742\n   */                                                                                                                  // 743\nMaterialCheckbox.prototype.onBlur_ = function (event) {                                                                // 744\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 745\n};                                                                                                                     // 746\n/**                                                                                                                    // 747\n   * Handle mouseup.                                                                                                   // 748\n   *                                                                                                                   // 749\n   * @param {Event} event The event that fired.                                                                        // 750\n   * @private                                                                                                          // 751\n   */                                                                                                                  // 752\nMaterialCheckbox.prototype.onMouseUp_ = function (event) {                                                             // 753\n    this.blur_();                                                                                                      // 754\n};                                                                                                                     // 755\n/**                                                                                                                    // 756\n   * Handle class updates.                                                                                             // 757\n   *                                                                                                                   // 758\n   * @private                                                                                                          // 759\n   */                                                                                                                  // 760\nMaterialCheckbox.prototype.updateClasses_ = function () {                                                              // 761\n    this.checkDisabled();                                                                                              // 762\n    this.checkToggleState();                                                                                           // 763\n};                                                                                                                     // 764\n/**                                                                                                                    // 765\n   * Add blur.                                                                                                         // 766\n   *                                                                                                                   // 767\n   * @private                                                                                                          // 768\n   */                                                                                                                  // 769\nMaterialCheckbox.prototype.blur_ = function () {                                                                       // 770\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 771\n    // so that we can avoid this hack.                                                                                 // 772\n    window.setTimeout(function () {                                                                                    // 773\n        this.inputElement_.blur();                                                                                     // 774\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 775\n};                                                                                                                     // 776\n// Public methods.                                                                                                     // 777\n/**                                                                                                                    // 778\n   * Check the inputs toggle state and update display.                                                                 // 779\n   *                                                                                                                   // 780\n   * @public                                                                                                           // 781\n   */                                                                                                                  // 782\nMaterialCheckbox.prototype.checkToggleState = function () {                                                            // 783\n    if (this.inputElement_.checked) {                                                                                  // 784\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 785\n    } else {                                                                                                           // 786\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 787\n    }                                                                                                                  // 788\n};                                                                                                                     // 789\nMaterialCheckbox.prototype['checkToggleState'] = MaterialCheckbox.prototype.checkToggleState;                          // 790\n/**                                                                                                                    // 791\n   * Check the inputs disabled state and update display.                                                               // 792\n   *                                                                                                                   // 793\n   * @public                                                                                                           // 794\n   */                                                                                                                  // 795\nMaterialCheckbox.prototype.checkDisabled = function () {                                                               // 796\n    if (this.inputElement_.disabled) {                                                                                 // 797\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 798\n    } else {                                                                                                           // 799\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 800\n    }                                                                                                                  // 801\n};                                                                                                                     // 802\nMaterialCheckbox.prototype['checkDisabled'] = MaterialCheckbox.prototype.checkDisabled;                                // 803\n/**                                                                                                                    // 804\n   * Disable checkbox.                                                                                                 // 805\n   *                                                                                                                   // 806\n   * @public                                                                                                           // 807\n   */                                                                                                                  // 808\nMaterialCheckbox.prototype.disable = function () {                                                                     // 809\n    this.inputElement_.disabled = true;                                                                                // 810\n    this.updateClasses_();                                                                                             // 811\n};                                                                                                                     // 812\nMaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;                                            // 813\n/**                                                                                                                    // 814\n   * Enable checkbox.                                                                                                  // 815\n   *                                                                                                                   // 816\n   * @public                                                                                                           // 817\n   */                                                                                                                  // 818\nMaterialCheckbox.prototype.enable = function () {                                                                      // 819\n    this.inputElement_.disabled = false;                                                                               // 820\n    this.updateClasses_();                                                                                             // 821\n};                                                                                                                     // 822\nMaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;                                              // 823\n/**                                                                                                                    // 824\n   * Check checkbox.                                                                                                   // 825\n   *                                                                                                                   // 826\n   * @public                                                                                                           // 827\n   */                                                                                                                  // 828\nMaterialCheckbox.prototype.check = function () {                                                                       // 829\n    this.inputElement_.checked = true;                                                                                 // 830\n    this.updateClasses_();                                                                                             // 831\n};                                                                                                                     // 832\nMaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;                                                // 833\n/**                                                                                                                    // 834\n   * Uncheck checkbox.                                                                                                 // 835\n   *                                                                                                                   // 836\n   * @public                                                                                                           // 837\n   */                                                                                                                  // 838\nMaterialCheckbox.prototype.uncheck = function () {                                                                     // 839\n    this.inputElement_.checked = false;                                                                                // 840\n    this.updateClasses_();                                                                                             // 841\n};                                                                                                                     // 842\nMaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;                                            // 843\n/**                                                                                                                    // 844\n   * Initialize element.                                                                                               // 845\n   */                                                                                                                  // 846\nMaterialCheckbox.prototype.init = function () {                                                                        // 847\n    if (this.element_) {                                                                                               // 848\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                // 849\n        var boxOutline = document.createElement('span');                                                               // 850\n        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);                                                        // 851\n        var tickContainer = document.createElement('span');                                                            // 852\n        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);                                                    // 853\n        var tickOutline = document.createElement('span');                                                              // 854\n        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);                                                      // 855\n        boxOutline.appendChild(tickOutline);                                                                           // 856\n        this.element_.appendChild(tickContainer);                                                                      // 857\n        this.element_.appendChild(boxOutline);                                                                         // 858\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 859\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 860\n            this.rippleContainerElement_ = document.createElement('span');                                             // 861\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                             // 862\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                // 863\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);                                // 864\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);                                                      // 865\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);                         // 866\n            var ripple = document.createElement('span');                                                               // 867\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 868\n            this.rippleContainerElement_.appendChild(ripple);                                                          // 869\n            this.element_.appendChild(this.rippleContainerElement_);                                                   // 870\n        }                                                                                                              // 871\n        this.boundInputOnChange = this.onChange_.bind(this);                                                           // 872\n        this.boundInputOnFocus = this.onFocus_.bind(this);                                                             // 873\n        this.boundInputOnBlur = this.onBlur_.bind(this);                                                               // 874\n        this.boundElementMouseUp = this.onMouseUp_.bind(this);                                                         // 875\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);                                        // 876\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);                                          // 877\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);                                            // 878\n        this.element_.addEventListener('mouseup', this.boundElementMouseUp);                                           // 879\n        this.updateClasses_();                                                                                         // 880\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 881\n    }                                                                                                                  // 882\n};                                                                                                                     // 883\n// The component registers itself. It can assume componentHandler is available                                         // 884\n// in the global scope.                                                                                                // 885\ncomponentHandler.register({                                                                                            // 886\n    constructor: MaterialCheckbox,                                                                                     // 887\n    classAsString: 'MaterialCheckbox',                                                                                 // 888\n    cssClass: 'mdl-js-checkbox',                                                                                       // 889\n    widget: true                                                                                                       // 890\n});                                                                                                                    // 891\n/**                                                                                                                    // 892\n * @license                                                                                                            // 893\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 894\n *                                                                                                                     // 895\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 896\n * you may not use this file except in compliance with the License.                                                    // 897\n * You may obtain a copy of the License at                                                                             // 898\n *                                                                                                                     // 899\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 900\n *                                                                                                                     // 901\n * Unless required by applicable law or agreed to in writing, software                                                 // 902\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 903\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 904\n * See the License for the specific language governing permissions and                                                 // 905\n * limitations under the License.                                                                                      // 906\n */                                                                                                                    // 907\n/**                                                                                                                    // 908\n   * Class constructor for icon toggle MDL component.                                                                  // 909\n   * Implements MDL component design pattern defined at:                                                               // 910\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 911\n   *                                                                                                                   // 912\n   * @constructor                                                                                                      // 913\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 914\n   */                                                                                                                  // 915\nvar MaterialIconToggle = function MaterialIconToggle(element) {                                                        // 916\n    this.element_ = element;                                                                                           // 917\n    // Initialize instance.                                                                                            // 918\n    this.init();                                                                                                       // 919\n};                                                                                                                     // 920\nwindow['MaterialIconToggle'] = MaterialIconToggle;                                                                     // 921\n/**                                                                                                                    // 922\n   * Store constants in one place so they can be updated easily.                                                       // 923\n   *                                                                                                                   // 924\n   * @enum {string | number}                                                                                           // 925\n   * @private                                                                                                          // 926\n   */                                                                                                                  // 927\nMaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                      // 928\n/**                                                                                                                    // 929\n   * Store strings for class names defined by this component that are used in                                          // 930\n   * JavaScript. This allows us to simply change it in one place should we                                             // 931\n   * decide to modify at a later date.                                                                                 // 932\n   *                                                                                                                   // 933\n   * @enum {string}                                                                                                    // 934\n   * @private                                                                                                          // 935\n   */                                                                                                                  // 936\nMaterialIconToggle.prototype.CssClasses_ = {                                                                           // 937\n    INPUT: 'mdl-icon-toggle__input',                                                                                   // 938\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                          // 939\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 940\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',                                                             // 941\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 942\n    RIPPLE: 'mdl-ripple',                                                                                              // 943\n    IS_FOCUSED: 'is-focused',                                                                                          // 944\n    IS_DISABLED: 'is-disabled',                                                                                        // 945\n    IS_CHECKED: 'is-checked'                                                                                           // 946\n};                                                                                                                     // 947\n/**                                                                                                                    // 948\n   * Handle change of state.                                                                                           // 949\n   *                                                                                                                   // 950\n   * @param {Event} event The event that fired.                                                                        // 951\n   * @private                                                                                                          // 952\n   */                                                                                                                  // 953\nMaterialIconToggle.prototype.onChange_ = function (event) {                                                            // 954\n    this.updateClasses_();                                                                                             // 955\n};                                                                                                                     // 956\n/**                                                                                                                    // 957\n   * Handle focus of element.                                                                                          // 958\n   *                                                                                                                   // 959\n   * @param {Event} event The event that fired.                                                                        // 960\n   * @private                                                                                                          // 961\n   */                                                                                                                  // 962\nMaterialIconToggle.prototype.onFocus_ = function (event) {                                                             // 963\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 964\n};                                                                                                                     // 965\n/**                                                                                                                    // 966\n   * Handle lost focus of element.                                                                                     // 967\n   *                                                                                                                   // 968\n   * @param {Event} event The event that fired.                                                                        // 969\n   * @private                                                                                                          // 970\n   */                                                                                                                  // 971\nMaterialIconToggle.prototype.onBlur_ = function (event) {                                                              // 972\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 973\n};                                                                                                                     // 974\n/**                                                                                                                    // 975\n   * Handle mouseup.                                                                                                   // 976\n   *                                                                                                                   // 977\n   * @param {Event} event The event that fired.                                                                        // 978\n   * @private                                                                                                          // 979\n   */                                                                                                                  // 980\nMaterialIconToggle.prototype.onMouseUp_ = function (event) {                                                           // 981\n    this.blur_();                                                                                                      // 982\n};                                                                                                                     // 983\n/**                                                                                                                    // 984\n   * Handle class updates.                                                                                             // 985\n   *                                                                                                                   // 986\n   * @private                                                                                                          // 987\n   */                                                                                                                  // 988\nMaterialIconToggle.prototype.updateClasses_ = function () {                                                            // 989\n    this.checkDisabled();                                                                                              // 990\n    this.checkToggleState();                                                                                           // 991\n};                                                                                                                     // 992\n/**                                                                                                                    // 993\n   * Add blur.                                                                                                         // 994\n   *                                                                                                                   // 995\n   * @private                                                                                                          // 996\n   */                                                                                                                  // 997\nMaterialIconToggle.prototype.blur_ = function () {                                                                     // 998\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 999\n    // so that we can avoid this hack.                                                                                 // 1000\n    window.setTimeout(function () {                                                                                    // 1001\n        this.inputElement_.blur();                                                                                     // 1002\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 1003\n};                                                                                                                     // 1004\n// Public methods.                                                                                                     // 1005\n/**                                                                                                                    // 1006\n   * Check the inputs toggle state and update display.                                                                 // 1007\n   *                                                                                                                   // 1008\n   * @public                                                                                                           // 1009\n   */                                                                                                                  // 1010\nMaterialIconToggle.prototype.checkToggleState = function () {                                                          // 1011\n    if (this.inputElement_.checked) {                                                                                  // 1012\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 1013\n    } else {                                                                                                           // 1014\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 1015\n    }                                                                                                                  // 1016\n};                                                                                                                     // 1017\nMaterialIconToggle.prototype['checkToggleState'] = MaterialIconToggle.prototype.checkToggleState;                      // 1018\n/**                                                                                                                    // 1019\n   * Check the inputs disabled state and update display.                                                               // 1020\n   *                                                                                                                   // 1021\n   * @public                                                                                                           // 1022\n   */                                                                                                                  // 1023\nMaterialIconToggle.prototype.checkDisabled = function () {                                                             // 1024\n    if (this.inputElement_.disabled) {                                                                                 // 1025\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 1026\n    } else {                                                                                                           // 1027\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 1028\n    }                                                                                                                  // 1029\n};                                                                                                                     // 1030\nMaterialIconToggle.prototype['checkDisabled'] = MaterialIconToggle.prototype.checkDisabled;                            // 1031\n/**                                                                                                                    // 1032\n   * Disable icon toggle.                                                                                              // 1033\n   *                                                                                                                   // 1034\n   * @public                                                                                                           // 1035\n   */                                                                                                                  // 1036\nMaterialIconToggle.prototype.disable = function () {                                                                   // 1037\n    this.inputElement_.disabled = true;                                                                                // 1038\n    this.updateClasses_();                                                                                             // 1039\n};                                                                                                                     // 1040\nMaterialIconToggle.prototype['disable'] = MaterialIconToggle.prototype.disable;                                        // 1041\n/**                                                                                                                    // 1042\n   * Enable icon toggle.                                                                                               // 1043\n   *                                                                                                                   // 1044\n   * @public                                                                                                           // 1045\n   */                                                                                                                  // 1046\nMaterialIconToggle.prototype.enable = function () {                                                                    // 1047\n    this.inputElement_.disabled = false;                                                                               // 1048\n    this.updateClasses_();                                                                                             // 1049\n};                                                                                                                     // 1050\nMaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable;                                          // 1051\n/**                                                                                                                    // 1052\n   * Check icon toggle.                                                                                                // 1053\n   *                                                                                                                   // 1054\n   * @public                                                                                                           // 1055\n   */                                                                                                                  // 1056\nMaterialIconToggle.prototype.check = function () {                                                                     // 1057\n    this.inputElement_.checked = true;                                                                                 // 1058\n    this.updateClasses_();                                                                                             // 1059\n};                                                                                                                     // 1060\nMaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check;                                            // 1061\n/**                                                                                                                    // 1062\n   * Uncheck icon toggle.                                                                                              // 1063\n   *                                                                                                                   // 1064\n   * @public                                                                                                           // 1065\n   */                                                                                                                  // 1066\nMaterialIconToggle.prototype.uncheck = function () {                                                                   // 1067\n    this.inputElement_.checked = false;                                                                                // 1068\n    this.updateClasses_();                                                                                             // 1069\n};                                                                                                                     // 1070\nMaterialIconToggle.prototype['uncheck'] = MaterialIconToggle.prototype.uncheck;                                        // 1071\n/**                                                                                                                    // 1072\n   * Initialize element.                                                                                               // 1073\n   */                                                                                                                  // 1074\nMaterialIconToggle.prototype.init = function () {                                                                      // 1075\n    if (this.element_) {                                                                                               // 1076\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                // 1077\n        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {                                     // 1078\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 1079\n            this.rippleContainerElement_ = document.createElement('span');                                             // 1080\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                             // 1081\n            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);                             // 1082\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);                                // 1083\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);                                                      // 1084\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);                         // 1085\n            var ripple = document.createElement('span');                                                               // 1086\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 1087\n            this.rippleContainerElement_.appendChild(ripple);                                                          // 1088\n            this.element_.appendChild(this.rippleContainerElement_);                                                   // 1089\n        }                                                                                                              // 1090\n        this.boundInputOnChange = this.onChange_.bind(this);                                                           // 1091\n        this.boundInputOnFocus = this.onFocus_.bind(this);                                                             // 1092\n        this.boundInputOnBlur = this.onBlur_.bind(this);                                                               // 1093\n        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);                                                       // 1094\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);                                        // 1095\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);                                          // 1096\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);                                            // 1097\n        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);                                         // 1098\n        this.updateClasses_();                                                                                         // 1099\n        this.element_.classList.add('is-upgraded');                                                                    // 1100\n    }                                                                                                                  // 1101\n};                                                                                                                     // 1102\n// The component registers itself. It can assume componentHandler is available                                         // 1103\n// in the global scope.                                                                                                // 1104\ncomponentHandler.register({                                                                                            // 1105\n    constructor: MaterialIconToggle,                                                                                   // 1106\n    classAsString: 'MaterialIconToggle',                                                                               // 1107\n    cssClass: 'mdl-js-icon-toggle',                                                                                    // 1108\n    widget: true                                                                                                       // 1109\n});                                                                                                                    // 1110\n/**                                                                                                                    // 1111\n * @license                                                                                                            // 1112\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1113\n *                                                                                                                     // 1114\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1115\n * you may not use this file except in compliance with the License.                                                    // 1116\n * You may obtain a copy of the License at                                                                             // 1117\n *                                                                                                                     // 1118\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1119\n *                                                                                                                     // 1120\n * Unless required by applicable law or agreed to in writing, software                                                 // 1121\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1122\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1123\n * See the License for the specific language governing permissions and                                                 // 1124\n * limitations under the License.                                                                                      // 1125\n */                                                                                                                    // 1126\n/**                                                                                                                    // 1127\n   * Class constructor for dropdown MDL component.                                                                     // 1128\n   * Implements MDL component design pattern defined at:                                                               // 1129\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1130\n   *                                                                                                                   // 1131\n   * @constructor                                                                                                      // 1132\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1133\n   */                                                                                                                  // 1134\nvar MaterialMenu = function MaterialMenu(element) {                                                                    // 1135\n    this.element_ = element;                                                                                           // 1136\n    // Initialize instance.                                                                                            // 1137\n    this.init();                                                                                                       // 1138\n};                                                                                                                     // 1139\nwindow['MaterialMenu'] = MaterialMenu;                                                                                 // 1140\n/**                                                                                                                    // 1141\n   * Store constants in one place so they can be updated easily.                                                       // 1142\n   *                                                                                                                   // 1143\n   * @enum {string | number}                                                                                           // 1144\n   * @private                                                                                                          // 1145\n   */                                                                                                                  // 1146\nMaterialMenu.prototype.Constant_ = {                                                                                   // 1147\n    // Total duration of the menu animation.                                                                           // 1148\n    TRANSITION_DURATION_SECONDS: 0.3,                                                                                  // 1149\n    // The fraction of the total duration we want to use for menu item animations.                                     // 1150\n    TRANSITION_DURATION_FRACTION: 0.8,                                                                                 // 1151\n    // How long the menu stays open after choosing an option (so the user can see                                      // 1152\n    // the ripple).                                                                                                    // 1153\n    CLOSE_TIMEOUT: 150                                                                                                 // 1154\n};                                                                                                                     // 1155\n/**                                                                                                                    // 1156\n   * Keycodes, for code readability.                                                                                   // 1157\n   *                                                                                                                   // 1158\n   * @enum {number}                                                                                                    // 1159\n   * @private                                                                                                          // 1160\n   */                                                                                                                  // 1161\nMaterialMenu.prototype.Keycodes_ = {                                                                                   // 1162\n    ENTER: 13,                                                                                                         // 1163\n    ESCAPE: 27,                                                                                                        // 1164\n    SPACE: 32,                                                                                                         // 1165\n    UP_ARROW: 38,                                                                                                      // 1166\n    DOWN_ARROW: 40                                                                                                     // 1167\n};                                                                                                                     // 1168\n/**                                                                                                                    // 1169\n   * Store strings for class names defined by this component that are used in                                          // 1170\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1171\n   * decide to modify at a later date.                                                                                 // 1172\n   *                                                                                                                   // 1173\n   * @enum {string}                                                                                                    // 1174\n   * @private                                                                                                          // 1175\n   */                                                                                                                  // 1176\nMaterialMenu.prototype.CssClasses_ = {                                                                                 // 1177\n    CONTAINER: 'mdl-menu__container',                                                                                  // 1178\n    OUTLINE: 'mdl-menu__outline',                                                                                      // 1179\n    ITEM: 'mdl-menu__item',                                                                                            // 1180\n    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',                                                          // 1181\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 1182\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 1183\n    RIPPLE: 'mdl-ripple',                                                                                              // 1184\n    // Statuses                                                                                                        // 1185\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 1186\n    IS_VISIBLE: 'is-visible',                                                                                          // 1187\n    IS_ANIMATING: 'is-animating',                                                                                      // 1188\n    // Alignment options                                                                                               // 1189\n    BOTTOM_LEFT: 'mdl-menu--bottom-left',                                                                              // 1190\n    // This is the default.                                                                                            // 1191\n    BOTTOM_RIGHT: 'mdl-menu--bottom-right',                                                                            // 1192\n    TOP_LEFT: 'mdl-menu--top-left',                                                                                    // 1193\n    TOP_RIGHT: 'mdl-menu--top-right',                                                                                  // 1194\n    UNALIGNED: 'mdl-menu--unaligned'                                                                                   // 1195\n};                                                                                                                     // 1196\n/**                                                                                                                    // 1197\n   * Initialize element.                                                                                               // 1198\n   */                                                                                                                  // 1199\nMaterialMenu.prototype.init = function () {                                                                            // 1200\n    if (this.element_) {                                                                                               // 1201\n        // Create container for the menu.                                                                              // 1202\n        var container = document.createElement('div');                                                                 // 1203\n        container.classList.add(this.CssClasses_.CONTAINER);                                                           // 1204\n        this.element_.parentElement.insertBefore(container, this.element_);                                            // 1205\n        this.element_.parentElement.removeChild(this.element_);                                                        // 1206\n        container.appendChild(this.element_);                                                                          // 1207\n        this.container_ = container;                                                                                   // 1208\n        // Create outline for the menu (shadow and background).                                                        // 1209\n        var outline = document.createElement('div');                                                                   // 1210\n        outline.classList.add(this.CssClasses_.OUTLINE);                                                               // 1211\n        this.outline_ = outline;                                                                                       // 1212\n        container.insertBefore(outline, this.element_);                                                                // 1213\n        // Find the \"for\" element and bind events to it.                                                               // 1214\n        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');                 // 1215\n        var forEl = null;                                                                                              // 1216\n        if (forElId) {                                                                                                 // 1217\n            forEl = document.getElementById(forElId);                                                                  // 1218\n            if (forEl) {                                                                                               // 1219\n                this.forElement_ = forEl;                                                                              // 1220\n                forEl.addEventListener('click', this.handleForClick_.bind(this));                                      // 1221\n                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));                            // 1222\n            }                                                                                                          // 1223\n        }                                                                                                              // 1224\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);                                       // 1225\n        this.boundItemKeydown_ = this.handleItemKeyboardEvent_.bind(this);                                             // 1226\n        this.boundItemClick_ = this.handleItemClick_.bind(this);                                                       // 1227\n        for (var i = 0; i < items.length; i++) {                                                                       // 1228\n            // Add a listener to each menu item.                                                                       // 1229\n            items[i].addEventListener('click', this.boundItemClick_);                                                  // 1230\n            // Add a tab index to each menu item.                                                                      // 1231\n            items[i].tabIndex = '-1';                                                                                  // 1232\n            // Add a keyboard listener to each menu item.                                                              // 1233\n            items[i].addEventListener('keydown', this.boundItemKeydown_);                                              // 1234\n        }                                                                                                              // 1235\n        // Add ripple classes to each item, if the user has enabled ripples.                                           // 1236\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 1237\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 1238\n            for (i = 0; i < items.length; i++) {                                                                       // 1239\n                var item = items[i];                                                                                   // 1240\n                var rippleContainer = document.createElement('span');                                                  // 1241\n                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);                                 // 1242\n                var ripple = document.createElement('span');                                                           // 1243\n                ripple.classList.add(this.CssClasses_.RIPPLE);                                                         // 1244\n                rippleContainer.appendChild(ripple);                                                                   // 1245\n                item.appendChild(rippleContainer);                                                                     // 1246\n                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                                    // 1247\n            }                                                                                                          // 1248\n        }                                                                                                              // 1249\n        // Copy alignment classes to the container, so the outline can use them.                                       // 1250\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {                                          // 1251\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);                                                 // 1252\n        }                                                                                                              // 1253\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {                                         // 1254\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);                                                // 1255\n        }                                                                                                              // 1256\n        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {                                             // 1257\n            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);                                                    // 1258\n        }                                                                                                              // 1259\n        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {                                            // 1260\n            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);                                                   // 1261\n        }                                                                                                              // 1262\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {                                            // 1263\n            this.outline_.classList.add(this.CssClasses_.UNALIGNED);                                                   // 1264\n        }                                                                                                              // 1265\n        container.classList.add(this.CssClasses_.IS_UPGRADED);                                                         // 1266\n    }                                                                                                                  // 1267\n};                                                                                                                     // 1268\n/**                                                                                                                    // 1269\n   * Handles a click on the \"for\" element, by positioning the menu and then                                            // 1270\n   * toggling it.                                                                                                      // 1271\n   *                                                                                                                   // 1272\n   * @param {Event} evt The event that fired.                                                                          // 1273\n   * @private                                                                                                          // 1274\n   */                                                                                                                  // 1275\nMaterialMenu.prototype.handleForClick_ = function (evt) {                                                              // 1276\n    if (this.element_ && this.forElement_) {                                                                           // 1277\n        var rect = this.forElement_.getBoundingClientRect();                                                           // 1278\n        var forRect = this.forElement_.parentElement.getBoundingClientRect();                                          // 1279\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {                                            // 1280\n        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {                                  // 1281\n            // Position below the \"for\" element, aligned to its right.                                                 // 1282\n            this.container_.style.right = forRect.right - rect.right + 'px';                                           // 1283\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';             // 1284\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {                                      // 1285\n            // Position above the \"for\" element, aligned to its left.                                                  // 1286\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';                                           // 1287\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';                                           // 1288\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {                                     // 1289\n            // Position above the \"for\" element, aligned to its right.                                                 // 1290\n            this.container_.style.right = forRect.right - rect.right + 'px';                                           // 1291\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';                                           // 1292\n        } else {                                                                                                       // 1293\n            // Default: position below the \"for\" element, aligned to its left.                                         // 1294\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';                                           // 1295\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';             // 1296\n        }                                                                                                              // 1297\n    }                                                                                                                  // 1298\n    this.toggle(evt);                                                                                                  // 1299\n};                                                                                                                     // 1300\n/**                                                                                                                    // 1301\n   * Handles a keyboard event on the \"for\" element.                                                                    // 1302\n   *                                                                                                                   // 1303\n   * @param {Event} evt The event that fired.                                                                          // 1304\n   * @private                                                                                                          // 1305\n   */                                                                                                                  // 1306\nMaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {                                                      // 1307\n    if (this.element_ && this.container_ && this.forElement_) {                                                        // 1308\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');                  // 1309\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {            // 1310\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {                                                             // 1311\n                evt.preventDefault();                                                                                  // 1312\n                items[items.length - 1].focus();                                                                       // 1313\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {                                                    // 1314\n                evt.preventDefault();                                                                                  // 1315\n                items[0].focus();                                                                                      // 1316\n            }                                                                                                          // 1317\n        }                                                                                                              // 1318\n    }                                                                                                                  // 1319\n};                                                                                                                     // 1320\n/**                                                                                                                    // 1321\n   * Handles a keyboard event on an item.                                                                              // 1322\n   *                                                                                                                   // 1323\n   * @param {Event} evt The event that fired.                                                                          // 1324\n   * @private                                                                                                          // 1325\n   */                                                                                                                  // 1326\nMaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {                                                     // 1327\n    if (this.element_ && this.container_) {                                                                            // 1328\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');                  // 1329\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {            // 1330\n            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);                                  // 1331\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {                                                             // 1332\n                evt.preventDefault();                                                                                  // 1333\n                if (currentIndex > 0) {                                                                                // 1334\n                    items[currentIndex - 1].focus();                                                                   // 1335\n                } else {                                                                                               // 1336\n                    items[items.length - 1].focus();                                                                   // 1337\n                }                                                                                                      // 1338\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {                                                    // 1339\n                evt.preventDefault();                                                                                  // 1340\n                if (items.length > currentIndex + 1) {                                                                 // 1341\n                    items[currentIndex + 1].focus();                                                                   // 1342\n                } else {                                                                                               // 1343\n                    items[0].focus();                                                                                  // 1344\n                }                                                                                                      // 1345\n            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {                 // 1346\n                evt.preventDefault();                                                                                  // 1347\n                // Send mousedown and mouseup to trigger ripple.                                                       // 1348\n                var e = new MouseEvent('mousedown');                                                                   // 1349\n                evt.target.dispatchEvent(e);                                                                           // 1350\n                e = new MouseEvent('mouseup');                                                                         // 1351\n                evt.target.dispatchEvent(e);                                                                           // 1352\n                // Send click.                                                                                         // 1353\n                evt.target.click();                                                                                    // 1354\n            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {                                                        // 1355\n                evt.preventDefault();                                                                                  // 1356\n                this.hide();                                                                                           // 1357\n            }                                                                                                          // 1358\n        }                                                                                                              // 1359\n    }                                                                                                                  // 1360\n};                                                                                                                     // 1361\n/**                                                                                                                    // 1362\n   * Handles a click event on an item.                                                                                 // 1363\n   *                                                                                                                   // 1364\n   * @param {Event} evt The event that fired.                                                                          // 1365\n   * @private                                                                                                          // 1366\n   */                                                                                                                  // 1367\nMaterialMenu.prototype.handleItemClick_ = function (evt) {                                                             // 1368\n    if (evt.target.hasAttribute('disabled')) {                                                                         // 1369\n        evt.stopPropagation();                                                                                         // 1370\n    } else {                                                                                                           // 1371\n        // Wait some time before closing menu, so the user can see the ripple.                                         // 1372\n        this.closing_ = true;                                                                                          // 1373\n        window.setTimeout(function (evt) {                                                                             // 1374\n            this.hide();                                                                                               // 1375\n            this.closing_ = false;                                                                                     // 1376\n        }.bind(this), this.Constant_.CLOSE_TIMEOUT);                                                                   // 1377\n    }                                                                                                                  // 1378\n};                                                                                                                     // 1379\n/**                                                                                                                    // 1380\n   * Calculates the initial clip (for opening the menu) or final clip (for closing                                     // 1381\n   * it), and applies it. This allows us to animate from or to the correct point,                                      // 1382\n   * that is, the point it's aligned to in the \"for\" element.                                                          // 1383\n   *                                                                                                                   // 1384\n   * @param {number} height Height of the clip rectangle                                                               // 1385\n   * @param {number} width Width of the clip rectangle                                                                 // 1386\n   * @private                                                                                                          // 1387\n   */                                                                                                                  // 1388\nMaterialMenu.prototype.applyClip_ = function (height, width) {                                                         // 1389\n    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {                                                // 1390\n        // Do not clip.                                                                                                // 1391\n        this.element_.style.clip = '';                                                                                 // 1392\n    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {                                      // 1393\n        // Clip to the top right corner of the menu.                                                                   // 1394\n        this.element_.style.clip = 'rect(0 ' + width + 'px ' + '0 ' + width + 'px)';                                   // 1395\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {                                          // 1396\n        // Clip to the bottom left corner of the menu.                                                                 // 1397\n        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';                                      // 1398\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {                                         // 1399\n        // Clip to the bottom right corner of the menu.                                                                // 1400\n        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';          // 1401\n    } else {                                                                                                           // 1402\n        // Default: do not clip (same as clipping to the top left corner).                                             // 1403\n        this.element_.style.clip = '';                                                                                 // 1404\n    }                                                                                                                  // 1405\n};                                                                                                                     // 1406\n/**                                                                                                                    // 1407\n   * Cleanup function to remove animation listeners.                                                                   // 1408\n   *                                                                                                                   // 1409\n   * @param {Event} evt                                                                                                // 1410\n   * @private                                                                                                          // 1411\n   */                                                                                                                  // 1412\nMaterialMenu.prototype.removeAnimationEndListener_ = function (evt) {                                                  // 1413\n    evt.target.classList.remove(MaterialMenu.prototype.CssClasses_.IS_ANIMATING);                                      // 1414\n};                                                                                                                     // 1415\n/**                                                                                                                    // 1416\n   * Adds an event listener to clean up after the animation ends.                                                      // 1417\n   *                                                                                                                   // 1418\n   * @private                                                                                                          // 1419\n   */                                                                                                                  // 1420\nMaterialMenu.prototype.addAnimationEndListener_ = function () {                                                        // 1421\n    this.element_.addEventListener('transitionend', this.removeAnimationEndListener_);                                 // 1422\n    this.element_.addEventListener('webkitTransitionEnd', this.removeAnimationEndListener_);                           // 1423\n};                                                                                                                     // 1424\n/**                                                                                                                    // 1425\n   * Displays the menu.                                                                                                // 1426\n   *                                                                                                                   // 1427\n   * @public                                                                                                           // 1428\n   */                                                                                                                  // 1429\nMaterialMenu.prototype.show = function (evt) {                                                                         // 1430\n    if (this.element_ && this.container_ && this.outline_) {                                                           // 1431\n        // Measure the inner element.                                                                                  // 1432\n        var height = this.element_.getBoundingClientRect().height;                                                     // 1433\n        var width = this.element_.getBoundingClientRect().width;                                                       // 1434\n        // Apply the inner element's size to the container and outline.                                                // 1435\n        this.container_.style.width = width + 'px';                                                                    // 1436\n        this.container_.style.height = height + 'px';                                                                  // 1437\n        this.outline_.style.width = width + 'px';                                                                      // 1438\n        this.outline_.style.height = height + 'px';                                                                    // 1439\n        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;\n        // Calculate transition delays for individual menu items, so that they fade                                    // 1441\n        // in one at a time.                                                                                           // 1442\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);                                       // 1443\n        for (var i = 0; i < items.length; i++) {                                                                       // 1444\n            var itemDelay = null;                                                                                      // 1445\n            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';\n            } else {                                                                                                   // 1448\n                itemDelay = items[i].offsetTop / height * transitionDuration + 's';                                    // 1449\n            }                                                                                                          // 1450\n            items[i].style.transitionDelay = itemDelay;                                                                // 1451\n        }                                                                                                              // 1452\n        // Apply the initial clip to the text before we start animating.                                               // 1453\n        this.applyClip_(height, width);                                                                                // 1454\n        // Wait for the next frame, turn on animation, and apply the final clip.                                       // 1455\n        // Also make it visible. This triggers the transitions.                                                        // 1456\n        window.requestAnimationFrame(function () {                                                                     // 1457\n            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);                                                // 1458\n            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';                                   // 1459\n            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);                                                // 1460\n        }.bind(this));                                                                                                 // 1461\n        // Clean up after the animation is complete.                                                                   // 1462\n        this.addAnimationEndListener_();                                                                               // 1463\n        // Add a click listener to the document, to close the menu.                                                    // 1464\n        var callback = function (e) {                                                                                  // 1465\n            // Check to see if the document is processing the same event that                                          // 1466\n            // displayed the menu in the first place. If so, do nothing.                                               // 1467\n            // Also check to see if the menu is in the process of closing itself, and                                  // 1468\n            // do nothing in that case.                                                                                // 1469\n            // Also check if the clicked element is a menu item                                                        // 1470\n            // if so, do nothing.                                                                                      // 1471\n            if (e !== evt && !this.closing_ && e.target.parentNode !== this.element_) {                                // 1472\n                document.removeEventListener('click', callback);                                                       // 1473\n                this.hide();                                                                                           // 1474\n            }                                                                                                          // 1475\n        }.bind(this);                                                                                                  // 1476\n        document.addEventListener('click', callback);                                                                  // 1477\n    }                                                                                                                  // 1478\n};                                                                                                                     // 1479\nMaterialMenu.prototype['show'] = MaterialMenu.prototype.show;                                                          // 1480\n/**                                                                                                                    // 1481\n   * Hides the menu.                                                                                                   // 1482\n   *                                                                                                                   // 1483\n   * @public                                                                                                           // 1484\n   */                                                                                                                  // 1485\nMaterialMenu.prototype.hide = function () {                                                                            // 1486\n    if (this.element_ && this.container_ && this.outline_) {                                                           // 1487\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);                                       // 1488\n        // Remove all transition delays; menu items fade out concurrently.                                             // 1489\n        for (var i = 0; i < items.length; i++) {                                                                       // 1490\n            items[i].style.removeProperty('transition-delay');                                                         // 1491\n        }                                                                                                              // 1492\n        // Measure the inner element.                                                                                  // 1493\n        var rect = this.element_.getBoundingClientRect();                                                              // 1494\n        var height = rect.height;                                                                                      // 1495\n        var width = rect.width;                                                                                        // 1496\n        // Turn on animation, and apply the final clip. Also make invisible.                                           // 1497\n        // This triggers the transitions.                                                                              // 1498\n        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);                                                    // 1499\n        this.applyClip_(height, width);                                                                                // 1500\n        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);                                                 // 1501\n        // Clean up after the animation is complete.                                                                   // 1502\n        this.addAnimationEndListener_();                                                                               // 1503\n    }                                                                                                                  // 1504\n};                                                                                                                     // 1505\nMaterialMenu.prototype['hide'] = MaterialMenu.prototype.hide;                                                          // 1506\n/**                                                                                                                    // 1507\n   * Displays or hides the menu, depending on current state.                                                           // 1508\n   *                                                                                                                   // 1509\n   * @public                                                                                                           // 1510\n   */                                                                                                                  // 1511\nMaterialMenu.prototype.toggle = function (evt) {                                                                       // 1512\n    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {                                             // 1513\n        this.hide();                                                                                                   // 1514\n    } else {                                                                                                           // 1515\n        this.show(evt);                                                                                                // 1516\n    }                                                                                                                  // 1517\n};                                                                                                                     // 1518\nMaterialMenu.prototype['toggle'] = MaterialMenu.prototype.toggle;                                                      // 1519\n// The component registers itself. It can assume componentHandler is available                                         // 1520\n// in the global scope.                                                                                                // 1521\ncomponentHandler.register({                                                                                            // 1522\n    constructor: MaterialMenu,                                                                                         // 1523\n    classAsString: 'MaterialMenu',                                                                                     // 1524\n    cssClass: 'mdl-js-menu',                                                                                           // 1525\n    widget: true                                                                                                       // 1526\n});                                                                                                                    // 1527\n/**                                                                                                                    // 1528\n * @license                                                                                                            // 1529\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1530\n *                                                                                                                     // 1531\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1532\n * you may not use this file except in compliance with the License.                                                    // 1533\n * You may obtain a copy of the License at                                                                             // 1534\n *                                                                                                                     // 1535\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1536\n *                                                                                                                     // 1537\n * Unless required by applicable law or agreed to in writing, software                                                 // 1538\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1539\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1540\n * See the License for the specific language governing permissions and                                                 // 1541\n * limitations under the License.                                                                                      // 1542\n */                                                                                                                    // 1543\n/**                                                                                                                    // 1544\n   * Class constructor for Progress MDL component.                                                                     // 1545\n   * Implements MDL component design pattern defined at:                                                               // 1546\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1547\n   *                                                                                                                   // 1548\n   * @constructor                                                                                                      // 1549\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1550\n   */                                                                                                                  // 1551\nvar MaterialProgress = function MaterialProgress(element) {                                                            // 1552\n    this.element_ = element;                                                                                           // 1553\n    // Initialize instance.                                                                                            // 1554\n    this.init();                                                                                                       // 1555\n};                                                                                                                     // 1556\nwindow['MaterialProgress'] = MaterialProgress;                                                                         // 1557\n/**                                                                                                                    // 1558\n   * Store constants in one place so they can be updated easily.                                                       // 1559\n   *                                                                                                                   // 1560\n   * @enum {string | number}                                                                                           // 1561\n   * @private                                                                                                          // 1562\n   */                                                                                                                  // 1563\nMaterialProgress.prototype.Constant_ = {};                                                                             // 1564\n/**                                                                                                                    // 1565\n   * Store strings for class names defined by this component that are used in                                          // 1566\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1567\n   * decide to modify at a later date.                                                                                 // 1568\n   *                                                                                                                   // 1569\n   * @enum {string}                                                                                                    // 1570\n   * @private                                                                                                          // 1571\n   */                                                                                                                  // 1572\nMaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };                       // 1573\n/**                                                                                                                    // 1574\n   * Set the current progress of the progressbar.                                                                      // 1575\n   *                                                                                                                   // 1576\n   * @param {number} p Percentage of the progress (0-100)                                                              // 1577\n   * @public                                                                                                           // 1578\n   */                                                                                                                  // 1579\nMaterialProgress.prototype.setProgress = function (p) {                                                                // 1580\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {                                      // 1581\n        return;                                                                                                        // 1582\n    }                                                                                                                  // 1583\n    this.progressbar_.style.width = p + '%';                                                                           // 1584\n};                                                                                                                     // 1585\nMaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;                                    // 1586\n/**                                                                                                                    // 1587\n   * Set the current progress of the buffer.                                                                           // 1588\n   *                                                                                                                   // 1589\n   * @param {number} p Percentage of the buffer (0-100)                                                                // 1590\n   * @public                                                                                                           // 1591\n   */                                                                                                                  // 1592\nMaterialProgress.prototype.setBuffer = function (p) {                                                                  // 1593\n    this.bufferbar_.style.width = p + '%';                                                                             // 1594\n    this.auxbar_.style.width = 100 - p + '%';                                                                          // 1595\n};                                                                                                                     // 1596\nMaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;                                        // 1597\n/**                                                                                                                    // 1598\n   * Initialize element.                                                                                               // 1599\n   */                                                                                                                  // 1600\nMaterialProgress.prototype.init = function () {                                                                        // 1601\n    if (this.element_) {                                                                                               // 1602\n        var el = document.createElement('div');                                                                        // 1603\n        el.className = 'progressbar bar bar1';                                                                         // 1604\n        this.element_.appendChild(el);                                                                                 // 1605\n        this.progressbar_ = el;                                                                                        // 1606\n        el = document.createElement('div');                                                                            // 1607\n        el.className = 'bufferbar bar bar2';                                                                           // 1608\n        this.element_.appendChild(el);                                                                                 // 1609\n        this.bufferbar_ = el;                                                                                          // 1610\n        el = document.createElement('div');                                                                            // 1611\n        el.className = 'auxbar bar bar3';                                                                              // 1612\n        this.element_.appendChild(el);                                                                                 // 1613\n        this.auxbar_ = el;                                                                                             // 1614\n        this.progressbar_.style.width = '0%';                                                                          // 1615\n        this.bufferbar_.style.width = '100%';                                                                          // 1616\n        this.auxbar_.style.width = '0%';                                                                               // 1617\n        this.element_.classList.add('is-upgraded');                                                                    // 1618\n    }                                                                                                                  // 1619\n};                                                                                                                     // 1620\n// The component registers itself. It can assume componentHandler is available                                         // 1621\n// in the global scope.                                                                                                // 1622\ncomponentHandler.register({                                                                                            // 1623\n    constructor: MaterialProgress,                                                                                     // 1624\n    classAsString: 'MaterialProgress',                                                                                 // 1625\n    cssClass: 'mdl-js-progress',                                                                                       // 1626\n    widget: true                                                                                                       // 1627\n});                                                                                                                    // 1628\n/**                                                                                                                    // 1629\n * @license                                                                                                            // 1630\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1631\n *                                                                                                                     // 1632\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1633\n * you may not use this file except in compliance with the License.                                                    // 1634\n * You may obtain a copy of the License at                                                                             // 1635\n *                                                                                                                     // 1636\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1637\n *                                                                                                                     // 1638\n * Unless required by applicable law or agreed to in writing, software                                                 // 1639\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1640\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1641\n * See the License for the specific language governing permissions and                                                 // 1642\n * limitations under the License.                                                                                      // 1643\n */                                                                                                                    // 1644\n/**                                                                                                                    // 1645\n   * Class constructor for Radio MDL component.                                                                        // 1646\n   * Implements MDL component design pattern defined at:                                                               // 1647\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1648\n   *                                                                                                                   // 1649\n   * @constructor                                                                                                      // 1650\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1651\n   */                                                                                                                  // 1652\nvar MaterialRadio = function MaterialRadio(element) {                                                                  // 1653\n    this.element_ = element;                                                                                           // 1654\n    // Initialize instance.                                                                                            // 1655\n    this.init();                                                                                                       // 1656\n};                                                                                                                     // 1657\nwindow['MaterialRadio'] = MaterialRadio;                                                                               // 1658\n/**                                                                                                                    // 1659\n   * Store constants in one place so they can be updated easily.                                                       // 1660\n   *                                                                                                                   // 1661\n   * @enum {string | number}                                                                                           // 1662\n   * @private                                                                                                          // 1663\n   */                                                                                                                  // 1664\nMaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                           // 1665\n/**                                                                                                                    // 1666\n   * Store strings for class names defined by this component that are used in                                          // 1667\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1668\n   * decide to modify at a later date.                                                                                 // 1669\n   *                                                                                                                   // 1670\n   * @enum {string}                                                                                                    // 1671\n   * @private                                                                                                          // 1672\n   */                                                                                                                  // 1673\nMaterialRadio.prototype.CssClasses_ = {                                                                                // 1674\n    IS_FOCUSED: 'is-focused',                                                                                          // 1675\n    IS_DISABLED: 'is-disabled',                                                                                        // 1676\n    IS_CHECKED: 'is-checked',                                                                                          // 1677\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 1678\n    JS_RADIO: 'mdl-js-radio',                                                                                          // 1679\n    RADIO_BTN: 'mdl-radio__button',                                                                                    // 1680\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',                                                                     // 1681\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',                                                                     // 1682\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 1683\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 1684\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',                                                                   // 1685\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 1686\n    RIPPLE: 'mdl-ripple'                                                                                               // 1687\n};                                                                                                                     // 1688\n/**                                                                                                                    // 1689\n   * Handle change of state.                                                                                           // 1690\n   *                                                                                                                   // 1691\n   * @param {Event} event The event that fired.                                                                        // 1692\n   * @private                                                                                                          // 1693\n   */                                                                                                                  // 1694\nMaterialRadio.prototype.onChange_ = function (event) {                                                                 // 1695\n    // Since other radio buttons don't get change events, we need to look for                                          // 1696\n    // them to update their classes.                                                                                   // 1697\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);                                           // 1698\n    for (var i = 0; i < radios.length; i++) {                                                                          // 1699\n        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);                                        // 1700\n        // Different name == different group, so no point updating those.                                              // 1701\n        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {                                   // 1702\n            if (typeof radios[i]['MaterialRadio'] !== 'undefined') {                                                   // 1703\n                radios[i]['MaterialRadio'].updateClasses_();                                                           // 1704\n            }                                                                                                          // 1705\n        }                                                                                                              // 1706\n    }                                                                                                                  // 1707\n};                                                                                                                     // 1708\n/**                                                                                                                    // 1709\n   * Handle focus.                                                                                                     // 1710\n   *                                                                                                                   // 1711\n   * @param {Event} event The event that fired.                                                                        // 1712\n   * @private                                                                                                          // 1713\n   */                                                                                                                  // 1714\nMaterialRadio.prototype.onFocus_ = function (event) {                                                                  // 1715\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 1716\n};                                                                                                                     // 1717\n/**                                                                                                                    // 1718\n   * Handle lost focus.                                                                                                // 1719\n   *                                                                                                                   // 1720\n   * @param {Event} event The event that fired.                                                                        // 1721\n   * @private                                                                                                          // 1722\n   */                                                                                                                  // 1723\nMaterialRadio.prototype.onBlur_ = function (event) {                                                                   // 1724\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 1725\n};                                                                                                                     // 1726\n/**                                                                                                                    // 1727\n   * Handle mouseup.                                                                                                   // 1728\n   *                                                                                                                   // 1729\n   * @param {Event} event The event that fired.                                                                        // 1730\n   * @private                                                                                                          // 1731\n   */                                                                                                                  // 1732\nMaterialRadio.prototype.onMouseup_ = function (event) {                                                                // 1733\n    this.blur_();                                                                                                      // 1734\n};                                                                                                                     // 1735\n/**                                                                                                                    // 1736\n   * Update classes.                                                                                                   // 1737\n   *                                                                                                                   // 1738\n   * @private                                                                                                          // 1739\n   */                                                                                                                  // 1740\nMaterialRadio.prototype.updateClasses_ = function () {                                                                 // 1741\n    this.checkDisabled();                                                                                              // 1742\n    this.checkToggleState();                                                                                           // 1743\n};                                                                                                                     // 1744\n/**                                                                                                                    // 1745\n   * Add blur.                                                                                                         // 1746\n   *                                                                                                                   // 1747\n   * @private                                                                                                          // 1748\n   */                                                                                                                  // 1749\nMaterialRadio.prototype.blur_ = function () {                                                                          // 1750\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 1751\n    // so that we can avoid this hack.                                                                                 // 1752\n    window.setTimeout(function () {                                                                                    // 1753\n        this.btnElement_.blur();                                                                                       // 1754\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 1755\n};                                                                                                                     // 1756\n// Public methods.                                                                                                     // 1757\n/**                                                                                                                    // 1758\n   * Check the components disabled state.                                                                              // 1759\n   *                                                                                                                   // 1760\n   * @public                                                                                                           // 1761\n   */                                                                                                                  // 1762\nMaterialRadio.prototype.checkDisabled = function () {                                                                  // 1763\n    if (this.btnElement_.disabled) {                                                                                   // 1764\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 1765\n    } else {                                                                                                           // 1766\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 1767\n    }                                                                                                                  // 1768\n};                                                                                                                     // 1769\nMaterialRadio.prototype['checkDisabled'] = MaterialRadio.prototype.checkDisabled;                                      // 1770\n/**                                                                                                                    // 1771\n   * Check the components toggled state.                                                                               // 1772\n   *                                                                                                                   // 1773\n   * @public                                                                                                           // 1774\n   */                                                                                                                  // 1775\nMaterialRadio.prototype.checkToggleState = function () {                                                               // 1776\n    if (this.btnElement_.checked) {                                                                                    // 1777\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 1778\n    } else {                                                                                                           // 1779\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 1780\n    }                                                                                                                  // 1781\n};                                                                                                                     // 1782\nMaterialRadio.prototype['checkToggleState'] = MaterialRadio.prototype.checkToggleState;                                // 1783\n/**                                                                                                                    // 1784\n   * Disable radio.                                                                                                    // 1785\n   *                                                                                                                   // 1786\n   * @public                                                                                                           // 1787\n   */                                                                                                                  // 1788\nMaterialRadio.prototype.disable = function () {                                                                        // 1789\n    this.btnElement_.disabled = true;                                                                                  // 1790\n    this.updateClasses_();                                                                                             // 1791\n};                                                                                                                     // 1792\nMaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;                                                  // 1793\n/**                                                                                                                    // 1794\n   * Enable radio.                                                                                                     // 1795\n   *                                                                                                                   // 1796\n   * @public                                                                                                           // 1797\n   */                                                                                                                  // 1798\nMaterialRadio.prototype.enable = function () {                                                                         // 1799\n    this.btnElement_.disabled = false;                                                                                 // 1800\n    this.updateClasses_();                                                                                             // 1801\n};                                                                                                                     // 1802\nMaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;                                                    // 1803\n/**                                                                                                                    // 1804\n   * Check radio.                                                                                                      // 1805\n   *                                                                                                                   // 1806\n   * @public                                                                                                           // 1807\n   */                                                                                                                  // 1808\nMaterialRadio.prototype.check = function () {                                                                          // 1809\n    this.btnElement_.checked = true;                                                                                   // 1810\n    this.onChange_(null);                                                                                              // 1811\n};                                                                                                                     // 1812\nMaterialRadio.prototype['check'] = MaterialRadio.prototype.check;                                                      // 1813\n/**                                                                                                                    // 1814\n   * Uncheck radio.                                                                                                    // 1815\n   *                                                                                                                   // 1816\n   * @public                                                                                                           // 1817\n   */                                                                                                                  // 1818\nMaterialRadio.prototype.uncheck = function () {                                                                        // 1819\n    this.btnElement_.checked = false;                                                                                  // 1820\n    this.onChange_(null);                                                                                              // 1821\n};                                                                                                                     // 1822\nMaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;                                                  // 1823\n/**                                                                                                                    // 1824\n   * Initialize element.                                                                                               // 1825\n   */                                                                                                                  // 1826\nMaterialRadio.prototype.init = function () {                                                                           // 1827\n    if (this.element_) {                                                                                               // 1828\n        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);                              // 1829\n        this.boundChangeHandler_ = this.onChange_.bind(this);                                                          // 1830\n        this.boundFocusHandler_ = this.onChange_.bind(this);                                                           // 1831\n        this.boundBlurHandler_ = this.onBlur_.bind(this);                                                              // 1832\n        this.boundMouseUpHandler_ = this.onMouseup_.bind(this);                                                        // 1833\n        var outerCircle = document.createElement('span');                                                              // 1834\n        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);                                                // 1835\n        var innerCircle = document.createElement('span');                                                              // 1836\n        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);                                                // 1837\n        this.element_.appendChild(outerCircle);                                                                        // 1838\n        this.element_.appendChild(innerCircle);                                                                        // 1839\n        var rippleContainer;                                                                                           // 1840\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 1841\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 1842\n            rippleContainer = document.createElement('span');                                                          // 1843\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                                          // 1844\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                             // 1845\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);                                             // 1846\n            rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);                                    // 1847\n            var ripple = document.createElement('span');                                                               // 1848\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 1849\n            rippleContainer.appendChild(ripple);                                                                       // 1850\n            this.element_.appendChild(rippleContainer);                                                                // 1851\n        }                                                                                                              // 1852\n        this.btnElement_.addEventListener('change', this.boundChangeHandler_);                                         // 1853\n        this.btnElement_.addEventListener('focus', this.boundFocusHandler_);                                           // 1854\n        this.btnElement_.addEventListener('blur', this.boundBlurHandler_);                                             // 1855\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);                                          // 1856\n        this.updateClasses_();                                                                                         // 1857\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 1858\n    }                                                                                                                  // 1859\n};                                                                                                                     // 1860\n// The component registers itself. It can assume componentHandler is available                                         // 1861\n// in the global scope.                                                                                                // 1862\ncomponentHandler.register({                                                                                            // 1863\n    constructor: MaterialRadio,                                                                                        // 1864\n    classAsString: 'MaterialRadio',                                                                                    // 1865\n    cssClass: 'mdl-js-radio',                                                                                          // 1866\n    widget: true                                                                                                       // 1867\n});                                                                                                                    // 1868\n/**                                                                                                                    // 1869\n * @license                                                                                                            // 1870\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 1871\n *                                                                                                                     // 1872\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 1873\n * you may not use this file except in compliance with the License.                                                    // 1874\n * You may obtain a copy of the License at                                                                             // 1875\n *                                                                                                                     // 1876\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 1877\n *                                                                                                                     // 1878\n * Unless required by applicable law or agreed to in writing, software                                                 // 1879\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 1880\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1881\n * See the License for the specific language governing permissions and                                                 // 1882\n * limitations under the License.                                                                                      // 1883\n */                                                                                                                    // 1884\n/**                                                                                                                    // 1885\n   * Class constructor for Slider MDL component.                                                                       // 1886\n   * Implements MDL component design pattern defined at:                                                               // 1887\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 1888\n   *                                                                                                                   // 1889\n   * @constructor                                                                                                      // 1890\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 1891\n   */                                                                                                                  // 1892\nvar MaterialSlider = function MaterialSlider(element) {                                                                // 1893\n    this.element_ = element;                                                                                           // 1894\n    // Browser feature detection.                                                                                      // 1895\n    this.isIE_ = window.navigator.msPointerEnabled;                                                                    // 1896\n    // Initialize instance.                                                                                            // 1897\n    this.init();                                                                                                       // 1898\n};                                                                                                                     // 1899\nwindow['MaterialSlider'] = MaterialSlider;                                                                             // 1900\n/**                                                                                                                    // 1901\n   * Store constants in one place so they can be updated easily.                                                       // 1902\n   *                                                                                                                   // 1903\n   * @enum {string | number}                                                                                           // 1904\n   * @private                                                                                                          // 1905\n   */                                                                                                                  // 1906\nMaterialSlider.prototype.Constant_ = {};                                                                               // 1907\n/**                                                                                                                    // 1908\n   * Store strings for class names defined by this component that are used in                                          // 1909\n   * JavaScript. This allows us to simply change it in one place should we                                             // 1910\n   * decide to modify at a later date.                                                                                 // 1911\n   *                                                                                                                   // 1912\n   * @enum {string}                                                                                                    // 1913\n   * @private                                                                                                          // 1914\n   */                                                                                                                  // 1915\nMaterialSlider.prototype.CssClasses_ = {                                                                               // 1916\n    IE_CONTAINER: 'mdl-slider__ie-container',                                                                          // 1917\n    SLIDER_CONTAINER: 'mdl-slider__container',                                                                         // 1918\n    BACKGROUND_FLEX: 'mdl-slider__background-flex',                                                                    // 1919\n    BACKGROUND_LOWER: 'mdl-slider__background-lower',                                                                  // 1920\n    BACKGROUND_UPPER: 'mdl-slider__background-upper',                                                                  // 1921\n    IS_LOWEST_VALUE: 'is-lowest-value',                                                                                // 1922\n    IS_UPGRADED: 'is-upgraded'                                                                                         // 1923\n};                                                                                                                     // 1924\n/**                                                                                                                    // 1925\n   * Handle input on element.                                                                                          // 1926\n   *                                                                                                                   // 1927\n   * @param {Event} event The event that fired.                                                                        // 1928\n   * @private                                                                                                          // 1929\n   */                                                                                                                  // 1930\nMaterialSlider.prototype.onInput_ = function (event) {                                                                 // 1931\n    this.updateValueStyles_();                                                                                         // 1932\n};                                                                                                                     // 1933\n/**                                                                                                                    // 1934\n   * Handle change on element.                                                                                         // 1935\n   *                                                                                                                   // 1936\n   * @param {Event} event The event that fired.                                                                        // 1937\n   * @private                                                                                                          // 1938\n   */                                                                                                                  // 1939\nMaterialSlider.prototype.onChange_ = function (event) {                                                                // 1940\n    this.updateValueStyles_();                                                                                         // 1941\n};                                                                                                                     // 1942\n/**                                                                                                                    // 1943\n   * Handle mouseup on element.                                                                                        // 1944\n   *                                                                                                                   // 1945\n   * @param {Event} event The event that fired.                                                                        // 1946\n   * @private                                                                                                          // 1947\n   */                                                                                                                  // 1948\nMaterialSlider.prototype.onMouseUp_ = function (event) {                                                               // 1949\n    event.target.blur();                                                                                               // 1950\n};                                                                                                                     // 1951\n/**                                                                                                                    // 1952\n   * Handle mousedown on container element.                                                                            // 1953\n   * This handler is purpose is to not require the use to click                                                        // 1954\n   * exactly on the 2px slider element, as FireFox seems to be very                                                    // 1955\n   * strict about this.                                                                                                // 1956\n   *                                                                                                                   // 1957\n   * @param {Event} event The event that fired.                                                                        // 1958\n   * @private                                                                                                          // 1959\n   * @suppress {missingProperties}                                                                                     // 1960\n   */                                                                                                                  // 1961\nMaterialSlider.prototype.onContainerMouseDown_ = function (event) {                                                    // 1962\n    // If this click is not on the parent element (but rather some child)                                              // 1963\n    // ignore. It may still bubble up.                                                                                 // 1964\n    if (event.target !== this.element_.parentElement) {                                                                // 1965\n        return;                                                                                                        // 1966\n    }                                                                                                                  // 1967\n    // Discard the original event and create a new event that                                                          // 1968\n    // is on the slider element.                                                                                       // 1969\n    event.preventDefault();                                                                                            // 1970\n    var newEvent = new MouseEvent('mousedown', {                                                                       // 1971\n        target: event.target,                                                                                          // 1972\n        buttons: event.buttons,                                                                                        // 1973\n        clientX: event.clientX,                                                                                        // 1974\n        clientY: this.element_.getBoundingClientRect().y                                                               // 1975\n    });                                                                                                                // 1976\n    this.element_.dispatchEvent(newEvent);                                                                             // 1977\n};                                                                                                                     // 1978\n/**                                                                                                                    // 1979\n   * Handle updating of values.                                                                                        // 1980\n   *                                                                                                                   // 1981\n   * @private                                                                                                          // 1982\n   */                                                                                                                  // 1983\nMaterialSlider.prototype.updateValueStyles_ = function () {                                                            // 1984\n    // Calculate and apply percentages to div structure behind slider.                                                 // 1985\n    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);                // 1986\n    if (fraction === 0) {                                                                                              // 1987\n        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);                                                 // 1988\n    } else {                                                                                                           // 1989\n        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);                                              // 1990\n    }                                                                                                                  // 1991\n    if (!this.isIE_) {                                                                                                 // 1992\n        this.backgroundLower_.style.flex = fraction;                                                                   // 1993\n        this.backgroundLower_.style.webkitFlex = fraction;                                                             // 1994\n        this.backgroundUpper_.style.flex = 1 - fraction;                                                               // 1995\n        this.backgroundUpper_.style.webkitFlex = 1 - fraction;                                                         // 1996\n    }                                                                                                                  // 1997\n};                                                                                                                     // 1998\n// Public methods.                                                                                                     // 1999\n/**                                                                                                                    // 2000\n   * Disable slider.                                                                                                   // 2001\n   *                                                                                                                   // 2002\n   * @public                                                                                                           // 2003\n   */                                                                                                                  // 2004\nMaterialSlider.prototype.disable = function () {                                                                       // 2005\n    this.element_.disabled = true;                                                                                     // 2006\n};                                                                                                                     // 2007\nMaterialSlider.prototype['disable'] = MaterialSlider.prototype.disable;                                                // 2008\n/**                                                                                                                    // 2009\n   * Enable slider.                                                                                                    // 2010\n   *                                                                                                                   // 2011\n   * @public                                                                                                           // 2012\n   */                                                                                                                  // 2013\nMaterialSlider.prototype.enable = function () {                                                                        // 2014\n    this.element_.disabled = false;                                                                                    // 2015\n};                                                                                                                     // 2016\nMaterialSlider.prototype['enable'] = MaterialSlider.prototype.enable;                                                  // 2017\n/**                                                                                                                    // 2018\n   * Update slider value.                                                                                              // 2019\n   *                                                                                                                   // 2020\n   * @param {number} value The value to which to set the control (optional).                                           // 2021\n   * @public                                                                                                           // 2022\n   */                                                                                                                  // 2023\nMaterialSlider.prototype.change = function (value) {                                                                   // 2024\n    if (typeof value !== 'undefined') {                                                                                // 2025\n        this.element_.value = value;                                                                                   // 2026\n    }                                                                                                                  // 2027\n    this.updateValueStyles_();                                                                                         // 2028\n};                                                                                                                     // 2029\nMaterialSlider.prototype['change'] = MaterialSlider.prototype.change;                                                  // 2030\n/**                                                                                                                    // 2031\n   * Initialize element.                                                                                               // 2032\n   */                                                                                                                  // 2033\nMaterialSlider.prototype.init = function () {                                                                          // 2034\n    if (this.element_) {                                                                                               // 2035\n        if (this.isIE_) {                                                                                              // 2036\n            // Since we need to specify a very large height in IE due to                                               // 2037\n            // implementation limitations, we add a parent here that trims it down to                                  // 2038\n            // a reasonable size.                                                                                      // 2039\n            var containerIE = document.createElement('div');                                                           // 2040\n            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);                                                  // 2041\n            this.element_.parentElement.insertBefore(containerIE, this.element_);                                      // 2042\n            this.element_.parentElement.removeChild(this.element_);                                                    // 2043\n            containerIE.appendChild(this.element_);                                                                    // 2044\n        } else {                                                                                                       // 2045\n            // For non-IE browsers, we need a div structure that sits behind the                                       // 2046\n            // slider and allows us to style the left and right sides of it with                                       // 2047\n            // different colors.                                                                                       // 2048\n            var container = document.createElement('div');                                                             // 2049\n            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);                                                // 2050\n            this.element_.parentElement.insertBefore(container, this.element_);                                        // 2051\n            this.element_.parentElement.removeChild(this.element_);                                                    // 2052\n            container.appendChild(this.element_);                                                                      // 2053\n            var backgroundFlex = document.createElement('div');                                                        // 2054\n            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);                                            // 2055\n            container.appendChild(backgroundFlex);                                                                     // 2056\n            this.backgroundLower_ = document.createElement('div');                                                     // 2057\n            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);                                    // 2058\n            backgroundFlex.appendChild(this.backgroundLower_);                                                         // 2059\n            this.backgroundUpper_ = document.createElement('div');                                                     // 2060\n            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);                                    // 2061\n            backgroundFlex.appendChild(this.backgroundUpper_);                                                         // 2062\n        }                                                                                                              // 2063\n        this.boundInputHandler = this.onInput_.bind(this);                                                             // 2064\n        this.boundChangeHandler = this.onChange_.bind(this);                                                           // 2065\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);                                                         // 2066\n        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);                                   // 2067\n        this.element_.addEventListener('input', this.boundInputHandler);                                               // 2068\n        this.element_.addEventListener('change', this.boundChangeHandler);                                             // 2069\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);                                           // 2070\n        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);                // 2071\n        this.updateValueStyles_();                                                                                     // 2072\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 2073\n    }                                                                                                                  // 2074\n};                                                                                                                     // 2075\n// The component registers itself. It can assume componentHandler is available                                         // 2076\n// in the global scope.                                                                                                // 2077\ncomponentHandler.register({                                                                                            // 2078\n    constructor: MaterialSlider,                                                                                       // 2079\n    classAsString: 'MaterialSlider',                                                                                   // 2080\n    cssClass: 'mdl-js-slider',                                                                                         // 2081\n    widget: true                                                                                                       // 2082\n});                                                                                                                    // 2083\n/**                                                                                                                    // 2084\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2085\n *                                                                                                                     // 2086\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2087\n * you may not use this file except in compliance with the License.                                                    // 2088\n * You may obtain a copy of the License at                                                                             // 2089\n *                                                                                                                     // 2090\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2091\n *                                                                                                                     // 2092\n * Unless required by applicable law or agreed to in writing, software                                                 // 2093\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2094\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2095\n * See the License for the specific language governing permissions and                                                 // 2096\n * limitations under the License.                                                                                      // 2097\n */                                                                                                                    // 2098\n/**                                                                                                                    // 2099\n   * Class constructor for Snackbar MDL component.                                                                     // 2100\n   * Implements MDL component design pattern defined at:                                                               // 2101\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2102\n   *                                                                                                                   // 2103\n   * @constructor                                                                                                      // 2104\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2105\n   */                                                                                                                  // 2106\nvar MaterialSnackbar = function MaterialSnackbar(element) {                                                            // 2107\n    this.element_ = element;                                                                                           // 2108\n    this.textElement_ = this.element_.querySelector('.' + this.cssClasses_.MESSAGE);                                   // 2109\n    this.actionElement_ = this.element_.querySelector('.' + this.cssClasses_.ACTION);                                  // 2110\n    if (!this.textElement_) {                                                                                          // 2111\n        throw new Error('There must be a message element for a snackbar.');                                            // 2112\n    }                                                                                                                  // 2113\n    if (!this.actionElement_) {                                                                                        // 2114\n        throw new Error('There must be an action element for a snackbar.');                                            // 2115\n    }                                                                                                                  // 2116\n    this.active = false;                                                                                               // 2117\n    this.actionHandler_ = undefined;                                                                                   // 2118\n    this.message_ = undefined;                                                                                         // 2119\n    this.actionText_ = undefined;                                                                                      // 2120\n    this.queuedNotifications_ = [];                                                                                    // 2121\n    this.setActionHidden_(true);                                                                                       // 2122\n};                                                                                                                     // 2123\nwindow['MaterialSnackbar'] = MaterialSnackbar;                                                                         // 2124\n/**                                                                                                                    // 2125\n   * Store constants in one place so they can be updated easily.                                                       // 2126\n   *                                                                                                                   // 2127\n   * @enum {string | number}                                                                                           // 2128\n   * @private                                                                                                          // 2129\n   */                                                                                                                  // 2130\nMaterialSnackbar.prototype.Constant_ = {                                                                               // 2131\n    // The duration of the snackbar show/hide animation, in ms.                                                        // 2132\n    ANIMATION_LENGTH: 250                                                                                              // 2133\n};                                                                                                                     // 2134\n/**                                                                                                                    // 2135\n   * Store strings for class names defined by this component that are used in                                          // 2136\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2137\n   * decide to modify at a later date.                                                                                 // 2138\n   *                                                                                                                   // 2139\n   * @enum {string}                                                                                                    // 2140\n   * @private                                                                                                          // 2141\n   */                                                                                                                  // 2142\nMaterialSnackbar.prototype.cssClasses_ = {                                                                             // 2143\n    SNACKBAR: 'mdl-snackbar',                                                                                          // 2144\n    MESSAGE: 'mdl-snackbar__text',                                                                                     // 2145\n    ACTION: 'mdl-snackbar__action',                                                                                    // 2146\n    ACTIVE: 'mdl-snackbar--active'                                                                                     // 2147\n};                                                                                                                     // 2148\n/**                                                                                                                    // 2149\n   * Display the snackbar.                                                                                             // 2150\n   *                                                                                                                   // 2151\n   * @private                                                                                                          // 2152\n   */                                                                                                                  // 2153\nMaterialSnackbar.prototype.displaySnackbar_ = function () {                                                            // 2154\n    this.element_.setAttribute('aria-hidden', 'true');                                                                 // 2155\n    if (this.actionHandler_) {                                                                                         // 2156\n        this.actionElement_.textContent = this.actionText_;                                                            // 2157\n        this.actionElement_.addEventListener('click', this.actionHandler_);                                            // 2158\n        this.setActionHidden_(false);                                                                                  // 2159\n    }                                                                                                                  // 2160\n    this.textElement_.textContent = this.message_;                                                                     // 2161\n    this.element_.classList.add(this.cssClasses_.ACTIVE);                                                              // 2162\n    this.element_.setAttribute('aria-hidden', 'false');                                                                // 2163\n    setTimeout(this.cleanup_.bind(this), this.timeout_);                                                               // 2164\n};                                                                                                                     // 2165\n/**                                                                                                                    // 2166\n   * Show the snackbar.                                                                                                // 2167\n   *                                                                                                                   // 2168\n   * @param {Object} data The data for the notification.                                                               // 2169\n   * @public                                                                                                           // 2170\n   */                                                                                                                  // 2171\nMaterialSnackbar.prototype.showSnackbar = function (data) {                                                            // 2172\n    if (data === undefined) {                                                                                          // 2173\n        throw new Error('Please provide a data object with at least a message to display.');                           // 2174\n    }                                                                                                                  // 2175\n    if (data['message'] === undefined) {                                                                               // 2176\n        throw new Error('Please provide a message to be displayed.');                                                  // 2177\n    }                                                                                                                  // 2178\n    if (data['actionHandler'] && !data['actionText']) {                                                                // 2179\n        throw new Error('Please provide action text with the handler.');                                               // 2180\n    }                                                                                                                  // 2181\n    if (this.active) {                                                                                                 // 2182\n        this.queuedNotifications_.push(data);                                                                          // 2183\n    } else {                                                                                                           // 2184\n        this.active = true;                                                                                            // 2185\n        this.message_ = data['message'];                                                                               // 2186\n        if (data['timeout']) {                                                                                         // 2187\n            this.timeout_ = data['timeout'];                                                                           // 2188\n        } else {                                                                                                       // 2189\n            this.timeout_ = 2750;                                                                                      // 2190\n        }                                                                                                              // 2191\n        if (data['actionHandler']) {                                                                                   // 2192\n            this.actionHandler_ = data['actionHandler'];                                                               // 2193\n        }                                                                                                              // 2194\n        if (data['actionText']) {                                                                                      // 2195\n            this.actionText_ = data['actionText'];                                                                     // 2196\n        }                                                                                                              // 2197\n        this.displaySnackbar_();                                                                                       // 2198\n    }                                                                                                                  // 2199\n};                                                                                                                     // 2200\nMaterialSnackbar.prototype['showSnackbar'] = MaterialSnackbar.prototype.showSnackbar;                                  // 2201\n/**                                                                                                                    // 2202\n   * Check if the queue has items within it.                                                                           // 2203\n   * If it does, display the next entry.                                                                               // 2204\n   *                                                                                                                   // 2205\n   * @private                                                                                                          // 2206\n   */                                                                                                                  // 2207\nMaterialSnackbar.prototype.checkQueue_ = function () {                                                                 // 2208\n    if (this.queuedNotifications_.length > 0) {                                                                        // 2209\n        this.showSnackbar(this.queuedNotifications_.shift());                                                          // 2210\n    }                                                                                                                  // 2211\n};                                                                                                                     // 2212\n/**                                                                                                                    // 2213\n   * Cleanup the snackbar event listeners and accessiblity attributes.                                                 // 2214\n   *                                                                                                                   // 2215\n   * @private                                                                                                          // 2216\n   */                                                                                                                  // 2217\nMaterialSnackbar.prototype.cleanup_ = function () {                                                                    // 2218\n    this.element_.classList.remove(this.cssClasses_.ACTIVE);                                                           // 2219\n    setTimeout(function () {                                                                                           // 2220\n        this.element_.setAttribute('aria-hidden', 'true');                                                             // 2221\n        this.textElement_.textContent = '';                                                                            // 2222\n        if (!Boolean(this.actionElement_.getAttribute('aria-hidden'))) {                                               // 2223\n            this.setActionHidden_(true);                                                                               // 2224\n            this.actionElement_.textContent = '';                                                                      // 2225\n            this.actionElement_.removeEventListener('click', this.actionHandler_);                                     // 2226\n        }                                                                                                              // 2227\n        this.actionHandler_ = undefined;                                                                               // 2228\n        this.message_ = undefined;                                                                                     // 2229\n        this.actionText_ = undefined;                                                                                  // 2230\n        this.active = false;                                                                                           // 2231\n        this.checkQueue_();                                                                                            // 2232\n    }.bind(this), this.Constant_.ANIMATION_LENGTH);                                                                    // 2233\n};                                                                                                                     // 2234\n/**                                                                                                                    // 2235\n   * Set the action handler hidden state.                                                                              // 2236\n   *                                                                                                                   // 2237\n   * @param {boolean} value                                                                                            // 2238\n   * @private                                                                                                          // 2239\n   */                                                                                                                  // 2240\nMaterialSnackbar.prototype.setActionHidden_ = function (value) {                                                       // 2241\n    if (value) {                                                                                                       // 2242\n        this.actionElement_.setAttribute('aria-hidden', 'true');                                                       // 2243\n    } else {                                                                                                           // 2244\n        this.actionElement_.removeAttribute('aria-hidden');                                                            // 2245\n    }                                                                                                                  // 2246\n};                                                                                                                     // 2247\n// The component registers itself. It can assume componentHandler is available                                         // 2248\n// in the global scope.                                                                                                // 2249\ncomponentHandler.register({                                                                                            // 2250\n    constructor: MaterialSnackbar,                                                                                     // 2251\n    classAsString: 'MaterialSnackbar',                                                                                 // 2252\n    cssClass: 'mdl-js-snackbar',                                                                                       // 2253\n    widget: true                                                                                                       // 2254\n});                                                                                                                    // 2255\n/**                                                                                                                    // 2256\n * @license                                                                                                            // 2257\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2258\n *                                                                                                                     // 2259\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2260\n * you may not use this file except in compliance with the License.                                                    // 2261\n * You may obtain a copy of the License at                                                                             // 2262\n *                                                                                                                     // 2263\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2264\n *                                                                                                                     // 2265\n * Unless required by applicable law or agreed to in writing, software                                                 // 2266\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2267\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2268\n * See the License for the specific language governing permissions and                                                 // 2269\n * limitations under the License.                                                                                      // 2270\n */                                                                                                                    // 2271\n/**                                                                                                                    // 2272\n   * Class constructor for Spinner MDL component.                                                                      // 2273\n   * Implements MDL component design pattern defined at:                                                               // 2274\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2275\n   *                                                                                                                   // 2276\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2277\n   * @constructor                                                                                                      // 2278\n   */                                                                                                                  // 2279\nvar MaterialSpinner = function MaterialSpinner(element) {                                                              // 2280\n    this.element_ = element;                                                                                           // 2281\n    // Initialize instance.                                                                                            // 2282\n    this.init();                                                                                                       // 2283\n};                                                                                                                     // 2284\nwindow['MaterialSpinner'] = MaterialSpinner;                                                                           // 2285\n/**                                                                                                                    // 2286\n   * Store constants in one place so they can be updated easily.                                                       // 2287\n   *                                                                                                                   // 2288\n   * @enum {string | number}                                                                                           // 2289\n   * @private                                                                                                          // 2290\n   */                                                                                                                  // 2291\nMaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };                                                  // 2292\n/**                                                                                                                    // 2293\n   * Store strings for class names defined by this component that are used in                                          // 2294\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2295\n   * decide to modify at a later date.                                                                                 // 2296\n   *                                                                                                                   // 2297\n   * @enum {string}                                                                                                    // 2298\n   * @private                                                                                                          // 2299\n   */                                                                                                                  // 2300\nMaterialSpinner.prototype.CssClasses_ = {                                                                              // 2301\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',                                                                           // 2302\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',                                                         // 2303\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',                                                                         // 2304\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',                                                                   // 2305\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',                                                                             // 2306\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'                                                                            // 2307\n};                                                                                                                     // 2308\n/**                                                                                                                    // 2309\n   * Auxiliary method to create a spinner layer.                                                                       // 2310\n   *                                                                                                                   // 2311\n   * @param {number} index Index of the layer to be created.                                                           // 2312\n   * @public                                                                                                           // 2313\n   */                                                                                                                  // 2314\nMaterialSpinner.prototype.createLayer = function (index) {                                                             // 2315\n    var layer = document.createElement('div');                                                                         // 2316\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);                                                           // 2317\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);                                             // 2318\n    var leftClipper = document.createElement('div');                                                                   // 2319\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);                                            // 2320\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);                                                      // 2321\n    var gapPatch = document.createElement('div');                                                                      // 2322\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);                                                    // 2323\n    var rightClipper = document.createElement('div');                                                                  // 2324\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);                                           // 2325\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);                                                    // 2326\n    var circleOwners = [                                                                                               // 2327\n        leftClipper,                                                                                                   // 2328\n        gapPatch,                                                                                                      // 2329\n        rightClipper                                                                                                   // 2330\n    ];                                                                                                                 // 2331\n    for (var i = 0; i < circleOwners.length; i++) {                                                                    // 2332\n        var circle = document.createElement('div');                                                                    // 2333\n        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);                                                     // 2334\n        circleOwners[i].appendChild(circle);                                                                           // 2335\n    }                                                                                                                  // 2336\n    layer.appendChild(leftClipper);                                                                                    // 2337\n    layer.appendChild(gapPatch);                                                                                       // 2338\n    layer.appendChild(rightClipper);                                                                                   // 2339\n    this.element_.appendChild(layer);                                                                                  // 2340\n};                                                                                                                     // 2341\nMaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer;                                      // 2342\n/**                                                                                                                    // 2343\n   * Stops the spinner animation.                                                                                      // 2344\n   * Public method for users who need to stop the spinner for any reason.                                              // 2345\n   *                                                                                                                   // 2346\n   * @public                                                                                                           // 2347\n   */                                                                                                                  // 2348\nMaterialSpinner.prototype.stop = function () {                                                                         // 2349\n    this.element_.classList.remove('is-active');                                                                       // 2350\n};                                                                                                                     // 2351\nMaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;                                                    // 2352\n/**                                                                                                                    // 2353\n   * Starts the spinner animation.                                                                                     // 2354\n   * Public method for users who need to manually start the spinner for any reason                                     // 2355\n   * (instead of just adding the 'is-active' class to their markup).                                                   // 2356\n   *                                                                                                                   // 2357\n   * @public                                                                                                           // 2358\n   */                                                                                                                  // 2359\nMaterialSpinner.prototype.start = function () {                                                                        // 2360\n    this.element_.classList.add('is-active');                                                                          // 2361\n};                                                                                                                     // 2362\nMaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;                                                  // 2363\n/**                                                                                                                    // 2364\n   * Initialize element.                                                                                               // 2365\n   */                                                                                                                  // 2366\nMaterialSpinner.prototype.init = function () {                                                                         // 2367\n    if (this.element_) {                                                                                               // 2368\n        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {                                            // 2369\n            this.createLayer(i);                                                                                       // 2370\n        }                                                                                                              // 2371\n        this.element_.classList.add('is-upgraded');                                                                    // 2372\n    }                                                                                                                  // 2373\n};                                                                                                                     // 2374\n// The component registers itself. It can assume componentHandler is available                                         // 2375\n// in the global scope.                                                                                                // 2376\ncomponentHandler.register({                                                                                            // 2377\n    constructor: MaterialSpinner,                                                                                      // 2378\n    classAsString: 'MaterialSpinner',                                                                                  // 2379\n    cssClass: 'mdl-js-spinner',                                                                                        // 2380\n    widget: true                                                                                                       // 2381\n});                                                                                                                    // 2382\n/**                                                                                                                    // 2383\n * @license                                                                                                            // 2384\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2385\n *                                                                                                                     // 2386\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2387\n * you may not use this file except in compliance with the License.                                                    // 2388\n * You may obtain a copy of the License at                                                                             // 2389\n *                                                                                                                     // 2390\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2391\n *                                                                                                                     // 2392\n * Unless required by applicable law or agreed to in writing, software                                                 // 2393\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2394\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2395\n * See the License for the specific language governing permissions and                                                 // 2396\n * limitations under the License.                                                                                      // 2397\n */                                                                                                                    // 2398\n/**                                                                                                                    // 2399\n   * Class constructor for Checkbox MDL component.                                                                     // 2400\n   * Implements MDL component design pattern defined at:                                                               // 2401\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2402\n   *                                                                                                                   // 2403\n   * @constructor                                                                                                      // 2404\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2405\n   */                                                                                                                  // 2406\nvar MaterialSwitch = function MaterialSwitch(element) {                                                                // 2407\n    this.element_ = element;                                                                                           // 2408\n    // Initialize instance.                                                                                            // 2409\n    this.init();                                                                                                       // 2410\n};                                                                                                                     // 2411\nwindow['MaterialSwitch'] = MaterialSwitch;                                                                             // 2412\n/**                                                                                                                    // 2413\n   * Store constants in one place so they can be updated easily.                                                       // 2414\n   *                                                                                                                   // 2415\n   * @enum {string | number}                                                                                           // 2416\n   * @private                                                                                                          // 2417\n   */                                                                                                                  // 2418\nMaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };                                                          // 2419\n/**                                                                                                                    // 2420\n   * Store strings for class names defined by this component that are used in                                          // 2421\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2422\n   * decide to modify at a later date.                                                                                 // 2423\n   *                                                                                                                   // 2424\n   * @enum {string}                                                                                                    // 2425\n   * @private                                                                                                          // 2426\n   */                                                                                                                  // 2427\nMaterialSwitch.prototype.CssClasses_ = {                                                                               // 2428\n    INPUT: 'mdl-switch__input',                                                                                        // 2429\n    TRACK: 'mdl-switch__track',                                                                                        // 2430\n    THUMB: 'mdl-switch__thumb',                                                                                        // 2431\n    FOCUS_HELPER: 'mdl-switch__focus-helper',                                                                          // 2432\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                             // 2433\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 2434\n    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',                                                                  // 2435\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 2436\n    RIPPLE: 'mdl-ripple',                                                                                              // 2437\n    IS_FOCUSED: 'is-focused',                                                                                          // 2438\n    IS_DISABLED: 'is-disabled',                                                                                        // 2439\n    IS_CHECKED: 'is-checked'                                                                                           // 2440\n};                                                                                                                     // 2441\n/**                                                                                                                    // 2442\n   * Handle change of state.                                                                                           // 2443\n   *                                                                                                                   // 2444\n   * @param {Event} event The event that fired.                                                                        // 2445\n   * @private                                                                                                          // 2446\n   */                                                                                                                  // 2447\nMaterialSwitch.prototype.onChange_ = function (event) {                                                                // 2448\n    this.updateClasses_();                                                                                             // 2449\n};                                                                                                                     // 2450\n/**                                                                                                                    // 2451\n   * Handle focus of element.                                                                                          // 2452\n   *                                                                                                                   // 2453\n   * @param {Event} event The event that fired.                                                                        // 2454\n   * @private                                                                                                          // 2455\n   */                                                                                                                  // 2456\nMaterialSwitch.prototype.onFocus_ = function (event) {                                                                 // 2457\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 2458\n};                                                                                                                     // 2459\n/**                                                                                                                    // 2460\n   * Handle lost focus of element.                                                                                     // 2461\n   *                                                                                                                   // 2462\n   * @param {Event} event The event that fired.                                                                        // 2463\n   * @private                                                                                                          // 2464\n   */                                                                                                                  // 2465\nMaterialSwitch.prototype.onBlur_ = function (event) {                                                                  // 2466\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 2467\n};                                                                                                                     // 2468\n/**                                                                                                                    // 2469\n   * Handle mouseup.                                                                                                   // 2470\n   *                                                                                                                   // 2471\n   * @param {Event} event The event that fired.                                                                        // 2472\n   * @private                                                                                                          // 2473\n   */                                                                                                                  // 2474\nMaterialSwitch.prototype.onMouseUp_ = function (event) {                                                               // 2475\n    this.blur_();                                                                                                      // 2476\n};                                                                                                                     // 2477\n/**                                                                                                                    // 2478\n   * Handle class updates.                                                                                             // 2479\n   *                                                                                                                   // 2480\n   * @private                                                                                                          // 2481\n   */                                                                                                                  // 2482\nMaterialSwitch.prototype.updateClasses_ = function () {                                                                // 2483\n    this.checkDisabled();                                                                                              // 2484\n    this.checkToggleState();                                                                                           // 2485\n};                                                                                                                     // 2486\n/**                                                                                                                    // 2487\n   * Add blur.                                                                                                         // 2488\n   *                                                                                                                   // 2489\n   * @private                                                                                                          // 2490\n   */                                                                                                                  // 2491\nMaterialSwitch.prototype.blur_ = function () {                                                                         // 2492\n    // TODO: figure out why there's a focus event being fired after our blur,                                          // 2493\n    // so that we can avoid this hack.                                                                                 // 2494\n    window.setTimeout(function () {                                                                                    // 2495\n        this.inputElement_.blur();                                                                                     // 2496\n    }.bind(this), this.Constant_.TINY_TIMEOUT);                                                                        // 2497\n};                                                                                                                     // 2498\n// Public methods.                                                                                                     // 2499\n/**                                                                                                                    // 2500\n   * Check the components disabled state.                                                                              // 2501\n   *                                                                                                                   // 2502\n   * @public                                                                                                           // 2503\n   */                                                                                                                  // 2504\nMaterialSwitch.prototype.checkDisabled = function () {                                                                 // 2505\n    if (this.inputElement_.disabled) {                                                                                 // 2506\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 2507\n    } else {                                                                                                           // 2508\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 2509\n    }                                                                                                                  // 2510\n};                                                                                                                     // 2511\nMaterialSwitch.prototype['checkDisabled'] = MaterialSwitch.prototype.checkDisabled;                                    // 2512\n/**                                                                                                                    // 2513\n   * Check the components toggled state.                                                                               // 2514\n   *                                                                                                                   // 2515\n   * @public                                                                                                           // 2516\n   */                                                                                                                  // 2517\nMaterialSwitch.prototype.checkToggleState = function () {                                                              // 2518\n    if (this.inputElement_.checked) {                                                                                  // 2519\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);                                                      // 2520\n    } else {                                                                                                           // 2521\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);                                                   // 2522\n    }                                                                                                                  // 2523\n};                                                                                                                     // 2524\nMaterialSwitch.prototype['checkToggleState'] = MaterialSwitch.prototype.checkToggleState;                              // 2525\n/**                                                                                                                    // 2526\n   * Disable switch.                                                                                                   // 2527\n   *                                                                                                                   // 2528\n   * @public                                                                                                           // 2529\n   */                                                                                                                  // 2530\nMaterialSwitch.prototype.disable = function () {                                                                       // 2531\n    this.inputElement_.disabled = true;                                                                                // 2532\n    this.updateClasses_();                                                                                             // 2533\n};                                                                                                                     // 2534\nMaterialSwitch.prototype['disable'] = MaterialSwitch.prototype.disable;                                                // 2535\n/**                                                                                                                    // 2536\n   * Enable switch.                                                                                                    // 2537\n   *                                                                                                                   // 2538\n   * @public                                                                                                           // 2539\n   */                                                                                                                  // 2540\nMaterialSwitch.prototype.enable = function () {                                                                        // 2541\n    this.inputElement_.disabled = false;                                                                               // 2542\n    this.updateClasses_();                                                                                             // 2543\n};                                                                                                                     // 2544\nMaterialSwitch.prototype['enable'] = MaterialSwitch.prototype.enable;                                                  // 2545\n/**                                                                                                                    // 2546\n   * Activate switch.                                                                                                  // 2547\n   *                                                                                                                   // 2548\n   * @public                                                                                                           // 2549\n   */                                                                                                                  // 2550\nMaterialSwitch.prototype.on = function () {                                                                            // 2551\n    this.inputElement_.checked = true;                                                                                 // 2552\n    this.updateClasses_();                                                                                             // 2553\n};                                                                                                                     // 2554\nMaterialSwitch.prototype['on'] = MaterialSwitch.prototype.on;                                                          // 2555\n/**                                                                                                                    // 2556\n   * Deactivate switch.                                                                                                // 2557\n   *                                                                                                                   // 2558\n   * @public                                                                                                           // 2559\n   */                                                                                                                  // 2560\nMaterialSwitch.prototype.off = function () {                                                                           // 2561\n    this.inputElement_.checked = false;                                                                                // 2562\n    this.updateClasses_();                                                                                             // 2563\n};                                                                                                                     // 2564\nMaterialSwitch.prototype['off'] = MaterialSwitch.prototype.off;                                                        // 2565\n/**                                                                                                                    // 2566\n   * Initialize element.                                                                                               // 2567\n   */                                                                                                                  // 2568\nMaterialSwitch.prototype.init = function () {                                                                          // 2569\n    if (this.element_) {                                                                                               // 2570\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                // 2571\n        var track = document.createElement('div');                                                                     // 2572\n        track.classList.add(this.CssClasses_.TRACK);                                                                   // 2573\n        var thumb = document.createElement('div');                                                                     // 2574\n        thumb.classList.add(this.CssClasses_.THUMB);                                                                   // 2575\n        var focusHelper = document.createElement('span');                                                              // 2576\n        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);                                                      // 2577\n        thumb.appendChild(focusHelper);                                                                                // 2578\n        this.element_.appendChild(track);                                                                              // 2579\n        this.element_.appendChild(thumb);                                                                              // 2580\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);                                                         // 2581\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {                                        // 2582\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                        // 2583\n            this.rippleContainerElement_ = document.createElement('span');                                             // 2584\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);                             // 2585\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);                                // 2586\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);                                // 2587\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);                        // 2588\n            var ripple = document.createElement('span');                                                               // 2589\n            ripple.classList.add(this.CssClasses_.RIPPLE);                                                             // 2590\n            this.rippleContainerElement_.appendChild(ripple);                                                          // 2591\n            this.element_.appendChild(this.rippleContainerElement_);                                                   // 2592\n        }                                                                                                              // 2593\n        this.boundChangeHandler = this.onChange_.bind(this);                                                           // 2594\n        this.boundFocusHandler = this.onFocus_.bind(this);                                                             // 2595\n        this.boundBlurHandler = this.onBlur_.bind(this);                                                               // 2596\n        this.inputElement_.addEventListener('change', this.boundChangeHandler);                                        // 2597\n        this.inputElement_.addEventListener('focus', this.boundFocusHandler);                                          // 2598\n        this.inputElement_.addEventListener('blur', this.boundBlurHandler);                                            // 2599\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);                                           // 2600\n        this.updateClasses_();                                                                                         // 2601\n        this.element_.classList.add('is-upgraded');                                                                    // 2602\n    }                                                                                                                  // 2603\n};                                                                                                                     // 2604\n// The component registers itself. It can assume componentHandler is available                                         // 2605\n// in the global scope.                                                                                                // 2606\ncomponentHandler.register({                                                                                            // 2607\n    constructor: MaterialSwitch,                                                                                       // 2608\n    classAsString: 'MaterialSwitch',                                                                                   // 2609\n    cssClass: 'mdl-js-switch',                                                                                         // 2610\n    widget: true                                                                                                       // 2611\n});                                                                                                                    // 2612\n/**                                                                                                                    // 2613\n * @license                                                                                                            // 2614\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2615\n *                                                                                                                     // 2616\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2617\n * you may not use this file except in compliance with the License.                                                    // 2618\n * You may obtain a copy of the License at                                                                             // 2619\n *                                                                                                                     // 2620\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2621\n *                                                                                                                     // 2622\n * Unless required by applicable law or agreed to in writing, software                                                 // 2623\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2624\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2625\n * See the License for the specific language governing permissions and                                                 // 2626\n * limitations under the License.                                                                                      // 2627\n */                                                                                                                    // 2628\n/**                                                                                                                    // 2629\n   * Class constructor for Tabs MDL component.                                                                         // 2630\n   * Implements MDL component design pattern defined at:                                                               // 2631\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2632\n   *                                                                                                                   // 2633\n   * @constructor                                                                                                      // 2634\n   * @param {Element} element The element that will be upgraded.                                                       // 2635\n   */                                                                                                                  // 2636\nvar MaterialTabs = function MaterialTabs(element) {                                                                    // 2637\n    // Stores the HTML element.                                                                                        // 2638\n    this.element_ = element;                                                                                           // 2639\n    // Initialize instance.                                                                                            // 2640\n    this.init();                                                                                                       // 2641\n};                                                                                                                     // 2642\nwindow['MaterialTabs'] = MaterialTabs;                                                                                 // 2643\n/**                                                                                                                    // 2644\n   * Store constants in one place so they can be updated easily.                                                       // 2645\n   *                                                                                                                   // 2646\n   * @enum {string}                                                                                                    // 2647\n   * @private                                                                                                          // 2648\n   */                                                                                                                  // 2649\nMaterialTabs.prototype.Constant_ = {};                                                                                 // 2650\n/**                                                                                                                    // 2651\n   * Store strings for class names defined by this component that are used in                                          // 2652\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2653\n   * decide to modify at a later date.                                                                                 // 2654\n   *                                                                                                                   // 2655\n   * @enum {string}                                                                                                    // 2656\n   * @private                                                                                                          // 2657\n   */                                                                                                                  // 2658\nMaterialTabs.prototype.CssClasses_ = {                                                                                 // 2659\n    TAB_CLASS: 'mdl-tabs__tab',                                                                                        // 2660\n    PANEL_CLASS: 'mdl-tabs__panel',                                                                                    // 2661\n    ACTIVE_CLASS: 'is-active',                                                                                         // 2662\n    UPGRADED_CLASS: 'is-upgraded',                                                                                     // 2663\n    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                      // 2664\n    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',                                                                // 2665\n    MDL_RIPPLE: 'mdl-ripple',                                                                                          // 2666\n    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'                                          // 2667\n};                                                                                                                     // 2668\n/**                                                                                                                    // 2669\n   * Handle clicks to a tabs component                                                                                 // 2670\n   *                                                                                                                   // 2671\n   * @private                                                                                                          // 2672\n   */                                                                                                                  // 2673\nMaterialTabs.prototype.initTabs_ = function () {                                                                       // 2674\n    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {                                     // 2675\n        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);                              // 2676\n    }                                                                                                                  // 2677\n    // Select element tabs, document panels                                                                            // 2678\n    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);                                     // 2679\n    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);                                 // 2680\n    // Create new tabs for each tab element                                                                            // 2681\n    for (var i = 0; i < this.tabs_.length; i++) {                                                                      // 2682\n        new MaterialTab(this.tabs_[i], this);                                                                          // 2683\n    }                                                                                                                  // 2684\n    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);                                                      // 2685\n};                                                                                                                     // 2686\n/**                                                                                                                    // 2687\n   * Reset tab state, dropping active classes                                                                          // 2688\n   *                                                                                                                   // 2689\n   * @private                                                                                                          // 2690\n   */                                                                                                                  // 2691\nMaterialTabs.prototype.resetTabState_ = function () {                                                                  // 2692\n    for (var k = 0; k < this.tabs_.length; k++) {                                                                      // 2693\n        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);                                                 // 2694\n    }                                                                                                                  // 2695\n};                                                                                                                     // 2696\n/**                                                                                                                    // 2697\n   * Reset panel state, droping active classes                                                                         // 2698\n   *                                                                                                                   // 2699\n   * @private                                                                                                          // 2700\n   */                                                                                                                  // 2701\nMaterialTabs.prototype.resetPanelState_ = function () {                                                                // 2702\n    for (var j = 0; j < this.panels_.length; j++) {                                                                    // 2703\n        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);                                               // 2704\n    }                                                                                                                  // 2705\n};                                                                                                                     // 2706\n/**                                                                                                                    // 2707\n   * Initialize element.                                                                                               // 2708\n   */                                                                                                                  // 2709\nMaterialTabs.prototype.init = function () {                                                                            // 2710\n    if (this.element_) {                                                                                               // 2711\n        this.initTabs_();                                                                                              // 2712\n    }                                                                                                                  // 2713\n};                                                                                                                     // 2714\n/**                                                                                                                    // 2715\n   * Constructor for an individual tab.                                                                                // 2716\n   *                                                                                                                   // 2717\n   * @constructor                                                                                                      // 2718\n   * @param {Element} tab The HTML element for the tab.                                                                // 2719\n   * @param {MaterialTabs} ctx The MaterialTabs object that owns the tab.                                              // 2720\n   */                                                                                                                  // 2721\nfunction MaterialTab(tab, ctx) {                                                                                       // 2722\n    if (tab) {                                                                                                         // 2723\n        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {                                   // 2724\n            var rippleContainer = document.createElement('span');                                                      // 2725\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);                                       // 2726\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);                                       // 2727\n            var ripple = document.createElement('span');                                                               // 2728\n            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);                                                          // 2729\n            rippleContainer.appendChild(ripple);                                                                       // 2730\n            tab.appendChild(rippleContainer);                                                                          // 2731\n        }                                                                                                              // 2732\n        tab.addEventListener('click', function (e) {                                                                   // 2733\n            if (tab.getAttribute('href').charAt(0) === '#') {                                                          // 2734\n                e.preventDefault();                                                                                    // 2735\n                var href = tab.href.split('#')[1];                                                                     // 2736\n                var panel = ctx.element_.querySelector('#' + href);                                                    // 2737\n                ctx.resetTabState_();                                                                                  // 2738\n                ctx.resetPanelState_();                                                                                // 2739\n                tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);                                                       // 2740\n                panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);                                                     // 2741\n            }                                                                                                          // 2742\n        });                                                                                                            // 2743\n    }                                                                                                                  // 2744\n}                                                                                                                      // 2745\n// The component registers itself. It can assume componentHandler is available                                         // 2746\n// in the global scope.                                                                                                // 2747\ncomponentHandler.register({                                                                                            // 2748\n    constructor: MaterialTabs,                                                                                         // 2749\n    classAsString: 'MaterialTabs',                                                                                     // 2750\n    cssClass: 'mdl-js-tabs'                                                                                            // 2751\n});                                                                                                                    // 2752\n/**                                                                                                                    // 2753\n * @license                                                                                                            // 2754\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 2755\n *                                                                                                                     // 2756\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2757\n * you may not use this file except in compliance with the License.                                                    // 2758\n * You may obtain a copy of the License at                                                                             // 2759\n *                                                                                                                     // 2760\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 2761\n *                                                                                                                     // 2762\n * Unless required by applicable law or agreed to in writing, software                                                 // 2763\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2764\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2765\n * See the License for the specific language governing permissions and                                                 // 2766\n * limitations under the License.                                                                                      // 2767\n */                                                                                                                    // 2768\n/**                                                                                                                    // 2769\n   * Class constructor for Textfield MDL component.                                                                    // 2770\n   * Implements MDL component design pattern defined at:                                                               // 2771\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 2772\n   *                                                                                                                   // 2773\n   * @constructor                                                                                                      // 2774\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 2775\n   */                                                                                                                  // 2776\nvar MaterialTextfield = function MaterialTextfield(element) {                                                          // 2777\n    this.element_ = element;                                                                                           // 2778\n    this.maxRows = this.Constant_.NO_MAX_ROWS;                                                                         // 2779\n    // Initialize instance.                                                                                            // 2780\n    this.init();                                                                                                       // 2781\n};                                                                                                                     // 2782\nwindow['MaterialTextfield'] = MaterialTextfield;                                                                       // 2783\n/**                                                                                                                    // 2784\n   * Store constants in one place so they can be updated easily.                                                       // 2785\n   *                                                                                                                   // 2786\n   * @enum {string | number}                                                                                           // 2787\n   * @private                                                                                                          // 2788\n   */                                                                                                                  // 2789\nMaterialTextfield.prototype.Constant_ = {                                                                              // 2790\n    NO_MAX_ROWS: -1,                                                                                                   // 2791\n    MAX_ROWS_ATTRIBUTE: 'maxrows'                                                                                      // 2792\n};                                                                                                                     // 2793\n/**                                                                                                                    // 2794\n   * Store strings for class names defined by this component that are used in                                          // 2795\n   * JavaScript. This allows us to simply change it in one place should we                                             // 2796\n   * decide to modify at a later date.                                                                                 // 2797\n   *                                                                                                                   // 2798\n   * @enum {string}                                                                                                    // 2799\n   * @private                                                                                                          // 2800\n   */                                                                                                                  // 2801\nMaterialTextfield.prototype.CssClasses_ = {                                                                            // 2802\n    LABEL: 'mdl-textfield__label',                                                                                     // 2803\n    INPUT: 'mdl-textfield__input',                                                                                     // 2804\n    IS_DIRTY: 'is-dirty',                                                                                              // 2805\n    IS_FOCUSED: 'is-focused',                                                                                          // 2806\n    IS_DISABLED: 'is-disabled',                                                                                        // 2807\n    IS_INVALID: 'is-invalid',                                                                                          // 2808\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 2809\n    HAS_PLACEHOLDER: 'has-placeholder'                                                                                 // 2810\n};                                                                                                                     // 2811\n/**                                                                                                                    // 2812\n   * Handle input being entered.                                                                                       // 2813\n   *                                                                                                                   // 2814\n   * @param {Event} event The event that fired.                                                                        // 2815\n   * @private                                                                                                          // 2816\n   */                                                                                                                  // 2817\nMaterialTextfield.prototype.onKeyDown_ = function (event) {                                                            // 2818\n    var currentRowCount = event.target.value.split('\\n').length;                                                       // 2819\n    if (event.keyCode === 13) {                                                                                        // 2820\n        if (currentRowCount >= this.maxRows) {                                                                         // 2821\n            event.preventDefault();                                                                                    // 2822\n        }                                                                                                              // 2823\n    }                                                                                                                  // 2824\n};                                                                                                                     // 2825\n/**                                                                                                                    // 2826\n   * Handle focus.                                                                                                     // 2827\n   *                                                                                                                   // 2828\n   * @param {Event} event The event that fired.                                                                        // 2829\n   * @private                                                                                                          // 2830\n   */                                                                                                                  // 2831\nMaterialTextfield.prototype.onFocus_ = function (event) {                                                              // 2832\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                          // 2833\n};                                                                                                                     // 2834\n/**                                                                                                                    // 2835\n   * Handle lost focus.                                                                                                // 2836\n   *                                                                                                                   // 2837\n   * @param {Event} event The event that fired.                                                                        // 2838\n   * @private                                                                                                          // 2839\n   */                                                                                                                  // 2840\nMaterialTextfield.prototype.onBlur_ = function (event) {                                                               // 2841\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                       // 2842\n};                                                                                                                     // 2843\n/**                                                                                                                    // 2844\n   * Handle reset event from out side.                                                                                 // 2845\n   *                                                                                                                   // 2846\n   * @param {Event} event The event that fired.                                                                        // 2847\n   * @private                                                                                                          // 2848\n   */                                                                                                                  // 2849\nMaterialTextfield.prototype.onReset_ = function (event) {                                                              // 2850\n    this.updateClasses_();                                                                                             // 2851\n};                                                                                                                     // 2852\n/**                                                                                                                    // 2853\n   * Handle class updates.                                                                                             // 2854\n   *                                                                                                                   // 2855\n   * @private                                                                                                          // 2856\n   */                                                                                                                  // 2857\nMaterialTextfield.prototype.updateClasses_ = function () {                                                             // 2858\n    this.checkDisabled();                                                                                              // 2859\n    this.checkValidity();                                                                                              // 2860\n    this.checkDirty();                                                                                                 // 2861\n    this.checkFocus();                                                                                                 // 2862\n};                                                                                                                     // 2863\n// Public methods.                                                                                                     // 2864\n/**                                                                                                                    // 2865\n   * Check the disabled state and update field accordingly.                                                            // 2866\n   *                                                                                                                   // 2867\n   * @public                                                                                                           // 2868\n   */                                                                                                                  // 2869\nMaterialTextfield.prototype.checkDisabled = function () {                                                              // 2870\n    if (this.input_.disabled) {                                                                                        // 2871\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);                                                     // 2872\n    } else {                                                                                                           // 2873\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);                                                  // 2874\n    }                                                                                                                  // 2875\n};                                                                                                                     // 2876\nMaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;                              // 2877\n/**                                                                                                                    // 2878\n  * Check the focus state and update field accordingly.                                                                // 2879\n  *                                                                                                                    // 2880\n  * @public                                                                                                            // 2881\n  */                                                                                                                   // 2882\nMaterialTextfield.prototype.checkFocus = function () {                                                                 // 2883\n    if (Boolean(this.element_.querySelector(':focus'))) {                                                              // 2884\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);                                                      // 2885\n    } else {                                                                                                           // 2886\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);                                                   // 2887\n    }                                                                                                                  // 2888\n};                                                                                                                     // 2889\nMaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;                                    // 2890\n/**                                                                                                                    // 2891\n   * Check the validity state and update field accordingly.                                                            // 2892\n   *                                                                                                                   // 2893\n   * @public                                                                                                           // 2894\n   */                                                                                                                  // 2895\nMaterialTextfield.prototype.checkValidity = function () {                                                              // 2896\n    if (this.input_.validity) {                                                                                        // 2897\n        if (this.input_.validity.valid) {                                                                              // 2898\n            this.element_.classList.remove(this.CssClasses_.IS_INVALID);                                               // 2899\n        } else {                                                                                                       // 2900\n            this.element_.classList.add(this.CssClasses_.IS_INVALID);                                                  // 2901\n        }                                                                                                              // 2902\n    }                                                                                                                  // 2903\n};                                                                                                                     // 2904\nMaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;                              // 2905\n/**                                                                                                                    // 2906\n   * Check the dirty state and update field accordingly.                                                               // 2907\n   *                                                                                                                   // 2908\n   * @public                                                                                                           // 2909\n   */                                                                                                                  // 2910\nMaterialTextfield.prototype.checkDirty = function () {                                                                 // 2911\n    if (this.input_.value && this.input_.value.length > 0) {                                                           // 2912\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);                                                        // 2913\n    } else {                                                                                                           // 2914\n        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);                                                     // 2915\n    }                                                                                                                  // 2916\n};                                                                                                                     // 2917\nMaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;                                    // 2918\n/**                                                                                                                    // 2919\n   * Disable text field.                                                                                               // 2920\n   *                                                                                                                   // 2921\n   * @public                                                                                                           // 2922\n   */                                                                                                                  // 2923\nMaterialTextfield.prototype.disable = function () {                                                                    // 2924\n    this.input_.disabled = true;                                                                                       // 2925\n    this.updateClasses_();                                                                                             // 2926\n};                                                                                                                     // 2927\nMaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;                                          // 2928\n/**                                                                                                                    // 2929\n   * Enable text field.                                                                                                // 2930\n   *                                                                                                                   // 2931\n   * @public                                                                                                           // 2932\n   */                                                                                                                  // 2933\nMaterialTextfield.prototype.enable = function () {                                                                     // 2934\n    this.input_.disabled = false;                                                                                      // 2935\n    this.updateClasses_();                                                                                             // 2936\n};                                                                                                                     // 2937\nMaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;                                            // 2938\n/**                                                                                                                    // 2939\n   * Update text field value.                                                                                          // 2940\n   *                                                                                                                   // 2941\n   * @param {string} value The value to which to set the control (optional).                                           // 2942\n   * @public                                                                                                           // 2943\n   */                                                                                                                  // 2944\nMaterialTextfield.prototype.change = function (value) {                                                                // 2945\n    this.input_.value = value || '';                                                                                   // 2946\n    this.updateClasses_();                                                                                             // 2947\n};                                                                                                                     // 2948\nMaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;                                            // 2949\n/**                                                                                                                    // 2950\n   * Initialize element.                                                                                               // 2951\n   */                                                                                                                  // 2952\nMaterialTextfield.prototype.init = function () {                                                                       // 2953\n    if (this.element_) {                                                                                               // 2954\n        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);                                       // 2955\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);                                       // 2956\n        if (this.input_) {                                                                                             // 2957\n            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {                                         // 2958\n                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);              // 2959\n                if (isNaN(this.maxRows)) {                                                                             // 2960\n                    this.maxRows = this.Constant_.NO_MAX_ROWS;                                                         // 2961\n                }                                                                                                      // 2962\n            }                                                                                                          // 2963\n            if (this.input_.hasAttribute('placeholder')) {                                                             // 2964\n                this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);                                         // 2965\n            }                                                                                                          // 2966\n            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);                                           // 2967\n            this.boundFocusHandler = this.onFocus_.bind(this);                                                         // 2968\n            this.boundBlurHandler = this.onBlur_.bind(this);                                                           // 2969\n            this.boundResetHandler = this.onReset_.bind(this);                                                         // 2970\n            this.input_.addEventListener('input', this.boundUpdateClassesHandler);                                     // 2971\n            this.input_.addEventListener('focus', this.boundFocusHandler);                                             // 2972\n            this.input_.addEventListener('blur', this.boundBlurHandler);                                               // 2973\n            this.input_.addEventListener('reset', this.boundResetHandler);                                             // 2974\n            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {                                                         // 2975\n                // TODO: This should handle pasting multi line text.                                                   // 2976\n                // Currently doesn't.                                                                                  // 2977\n                this.boundKeyDownHandler = this.onKeyDown_.bind(this);                                                 // 2978\n                this.input_.addEventListener('keydown', this.boundKeyDownHandler);                                     // 2979\n            }                                                                                                          // 2980\n            var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);                               // 2981\n            this.updateClasses_();                                                                                     // 2982\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                 // 2983\n            if (invalid) {                                                                                             // 2984\n                this.element_.classList.add(this.CssClasses_.IS_INVALID);                                              // 2985\n            }                                                                                                          // 2986\n            if (this.input_.hasAttribute('autofocus')) {                                                               // 2987\n                this.element_.focus();                                                                                 // 2988\n                this.checkFocus();                                                                                     // 2989\n            }                                                                                                          // 2990\n        }                                                                                                              // 2991\n    }                                                                                                                  // 2992\n};                                                                                                                     // 2993\n// The component registers itself. It can assume componentHandler is available                                         // 2994\n// in the global scope.                                                                                                // 2995\ncomponentHandler.register({                                                                                            // 2996\n    constructor: MaterialTextfield,                                                                                    // 2997\n    classAsString: 'MaterialTextfield',                                                                                // 2998\n    cssClass: 'mdl-js-textfield',                                                                                      // 2999\n    widget: true                                                                                                       // 3000\n});                                                                                                                    // 3001\n/**                                                                                                                    // 3002\n * @license                                                                                                            // 3003\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 3004\n *                                                                                                                     // 3005\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3006\n * you may not use this file except in compliance with the License.                                                    // 3007\n * You may obtain a copy of the License at                                                                             // 3008\n *                                                                                                                     // 3009\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 3010\n *                                                                                                                     // 3011\n * Unless required by applicable law or agreed to in writing, software                                                 // 3012\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3013\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3014\n * See the License for the specific language governing permissions and                                                 // 3015\n * limitations under the License.                                                                                      // 3016\n */                                                                                                                    // 3017\n/**                                                                                                                    // 3018\n   * Class constructor for Tooltip MDL component.                                                                      // 3019\n   * Implements MDL component design pattern defined at:                                                               // 3020\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3021\n   *                                                                                                                   // 3022\n   * @constructor                                                                                                      // 3023\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 3024\n   */                                                                                                                  // 3025\nvar MaterialTooltip = function MaterialTooltip(element) {                                                              // 3026\n    this.element_ = element;                                                                                           // 3027\n    // Initialize instance.                                                                                            // 3028\n    this.init();                                                                                                       // 3029\n};                                                                                                                     // 3030\nwindow['MaterialTooltip'] = MaterialTooltip;                                                                           // 3031\n/**                                                                                                                    // 3032\n   * Store constants in one place so they can be updated easily.                                                       // 3033\n   *                                                                                                                   // 3034\n   * @enum {string | number}                                                                                           // 3035\n   * @private                                                                                                          // 3036\n   */                                                                                                                  // 3037\nMaterialTooltip.prototype.Constant_ = {};                                                                              // 3038\n/**                                                                                                                    // 3039\n   * Store strings for class names defined by this component that are used in                                          // 3040\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3041\n   * decide to modify at a later date.                                                                                 // 3042\n   *                                                                                                                   // 3043\n   * @enum {string}                                                                                                    // 3044\n   * @private                                                                                                          // 3045\n   */                                                                                                                  // 3046\nMaterialTooltip.prototype.CssClasses_ = {                                                                              // 3047\n    IS_ACTIVE: 'is-active',                                                                                            // 3048\n    BOTTOM: 'mdl-tooltip--bottom',                                                                                     // 3049\n    LEFT: 'mdl-tooltip--left',                                                                                         // 3050\n    RIGHT: 'mdl-tooltip--right',                                                                                       // 3051\n    TOP: 'mdl-tooltip--top'                                                                                            // 3052\n};                                                                                                                     // 3053\n/**                                                                                                                    // 3054\n   * Handle mouseenter for tooltip.                                                                                    // 3055\n   *                                                                                                                   // 3056\n   * @param {Event} event The event that fired.                                                                        // 3057\n   * @private                                                                                                          // 3058\n   */                                                                                                                  // 3059\nMaterialTooltip.prototype.handleMouseEnter_ = function (event) {                                                       // 3060\n    var props = event.target.getBoundingClientRect();                                                                  // 3061\n    var left = props.left + props.width / 2;                                                                           // 3062\n    var top = props.top + props.height / 2;                                                                            // 3063\n    var marginLeft = -1 * (this.element_.offsetWidth / 2);                                                             // 3064\n    var marginTop = -1 * (this.element_.offsetHeight / 2);                                                             // 3065\n    if (this.element_.classList.contains(this.CssClasses_.LEFT) || this.element_.classList.contains(this.CssClasses_.RIGHT)) {\n        left = props.width / 2;                                                                                        // 3067\n        if (top + marginTop < 0) {                                                                                     // 3068\n            this.element_.style.top = '0';                                                                             // 3069\n            this.element_.style.marginTop = '0';                                                                       // 3070\n        } else {                                                                                                       // 3071\n            this.element_.style.top = top + 'px';                                                                      // 3072\n            this.element_.style.marginTop = marginTop + 'px';                                                          // 3073\n        }                                                                                                              // 3074\n    } else {                                                                                                           // 3075\n        if (left + marginLeft < 0) {                                                                                   // 3076\n            this.element_.style.left = '0';                                                                            // 3077\n            this.element_.style.marginLeft = '0';                                                                      // 3078\n        } else {                                                                                                       // 3079\n            this.element_.style.left = left + 'px';                                                                    // 3080\n            this.element_.style.marginLeft = marginLeft + 'px';                                                        // 3081\n        }                                                                                                              // 3082\n    }                                                                                                                  // 3083\n    if (this.element_.classList.contains(this.CssClasses_.TOP)) {                                                      // 3084\n        this.element_.style.top = props.top - this.element_.offsetHeight - 10 + 'px';                                  // 3085\n    } else if (this.element_.classList.contains(this.CssClasses_.RIGHT)) {                                             // 3086\n        this.element_.style.left = props.left + props.width + 10 + 'px';                                               // 3087\n    } else if (this.element_.classList.contains(this.CssClasses_.LEFT)) {                                              // 3088\n        this.element_.style.left = props.left - this.element_.offsetWidth - 10 + 'px';                                 // 3089\n    } else {                                                                                                           // 3090\n        this.element_.style.top = props.top + props.height + 10 + 'px';                                                // 3091\n    }                                                                                                                  // 3092\n    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);                                                           // 3093\n};                                                                                                                     // 3094\n/**                                                                                                                    // 3095\n   * Hide tooltip on mouseleave or scroll                                                                              // 3096\n   *                                                                                                                   // 3097\n   * @private                                                                                                          // 3098\n   */                                                                                                                  // 3099\nMaterialTooltip.prototype.hideTooltip_ = function () {                                                                 // 3100\n    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);                                                        // 3101\n};                                                                                                                     // 3102\n/**                                                                                                                    // 3103\n   * Initialize element.                                                                                               // 3104\n   */                                                                                                                  // 3105\nMaterialTooltip.prototype.init = function () {                                                                         // 3106\n    if (this.element_) {                                                                                               // 3107\n        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');                 // 3108\n        if (forElId) {                                                                                                 // 3109\n            this.forElement_ = document.getElementById(forElId);                                                       // 3110\n        }                                                                                                              // 3111\n        if (this.forElement_) {                                                                                        // 3112\n            // It's left here because it prevents accidental text selection on Android                                 // 3113\n            if (!this.forElement_.hasAttribute('tabindex')) {                                                          // 3114\n                this.forElement_.setAttribute('tabindex', '0');                                                        // 3115\n            }                                                                                                          // 3116\n            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);                                           // 3117\n            this.boundMouseLeaveAndScrollHandler = this.hideTooltip_.bind(this);                                       // 3118\n            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);                       // 3119\n            this.forElement_.addEventListener('touchend', this.boundMouseEnterHandler, false);                         // 3120\n            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveAndScrollHandler, false);              // 3121\n            window.addEventListener('scroll', this.boundMouseLeaveAndScrollHandler, true);                             // 3122\n            window.addEventListener('touchstart', this.boundMouseLeaveAndScrollHandler);                               // 3123\n        }                                                                                                              // 3124\n    }                                                                                                                  // 3125\n};                                                                                                                     // 3126\n// The component registers itself. It can assume componentHandler is available                                         // 3127\n// in the global scope.                                                                                                // 3128\ncomponentHandler.register({                                                                                            // 3129\n    constructor: MaterialTooltip,                                                                                      // 3130\n    classAsString: 'MaterialTooltip',                                                                                  // 3131\n    cssClass: 'mdl-tooltip'                                                                                            // 3132\n});                                                                                                                    // 3133\n/**                                                                                                                    // 3134\n * @license                                                                                                            // 3135\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 3136\n *                                                                                                                     // 3137\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3138\n * you may not use this file except in compliance with the License.                                                    // 3139\n * You may obtain a copy of the License at                                                                             // 3140\n *                                                                                                                     // 3141\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 3142\n *                                                                                                                     // 3143\n * Unless required by applicable law or agreed to in writing, software                                                 // 3144\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3145\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3146\n * See the License for the specific language governing permissions and                                                 // 3147\n * limitations under the License.                                                                                      // 3148\n */                                                                                                                    // 3149\n/**                                                                                                                    // 3150\n   * Class constructor for Layout MDL component.                                                                       // 3151\n   * Implements MDL component design pattern defined at:                                                               // 3152\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3153\n   *                                                                                                                   // 3154\n   * @constructor                                                                                                      // 3155\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 3156\n   */                                                                                                                  // 3157\nvar MaterialLayout = function MaterialLayout(element) {                                                                // 3158\n    this.element_ = element;                                                                                           // 3159\n    // Initialize instance.                                                                                            // 3160\n    this.init();                                                                                                       // 3161\n};                                                                                                                     // 3162\nwindow['MaterialLayout'] = MaterialLayout;                                                                             // 3163\n/**                                                                                                                    // 3164\n   * Store constants in one place so they can be updated easily.                                                       // 3165\n   *                                                                                                                   // 3166\n   * @enum {string | number}                                                                                           // 3167\n   * @private                                                                                                          // 3168\n   */                                                                                                                  // 3169\nMaterialLayout.prototype.Constant_ = {                                                                                 // 3170\n    MAX_WIDTH: '(max-width: 1024px)',                                                                                  // 3171\n    TAB_SCROLL_PIXELS: 100,                                                                                            // 3172\n    RESIZE_TIMEOUT: 100,                                                                                               // 3173\n    MENU_ICON: '&#xE5D2;',                                                                                             // 3174\n    CHEVRON_LEFT: 'chevron_left',                                                                                      // 3175\n    CHEVRON_RIGHT: 'chevron_right'                                                                                     // 3176\n};                                                                                                                     // 3177\n/**                                                                                                                    // 3178\n   * Keycodes, for code readability.                                                                                   // 3179\n   *                                                                                                                   // 3180\n   * @enum {number}                                                                                                    // 3181\n   * @private                                                                                                          // 3182\n   */                                                                                                                  // 3183\nMaterialLayout.prototype.Keycodes_ = {                                                                                 // 3184\n    ENTER: 13,                                                                                                         // 3185\n    ESCAPE: 27,                                                                                                        // 3186\n    SPACE: 32                                                                                                          // 3187\n};                                                                                                                     // 3188\n/**                                                                                                                    // 3189\n   * Modes.                                                                                                            // 3190\n   *                                                                                                                   // 3191\n   * @enum {number}                                                                                                    // 3192\n   * @private                                                                                                          // 3193\n   */                                                                                                                  // 3194\nMaterialLayout.prototype.Mode_ = {                                                                                     // 3195\n    STANDARD: 0,                                                                                                       // 3196\n    SEAMED: 1,                                                                                                         // 3197\n    WATERFALL: 2,                                                                                                      // 3198\n    SCROLL: 3                                                                                                          // 3199\n};                                                                                                                     // 3200\n/**                                                                                                                    // 3201\n   * Store strings for class names defined by this component that are used in                                          // 3202\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3203\n   * decide to modify at a later date.                                                                                 // 3204\n   *                                                                                                                   // 3205\n   * @enum {string}                                                                                                    // 3206\n   * @private                                                                                                          // 3207\n   */                                                                                                                  // 3208\nMaterialLayout.prototype.CssClasses_ = {                                                                               // 3209\n    CONTAINER: 'mdl-layout__container',                                                                                // 3210\n    HEADER: 'mdl-layout__header',                                                                                      // 3211\n    DRAWER: 'mdl-layout__drawer',                                                                                      // 3212\n    CONTENT: 'mdl-layout__content',                                                                                    // 3213\n    DRAWER_BTN: 'mdl-layout__drawer-button',                                                                           // 3214\n    ICON: 'material-icons',                                                                                            // 3215\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',                                                                          // 3216\n    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',                                                              // 3217\n    RIPPLE: 'mdl-ripple',                                                                                              // 3218\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                       // 3219\n    HEADER_SEAMED: 'mdl-layout__header--seamed',                                                                       // 3220\n    HEADER_WATERFALL: 'mdl-layout__header--waterfall',                                                                 // 3221\n    HEADER_SCROLL: 'mdl-layout__header--scroll',                                                                       // 3222\n    FIXED_HEADER: 'mdl-layout--fixed-header',                                                                          // 3223\n    OBFUSCATOR: 'mdl-layout__obfuscator',                                                                              // 3224\n    TAB_BAR: 'mdl-layout__tab-bar',                                                                                    // 3225\n    TAB_CONTAINER: 'mdl-layout__tab-bar-container',                                                                    // 3226\n    TAB: 'mdl-layout__tab',                                                                                            // 3227\n    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',                                                                      // 3228\n    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',                                                            // 3229\n    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',                                                          // 3230\n    TAB_MANUAL_SWITCH: 'mdl-layout__tab-manual-switch',                                                                // 3231\n    PANEL: 'mdl-layout__tab-panel',                                                                                    // 3232\n    HAS_DRAWER: 'has-drawer',                                                                                          // 3233\n    HAS_TABS: 'has-tabs',                                                                                              // 3234\n    HAS_SCROLLING_HEADER: 'has-scrolling-header',                                                                      // 3235\n    CASTING_SHADOW: 'is-casting-shadow',                                                                               // 3236\n    IS_COMPACT: 'is-compact',                                                                                          // 3237\n    IS_SMALL_SCREEN: 'is-small-screen',                                                                                // 3238\n    IS_DRAWER_OPEN: 'is-visible',                                                                                      // 3239\n    IS_ACTIVE: 'is-active',                                                                                            // 3240\n    IS_UPGRADED: 'is-upgraded',                                                                                        // 3241\n    IS_ANIMATING: 'is-animating',                                                                                      // 3242\n    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',                                                                  // 3243\n    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'                                                                   // 3244\n};                                                                                                                     // 3245\n/**                                                                                                                    // 3246\n   * Handles scrolling on the content.                                                                                 // 3247\n   *                                                                                                                   // 3248\n   * @private                                                                                                          // 3249\n   */                                                                                                                  // 3250\nMaterialLayout.prototype.contentScrollHandler_ = function () {                                                         // 3251\n    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {                                              // 3252\n        return;                                                                                                        // 3253\n    }                                                                                                                  // 3254\n    var headerVisible = !this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN) || this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);\n    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {                // 3256\n        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);                                                   // 3257\n        this.header_.classList.add(this.CssClasses_.IS_COMPACT);                                                       // 3258\n        if (headerVisible) {                                                                                           // 3259\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);                                                 // 3260\n        }                                                                                                              // 3261\n    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {         // 3262\n        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);                                                // 3263\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);                                                    // 3264\n        if (headerVisible) {                                                                                           // 3265\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);                                                 // 3266\n        }                                                                                                              // 3267\n    }                                                                                                                  // 3268\n};                                                                                                                     // 3269\n/**                                                                                                                    // 3270\n   * Handles a keyboard event on the drawer.                                                                           // 3271\n   *                                                                                                                   // 3272\n   * @param {Event} evt The event that fired.                                                                          // 3273\n   * @private                                                                                                          // 3274\n   */                                                                                                                  // 3275\nMaterialLayout.prototype.keyboardEventHandler_ = function (evt) {                                                      // 3276\n    // Only react when the drawer is open.                                                                             // 3277\n    if (evt.keyCode === this.Keycodes_.ESCAPE && this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {   // 3278\n        this.toggleDrawer();                                                                                           // 3279\n    }                                                                                                                  // 3280\n};                                                                                                                     // 3281\n/**                                                                                                                    // 3282\n   * Handles changes in screen size.                                                                                   // 3283\n   *                                                                                                                   // 3284\n   * @private                                                                                                          // 3285\n   */                                                                                                                  // 3286\nMaterialLayout.prototype.screenSizeHandler_ = function () {                                                            // 3287\n    if (this.screenSizeMediaQuery_.matches) {                                                                          // 3288\n        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);                                                 // 3289\n    } else {                                                                                                           // 3290\n        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);                                              // 3291\n        // Collapse drawer (if any) when moving to a large screen size.                                                // 3292\n        if (this.drawer_) {                                                                                            // 3293\n            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);                                            // 3294\n            this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);                                        // 3295\n        }                                                                                                              // 3296\n    }                                                                                                                  // 3297\n};                                                                                                                     // 3298\n/**                                                                                                                    // 3299\n   * Handles events of drawer button.                                                                                  // 3300\n   *                                                                                                                   // 3301\n   * @param {Event} evt The event that fired.                                                                          // 3302\n   * @private                                                                                                          // 3303\n   */                                                                                                                  // 3304\nMaterialLayout.prototype.drawerToggleHandler_ = function (evt) {                                                       // 3305\n    if (evt && evt.type === 'keydown') {                                                                               // 3306\n        if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {                            // 3307\n            // prevent scrolling in drawer nav                                                                         // 3308\n            evt.preventDefault();                                                                                      // 3309\n        } else {                                                                                                       // 3310\n            // prevent other keys                                                                                      // 3311\n            return;                                                                                                    // 3312\n        }                                                                                                              // 3313\n    }                                                                                                                  // 3314\n    this.toggleDrawer();                                                                                               // 3315\n};                                                                                                                     // 3316\n/**                                                                                                                    // 3317\n   * Handles (un)setting the `is-animating` class                                                                      // 3318\n   *                                                                                                                   // 3319\n   * @private                                                                                                          // 3320\n   */                                                                                                                  // 3321\nMaterialLayout.prototype.headerTransitionEndHandler_ = function () {                                                   // 3322\n    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);                                                      // 3323\n};                                                                                                                     // 3324\n/**                                                                                                                    // 3325\n   * Handles expanding the header on click                                                                             // 3326\n   *                                                                                                                   // 3327\n   * @private                                                                                                          // 3328\n   */                                                                                                                  // 3329\nMaterialLayout.prototype.headerClickHandler_ = function () {                                                           // 3330\n    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {                                                // 3331\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);                                                    // 3332\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);                                                     // 3333\n    }                                                                                                                  // 3334\n};                                                                                                                     // 3335\n/**                                                                                                                    // 3336\n   * Reset tab state, dropping active classes                                                                          // 3337\n   *                                                                                                                   // 3338\n   * @private                                                                                                          // 3339\n   */                                                                                                                  // 3340\nMaterialLayout.prototype.resetTabState_ = function (tabBar) {                                                          // 3341\n    for (var k = 0; k < tabBar.length; k++) {                                                                          // 3342\n        tabBar[k].classList.remove(this.CssClasses_.IS_ACTIVE);                                                        // 3343\n    }                                                                                                                  // 3344\n};                                                                                                                     // 3345\n/**                                                                                                                    // 3346\n   * Reset panel state, droping active classes                                                                         // 3347\n   *                                                                                                                   // 3348\n   * @private                                                                                                          // 3349\n   */                                                                                                                  // 3350\nMaterialLayout.prototype.resetPanelState_ = function (panels) {                                                        // 3351\n    for (var j = 0; j < panels.length; j++) {                                                                          // 3352\n        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);                                                        // 3353\n    }                                                                                                                  // 3354\n};                                                                                                                     // 3355\n/**                                                                                                                    // 3356\n  * Toggle drawer state                                                                                                // 3357\n  *                                                                                                                    // 3358\n  * @public                                                                                                            // 3359\n  */                                                                                                                   // 3360\nMaterialLayout.prototype.toggleDrawer = function () {                                                                  // 3361\n    var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);                                 // 3362\n    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);                                                    // 3363\n    this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);                                                // 3364\n    // Set accessibility properties.                                                                                   // 3365\n    if (this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {                                            // 3366\n        this.drawer_.setAttribute('aria-hidden', 'false');                                                             // 3367\n        drawerButton.setAttribute('aria-expanded', 'true');                                                            // 3368\n    } else {                                                                                                           // 3369\n        this.drawer_.setAttribute('aria-hidden', 'true');                                                              // 3370\n        drawerButton.setAttribute('aria-expanded', 'false');                                                           // 3371\n    }                                                                                                                  // 3372\n};                                                                                                                     // 3373\nMaterialLayout.prototype['toggleDrawer'] = MaterialLayout.prototype.toggleDrawer;                                      // 3374\n/**                                                                                                                    // 3375\n   * Initialize element.                                                                                               // 3376\n   */                                                                                                                  // 3377\nMaterialLayout.prototype.init = function () {                                                                          // 3378\n    if (this.element_) {                                                                                               // 3379\n        var container = document.createElement('div');                                                                 // 3380\n        container.classList.add(this.CssClasses_.CONTAINER);                                                           // 3381\n        var focusedElement = this.element_.querySelector(':focus');                                                    // 3382\n        this.element_.parentElement.insertBefore(container, this.element_);                                            // 3383\n        this.element_.parentElement.removeChild(this.element_);                                                        // 3384\n        container.appendChild(this.element_);                                                                          // 3385\n        if (focusedElement) {                                                                                          // 3386\n            focusedElement.focus();                                                                                    // 3387\n        }                                                                                                              // 3388\n        var directChildren = this.element_.childNodes;                                                                 // 3389\n        var numChildren = directChildren.length;                                                                       // 3390\n        for (var c = 0; c < numChildren; c++) {                                                                        // 3391\n            var child = directChildren[c];                                                                             // 3392\n            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {                                // 3393\n                this.header_ = child;                                                                                  // 3394\n            }                                                                                                          // 3395\n            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {                                // 3396\n                this.drawer_ = child;                                                                                  // 3397\n            }                                                                                                          // 3398\n            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {                               // 3399\n                this.content_ = child;                                                                                 // 3400\n            }                                                                                                          // 3401\n        }                                                                                                              // 3402\n        window.addEventListener('pageshow', function (e) {                                                             // 3403\n            if (e.persisted) {                                                                                         // 3404\n                // when page is loaded from back/forward cache                                                         // 3405\n                // trigger repaint to let layout scroll in safari                                                      // 3406\n                this.element_.style.overflowY = 'hidden';                                                              // 3407\n                requestAnimationFrame(function () {                                                                    // 3408\n                    this.element_.style.overflowY = '';                                                                // 3409\n                }.bind(this));                                                                                         // 3410\n            }                                                                                                          // 3411\n        }.bind(this), false);                                                                                          // 3412\n        if (this.header_) {                                                                                            // 3413\n            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);                                 // 3414\n        }                                                                                                              // 3415\n        var mode = this.Mode_.STANDARD;                                                                                // 3416\n        if (this.header_) {                                                                                            // 3417\n            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {                                     // 3418\n                mode = this.Mode_.SEAMED;                                                                              // 3419\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {                           // 3420\n                mode = this.Mode_.WATERFALL;                                                                           // 3421\n                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));           // 3422\n                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));                           // 3423\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {                              // 3424\n                mode = this.Mode_.SCROLL;                                                                              // 3425\n                container.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);                                        // 3426\n            }                                                                                                          // 3427\n            if (mode === this.Mode_.STANDARD) {                                                                        // 3428\n                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);                                           // 3429\n                if (this.tabBar_) {                                                                                    // 3430\n                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);                                       // 3431\n                }                                                                                                      // 3432\n            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {                                     // 3433\n                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);                                        // 3434\n                if (this.tabBar_) {                                                                                    // 3435\n                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);                                    // 3436\n                }                                                                                                      // 3437\n            } else if (mode === this.Mode_.WATERFALL) {                                                                // 3438\n                // Add and remove shadows depending on scroll position.                                                // 3439\n                // Also add/remove auxiliary class for styling of the compact version of                               // 3440\n                // the header.                                                                                         // 3441\n                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));                       // 3442\n                this.contentScrollHandler_();                                                                          // 3443\n            }                                                                                                          // 3444\n        }                                                                                                              // 3445\n        // Add drawer toggling button to our layout, if we have an openable drawer.                                    // 3446\n        if (this.drawer_) {                                                                                            // 3447\n            var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);                         // 3448\n            if (!drawerButton) {                                                                                       // 3449\n                drawerButton = document.createElement('div');                                                          // 3450\n                drawerButton.setAttribute('aria-expanded', 'false');                                                   // 3451\n                drawerButton.setAttribute('role', 'button');                                                           // 3452\n                drawerButton.setAttribute('tabindex', '0');                                                            // 3453\n                drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);                                               // 3454\n                var drawerButtonIcon = document.createElement('i');                                                    // 3455\n                drawerButtonIcon.classList.add(this.CssClasses_.ICON);                                                 // 3456\n                drawerButtonIcon.innerHTML = this.Constant_.MENU_ICON;                                                 // 3457\n                drawerButton.appendChild(drawerButtonIcon);                                                            // 3458\n            }                                                                                                          // 3459\n            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {                                   // 3460\n                //If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.                 // 3461\n                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);                                          // 3462\n            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {                            // 3463\n                //If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.                 // 3464\n                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);                                          // 3465\n            }                                                                                                          // 3466\n            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));                              // 3467\n            drawerButton.addEventListener('keydown', this.drawerToggleHandler_.bind(this));                            // 3468\n            // Add a class if the layout has a drawer, for altering the left padding.                                  // 3469\n            // Adds the HAS_DRAWER to the elements since this.header_ may or may                                       // 3470\n            // not be present.                                                                                         // 3471\n            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);                                                  // 3472\n            // If we have a fixed header, add the button to the header rather than                                     // 3473\n            // the layout.                                                                                             // 3474\n            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {                                     // 3475\n                this.header_.insertBefore(drawerButton, this.header_.firstChild);                                      // 3476\n            } else {                                                                                                   // 3477\n                this.element_.insertBefore(drawerButton, this.content_);                                               // 3478\n            }                                                                                                          // 3479\n            var obfuscator = document.createElement('div');                                                            // 3480\n            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);                                                     // 3481\n            this.element_.appendChild(obfuscator);                                                                     // 3482\n            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));                                // 3483\n            this.obfuscator_ = obfuscator;                                                                             // 3484\n            this.drawer_.addEventListener('keydown', this.keyboardEventHandler_.bind(this));                           // 3485\n            this.drawer_.setAttribute('aria-hidden', 'true');                                                          // 3486\n        }                                                                                                              // 3487\n        // Keep an eye on screen size, and add/remove auxiliary class for styling                                      // 3488\n        // of small screens.                                                                                           // 3489\n        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);                                      // 3490\n        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));                                    // 3491\n        this.screenSizeHandler_();                                                                                     // 3492\n        // Initialize tabs, if any.                                                                                    // 3493\n        if (this.header_ && this.tabBar_) {                                                                            // 3494\n            this.element_.classList.add(this.CssClasses_.HAS_TABS);                                                    // 3495\n            var tabContainer = document.createElement('div');                                                          // 3496\n            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);                                                // 3497\n            this.header_.insertBefore(tabContainer, this.tabBar_);                                                     // 3498\n            this.header_.removeChild(this.tabBar_);                                                                    // 3499\n            var leftButton = document.createElement('div');                                                            // 3500\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);                                                 // 3501\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);                                            // 3502\n            var leftButtonIcon = document.createElement('i');                                                          // 3503\n            leftButtonIcon.classList.add(this.CssClasses_.ICON);                                                       // 3504\n            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;                                                  // 3505\n            leftButton.appendChild(leftButtonIcon);                                                                    // 3506\n            leftButton.addEventListener('click', function () {                                                         // 3507\n                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;                                           // 3508\n            }.bind(this));                                                                                             // 3509\n            var rightButton = document.createElement('div');                                                           // 3510\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);                                                // 3511\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);                                          // 3512\n            var rightButtonIcon = document.createElement('i');                                                         // 3513\n            rightButtonIcon.classList.add(this.CssClasses_.ICON);                                                      // 3514\n            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;                                                // 3515\n            rightButton.appendChild(rightButtonIcon);                                                                  // 3516\n            rightButton.addEventListener('click', function () {                                                        // 3517\n                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;                                           // 3518\n            }.bind(this));                                                                                             // 3519\n            tabContainer.appendChild(leftButton);                                                                      // 3520\n            tabContainer.appendChild(this.tabBar_);                                                                    // 3521\n            tabContainer.appendChild(rightButton);                                                                     // 3522\n            // Add and remove tab buttons depending on scroll position and total                                       // 3523\n            // window size.                                                                                            // 3524\n            var tabUpdateHandler = function () {                                                                       // 3525\n                if (this.tabBar_.scrollLeft > 0) {                                                                     // 3526\n                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);                                              // 3527\n                } else {                                                                                               // 3528\n                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);                                           // 3529\n                }                                                                                                      // 3530\n                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {                   // 3531\n                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);                                             // 3532\n                } else {                                                                                               // 3533\n                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);                                          // 3534\n                }                                                                                                      // 3535\n            }.bind(this);                                                                                              // 3536\n            this.tabBar_.addEventListener('scroll', tabUpdateHandler);                                                 // 3537\n            tabUpdateHandler();                                                                                        // 3538\n            // Update tabs when the window resizes.                                                                    // 3539\n            var windowResizeHandler = function () {                                                                    // 3540\n                // Use timeouts to make sure it doesn't happen too often.                                              // 3541\n                if (this.resizeTimeoutId_) {                                                                           // 3542\n                    clearTimeout(this.resizeTimeoutId_);                                                               // 3543\n                }                                                                                                      // 3544\n                this.resizeTimeoutId_ = setTimeout(function () {                                                       // 3545\n                    tabUpdateHandler();                                                                                // 3546\n                    this.resizeTimeoutId_ = null;                                                                      // 3547\n                }.bind(this), this.Constant_.RESIZE_TIMEOUT);                                                          // 3548\n            }.bind(this);                                                                                              // 3549\n            window.addEventListener('resize', windowResizeHandler);                                                    // 3550\n            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {                                  // 3551\n                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);                                     // 3552\n            }                                                                                                          // 3553\n            // Select element tabs, document panels                                                                    // 3554\n            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);                                      // 3555\n            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);                                 // 3556\n            // Create new tabs for each tab element                                                                    // 3557\n            for (var i = 0; i < tabs.length; i++) {                                                                    // 3558\n                new MaterialLayoutTab(tabs[i], tabs, panels, this);                                                    // 3559\n            }                                                                                                          // 3560\n        }                                                                                                              // 3561\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                     // 3562\n    }                                                                                                                  // 3563\n};                                                                                                                     // 3564\n/**                                                                                                                    // 3565\n   * Constructor for an individual tab.                                                                                // 3566\n   *                                                                                                                   // 3567\n   * @constructor                                                                                                      // 3568\n   * @param {HTMLElement} tab The HTML element for the tab.                                                            // 3569\n   * @param {!Array<HTMLElement>} tabs Array with HTML elements for all tabs.                                          // 3570\n   * @param {!Array<HTMLElement>} panels Array with HTML elements for all panels.                                      // 3571\n   * @param {MaterialLayout} layout The MaterialLayout object that owns the tab.                                       // 3572\n   */                                                                                                                  // 3573\nfunction MaterialLayoutTab(tab, tabs, panels, layout) {                                                                // 3574\n    /**                                                                                                                // 3575\n     * Auxiliary method to programmatically select a tab in the UI.                                                    // 3576\n     */                                                                                                                // 3577\n    function selectTab() {                                                                                             // 3578\n        var href = tab.href.split('#')[1];                                                                             // 3579\n        var panel = layout.content_.querySelector('#' + href);                                                         // 3580\n        layout.resetTabState_(tabs);                                                                                   // 3581\n        layout.resetPanelState_(panels);                                                                               // 3582\n        tab.classList.add(layout.CssClasses_.IS_ACTIVE);                                                               // 3583\n        panel.classList.add(layout.CssClasses_.IS_ACTIVE);                                                             // 3584\n    }                                                                                                                  // 3585\n    if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {                                      // 3586\n        var rippleContainer = document.createElement('span');                                                          // 3587\n        rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);                                            // 3588\n        rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);                                            // 3589\n        var ripple = document.createElement('span');                                                                   // 3590\n        ripple.classList.add(layout.CssClasses_.RIPPLE);                                                               // 3591\n        rippleContainer.appendChild(ripple);                                                                           // 3592\n        tab.appendChild(rippleContainer);                                                                              // 3593\n    }                                                                                                                  // 3594\n    if (!layout.tabBar_.classList.contains(layout.CssClasses_.TAB_MANUAL_SWITCH)) {                                    // 3595\n        tab.addEventListener('click', function (e) {                                                                   // 3596\n            if (tab.getAttribute('href').charAt(0) === '#') {                                                          // 3597\n                e.preventDefault();                                                                                    // 3598\n                selectTab();                                                                                           // 3599\n            }                                                                                                          // 3600\n        });                                                                                                            // 3601\n    }                                                                                                                  // 3602\n    tab.show = selectTab;                                                                                              // 3603\n}                                                                                                                      // 3604\nwindow['MaterialLayoutTab'] = MaterialLayoutTab;                                                                       // 3605\n// The component registers itself. It can assume componentHandler is available                                         // 3606\n// in the global scope.                                                                                                // 3607\ncomponentHandler.register({                                                                                            // 3608\n    constructor: MaterialLayout,                                                                                       // 3609\n    classAsString: 'MaterialLayout',                                                                                   // 3610\n    cssClass: 'mdl-js-layout'                                                                                          // 3611\n});                                                                                                                    // 3612\n/**                                                                                                                    // 3613\n * @license                                                                                                            // 3614\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 3615\n *                                                                                                                     // 3616\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3617\n * you may not use this file except in compliance with the License.                                                    // 3618\n * You may obtain a copy of the License at                                                                             // 3619\n *                                                                                                                     // 3620\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 3621\n *                                                                                                                     // 3622\n * Unless required by applicable law or agreed to in writing, software                                                 // 3623\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3624\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3625\n * See the License for the specific language governing permissions and                                                 // 3626\n * limitations under the License.                                                                                      // 3627\n */                                                                                                                    // 3628\n/**                                                                                                                    // 3629\n   * Class constructor for Data Table Card MDL component.                                                              // 3630\n   * Implements MDL component design pattern defined at:                                                               // 3631\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3632\n   *                                                                                                                   // 3633\n   * @constructor                                                                                                      // 3634\n   * @param {Element} element The element that will be upgraded.                                                       // 3635\n   */                                                                                                                  // 3636\nvar MaterialDataTable = function MaterialDataTable(element) {                                                          // 3637\n    this.element_ = element;                                                                                           // 3638\n    // Initialize instance.                                                                                            // 3639\n    this.init();                                                                                                       // 3640\n};                                                                                                                     // 3641\nwindow['MaterialDataTable'] = MaterialDataTable;                                                                       // 3642\n/**                                                                                                                    // 3643\n   * Store constants in one place so they can be updated easily.                                                       // 3644\n   *                                                                                                                   // 3645\n   * @enum {string | number}                                                                                           // 3646\n   * @private                                                                                                          // 3647\n   */                                                                                                                  // 3648\nMaterialDataTable.prototype.Constant_ = {};                                                                            // 3649\n/**                                                                                                                    // 3650\n   * Store strings for class names defined by this component that are used in                                          // 3651\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3652\n   * decide to modify at a later date.                                                                                 // 3653\n   *                                                                                                                   // 3654\n   * @enum {string}                                                                                                    // 3655\n   * @private                                                                                                          // 3656\n   */                                                                                                                  // 3657\nMaterialDataTable.prototype.CssClasses_ = {                                                                            // 3658\n    DATA_TABLE: 'mdl-data-table',                                                                                      // 3659\n    SELECTABLE: 'mdl-data-table--selectable',                                                                          // 3660\n    SELECT_ELEMENT: 'mdl-data-table__select',                                                                          // 3661\n    IS_SELECTED: 'is-selected',                                                                                        // 3662\n    IS_UPGRADED: 'is-upgraded'                                                                                         // 3663\n};                                                                                                                     // 3664\n/**                                                                                                                    // 3665\n   * Generates and returns a function that toggles the selection state of a                                            // 3666\n   * single row (or multiple rows).                                                                                    // 3667\n   *                                                                                                                   // 3668\n   * @param {Element} checkbox Checkbox that toggles the selection state.                                              // 3669\n   * @param {Element} row Row to toggle when checkbox changes.                                                         // 3670\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.                                 // 3671\n   * @private                                                                                                          // 3672\n   */                                                                                                                  // 3673\nMaterialDataTable.prototype.selectRow_ = function (checkbox, row, opt_rows) {                                          // 3674\n    if (row) {                                                                                                         // 3675\n        return function () {                                                                                           // 3676\n            if (checkbox.checked) {                                                                                    // 3677\n                row.classList.add(this.CssClasses_.IS_SELECTED);                                                       // 3678\n            } else {                                                                                                   // 3679\n                row.classList.remove(this.CssClasses_.IS_SELECTED);                                                    // 3680\n            }                                                                                                          // 3681\n        }.bind(this);                                                                                                  // 3682\n    }                                                                                                                  // 3683\n    if (opt_rows) {                                                                                                    // 3684\n        return function () {                                                                                           // 3685\n            var i;                                                                                                     // 3686\n            var el;                                                                                                    // 3687\n            if (checkbox.checked) {                                                                                    // 3688\n                for (i = 0; i < opt_rows.length; i++) {                                                                // 3689\n                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');                               // 3690\n                    el['MaterialCheckbox'].check();                                                                    // 3691\n                    opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);                                           // 3692\n                }                                                                                                      // 3693\n            } else {                                                                                                   // 3694\n                for (i = 0; i < opt_rows.length; i++) {                                                                // 3695\n                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');                               // 3696\n                    el['MaterialCheckbox'].uncheck();                                                                  // 3697\n                    opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);                                        // 3698\n                }                                                                                                      // 3699\n            }                                                                                                          // 3700\n        }.bind(this);                                                                                                  // 3701\n    }                                                                                                                  // 3702\n};                                                                                                                     // 3703\n/**                                                                                                                    // 3704\n   * Creates a checkbox for a single or or multiple rows and hooks up the                                              // 3705\n   * event handling.                                                                                                   // 3706\n   *                                                                                                                   // 3707\n   * @param {Element} row Row to toggle when checkbox changes.                                                         // 3708\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.                                 // 3709\n   * @private                                                                                                          // 3710\n   */                                                                                                                  // 3711\nMaterialDataTable.prototype.createCheckbox_ = function (row, opt_rows) {                                               // 3712\n    var label = document.createElement('label');                                                                       // 3713\n    var labelClasses = [                                                                                               // 3714\n        'mdl-checkbox',                                                                                                // 3715\n        'mdl-js-checkbox',                                                                                             // 3716\n        'mdl-js-ripple-effect',                                                                                        // 3717\n        this.CssClasses_.SELECT_ELEMENT                                                                                // 3718\n    ];                                                                                                                 // 3719\n    label.className = labelClasses.join(' ');                                                                          // 3720\n    var checkbox = document.createElement('input');                                                                    // 3721\n    checkbox.type = 'checkbox';                                                                                        // 3722\n    checkbox.classList.add('mdl-checkbox__input');                                                                     // 3723\n    if (row) {                                                                                                         // 3724\n        checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);                                       // 3725\n        checkbox.addEventListener('change', this.selectRow_(checkbox, row));                                           // 3726\n    } else if (opt_rows) {                                                                                             // 3727\n        checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));                                // 3728\n    }                                                                                                                  // 3729\n    label.appendChild(checkbox);                                                                                       // 3730\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');                                                        // 3731\n    return label;                                                                                                      // 3732\n};                                                                                                                     // 3733\n/**                                                                                                                    // 3734\n   * Initialize element.                                                                                               // 3735\n   */                                                                                                                  // 3736\nMaterialDataTable.prototype.init = function () {                                                                       // 3737\n    if (this.element_) {                                                                                               // 3738\n        var firstHeader = this.element_.querySelector('th');                                                           // 3739\n        var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));                         // 3740\n        var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));                         // 3741\n        var rows = bodyRows.concat(footRows);                                                                          // 3742\n        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {                                           // 3743\n            var th = document.createElement('th');                                                                     // 3744\n            var headerCheckbox = this.createCheckbox_(null, rows);                                                     // 3745\n            th.appendChild(headerCheckbox);                                                                            // 3746\n            firstHeader.parentElement.insertBefore(th, firstHeader);                                                   // 3747\n            for (var i = 0; i < rows.length; i++) {                                                                    // 3748\n                var firstCell = rows[i].querySelector('td');                                                           // 3749\n                if (firstCell) {                                                                                       // 3750\n                    var td = document.createElement('td');                                                             // 3751\n                    if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {                                       // 3752\n                        var rowCheckbox = this.createCheckbox_(rows[i]);                                               // 3753\n                        td.appendChild(rowCheckbox);                                                                   // 3754\n                    }                                                                                                  // 3755\n                    rows[i].insertBefore(td, firstCell);                                                               // 3756\n                }                                                                                                      // 3757\n            }                                                                                                          // 3758\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);                                                 // 3759\n        }                                                                                                              // 3760\n    }                                                                                                                  // 3761\n};                                                                                                                     // 3762\n// The component registers itself. It can assume componentHandler is available                                         // 3763\n// in the global scope.                                                                                                // 3764\ncomponentHandler.register({                                                                                            // 3765\n    constructor: MaterialDataTable,                                                                                    // 3766\n    classAsString: 'MaterialDataTable',                                                                                // 3767\n    cssClass: 'mdl-js-data-table'                                                                                      // 3768\n});                                                                                                                    // 3769\n/**                                                                                                                    // 3770\n * @license                                                                                                            // 3771\n * Copyright 2015 Google Inc. All Rights Reserved.                                                                     // 3772\n *                                                                                                                     // 3773\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3774\n * you may not use this file except in compliance with the License.                                                    // 3775\n * You may obtain a copy of the License at                                                                             // 3776\n *                                                                                                                     // 3777\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                     // 3778\n *                                                                                                                     // 3779\n * Unless required by applicable law or agreed to in writing, software                                                 // 3780\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3781\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3782\n * See the License for the specific language governing permissions and                                                 // 3783\n * limitations under the License.                                                                                      // 3784\n */                                                                                                                    // 3785\n/**                                                                                                                    // 3786\n   * Class constructor for Ripple MDL component.                                                                       // 3787\n   * Implements MDL component design pattern defined at:                                                               // 3788\n   * https://github.com/jasonmayes/mdl-component-design-pattern                                                        // 3789\n   *                                                                                                                   // 3790\n   * @constructor                                                                                                      // 3791\n   * @param {HTMLElement} element The element that will be upgraded.                                                   // 3792\n   */                                                                                                                  // 3793\nvar MaterialRipple = function MaterialRipple(element) {                                                                // 3794\n    this.element_ = element;                                                                                           // 3795\n    // Initialize instance.                                                                                            // 3796\n    this.init();                                                                                                       // 3797\n};                                                                                                                     // 3798\nwindow['MaterialRipple'] = MaterialRipple;                                                                             // 3799\n/**                                                                                                                    // 3800\n   * Store constants in one place so they can be updated easily.                                                       // 3801\n   *                                                                                                                   // 3802\n   * @enum {string | number}                                                                                           // 3803\n   * @private                                                                                                          // 3804\n   */                                                                                                                  // 3805\nMaterialRipple.prototype.Constant_ = {                                                                                 // 3806\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',                                                                            // 3807\n    INITIAL_SIZE: '1px',                                                                                               // 3808\n    INITIAL_OPACITY: '0.4',                                                                                            // 3809\n    FINAL_OPACITY: '0',                                                                                                // 3810\n    FINAL_SCALE: ''                                                                                                    // 3811\n};                                                                                                                     // 3812\n/**                                                                                                                    // 3813\n   * Store strings for class names defined by this component that are used in                                          // 3814\n   * JavaScript. This allows us to simply change it in one place should we                                             // 3815\n   * decide to modify at a later date.                                                                                 // 3816\n   *                                                                                                                   // 3817\n   * @enum {string}                                                                                                    // 3818\n   * @private                                                                                                          // 3819\n   */                                                                                                                  // 3820\nMaterialRipple.prototype.CssClasses_ = {                                                                               // 3821\n    RIPPLE_CENTER: 'mdl-ripple--center',                                                                               // 3822\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',                                                // 3823\n    RIPPLE: 'mdl-ripple',                                                                                              // 3824\n    IS_ANIMATING: 'is-animating',                                                                                      // 3825\n    IS_VISIBLE: 'is-visible'                                                                                           // 3826\n};                                                                                                                     // 3827\n/**                                                                                                                    // 3828\n   * Handle mouse / finger down on element.                                                                            // 3829\n   *                                                                                                                   // 3830\n   * @param {Event} event The event that fired.                                                                        // 3831\n   * @private                                                                                                          // 3832\n   */                                                                                                                  // 3833\nMaterialRipple.prototype.downHandler_ = function (event) {                                                             // 3834\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {                                       // 3835\n        var rect = this.element_.getBoundingClientRect();                                                              // 3836\n        this.boundHeight = rect.height;                                                                                // 3837\n        this.boundWidth = rect.width;                                                                                  // 3838\n        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;                     // 3839\n        this.rippleElement_.style.width = this.rippleSize_ + 'px';                                                     // 3840\n        this.rippleElement_.style.height = this.rippleSize_ + 'px';                                                    // 3841\n    }                                                                                                                  // 3842\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);                                                    // 3843\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {                                                       // 3844\n        this.ignoringMouseDown_ = false;                                                                               // 3845\n    } else {                                                                                                           // 3846\n        if (event.type === 'touchstart') {                                                                             // 3847\n            this.ignoringMouseDown_ = true;                                                                            // 3848\n        }                                                                                                              // 3849\n        var frameCount = this.getFrameCount();                                                                         // 3850\n        if (frameCount > 0) {                                                                                          // 3851\n            return;                                                                                                    // 3852\n        }                                                                                                              // 3853\n        this.setFrameCount(1);                                                                                         // 3854\n        var bound = event.currentTarget.getBoundingClientRect();                                                       // 3855\n        var x;                                                                                                         // 3856\n        var y;                                                                                                         // 3857\n        // Check if we are handling a keyboard click.                                                                  // 3858\n        if (event.clientX === 0 && event.clientY === 0) {                                                              // 3859\n            x = Math.round(bound.width / 2);                                                                           // 3860\n            y = Math.round(bound.height / 2);                                                                          // 3861\n        } else {                                                                                                       // 3862\n            var clientX = event.clientX !== undefined ? event.clientX : event.touches[0].clientX;                      // 3863\n            var clientY = event.clientY !== undefined ? event.clientY : event.touches[0].clientY;                      // 3864\n            x = Math.round(clientX - bound.left);                                                                      // 3865\n            y = Math.round(clientY - bound.top);                                                                       // 3866\n        }                                                                                                              // 3867\n        this.setRippleXY(x, y);                                                                                        // 3868\n        this.setRippleStyles(true);                                                                                    // 3869\n        window.requestAnimationFrame(this.animFrameHandler.bind(this));                                                // 3870\n    }                                                                                                                  // 3871\n};                                                                                                                     // 3872\n/**                                                                                                                    // 3873\n   * Handle mouse / finger up on element.                                                                              // 3874\n   *                                                                                                                   // 3875\n   * @param {Event} event The event that fired.                                                                        // 3876\n   * @private                                                                                                          // 3877\n   */                                                                                                                  // 3878\nMaterialRipple.prototype.upHandler_ = function (event) {                                                               // 3879\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.                                            // 3880\n    if (event && event.detail !== 2) {                                                                                 // 3881\n        // Allow a repaint to occur before removing this class, so the animation                                       // 3882\n        // shows for tap events, which seem to trigger a mouseup too soon after                                        // 3883\n        // mousedown.                                                                                                  // 3884\n        window.setTimeout(function () {                                                                                // 3885\n            this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);                                         // 3886\n        }.bind(this), 0);                                                                                              // 3887\n    }                                                                                                                  // 3888\n};                                                                                                                     // 3889\n/**                                                                                                                    // 3890\n   * Initialize element.                                                                                               // 3891\n   */                                                                                                                  // 3892\nMaterialRipple.prototype.init = function () {                                                                          // 3893\n    if (this.element_) {                                                                                               // 3894\n        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);                            // 3895\n        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {                         // 3896\n            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);                          // 3897\n            this.frameCount_ = 0;                                                                                      // 3898\n            this.rippleSize_ = 0;                                                                                      // 3899\n            this.x_ = 0;                                                                                               // 3900\n            this.y_ = 0;                                                                                               // 3901\n            // Touch start produces a compat mouse down event, which would cause a                                     // 3902\n            // second ripples. To avoid that, we use this property to ignore the first                                 // 3903\n            // mouse down after a touch start.                                                                         // 3904\n            this.ignoringMouseDown_ = false;                                                                           // 3905\n            this.boundDownHandler = this.downHandler_.bind(this);                                                      // 3906\n            this.element_.addEventListener('mousedown', this.boundDownHandler);                                        // 3907\n            this.element_.addEventListener('touchstart', this.boundDownHandler);                                       // 3908\n            this.boundUpHandler = this.upHandler_.bind(this);                                                          // 3909\n            this.element_.addEventListener('mouseup', this.boundUpHandler);                                            // 3910\n            this.element_.addEventListener('mouseleave', this.boundUpHandler);                                         // 3911\n            this.element_.addEventListener('touchend', this.boundUpHandler);                                           // 3912\n            this.element_.addEventListener('blur', this.boundUpHandler);                                               // 3913\n            /**                                                                                                        // 3914\n         * Getter for frameCount_.                                                                                     // 3915\n         * @return {number} the frame count.                                                                           // 3916\n         */                                                                                                            // 3917\n            this.getFrameCount = function () {                                                                         // 3918\n                return this.frameCount_;                                                                               // 3919\n            };                                                                                                         // 3920\n            /**                                                                                                        // 3921\n         * Setter for frameCount_.                                                                                     // 3922\n         * @param {number} fC the frame count.                                                                         // 3923\n         */                                                                                                            // 3924\n            this.setFrameCount = function (fC) {                                                                       // 3925\n                this.frameCount_ = fC;                                                                                 // 3926\n            };                                                                                                         // 3927\n            /**                                                                                                        // 3928\n         * Getter for rippleElement_.                                                                                  // 3929\n         * @return {Element} the ripple element.                                                                       // 3930\n         */                                                                                                            // 3931\n            this.getRippleElement = function () {                                                                      // 3932\n                return this.rippleElement_;                                                                            // 3933\n            };                                                                                                         // 3934\n            /**                                                                                                        // 3935\n         * Sets the ripple X and Y coordinates.                                                                        // 3936\n         * @param  {number} newX the new X coordinate                                                                  // 3937\n         * @param  {number} newY the new Y coordinate                                                                  // 3938\n         */                                                                                                            // 3939\n            this.setRippleXY = function (newX, newY) {                                                                 // 3940\n                this.x_ = newX;                                                                                        // 3941\n                this.y_ = newY;                                                                                        // 3942\n            };                                                                                                         // 3943\n            /**                                                                                                        // 3944\n         * Sets the ripple styles.                                                                                     // 3945\n         * @param  {boolean} start whether or not this is the start frame.                                             // 3946\n         */                                                                                                            // 3947\n            this.setRippleStyles = function (start) {                                                                  // 3948\n                if (this.rippleElement_ !== null) {                                                                    // 3949\n                    var transformString;                                                                               // 3950\n                    var scale;                                                                                         // 3951\n                    var size;                                                                                          // 3952\n                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';                                    // 3953\n                    if (start) {                                                                                       // 3954\n                        scale = this.Constant_.INITIAL_SCALE;                                                          // 3955\n                        size = this.Constant_.INITIAL_SIZE;                                                            // 3956\n                    } else {                                                                                           // 3957\n                        scale = this.Constant_.FINAL_SCALE;                                                            // 3958\n                        size = this.rippleSize_ + 'px';                                                                // 3959\n                        if (recentering) {                                                                             // 3960\n                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';       // 3961\n                        }                                                                                              // 3962\n                    }                                                                                                  // 3963\n                    transformString = 'translate(-50%, -50%) ' + offset + scale;                                       // 3964\n                    this.rippleElement_.style.webkitTransform = transformString;                                       // 3965\n                    this.rippleElement_.style.msTransform = transformString;                                           // 3966\n                    this.rippleElement_.style.transform = transformString;                                             // 3967\n                    if (start) {                                                                                       // 3968\n                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);                           // 3969\n                    } else {                                                                                           // 3970\n                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);                              // 3971\n                    }                                                                                                  // 3972\n                }                                                                                                      // 3973\n            };                                                                                                         // 3974\n            /**                                                                                                        // 3975\n         * Handles an animation frame.                                                                                 // 3976\n         */                                                                                                            // 3977\n            this.animFrameHandler = function () {                                                                      // 3978\n                if (this.frameCount_-- > 0) {                                                                          // 3979\n                    window.requestAnimationFrame(this.animFrameHandler.bind(this));                                    // 3980\n                } else {                                                                                               // 3981\n                    this.setRippleStyles(false);                                                                       // 3982\n                }                                                                                                      // 3983\n            };                                                                                                         // 3984\n        }                                                                                                              // 3985\n    }                                                                                                                  // 3986\n};                                                                                                                     // 3987\n// The component registers itself. It can assume componentHandler is available                                         // 3988\n// in the global scope.                                                                                                // 3989\ncomponentHandler.register({                                                                                            // 3990\n    constructor: MaterialRipple,                                                                                       // 3991\n    classAsString: 'MaterialRipple',                                                                                   // 3992\n    cssClass: 'mdl-js-ripple-effect',                                                                                  // 3993\n    widget: false                                                                                                      // 3994\n});                                                                                                                    // 3995\n}());                                                                                                                  // 3996\n                                                                                                                       // 3997\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/lib/attach-componentHandler.generated.js                                                                     //\n// This file is in bare mode and is not in its own closure.                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMDl.componentHandler = componentHandler;                                                                               // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nrequire(\"./client/template/template.Contact.js\");\nrequire(\"./client/template/template.Download.js\");\nrequire(\"./client/template/template.Home.js\");\nrequire(\"./client/template/template.Vpn.js\");\nrequire(\"./client/template/template.exo.js\");\nrequire(\"./client/template/template.layout.js\");\nrequire(\"./client/template/template.tuto.js\");\nrequire(\"./lib/collections/UserCol.js\");\nrequire(\"./lib/collections/comments.js\");\nrequire(\"./lib/collections/notifications.js\");\nrequire(\"./lib/collections/posts.js\");\nrequire(\"./lib/permissions.js\");\nrequire(\"./lib/router.js\");\nrequire(\"./client/helpers/config.js\");\nrequire(\"./client/helpers/errors.js\");\nrequire(\"./client/helpers/handlebars.js\");\nrequire(\"./client/template/homeHelper.js\");\nrequire(\"./client/template/layoutHelper.js\");\nrequire(\"./client/template/sideBarHelper.js\");\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["client/template/homeHelper.js","client/template/layoutHelper.js","client/template/sideBarHelper.js","client/helpers/errors.js","client/helpers/handlebars.js","client/main.js","imports/ui/body.js","imports/api/tasks.js","lib/collections/UserCol.js","lib/collections/comments.js","lib/collections/notifications.js","lib/collections/posts.js","lib/permissions.js","lib/router.js"],"names":["template","home","onRendered","$","document","ready","collapsible","sideNav","menuWidth","edge","draggable","onClick","close","layout","closeOnClick","Template","nav","rendered","dropdown","inDuration","outDuration","constrain_width","hover","gutter","belowOrigin","getJSON","data","console","log","tab","push","ip","UserID","insert","vst","alert","find","count","Errors","Mongo","Collection","throwError","message","registerHelper","n","thing","module","watch","require","v","Tasks","body","helpers","tasks","sort","createdAt","events","event","preventDefault","target","text","value","Date","export","éUserID","Comments","Meteor","methods","commentInsert","commentAttributes","check","userId","String","postId","user","post","Posts","findOne","Error","comment","_","extend","_id","author","username","submitted","update","$inc","commentsCount","createCommentNotification","Notifications","allow","doc","fieldNames","ownsDocument","length","commentId","commenterName","read","remove","deny","without","modifier","errors","validatePost","$set","title","url","postInsert","postAttributes","postWithSameLink","postExists","upvoters","votes","upvote","affected","$ne","$addToSet","Router","configure","layoutTemplate","route","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,SAASC,IAAT,CAAcC,UAAd,CACIC,EAAEC,QAAF,EAAYC,KAAZ,CAAkB,YAAU;AACxBF,MAAE,cAAF,EAAkBG,WAAlB;AAGAH,MAAE,kBAAF,EAAsBI,OAAtB,CAA8B;AAC1BC,mBAAW,GADe;AACV;AAChBC,cAAM,SAFoB;AAG1BC,mBAAW,IAHe;AAI1BC,iBAAQC;AAJkB,KAA9B,EAJwB,CAStB;AACL,CAVD,CADJ,0H;;;;;;;;;;;ACAAZ,SAASa,MAAT,CAAgBX,UAAhB,CACIC,EAAE,kBAAF,EAAsBI,OAAtB,CAA8B;AAC1BC,eAAW,GADe;AACV;AAChBC,UAAM,OAFoB;AAEX;AACfK,kBAAc,IAHY;AAGN;AACpBJ,eAAW,IAJe,CAIT;;AAJS,CAA9B,CADJ,yH;;;;;;;;;;;ACCAK,SAASF,MAAT,CAAgBX,UAAhB;AAA2B,aAASc,GAAT,GAAe;AACtCb,UAAE,kBAAF,EAAsBI,OAAtB,CAA8B;AAC1BO,0BAAc;AADY,SAA9B,EADsC,CAGlC;AACP;;AAJD,WAAoCE,GAApC;AAAA;;AAMAD,SAASF,MAAT,CAAgBI,QAAhB,GAA2B,YAAW;AAClC,SAAKd,CAAL,GAASe,QAAT,CAAkB;AACdC,oBAAY,GADE;AAEdC,qBAAa,GAFC;AAGdC,yBAAiB,KAHH;AAGU;AACxBC,eAAO,IAJO;AAID;AACbC,gBAAQ,CALM;AAKH;AACXC,qBAAa,KANC,CAMK;;AANL,KAAlB;AAQArB,MAAEC,QAAF,EAAYC,KAAZ,CAAkB,YAAY;AAC1BF,UAAEsB,OAAF,CAAU,+BAAV,EAA2C,UAAUC,IAAV,EAAgB;AACvDC,oBAAQC,GAAR,CAAYF,IAAZ;AACAG,kBAAM,EAAN;AACAA,gBAAIC,IAAJ,CAASJ,KAAKK,EAAd;AACAC,mBAAOC,MAAP,CAAcJ,GAAd;AAEH,SAND;AAQH,KATD;;AAUA,aAASK,GAAT,GAAc;AACVC,cAAOH,OAAOI,IAAP,GAAcC,KAAd,EAAP;AAEH;AAEJ,CAxBD,2H;;;;;;;;;;;;;;;;;;;;;;ACPA;AACAC,SAAS,IAAIC,MAAMC,UAAV,CAAqB,IAArB,CAAT;;AAEAC,aAAa,UAASC,OAAT,EAAkB;AAC7BJ,SAAOL,MAAP,CAAc;AAACS,aAASA;AAAV,GAAd;AACD,CAFD,0H;;;;;;;;;;;ACHA3B,SAAS4B,cAAT,CAAwB,WAAxB,EAAqC,UAASC,CAAT,EAAYC,KAAZ,EAAmB;AACtD;AACA,MAAID,MAAM,CAAV,EAAa;AACX,WAAO,OAAOC,KAAd;AACD,GAFD,MAEO;AACL,WAAOD,IAAI,GAAJ,GAAUC,KAAV,GAAkB,GAAzB;AACD;AACF,CAPD,0H;;;;;;;;;;;ACAAC,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,8E;;;;;;;;;;;;;;;;;;;;;;;ACAA,IAAIjC,iBAAJ;AAAa+B,OAAOC,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACjC,YAAD,YAAUkC,CAAV,EAAY;AAAClC,mBAASkC,CAAT;AAAW;AAAxB,CAA1C,EAAoE,CAApE;AAAuE,IAAIC,cAAJ;AAAUJ,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACE,SAAD,YAAOD,CAAP,EAAS;AAACC,gBAAMD,CAAN;AAAQ;AAAlB,CAAxC,EAA4D,CAA5D;AAA+DH,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb;AAM7JjC,SAASoC,IAAT,CAAcC,OAAd,CAAsB;AAClBC,SADkB,cACV;AACJ,eAAOH,MAAMd,IAAN,CAAW,EAAX,EAAe;AAAEkB,kBAAM;AAAEC,2BAAW,CAAC;AAAd;AAAR,SAAf,CAAP;AACH;AAHiB,CAAtB;AAOAxC,SAASoC,IAAT,CAAcK,MAAd,CAAqB;AACjB,sBADiB,YACEC,KADF,EACS;AACtB;AACAA,cAAMC,cAAN,GAFsB,CAItB;;AACA,YAAMC,SAASF,MAAME,MAArB;AACA,YAAMC,OAAOD,OAAOC,IAAP,CAAYC,KAAzB,CANsB,CAQtB;;AACAX,cAAMjB,MAAN,CAAa;AACT2B,sBADS;AAETL,uBAAW,IAAIO,IAAJ,EAFF,CAEc;;AAFd,SAAb,EATsB,CActB;;AACAH,eAAOC,IAAP,CAAYC,KAAZ,GAAoB,EAApB;AACH;AAjBgB,CAArB,2H;;;;;;;;;;;ACbAf,OAAOiB,MAAP,CAAc;AAACb,SAAM;AAAA,WAAIA,KAAJ;AAAA;AAAP,CAAd;AAAiC,IAAIX,cAAJ;AAAUO,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACT,OAAD,YAAOU,CAAP,EAAS;AAACV,YAAMU,CAAN;AAAQ;AAAlB,CAArC,EAAyD,CAAzD;AAEpC,IAAMC,QAAQ,IAAIX,MAAMC,UAAV,CAAqB,OAArB,CAAd,kF;;;;;;;;;;;ACFPwB,UAAU,IAAIzB,MAAMC,UAAV,CAAqB,QAArB,CAAV,mF;;;;;;;;;;;ACAAyB,WAAW,IAAI1B,MAAMC,UAAV,CAAqB,UAArB,CAAX;AAEA0B,OAAOC,OAAP,CAAe;AACbC,iBAAe,UAASC,iBAAT,EAA4B;AACzCC,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAMD,iBAAN,EAAyB;AACvBI,cAAQD,MADe;AAEvBrB,YAAMqB;AAFiB,KAAzB;AAKA,QAAIE,OAAOR,OAAOQ,IAAP,EAAX;AACA,QAAIC,OAAOC,MAAMC,OAAN,CAAcR,kBAAkBI,MAAhC,CAAX;AAEA,QAAI,CAACE,IAAL,EACE,MAAM,IAAIT,OAAOY,KAAX,CAAiB,iBAAjB,EAAoC,4BAApC,CAAN;AAEFC,cAAUC,EAAEC,MAAF,CAASZ,iBAAT,EAA4B;AACpCE,cAAQG,KAAKQ,GADuB;AAEpCC,cAAQT,KAAKU,QAFuB;AAGpCC,iBAAW,IAAIvB,IAAJ;AAHyB,KAA5B,CAAV,CAbyC,CAmBzC;;AACAc,UAAMU,MAAN,CAAaP,QAAQN,MAArB,EAA6B;AAACc,YAAM;AAACC,uBAAe;AAAhB;AAAP,KAA7B,EApByC,CAsBzC;;AACAT,YAAQG,GAAR,GAAcjB,SAAShC,MAAT,CAAgB8C,OAAhB,CAAd,CAvByC,CAyBzC;;AACAU,8BAA0BV,OAA1B;AAEA,WAAOA,QAAQG,GAAf;AACD;AA9BY,CAAf,0H;;;;;;;;;;;ACFAQ,gBAAgB,IAAInD,MAAMC,UAAV,CAAqB,eAArB,CAAhB;AAEAkD,cAAcC,KAAd,CAAoB;AAClBL,UAAQ,UAASf,MAAT,EAAiBqB,GAAjB,EAAsBC,UAAtB,EAAkC;AACxC,WAAOC,aAAavB,MAAb,EAAqBqB,GAArB,KACLC,WAAWE,MAAX,KAAsB,CADjB,IACsBF,WAAW,CAAX,MAAkB,MAD/C;AAED;AAJiB,CAApB;;AAOAJ,4BAA4B,UAASV,OAAT,EAAkB;AAC5C,MAAIJ,OAAOC,MAAMC,OAAN,CAAcE,QAAQN,MAAtB,CAAX;;AACA,MAAIM,QAAQR,MAAR,KAAmBI,KAAKJ,MAA5B,EAAoC;AAClCmB,kBAAczD,MAAd,CAAqB;AACnBsC,cAAQI,KAAKJ,MADM;AAEnBE,cAAQE,KAAKO,GAFM;AAGnBc,iBAAWjB,QAAQG,GAHA;AAInBe,qBAAelB,QAAQI,MAJJ;AAKnBe,YAAM;AALa,KAArB;AAOD;AACF,CAXD,2H;;;;;;;;;;;ACTAtB,QAAQ,IAAIrC,MAAMC,UAAV,CAAqB,OAArB,CAAR;AAEAoC,MAAMe,KAAN,CAAY;AACVL,UAAQ,UAASf,MAAT,EAAiBI,IAAjB,EAAuB;AAAE,WAAOmB,aAAavB,MAAb,EAAqBI,IAArB,CAAP;AAAoC,GAD3D;AAEVwB,UAAQ,UAAS5B,MAAT,EAAiBI,IAAjB,EAAuB;AAAE,WAAOmB,aAAavB,MAAb,EAAqBI,IAArB,CAAP;AAAoC;AAF3D,CAAZ;AAKAC,MAAMwB,IAAN,CAAW;AACTd,UAAQ,UAASf,MAAT,EAAiBI,IAAjB,EAAuBkB,UAAvB,EAAmC;AACzC;AACA,WAAQb,EAAEqB,OAAF,CAAUR,UAAV,EAAsB,KAAtB,EAA6B,OAA7B,EAAsCE,MAAtC,GAA+C,CAAvD;AACD;AAJQ,CAAX;AAOAnB,MAAMwB,IAAN,CAAW;AACTd,UAAQ,UAASf,MAAT,EAAiBI,IAAjB,EAAuBkB,UAAvB,EAAmCS,QAAnC,EAA6C;AACnD,QAAIC,SAASC,aAAaF,SAASG,IAAtB,CAAb;AACA,WAAOF,OAAOG,KAAP,IAAgBH,OAAOI,GAA9B;AACD;AAJQ,CAAX;;AAOAH,eAAe,UAAU7B,IAAV,EAAgB;AAC7B,MAAI4B,SAAS,EAAb;AAEA,MAAI,CAAC5B,KAAK+B,KAAV,EACEH,OAAOG,KAAP,GAAe,2BAAf;AAEF,MAAI,CAAC/B,KAAKgC,GAAV,EACEJ,OAAOI,GAAP,GAAc,sBAAd;AAEF,SAAOJ,MAAP;AACD,CAVD;;AAYArC,OAAOC,OAAP,CAAe;AACbyC,cAAY,UAASC,cAAT,EAAyB;AACnCvC,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAMuC,cAAN,EAAsB;AACpBH,aAAOlC,MADa;AAEpBmC,WAAKnC;AAFe,KAAtB;AAKA,QAAI+B,SAASC,aAAaK,cAAb,CAAb;AACA,QAAIN,OAAOG,KAAP,IAAgBH,OAAOI,GAA3B,EACE,MAAM,IAAIzC,OAAOY,KAAX,CAAiB,cAAjB,EAAiC,4CAAjC,CAAN;AAEF,QAAIgC,mBAAmBlC,MAAMC,OAAN,CAAc;AAAC8B,WAAKE,eAAeF;AAArB,KAAd,CAAvB;;AACA,QAAIG,gBAAJ,EAAsB;AACpB,aAAO;AACLC,oBAAY,IADP;AAEL7B,aAAK4B,iBAAiB5B;AAFjB,OAAP;AAID;;AAED,QAAIR,OAAOR,OAAOQ,IAAP,EAAX;;AACA,QAAIC,OAAOK,EAAEC,MAAF,CAAS4B,cAAT,EAAyB;AAClCtC,cAAQG,KAAKQ,GADqB;AAElCC,cAAQT,KAAKU,QAFqB;AAGlCC,iBAAW,IAAIvB,IAAJ,EAHuB;AAIlC0B,qBAAe,CAJmB;AAKlCwB,gBAAU,EALwB;AAMlCC,aAAO;AAN2B,KAAzB,CAAX;;AASA,QAAIxC,SAASG,MAAM3C,MAAN,CAAa0C,IAAb,CAAb;AAEA,WAAO;AACLO,WAAKT;AADA,KAAP;AAGD,GAnCY;AAqCbyC,UAAQ,UAASzC,MAAT,EAAiB;AACvBH,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAMG,MAAN,EAAcD,MAAd;AAEA,QAAI2C,WAAWvC,MAAMU,MAAN,CAAa;AAC1BJ,WAAKT,MADqB;AAE1BuC,gBAAU;AAACI,aAAK,KAAK7C;AAAX;AAFgB,KAAb,EAGZ;AACD8C,iBAAW;AAACL,kBAAU,KAAKzC;AAAhB,OADV;AAEDgB,YAAM;AAAC0B,eAAO;AAAR;AAFL,KAHY,CAAf;AAQA,QAAI,CAAEE,QAAN,EACE,MAAM,IAAIjD,OAAOY,KAAX,CAAiB,SAAjB,EAA4B,sCAA5B,CAAN;AACH;AAnDY,CAAf,2H;;;;;;;;;;;ACjCA;AACAgB,eAAe,UAASvB,MAAT,EAAiBqB,GAAjB,EAAsB;AACnC,SAAOA,OAAOA,IAAIrB,MAAJ,KAAeA,MAA7B;AACD,CAFD,0H;;;;;;;;;;;ACDA,IAAIL,eAAJ;AAAWpB,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACkB,UAAD,YAAQjB,CAAR,EAAU;AAACiB,iBAAOjB,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAEXqE,OAAOC,SAAP,CAAiB;AACbC,oBAAgB;AADH,CAAjB;AAIAF,OAAOG,KAAP,CAAa,GAAb,EAAkB;AAACC,UAAO;AAAR,CAAlB;AACAJ,OAAOG,KAAP,CAAa,OAAb,EAAsB;AAACC,UAAO;AAAR,CAAtB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAJ,OAAOG,KAAP,CAAa,KAAb,EAAoB;AAACC,UAAO;AAAR,CAApB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,MAAb,EAAqB;AAACC,UAAO;AAAR,CAArB;AACAJ,OAAOG,KAAP,CAAa,OAAb,EAAsB;AAACC,UAAO;AAAR,CAAtB,E,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/app.js","sourcesContent":["template.home.onRendered(\n    $(document).ready(function(){\n        $('.collapsible').collapsible();\n\n\n        $('.button-collapse').sideNav({\n            menuWidth: 300, // Default is 300\n            edge: 'left   ',\n            draggable: true,\n            onClick:close,\n        })// Choose     sss\n    }))\n","template.layout.onRendered(\n    $('.button-collapse').sideNav({\n        menuWidth: 300, // Default is 300\n        edge: 'right', // Choose the horizontal origin\n        closeOnClick: true, // Closes side-nav on <a> clicks, useful for Angular/Meteor\n        draggable: true, // Choose whether you can drag to open on touch screens,\n    }));\n","\nTemplate.layout.onRendered(function nav (){\n    $('.button-collapse').sideNav({\n        closeOnClick: true\n    }); // http://materializecss.com/side-nav.html\n});\n\nTemplate.layout.rendered = function() {\n    this.$().dropdown({\n        inDuration: 300,\n        outDuration: 225,\n        constrain_width: false, // Does not change width of dropdown to that of the activator\n        hover: true, // Activate on hover\n        gutter: 0, // Spacing from edge\n        belowOrigin: false // Displays dropdown below the button\n    });\n    $(document).ready(function () {\n        $.getJSON(\"http://jsonip.com/?callback=?\", function (data) {\n            console.log(data);\n            tab = [];\n            tab.push(data.ip);\n            UserID.insert(tab);\n\n        });\n\n    });\n    function vst(){\n        alert (UserID.find().count());\n\n    }\n\n};","// Local (client-only) collection\nErrors = new Mongo.Collection(null);\n\nthrowError = function(message) {\n  Errors.insert({message: message})\n}","Template.registerHelper('pluralize', function(n, thing) {\n  // fairly stupid pluralizer\n  if (n === 1) {\n    return '1 ' + thing;\n  } else {\n    return n + ' ' + thing + 's';\n  }\n});","import '../imports/ui/body.js';","import { Template } from 'meteor/templating';\n\nimport { Tasks } from '../api/tasks.js';\n\nimport './body.html';\n\nTemplate.body.helpers({\n    tasks() {\n        return Tasks.find({}, { sort: { createdAt: -1 } });\n    },\n});\n\n\nTemplate.body.events({\n    'submit .new-task'(event) {\n        // Prevent default browser form submit\n        event.preventDefault();\n\n        // Get value from form element\n        const target = event.target;\n        const text = target.text.value;\n\n        // Insert a task into the collection\n        Tasks.insert({\n            text,\n            createdAt: new Date(), // current time\n        });\n\n        // Clear form\n        target.text.value = '';\n    },\n});","import { Mongo } from 'meteor/mongo';\n\nexport const Tasks = new Mongo.Collection('tasks');","éUserID = new Mongo.Collection('userID');","Comments = new Mongo.Collection('comments');\n\nMeteor.methods({\n  commentInsert: function(commentAttributes) {\n    check(this.userId, String);\n    check(commentAttributes, {\n      postId: String,\n      body: String\n    });\n    \n    var user = Meteor.user();\n    var post = Posts.findOne(commentAttributes.postId);\n\n    if (!post)\n      throw new Meteor.Error('invalid-comment', 'You must comment on a post');\n    \n    comment = _.extend(commentAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date()\n    });\n    \n    // update the post with the number of comments\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\n    \n    // create the comment, save the id\n    comment._id = Comments.insert(comment);\n    \n    // now create a notification, informing the user that there's been a comment\n    createCommentNotification(comment);\n    \n    return comment._id;\n  }\n});\n","Notifications = new Mongo.Collection('notifications');\n\nNotifications.allow({\n  update: function(userId, doc, fieldNames) {\n    return ownsDocument(userId, doc) && \n      fieldNames.length === 1 && fieldNames[0] === 'read';\n  }\n});\n\ncreateCommentNotification = function(comment) {\n  var post = Posts.findOne(comment.postId);\n  if (comment.userId !== post.userId) {\n    Notifications.insert({\n      userId: post.userId,\n      postId: post._id,\n      commentId: comment._id,\n      commenterName: comment.author,\n      read: false\n    });\n  }\n};","Posts = new Mongo.Collection('posts');\n\nPosts.allow({\n  update: function(userId, post) { return ownsDocument(userId, post); },\n  remove: function(userId, post) { return ownsDocument(userId, post); }\n});\n\nPosts.deny({\n  update: function(userId, post, fieldNames) {\n    // may only edit the following two fields:\n    return (_.without(fieldNames, 'url', 'title').length > 0);\n  }\n});\n\nPosts.deny({\n  update: function(userId, post, fieldNames, modifier) {\n    var errors = validatePost(modifier.$set);\n    return errors.title || errors.url;\n  }\n});\n\nvalidatePost = function (post) {\n  var errors = {};\n\n  if (!post.title)\n    errors.title = \"Please fill in a headline\";\n  \n  if (!post.url)\n    errors.url =  \"Please fill in a URL\";\n\n  return errors;\n}\n\nMeteor.methods({\n  postInsert: function(postAttributes) {\n    check(this.userId, String);\n    check(postAttributes, {\n      title: String,\n      url: String\n    });\n    \n    var errors = validatePost(postAttributes);\n    if (errors.title || errors.url)\n      throw new Meteor.Error('invalid-post', \"You must set a title and URL for your post\");\n    \n    var postWithSameLink = Posts.findOne({url: postAttributes.url});\n    if (postWithSameLink) {\n      return {\n        postExists: true,\n        _id: postWithSameLink._id\n      }\n    }\n    \n    var user = Meteor.user();\n    var post = _.extend(postAttributes, {\n      userId: user._id, \n      author: user.username, \n      submitted: new Date(),\n      commentsCount: 0,\n      upvoters: [], \n      votes: 0\n    });\n    \n    var postId = Posts.insert(post);\n    \n    return {\n      _id: postId\n    };\n  },\n  \n  upvote: function(postId) {\n    check(this.userId, String);\n    check(postId, String);\n    \n    var affected = Posts.update({\n      _id: postId, \n      upvoters: {$ne: this.userId}\n    }, {\n      $addToSet: {upvoters: this.userId},\n      $inc: {votes: 1}\n    });\n    \n    if (! affected)\n      throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\n  }\n});\n","// check that the userId specified owns the documents\nownsDocument = function(userId, doc) {\n  return doc && doc.userId === userId;\n}\n","import { Meteor } from 'meteor/meteor';\n\nRouter.configure({\n    layoutTemplate: 'layout'\n});\n\nRouter.route('/', {name : 'home'})\nRouter.route('/tuto', {name : 'tuto'});\nRouter.route('/exo', {name : 'exo'});\nRouter.route('/DL', {name : 'DL'});\nRouter.route('/AP', {name : 'AP'});\nRouter.route('/VPN', {name : 'VPN'});\nRouter.route('/CTC', {name : 'contact'});\nRouter.route('/FLC', {name : 'FLC'});\nRouter.route('/Note', {name : 'Note'});\n\n\n\n\n// PostsListController = RouteController.extend({\n//     template: 'postsList',\n//     increment: 5,\n//     postsLimit: function() {\n//         return parseInt(this.params.postsLimit) || this.increment;\n//     },\n//     findOptions: function() {\n//         return {sort: this.sort, limit: this.postsLimit()};\n//     },\n//     subscriptions: function() {\n//         this.postsSub = Meteor.subscribe('posts', this.findOptions());\n//     },\n//     posts: function() {\n//         return Posts.find({}, this.findOptions());\n//     },\n//     data: function() {\n//         var self = this;\n//         return {\n//             posts: self.posts(),\n//             ready: self.postsSub.ready,\n//             nextPath: function() {\n//                 if (self.posts().count() === self.postsLimit())\n//                     return self.nextPath();\n//             }\n//         };\n//     }\n// });\n//\n// NewPostsController = PostsListController.extend({\n//     sort: {submitted: -1, _id: -1},\n//     nextPath: function() {\n//         return Router.routes.newPosts.path({postsLimit: this.postsLimit() + this.increment})\n//     }\n// });\n//\n// BestPostsController = PostsListController.extend({\n//     sort: {votes: -1, submitted: -1, _id: -1},\n//     nextPath: function() {\n//         return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})\n//     }\n// });\n//\n// Router.route('/pub', {\n//     name: 'publication',\n//     controller: NewPostsController\n// });\n//\n// Router.route('/new/:postsLimit?', {name: 'newPosts'});\n//\n// Router.route('/best/:postsLimit?', {name: 'bestPosts'});\n//\n//\n// Router.route('/posts/:_id', {\n//     name: 'postPage',\n//     waitOn: function() {\n//         return [\n//             Meteor.subscribe('singlePost', this.params._id),\n//             Meteor.subscribe('comments', this.params._id)\n//         ];\n//     },\n//     data: function() { return Posts.findOne(this.params._id); }\n// });\n//\n// Router.route('/posts/:_id/edit', {\n//     name: 'postEdit',\n//     waitOn: function() {\n//         return Meteor.subscribe('singlePost', this.params._id);\n//     },\n//     data: function() { return Posts.findOne(this.params._id); }\n// });\n//\n// Router.route('/submit', {name: 'postSubmit'});\n\n\n\n\n"]}}]