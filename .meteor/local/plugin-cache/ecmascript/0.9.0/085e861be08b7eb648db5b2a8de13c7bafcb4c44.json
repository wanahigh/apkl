{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"lib/collections/posts.js","filenameRelative":"lib/collections/posts.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"lib/collections/posts.js.map","sourceFileName":"lib/collections/posts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"posts"},"ignored":false,"code":"Posts = new Mongo.Collection('posts');\nPosts.allow({\n  update: function (userId, post) {\n    return ownsDocument(userId, post);\n  },\n  remove: function (userId, post) {\n    return ownsDocument(userId, post);\n  }\n});\nPosts.deny({\n  update: function (userId, post, fieldNames) {\n    // may only edit the following two fields:\n    return _.without(fieldNames, 'url', 'title').length > 0;\n  }\n});\nPosts.deny({\n  update: function (userId, post, fieldNames, modifier) {\n    var errors = validatePost(modifier.$set);\n    return errors.title || errors.url;\n  }\n});\n\nvalidatePost = function (post) {\n  var errors = {};\n  if (!post.title) errors.title = \"Please fill in a headline\";\n  if (!post.url) errors.url = \"Please fill in a URL\";\n  return errors;\n};\n\nMeteor.methods({\n  postInsert: function (postAttributes) {\n    check(this.userId, String);\n    check(postAttributes, {\n      title: String,\n      url: String\n    });\n    var errors = validatePost(postAttributes);\n    if (errors.title || errors.url) throw new Meteor.Error('invalid-post', \"You must set a title and URL for your post\");\n    var postWithSameLink = Posts.findOne({\n      url: postAttributes.url\n    });\n\n    if (postWithSameLink) {\n      return {\n        postExists: true,\n        _id: postWithSameLink._id\n      };\n    }\n\n    var user = Meteor.user();\n\n    var post = _.extend(postAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date(),\n      commentsCount: 0,\n      upvoters: [],\n      votes: 0\n    });\n\n    var postId = Posts.insert(post);\n    return {\n      _id: postId\n    };\n  },\n  upvote: function (postId) {\n    check(this.userId, String);\n    check(postId, String);\n    var affected = Posts.update({\n      _id: postId,\n      upvoters: {\n        $ne: this.userId\n      }\n    }, {\n      $addToSet: {\n        upvoters: this.userId\n      },\n      $inc: {\n        votes: 1\n      }\n    });\n    if (!affected) throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\n  }\n});","map":{"version":3,"sources":["lib/collections/posts.js"],"names":["Posts","Mongo","Collection","allow","update","userId","post","ownsDocument","remove","deny","fieldNames","_","without","length","modifier","errors","validatePost","$set","title","url","Meteor","methods","postInsert","postAttributes","check","String","Error","postWithSameLink","findOne","postExists","_id","user","extend","author","username","submitted","Date","commentsCount","upvoters","votes","postId","insert","upvote","affected","$ne","$addToSet","$inc"],"mappings":"AAAAA,QAAQ,IAAIC,MAAMC,UAAV,CAAqB,OAArB,CAAR;AAEAF,MAAMG,KAAN,CAAY;AACVC,UAAQ,UAASC,MAAT,EAAiBC,IAAjB,EAAuB;AAAE,WAAOC,aAAaF,MAAb,EAAqBC,IAArB,CAAP;AAAoC,GAD3D;AAEVE,UAAQ,UAASH,MAAT,EAAiBC,IAAjB,EAAuB;AAAE,WAAOC,aAAaF,MAAb,EAAqBC,IAArB,CAAP;AAAoC;AAF3D,CAAZ;AAKAN,MAAMS,IAAN,CAAW;AACTL,UAAQ,UAASC,MAAT,EAAiBC,IAAjB,EAAuBI,UAAvB,EAAmC;AACzC;AACA,WAAQC,EAAEC,OAAF,CAAUF,UAAV,EAAsB,KAAtB,EAA6B,OAA7B,EAAsCG,MAAtC,GAA+C,CAAvD;AACD;AAJQ,CAAX;AAOAb,MAAMS,IAAN,CAAW;AACTL,UAAQ,UAASC,MAAT,EAAiBC,IAAjB,EAAuBI,UAAvB,EAAmCI,QAAnC,EAA6C;AACnD,QAAIC,SAASC,aAAaF,SAASG,IAAtB,CAAb;AACA,WAAOF,OAAOG,KAAP,IAAgBH,OAAOI,GAA9B;AACD;AAJQ,CAAX;;AAOAH,eAAe,UAAUV,IAAV,EAAgB;AAC7B,MAAIS,SAAS,EAAb;AAEA,MAAI,CAACT,KAAKY,KAAV,EACEH,OAAOG,KAAP,GAAe,2BAAf;AAEF,MAAI,CAACZ,KAAKa,GAAV,EACEJ,OAAOI,GAAP,GAAc,sBAAd;AAEF,SAAOJ,MAAP;AACD,CAVD;;AAYAK,OAAOC,OAAP,CAAe;AACbC,cAAY,UAASC,cAAT,EAAyB;AACnCC,UAAM,KAAKnB,MAAX,EAAmBoB,MAAnB;AACAD,UAAMD,cAAN,EAAsB;AACpBL,aAAOO,MADa;AAEpBN,WAAKM;AAFe,KAAtB;AAKA,QAAIV,SAASC,aAAaO,cAAb,CAAb;AACA,QAAIR,OAAOG,KAAP,IAAgBH,OAAOI,GAA3B,EACE,MAAM,IAAIC,OAAOM,KAAX,CAAiB,cAAjB,EAAiC,4CAAjC,CAAN;AAEF,QAAIC,mBAAmB3B,MAAM4B,OAAN,CAAc;AAACT,WAAKI,eAAeJ;AAArB,KAAd,CAAvB;;AACA,QAAIQ,gBAAJ,EAAsB;AACpB,aAAO;AACLE,oBAAY,IADP;AAELC,aAAKH,iBAAiBG;AAFjB,OAAP;AAID;;AAED,QAAIC,OAAOX,OAAOW,IAAP,EAAX;;AACA,QAAIzB,OAAOK,EAAEqB,MAAF,CAAST,cAAT,EAAyB;AAClClB,cAAQ0B,KAAKD,GADqB;AAElCG,cAAQF,KAAKG,QAFqB;AAGlCC,iBAAW,IAAIC,IAAJ,EAHuB;AAIlCC,qBAAe,CAJmB;AAKlCC,gBAAU,EALwB;AAMlCC,aAAO;AAN2B,KAAzB,CAAX;;AASA,QAAIC,SAASxC,MAAMyC,MAAN,CAAanC,IAAb,CAAb;AAEA,WAAO;AACLwB,WAAKU;AADA,KAAP;AAGD,GAnCY;AAqCbE,UAAQ,UAASF,MAAT,EAAiB;AACvBhB,UAAM,KAAKnB,MAAX,EAAmBoB,MAAnB;AACAD,UAAMgB,MAAN,EAAcf,MAAd;AAEA,QAAIkB,WAAW3C,MAAMI,MAAN,CAAa;AAC1B0B,WAAKU,MADqB;AAE1BF,gBAAU;AAACM,aAAK,KAAKvC;AAAX;AAFgB,KAAb,EAGZ;AACDwC,iBAAW;AAACP,kBAAU,KAAKjC;AAAhB,OADV;AAEDyC,YAAM;AAACP,eAAO;AAAR;AAFL,KAHY,CAAf;AAQA,QAAI,CAAEI,QAAN,EACE,MAAM,IAAIvB,OAAOM,KAAX,CAAiB,SAAjB,EAA4B,sCAA5B,CAAN;AACH;AAnDY,CAAf","file":"lib/collections/posts.js.map","sourcesContent":["Posts = new Mongo.Collection('posts');\n\nPosts.allow({\n  update: function(userId, post) { return ownsDocument(userId, post); },\n  remove: function(userId, post) { return ownsDocument(userId, post); }\n});\n\nPosts.deny({\n  update: function(userId, post, fieldNames) {\n    // may only edit the following two fields:\n    return (_.without(fieldNames, 'url', 'title').length > 0);\n  }\n});\n\nPosts.deny({\n  update: function(userId, post, fieldNames, modifier) {\n    var errors = validatePost(modifier.$set);\n    return errors.title || errors.url;\n  }\n});\n\nvalidatePost = function (post) {\n  var errors = {};\n\n  if (!post.title)\n    errors.title = \"Please fill in a headline\";\n  \n  if (!post.url)\n    errors.url =  \"Please fill in a URL\";\n\n  return errors;\n}\n\nMeteor.methods({\n  postInsert: function(postAttributes) {\n    check(this.userId, String);\n    check(postAttributes, {\n      title: String,\n      url: String\n    });\n    \n    var errors = validatePost(postAttributes);\n    if (errors.title || errors.url)\n      throw new Meteor.Error('invalid-post', \"You must set a title and URL for your post\");\n    \n    var postWithSameLink = Posts.findOne({url: postAttributes.url});\n    if (postWithSameLink) {\n      return {\n        postExists: true,\n        _id: postWithSameLink._id\n      }\n    }\n    \n    var user = Meteor.user();\n    var post = _.extend(postAttributes, {\n      userId: user._id, \n      author: user.username, \n      submitted: new Date(),\n      commentsCount: 0,\n      upvoters: [], \n      votes: 0\n    });\n    \n    var postId = Posts.insert(post);\n    \n    return {\n      _id: postId\n    };\n  },\n  \n  upvote: function(postId) {\n    check(this.userId, String);\n    check(postId, String);\n    \n    var affected = Posts.update({\n      _id: postId, \n      upvoters: {$ne: this.userId}\n    }, {\n      $addToSet: {upvoters: this.userId},\n      $inc: {votes: 1}\n    });\n    \n    if (! affected)\n      throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\n  }\n});\n"]},"hash":"085e861be08b7eb648db5b2a8de13c7bafcb4c44"}
