{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]}],"exports":{"exported":["ReactiveDict"],"specifiers":[{"kind":"local","local":"ReactiveDict","exported":"ReactiveDict"}]}}},"options":{"filename":"packages/reactive-dict/migration.js","filenameRelative":"packages/reactive-dict/migration.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/reactive-dict/migration.js.map","sourceFileName":"packages/reactive-dict/migration.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"migration"},"ignored":false,"code":"module.export({\n  ReactiveDict: function () {\n    return ReactiveDict;\n  }\n});\nvar ReactiveDict = void 0;\nmodule.watch(require(\"./reactive-dict\"), {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 0);\nReactiveDict._migratedDictData = {}; // name -> data\n\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) {\n    var data = ReactiveDict._migratedDictData[dictName];\n    delete ReactiveDict._migratedDictData[dictName];\n    return data;\n  }\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // On migration, assemble the data from all the dicts that have been\n  // registered.\n\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in meteorBabelHelpers.sanitizeForInObject(dictsToMigrate)) {\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n    }\n\n    return [true, {\n      dicts: dataToMigrate\n    }];\n  });\n}","map":{"version":3,"sources":["packages/reactive-dict/migration.js"],"names":["module","export","ReactiveDict","watch","require","v","_migratedDictData","_dictsToMigrate","_loadMigratedDict","dictName","_","has","data","_registerDictForMigrate","dict","Error","Meteor","isClient","Package","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate","_getMigrationData"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,gBAAa;AAAA,WAAIA,YAAJ;AAAA;AAAd,CAAd;AAA+C,IAAIA,qBAAJ;AAAiBF,OAAOG,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACF,cAAD,YAAcG,CAAd,EAAgB;AAACH,mBAAaG,CAAb;AAAe;AAAhC,CAAxC,EAA0E,CAA1E;AAEhEH,aAAaI,iBAAb,GAAiC,EAAjC,C,CAAqC;;AACrCJ,aAAaK,eAAb,GAA+B,EAA/B,C,CAAmC;;AAEnCL,aAAaM,iBAAb,GAAiC,UAAUC,QAAV,EAAoB;AACnD,MAAIC,EAAEC,GAAF,CAAMT,aAAaI,iBAAnB,EAAsCG,QAAtC,CAAJ,EAAqD;AACnD,QAAMG,OAAOV,aAAaI,iBAAb,CAA+BG,QAA/B,CAAb;AACA,WAAOP,aAAaI,iBAAb,CAA+BG,QAA/B,CAAP;AACA,WAAOG,IAAP;AACD;;AAED,SAAO,IAAP;AACD,CARD;;AAUAV,aAAaW,uBAAb,GAAuC,UAAUJ,QAAV,EAAoBK,IAApB,EAA0B;AAC/D,MAAIJ,EAAEC,GAAF,CAAMT,aAAaK,eAAnB,EAAoCE,QAApC,CAAJ,EACE,MAAM,IAAIM,KAAJ,CAAU,kCAAkCN,QAA5C,CAAN;AAEFP,eAAaK,eAAb,CAA6BE,QAA7B,IAAyCK,IAAzC;AACD,CALD;;AAOA,IAAIE,OAAOC,QAAP,IAAmBC,QAAQC,MAA/B,EAAuC;AACrC;AACA;AACA,MAAIC,gBAAgBF,QAAQC,MAAR,CAAeE,MAAf,CAAsBC,cAAtB,CAAqC,eAArC,CAApB;;AACA,MAAIF,iBAAiBA,cAAcG,KAAnC,EACErB,aAAaI,iBAAb,GAAiCc,cAAcG,KAA/C,CALmC,CAOrC;AACA;;AACAL,UAAQC,MAAR,CAAeE,MAAf,CAAsBG,UAAtB,CAAiC,eAAjC,EAAkD,YAAY;AAC5D,QAAIC,iBAAiBvB,aAAaK,eAAlC;AACA,QAAImB,gBAAgB,EAApB;;AAEA,SAAK,IAAIjB,QAAT,2CAAqBgB,cAArB;AACEC,oBAAcjB,QAAd,IAA0BgB,eAAehB,QAAf,EAAyBkB,iBAAzB,EAA1B;AADF;;AAGA,WAAO,CAAC,IAAD,EAAO;AAACJ,aAAOG;AAAR,KAAP,CAAP;AACD,GARD;AASD","file":"packages/reactive-dict/migration.js.map","sourcesContent":["import { ReactiveDict } from './reactive-dict';\n\nReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) {\n    const data = ReactiveDict._migratedDictData[dictName];\n    delete ReactiveDict._migratedDictData[dictName];\n    return data;\n  }\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n\nexport { ReactiveDict };\n"]},"hash":"0be37cefd7c852d8bf623117e372a58fc6a05b9d"}
