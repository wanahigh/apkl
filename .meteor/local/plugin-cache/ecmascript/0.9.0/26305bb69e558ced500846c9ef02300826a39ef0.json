{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"lib/router.js","filenameRelative":"lib/router.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"lib/router.js.map","sourceFileName":"lib/router.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"router"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor: function (v) {\n        Meteor = v;\n    }\n}, 0);\nRouter.configure({\n    layoutTemplate: 'layout',\n    notFoundTemplate: 'notFound',\n    waitOn: function () {\n        return [Meteor.subscribe('notifications')];\n    }\n});\nRouter.route('/tuto', {\n    name: 'tuto'\n});\nRouter.route('/exo', {\n    name: 'exo'\n});\nRouter.route('/DL', {\n    name: 'DL'\n});\nRouter.route('/AP', {\n    name: 'AP'\n});\nRouter.route('/VPN', {\n    name: 'VPN'\n});\nRouter.route('/CTC', {\n    name: 'contact'\n});\nRouter.route('/FLC', {\n    name: 'FLC'\n});\nRouter.route('/home', {\n    name: 'home'\n});\nPostsListController = RouteController.extend({\n    template: 'postsList',\n    increment: 5,\n    postsLimit: function () {\n        return parseInt(this.params.postsLimit) || this.increment;\n    },\n    findOptions: function () {\n        return {\n            sort: this.sort,\n            limit: this.postsLimit()\n        };\n    },\n    subscriptions: function () {\n        this.postsSub = Meteor.subscribe('posts', this.findOptions());\n    },\n    posts: function () {\n        return Posts.find({}, this.findOptions());\n    },\n    data: function () {\n        var self = this;\n        return {\n            posts: self.posts(),\n            ready: self.postsSub.ready,\n            nextPath: function () {\n                if (self.posts().count() === self.postsLimit()) return self.nextPath();\n            }\n        };\n    }\n});\nNewPostsController = PostsListController.extend({\n    sort: {\n        submitted: -1,\n        _id: -1\n    },\n    nextPath: function () {\n        return Router.routes.newPosts.path({\n            postsLimit: this.postsLimit() + this.increment\n        });\n    }\n});\nBestPostsController = PostsListController.extend({\n    sort: {\n        votes: -1,\n        submitted: -1,\n        _id: -1\n    },\n    nextPath: function () {\n        return Router.routes.bestPosts.path({\n            postsLimit: this.postsLimit() + this.increment\n        });\n    }\n});\nRouter.route('/pub', {\n    name: 'publication',\n    controller: NewPostsController\n});\nRouter.route('/new/:postsLimit?', {\n    name: 'newPosts'\n});\nRouter.route('/best/:postsLimit?', {\n    name: 'bestPosts'\n});\nRouter.route('/posts/:_id', {\n    name: 'postPage',\n    waitOn: function () {\n        return [Meteor.subscribe('singlePost', this.params._id), Meteor.subscribe('comments', this.params._id)];\n    },\n    data: function () {\n        return Posts.findOne(this.params._id);\n    }\n});\nRouter.route('/posts/:_id/edit', {\n    name: 'postEdit',\n    waitOn: function () {\n        return Meteor.subscribe('singlePost', this.params._id);\n    },\n    data: function () {\n        return Posts.findOne(this.params._id);\n    }\n});\nRouter.route('/submit', {\n    name: 'postSubmit'\n});\n\nvar requireLogin = function () {\n    if (!Meteor.user()) {\n        if (Meteor.loggingIn()) {\n            this.render(this.loadingTemplate);\n        } else {\n            this.render('accessDenied');\n        }\n    } else {\n        this.next();\n    }\n};","map":{"version":3,"sources":["lib/router.js"],"names":["Meteor","module","watch","require","v","Router","configure","layoutTemplate","notFoundTemplate","waitOn","subscribe","route","name","PostsListController","RouteController","extend","template","increment","postsLimit","parseInt","params","findOptions","sort","limit","subscriptions","postsSub","posts","Posts","find","data","self","ready","nextPath","count","NewPostsController","submitted","_id","routes","newPosts","path","BestPostsController","votes","bestPosts","controller","findOne","requireLogin","user","loggingIn","render","loadingTemplate","next"],"mappings":"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","file":"lib/router.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nRouter.configure({\n    layoutTemplate: 'layout',\n    notFoundTemplate: 'notFound',\n\n    waitOn: function() {\n        return [Meteor.subscribe('notifications')]\n    }\n});\n\n\nRouter.route('/tuto', {name : 'tuto'});\nRouter.route('/exo', {name : 'exo'});\nRouter.route('/DL', {name : 'DL'});\nRouter.route('/AP', {name : 'AP'});\nRouter.route('/VPN', {name : 'VPN'});\nRouter.route('/CTC', {name : 'contact'});\nRouter.route('/FLC', {name : 'FLC'});\nRouter.route('/home', {name : 'home'})\n\n\n\nPostsListController = RouteController.extend({\n    template: 'postsList',\n    increment: 5,\n    postsLimit: function() {\n        return parseInt(this.params.postsLimit) || this.increment;\n    },\n    findOptions: function() {\n        return {sort: this.sort, limit: this.postsLimit()};\n    },\n    subscriptions: function() {\n        this.postsSub = Meteor.subscribe('posts', this.findOptions());\n    },\n    posts: function() {\n        return Posts.find({}, this.findOptions());\n    },\n    data: function() {\n        var self = this;\n        return {\n            posts: self.posts(),\n            ready: self.postsSub.ready,\n            nextPath: function() {\n                if (self.posts().count() === self.postsLimit())\n                    return self.nextPath();\n            }\n        };\n    }\n});\n\nNewPostsController = PostsListController.extend({\n    sort: {submitted: -1, _id: -1},\n    nextPath: function() {\n        return Router.routes.newPosts.path({postsLimit: this.postsLimit() + this.increment})\n    }\n});\n\nBestPostsController = PostsListController.extend({\n    sort: {votes: -1, submitted: -1, _id: -1},\n    nextPath: function() {\n        return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})\n    }\n});\n\nRouter.route('/pub', {\n    name: 'publication',\n    controller: NewPostsController\n});\n\nRouter.route('/new/:postsLimit?', {name: 'newPosts'});\n\nRouter.route('/best/:postsLimit?', {name: 'bestPosts'});\n\n\nRouter.route('/posts/:_id', {\n    name: 'postPage',\n    waitOn: function() {\n        return [\n            Meteor.subscribe('singlePost', this.params._id),\n            Meteor.subscribe('comments', this.params._id)\n        ];\n    },\n    data: function() { return Posts.findOne(this.params._id); }\n});\n\nRouter.route('/posts/:_id/edit', {\n    name: 'postEdit',\n    waitOn: function() {\n        return Meteor.subscribe('singlePost', this.params._id);\n    },\n    data: function() { return Posts.findOne(this.params._id); }\n});\n\nRouter.route('/submit', {name: 'postSubmit'});\n\nvar requireLogin = function() {\n    if (! Meteor.user()) {\n        if (Meteor.loggingIn()) {\n            this.render(this.loadingTemplate);\n        } else {\n            this.render('accessDenied');\n        }\n    } else {\n        this.next();\n    }\n}\n\n\n\n\n"]},"hash":"26305bb69e558ced500846c9ef02300826a39ef0"}
