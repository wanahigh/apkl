{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zodiase:mdl/plugin/build.js","filenameRelative":"packages/zodiase:mdl/plugin/build.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zodiase:mdl/plugin/build.js.map","sourceFileName":"packages/zodiase:mdl/plugin/build.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"build"},"ignored":false,"code":"/*\n * Since we are not able to get the assets added by this package, we have to\n * rely on another package to provide the assets. That would be the mdl-assets\n * package, which would export `_mdlGetAsset` function for getting asset files.\n */const settingsFileName = 'zodiase-mdl.json'; // `_mdlGetAsset` is exported from package 'zodiase:mdl-assets'.\n\nconst getAsset = _mdlGetAsset; // jQuery.extend from npm.\n\nconst extend = Npm.require('extend'); // clone from npm.\n\n\nconst clone = Npm.require('clone');\n\nconst path = Plugin.path;\nPlugin.registerCompiler({\n  archMatching: 'web',\n  extensions: [],\n  filenames: [settingsFileName]\n}, () => new Compiler()); /*\n                           * Check for packages under local testing.\n                           * @see {@link https://github.com/meteor/meteor/blob/be986fd70926c9dd8eff6d8866205f236c8562c4/tools/isobuild/package-source.js#L28}\n                           */\n\nconst AUTO_TEST_PREFIX = \"local-test:\",\n      isTestName = name => name.slice(0, AUTO_TEST_PREFIX.length) === AUTO_TEST_PREFIX;\n\nclass Compiler extends MultiFileCachingCompiler {\n  constructor() {\n    super({\n      compilerName: 'zodiase-mdl',\n      defaultCacheSize: 1024 * 1024 * 10\n    });\n  }\n\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  } /**\n     * `compileResult` returned by `compileOneFile` is a string.\n     * @param {String} compileResult\n     * @returns {Number}\n     */\n\n  compileResultSize(compileResult) {\n    return compileResult.length;\n  } // We don't care settings files not at root directory.\n\n\n  isRoot(inputFile) {\n    return inputFile.getDirname() === '.';\n  } /**\n     * Returning `null` will skip `addCompileResult` as of Meteor 1.3.1.\n     * @param {InputFile} inputFile\n     * @param {Map.<AbsPath, InputFile>} allFiles\n     * @returns {Object|null}\n     */\n\n  compileOneFile(inputFile, allFiles) {\n    /*\n     * If the settings file is loaded from the app, the package name should be `null`.\n     * If the settings file is loaded from package tests, `isTestName` should return true.\n     */const pkgName = inputFile.getPackageName();\n\n    if (!(pkgName === null || isTestName(pkgName))) {\n      // Settings files loaded from packages are ignored.\n      return null;\n    }\n\n    const self = Compiler;\n    const fileContents = inputFile.getContentsAsString().trim();\n    let finalSettings = null;\n\n    if (fileContents === '') {\n      log('Enabled with default settings. See documentation for customization options.');\n      finalSettings = clone(self.defaultSettings, false);\n    } else {\n      try {\n        const settingsFromFile = JSON.parse(fileContents);\n        finalSettings = extend(true, {}, self.defaultSettings, settingsFromFile);\n        check(finalSettings, self.settingsSchema);\n        log('Using settings:', finalSettings);\n      } catch (error) {\n        settingsFile.error(error);\n        finalSettings = null;\n      }\n    }\n\n    if (!finalSettings) {\n      return null;\n    } //else\n\n\n    return {\n      // Use the string form to help calculate cache size.\n      compileResult: JSON.stringify(finalSettings),\n      referencedImportPaths: []\n    };\n  } /**\n     * `compileResult` returned by `compileOneFile` is a string.\n     * @param {InputFile} inputFile\n     * @param {String} compileResult Guaranteed to be valid JSON.\n     */\n\n  addCompileResult(inputFile, compileResult) {\n    /*\n     * If the settings file is loaded from the app, the package name should be `null`.\n     * If the settings file is loaded from package tests, `isTestName` should return true.\n     */const pkgName = inputFile.getPackageName();\n\n    if (!(pkgName === null || isTestName(pkgName))) {\n      // Settings files loaded from packages are ignored.\n      // Already logged in `compileOneFile`. Ignore silently.\n      return;\n    }\n\n    const settingsFile = inputFile;\n    const finalSettings = JSON.parse(compileResult); // Attach the settings to MDl.\n\n    settingsFile.addJavaScript({\n      data: 'MDl.settings = JSON.parse(decodeURI(\"' + encodeURI(JSON.stringify(finalSettings)) + '\"));\\n',\n      path: path.join('client', 'lib', 'settings-file-checked.generated.js'),\n      bare: true\n    });\n\n    this._loadJsLib(settingsFile, finalSettings);\n\n    this._loadTheme(settingsFile, finalSettings);\n  } /**\n     * Try to get the content of the specified asset.\n     * If fails for any reason, the error will be thrown to the InputFile.\n     * @param {InputFile} inputFile\n     * @param {String} assetPath\n     * @returns {String|null} Text content of the asset if found. Otherwise null.\n     */\n\n  _tryToGetAssetData(inputFile, assetPath) {\n    try {\n      return getAsset(assetPath);\n    } catch (error) {\n      inputFile.error(error);\n      return null;\n    }\n  } /**\n     * Returns the full theme file name for the given color combination.\n     * @param {String} primary\n     * @param {String} accent\n     * @returns {String}\n     */\n\n  _getThemeFileName(primary, accent) {\n    return 'material.' + path.basename(primary) + '-' + path.basename(accent) + '.min.css';\n  } /**\n     * Add js files to the InputFile based on the settings.\n     * @param {InputFile} inputFile\n     * @param {Object} settings\n     * @param {Object} settings.jsLib\n     * @param {Boolean} settings.jsLib.minified\n     */\n\n  _loadJsLib(inputFile, settings) {\n    const jsLibFileName = settings.jsLib.minified ? 'material.min.js' : 'material.js';\n    const jsLibFilePath = path.join('dist', jsLibFileName);\n\n    const jsLibFileData = this._tryToGetAssetData(inputFile, jsLibFilePath);\n\n    if (jsLibFileData === null) {\n      // Has error getting the asset.\n      inputFile.error(new Error('Could not load JavaScript lib file.'));\n      return;\n    } //else\n\n\n    inputFile.addJavaScript({\n      data: jsLibFileData,\n      path: path.join('client', 'lib', jsLibFilePath),\n      bare: true\n    });\n    inputFile.addJavaScript({\n      data: 'MDl.componentHandler = componentHandler;\\n',\n      path: path.join('client', 'lib', 'attach-componentHandler.generated.js'),\n      bare: true\n    });\n  } /**\n     * Add css files to the InputFile based on the settings.\n     * @param {InputFile} inputFile\n     * @param {Object} settings\n     * @param {Object|false} settings.theme\n     * @param {String} settings.theme.primary\n     * @param {String} settings.theme.accent\n     */\n\n  _loadTheme(inputFile, settings) {\n    const theme = settings.theme;\n\n    if (theme === false) {\n      // Disable theme.\n      return;\n    } //else\n    // Load theme.\n\n\n    const themeFileName = this._getThemeFileName(theme.primary, theme.accent);\n\n    const themeFilePath = path.join('dist', themeFileName);\n\n    const themeFileData = this._tryToGetAssetData(inputFile, themeFilePath);\n\n    if (themeFileData === null) {\n      // Has error getting the asset.\n      inputFile.error(new Error('Could not load theme stylesheet.'));\n      return;\n    } //else\n\n\n    inputFile.addStylesheet({\n      data: themeFileData,\n      path: path.join('client', 'lib', themeFilePath),\n      bare: true\n    });\n  }\n\n}\n\nCompiler.defaultSettings = {\n  \"jsLib\": {\n    \"minified\": false\n  },\n  \"theme\": {\n    \"primary\": \"indigo\",\n    \"accent\": \"pink\"\n  },\n  \"patches\": {\n    \"autoUpgrade\": \"fullUpgrade\"\n  },\n  \"verbose\": false\n};\nCompiler.settingsSchema = Match.ObjectIncluding({\n  \"jsLib\": Match.ObjectIncluding({\n    \"minified\": Boolean\n  }),\n  // Note: there're only minified theme files.\n  \"theme\": Match.OneOf(false, Match.ObjectIncluding({\n    \"primary\": String,\n    \"accent\": String\n  })),\n  \"patches\": {\n    \"autoUpgrade\": Match.OneOf(false, \"fullUpgrade\", \"mutationOnly\", \"none\")\n  },\n  \"verbose\": Boolean\n});\nconst logLabel = 'zodiase:mdl';\n\nconst log = function () {\n  let args = sliceArguments(arguments);\n  args.unshift('*', logLabel, '>');\n  console.log.apply(console, args);\n};\n\nconst sliceArguments = function (_arguments) {\n  let args = new Array(_arguments.length);\n\n  for (let i = 0, n = _arguments.length; i < n; i++) {\n    args[i] = _arguments[i];\n  }\n\n  return args;\n};","map":{"version":3,"sources":["packages/zodiase:mdl/plugin/build.js"],"names":["settingsFileName","getAsset","_mdlGetAsset","extend","Npm","require","clone","path","Plugin","registerCompiler","archMatching","extensions","filenames","Compiler","AUTO_TEST_PREFIX","isTestName","name","slice","length","MultiFileCachingCompiler","constructor","compilerName","defaultCacheSize","getCacheKey","inputFile","getSourceHash","compileResultSize","compileResult","isRoot","getDirname","compileOneFile","allFiles","pkgName","getPackageName","self","fileContents","getContentsAsString","trim","finalSettings","log","defaultSettings","settingsFromFile","JSON","parse","check","settingsSchema","error","settingsFile","stringify","referencedImportPaths","addCompileResult","addJavaScript","data","encodeURI","join","bare","_loadJsLib","_loadTheme","_tryToGetAssetData","assetPath","_getThemeFileName","primary","accent","basename","settings","jsLibFileName","jsLib","minified","jsLibFilePath","jsLibFileData","Error","theme","themeFileName","themeFilePath","themeFileData","addStylesheet","Match","ObjectIncluding","Boolean","OneOf","String","logLabel","args","sliceArguments","arguments","unshift","console","apply","_arguments","Array","i","n"],"mappings":"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","file":"packages/zodiase:mdl/plugin/build.js.map","sourcesContent":["/*\n * Since we are not able to get the assets added by this package, we have to\n * rely on another package to provide the assets. That would be the mdl-assets\n * package, which would export `_mdlGetAsset` function for getting asset files.\n */\n\nconst settingsFileName = 'zodiase-mdl.json';\n\n// `_mdlGetAsset` is exported from package 'zodiase:mdl-assets'.\nconst getAsset = _mdlGetAsset;\n// jQuery.extend from npm.\nconst extend = Npm.require('extend');\n// clone from npm.\nconst clone = Npm.require('clone');\n\nconst path = Plugin.path;\n\nPlugin.registerCompiler({\n  archMatching: 'web',\n  extensions: [],\n  filenames: [settingsFileName]\n}, () => new Compiler);\n\n/*\n * Check for packages under local testing.\n * @see {@link https://github.com/meteor/meteor/blob/be986fd70926c9dd8eff6d8866205f236c8562c4/tools/isobuild/package-source.js#L28}\n */\nconst AUTO_TEST_PREFIX = \"local-test:\",\n      isTestName = (name) => name.slice(0, AUTO_TEST_PREFIX.length) === AUTO_TEST_PREFIX;\n\nclass Compiler extends MultiFileCachingCompiler {\n\n  constructor() {\n    super({\n      compilerName: 'zodiase-mdl',\n      defaultCacheSize: 1024*1024*10,\n    });\n  }\n\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  }\n\n  /**\n   * `compileResult` returned by `compileOneFile` is a string.\n   * @param {String} compileResult\n   * @returns {Number}\n   */\n  compileResultSize(compileResult) {\n    return compileResult.length;\n  }\n\n  // We don't care settings files not at root directory.\n  isRoot(inputFile) {\n    return (inputFile.getDirname() === '.');\n  }\n\n  /**\n   * Returning `null` will skip `addCompileResult` as of Meteor 1.3.1.\n   * @param {InputFile} inputFile\n   * @param {Map.<AbsPath, InputFile>} allFiles\n   * @returns {Object|null}\n   */\n  compileOneFile(inputFile, allFiles) {\n    /*\n     * If the settings file is loaded from the app, the package name should be `null`.\n     * If the settings file is loaded from package tests, `isTestName` should return true.\n     */\n    const pkgName = inputFile.getPackageName();\n    if (!(pkgName === null || isTestName(pkgName))) {\n      // Settings files loaded from packages are ignored.\n      return null;\n    }\n\n    const self = Compiler;\n    const fileContents = inputFile.getContentsAsString().trim();\n    let finalSettings = null;\n\n    if (fileContents === '') {\n      log('Enabled with default settings. See documentation for customization options.');\n      finalSettings = clone(self.defaultSettings, false);\n    } else {\n      try {\n        const settingsFromFile = JSON.parse(fileContents);\n        finalSettings = extend(true, {}, self.defaultSettings, settingsFromFile);\n        check(finalSettings, self.settingsSchema);\n        log('Using settings:', finalSettings);\n      } catch (error) {\n        settingsFile.error(error);\n        finalSettings = null;\n      }\n    }\n    if (!finalSettings) {\n      return null;\n    }\n    //else\n\n    return {\n      // Use the string form to help calculate cache size.\n      compileResult: JSON.stringify(finalSettings),\n      referencedImportPaths: []\n    };\n  }\n\n  /**\n   * `compileResult` returned by `compileOneFile` is a string.\n   * @param {InputFile} inputFile\n   * @param {String} compileResult Guaranteed to be valid JSON.\n   */\n  addCompileResult(inputFile, compileResult) {\n    /*\n     * If the settings file is loaded from the app, the package name should be `null`.\n     * If the settings file is loaded from package tests, `isTestName` should return true.\n     */\n    const pkgName = inputFile.getPackageName();\n    if (!(pkgName === null || isTestName(pkgName))) {\n      // Settings files loaded from packages are ignored.\n      // Already logged in `compileOneFile`. Ignore silently.\n      return;\n    }\n\n    const settingsFile = inputFile;\n    const finalSettings = JSON.parse(compileResult);\n\n    // Attach the settings to MDl.\n    settingsFile.addJavaScript({\n      data: 'MDl.settings = JSON.parse(decodeURI(\"' + encodeURI(JSON.stringify(finalSettings)) + '\"));\\n',\n      path: path.join('client', 'lib', 'settings-file-checked.generated.js'),\n      bare: true\n    });\n\n    this._loadJsLib(settingsFile, finalSettings);\n    this._loadTheme(settingsFile, finalSettings);\n  }\n\n  /**\n   * Try to get the content of the specified asset.\n   * If fails for any reason, the error will be thrown to the InputFile.\n   * @param {InputFile} inputFile\n   * @param {String} assetPath\n   * @returns {String|null} Text content of the asset if found. Otherwise null.\n   */\n  _tryToGetAssetData(inputFile, assetPath) {\n    try {\n      return getAsset(assetPath);\n    } catch (error) {\n      inputFile.error(error);\n      return null;\n    }\n  }\n\n  /**\n   * Returns the full theme file name for the given color combination.\n   * @param {String} primary\n   * @param {String} accent\n   * @returns {String}\n   */\n  _getThemeFileName(primary, accent) {\n    return 'material.' + path.basename(primary) + '-' + path.basename(accent) + '.min.css';\n  }\n\n  /**\n   * Add js files to the InputFile based on the settings.\n   * @param {InputFile} inputFile\n   * @param {Object} settings\n   * @param {Object} settings.jsLib\n   * @param {Boolean} settings.jsLib.minified\n   */\n  _loadJsLib(inputFile, settings) {\n    const jsLibFileName = settings.jsLib.minified ? 'material.min.js' : 'material.js';\n    const jsLibFilePath = path.join('dist', jsLibFileName);\n    const jsLibFileData = this._tryToGetAssetData(inputFile, jsLibFilePath);\n    if (jsLibFileData === null) {\n      // Has error getting the asset.\n      inputFile.error(new Error('Could not load JavaScript lib file.'));\n      return;\n    }\n    //else\n\n    inputFile.addJavaScript({\n      data: jsLibFileData,\n      path: path.join('client', 'lib', jsLibFilePath),\n      bare: true\n    });\n    inputFile.addJavaScript({\n      data: 'MDl.componentHandler = componentHandler;\\n',\n      path: path.join('client', 'lib', 'attach-componentHandler.generated.js'),\n      bare: true\n    });\n  }\n\n  /**\n   * Add css files to the InputFile based on the settings.\n   * @param {InputFile} inputFile\n   * @param {Object} settings\n   * @param {Object|false} settings.theme\n   * @param {String} settings.theme.primary\n   * @param {String} settings.theme.accent\n   */\n  _loadTheme(inputFile, settings) {\n    const theme = settings.theme;\n    if (theme === false) {\n      // Disable theme.\n      return;\n    }\n    //else\n\n    // Load theme.\n    const themeFileName = this._getThemeFileName(theme.primary, theme.accent);\n    const themeFilePath = path.join('dist', themeFileName);\n    const themeFileData = this._tryToGetAssetData(inputFile, themeFilePath);\n    if (themeFileData === null) {\n      // Has error getting the asset.\n      inputFile.error(new Error('Could not load theme stylesheet.'));\n      return;\n    }\n    //else\n\n    inputFile.addStylesheet({\n      data: themeFileData,\n      path: path.join('client', 'lib', themeFilePath),\n      bare: true\n    });\n  }\n}\nCompiler.defaultSettings = {\n  \"jsLib\": {\n    \"minified\": false\n  },\n  \"theme\": {\n    \"primary\": \"indigo\",\n    \"accent\": \"pink\"\n  },\n  \"patches\": {\n    \"autoUpgrade\": \"fullUpgrade\"\n  },\n  \"verbose\": false\n};\nCompiler.settingsSchema = Match.ObjectIncluding({\n  \"jsLib\": Match.ObjectIncluding({\n    \"minified\": Boolean\n  }),\n  // Note: there're only minified theme files.\n  \"theme\": Match.OneOf(false, Match.ObjectIncluding({\n    \"primary\": String,\n    \"accent\": String\n  })),\n  \"patches\": {\n    \"autoUpgrade\": Match.OneOf(false, \"fullUpgrade\", \"mutationOnly\", \"none\")\n  },\n  \"verbose\": Boolean\n});\n\nconst logLabel = 'zodiase:mdl';\nconst log = function () {\n  let args = sliceArguments(arguments);\n  args.unshift('*', logLabel, '>');\n  console.log.apply(console, args);\n};\n\nconst sliceArguments = function (_arguments) {\n  let args = new Array(_arguments.length);\n  for (let i = 0, n = _arguments.length; i < n; i++) {\n    args[i] = _arguments[i];\n  }\n  return args;\n};\n"]},"hash":"32b552af7c5e55987982606671df84a894b8d3c4"}
