{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zodiase:mdl-assets/src/spinner/spinner.js","filenameRelative":"packages/zodiase:mdl-assets/src/spinner/spinner.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zodiase:mdl-assets/src/spinner/spinner.js.map","sourceFileName":"packages/zodiase:mdl-assets/src/spinner/spinner.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"spinner"},"ignored":false,"code":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */(function () {\n  'use strict'; /**\n                 * Class constructor for Spinner MDL component.\n                 * Implements MDL component design pattern defined at:\n                 * https://github.com/jasonmayes/mdl-component-design-pattern\n                 *\n                 * @param {HTMLElement} element The element that will be upgraded.\n                 * @constructor\n                 */\n\n  var MaterialSpinner = function MaterialSpinner(element) {\n    this.element_ = element; // Initialize instance.\n\n    this.init();\n  };\n\n  window['MaterialSpinner'] = MaterialSpinner; /**\n                                                * Store constants in one place so they can be updated easily.\n                                                *\n                                                * @enum {string | number}\n                                                * @private\n                                                */\n  MaterialSpinner.prototype.Constant_ = {\n    MDL_SPINNER_LAYER_COUNT: 4\n  }; /**\n      * Store strings for class names defined by this component that are used in\n      * JavaScript. This allows us to simply change it in one place should we\n      * decide to modify at a later date.\n      *\n      * @enum {string}\n      * @private\n      */\n  MaterialSpinner.prototype.CssClasses_ = {\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\n  }; /**\n      * Auxiliary method to create a spinner layer.\n      *\n      * @param {number} index Index of the layer to be created.\n      * @public\n      */\n\n  MaterialSpinner.prototype.createLayer = function (index) {\n    var layer = document.createElement('div');\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\n    var leftClipper = document.createElement('div');\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n    var gapPatch = document.createElement('div');\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n    var rightClipper = document.createElement('div');\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n    var circleOwners = [leftClipper, gapPatch, rightClipper];\n\n    for (var i = 0; i < circleOwners.length; i++) {\n      var circle = document.createElement('div');\n      circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n      circleOwners[i].appendChild(circle);\n    }\n\n    layer.appendChild(leftClipper);\n    layer.appendChild(gapPatch);\n    layer.appendChild(rightClipper);\n    this.element_.appendChild(layer);\n  };\n\n  MaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer; /**\n                                                                                     * Stops the spinner animation.\n                                                                                     * Public method for users who need to stop the spinner for any reason.\n                                                                                     *\n                                                                                     * @public\n                                                                                     */\n\n  MaterialSpinner.prototype.stop = function () {\n    this.element_.classList.remove('is-active');\n  };\n\n  MaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop; /**\n                                                                       * Starts the spinner animation.\n                                                                       * Public method for users who need to manually start the spinner for any reason\n                                                                       * (instead of just adding the 'is-active' class to their markup).\n                                                                       *\n                                                                       * @public\n                                                                       */\n\n  MaterialSpinner.prototype.start = function () {\n    this.element_.classList.add('is-active');\n  };\n\n  MaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start; /**\n                                                                         * Initialize element.\n                                                                         */\n\n  MaterialSpinner.prototype.init = function () {\n    if (this.element_) {\n      for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\n        this.createLayer(i);\n      }\n\n      this.element_.classList.add('is-upgraded');\n    }\n  }; // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n\n\n  componentHandler.register({\n    constructor: MaterialSpinner,\n    classAsString: 'MaterialSpinner',\n    cssClass: 'mdl-js-spinner',\n    widget: true\n  });\n})();","map":{"version":3,"sources":["packages/zodiase:mdl-assets/src/spinner/spinner.js"],"names":["MaterialSpinner","element","element_","init","window","prototype","Constant_","MDL_SPINNER_LAYER_COUNT","CssClasses_","MDL_SPINNER_LAYER","MDL_SPINNER_CIRCLE_CLIPPER","MDL_SPINNER_CIRCLE","MDL_SPINNER_GAP_PATCH","MDL_SPINNER_LEFT","MDL_SPINNER_RIGHT","createLayer","index","layer","document","createElement","classList","add","leftClipper","gapPatch","rightClipper","circleOwners","i","length","circle","appendChild","stop","remove","start","componentHandler","register","constructor","classAsString","cssClass","widget"],"mappings":"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","file":"packages/zodiase:mdl-assets/src/spinner/spinner.js.map","sourcesContent":["/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Spinner MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   * @constructor\n   */\n  var MaterialSpinner = function MaterialSpinner(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialSpinner'] = MaterialSpinner;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialSpinner.prototype.Constant_ = {\n    MDL_SPINNER_LAYER_COUNT: 4\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialSpinner.prototype.CssClasses_ = {\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\n  };\n\n  /**\n   * Auxiliary method to create a spinner layer.\n   *\n   * @param {number} index Index of the layer to be created.\n   * @public\n   */\n  MaterialSpinner.prototype.createLayer = function(index) {\n    var layer = document.createElement('div');\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\n\n    var leftClipper = document.createElement('div');\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n\n    var gapPatch = document.createElement('div');\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n\n    var rightClipper = document.createElement('div');\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n\n    var circleOwners = [leftClipper, gapPatch, rightClipper];\n\n    for (var i = 0; i < circleOwners.length; i++) {\n      var circle = document.createElement('div');\n      circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n      circleOwners[i].appendChild(circle);\n    }\n\n    layer.appendChild(leftClipper);\n    layer.appendChild(gapPatch);\n    layer.appendChild(rightClipper);\n\n    this.element_.appendChild(layer);\n  };\n  MaterialSpinner.prototype['createLayer'] =\n      MaterialSpinner.prototype.createLayer;\n\n  /**\n   * Stops the spinner animation.\n   * Public method for users who need to stop the spinner for any reason.\n   *\n   * @public\n   */\n  MaterialSpinner.prototype.stop = function() {\n    this.element_.classList.remove('is-active');\n  };\n  MaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;\n\n  /**\n   * Starts the spinner animation.\n   * Public method for users who need to manually start the spinner for any reason\n   * (instead of just adding the 'is-active' class to their markup).\n   *\n   * @public\n   */\n  MaterialSpinner.prototype.start = function() {\n    this.element_.classList.add('is-active');\n  };\n  MaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;\n\n  /**\n   * Initialize element.\n   */\n  MaterialSpinner.prototype.init = function() {\n    if (this.element_) {\n      for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\n        this.createLayer(i);\n      }\n\n      this.element_.classList.add('is-upgraded');\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialSpinner,\n    classAsString: 'MaterialSpinner',\n    cssClass: 'mdl-js-spinner',\n    widget: true\n  });\n})();\n"]},"hash":"4a87e445d7fbbea16440ae6f99b3c19950ff3352"}
