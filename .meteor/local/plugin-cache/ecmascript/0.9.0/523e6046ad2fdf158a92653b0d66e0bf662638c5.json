{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"lib/collections/comments.js","filenameRelative":"lib/collections/comments.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"lib/collections/comments.js.map","sourceFileName":"lib/collections/comments.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"comments"},"ignored":false,"code":"Comments = new Mongo.Collection('comments');\nMeteor.methods({\n  commentInsert: function (commentAttributes) {\n    check(this.userId, String);\n    check(commentAttributes, {\n      postId: String,\n      body: String\n    });\n    var user = Meteor.user();\n    var post = Posts.findOne(commentAttributes.postId);\n    if (!post) throw new Meteor.Error('invalid-comment', 'You must comment on a post');\n    comment = _.extend(commentAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date()\n    }); // update the post with the number of comments\n\n    Posts.update(comment.postId, {\n      $inc: {\n        commentsCount: 1\n      }\n    }); // create the comment, save the id\n\n    comment._id = Comments.insert(comment); // now create a notification, informing the user that there's been a comment\n\n    createCommentNotification(comment);\n    return comment._id;\n  }\n});","map":{"version":3,"sources":["lib/collections/comments.js"],"names":["Comments","Mongo","Collection","Meteor","methods","commentInsert","commentAttributes","check","userId","String","postId","body","user","post","Posts","findOne","Error","comment","_","extend","_id","author","username","submitted","Date","update","$inc","commentsCount","insert","createCommentNotification"],"mappings":"AAAAA,WAAW,IAAIC,MAAMC,UAAV,CAAqB,UAArB,CAAX;AAEAC,OAAOC,OAAP,CAAe;AACbC,iBAAe,UAASC,iBAAT,EAA4B;AACzCC,UAAM,KAAKC,MAAX,EAAmBC,MAAnB;AACAF,UAAMD,iBAAN,EAAyB;AACvBI,cAAQD,MADe;AAEvBE,YAAMF;AAFiB,KAAzB;AAKA,QAAIG,OAAOT,OAAOS,IAAP,EAAX;AACA,QAAIC,OAAOC,MAAMC,OAAN,CAAcT,kBAAkBI,MAAhC,CAAX;AAEA,QAAI,CAACG,IAAL,EACE,MAAM,IAAIV,OAAOa,KAAX,CAAiB,iBAAjB,EAAoC,4BAApC,CAAN;AAEFC,cAAUC,EAAEC,MAAF,CAASb,iBAAT,EAA4B;AACpCE,cAAQI,KAAKQ,GADuB;AAEpCC,cAAQT,KAAKU,QAFuB;AAGpCC,iBAAW,IAAIC,IAAJ;AAHyB,KAA5B,CAAV,CAbyC,CAmBzC;;AACAV,UAAMW,MAAN,CAAaR,QAAQP,MAArB,EAA6B;AAACgB,YAAM;AAACC,uBAAe;AAAhB;AAAP,KAA7B,EApByC,CAsBzC;;AACAV,YAAQG,GAAR,GAAcpB,SAAS4B,MAAT,CAAgBX,OAAhB,CAAd,CAvByC,CAyBzC;;AACAY,8BAA0BZ,OAA1B;AAEA,WAAOA,QAAQG,GAAf;AACD;AA9BY,CAAf","file":"lib/collections/comments.js.map","sourcesContent":["Comments = new Mongo.Collection('comments');\n\nMeteor.methods({\n  commentInsert: function(commentAttributes) {\n    check(this.userId, String);\n    check(commentAttributes, {\n      postId: String,\n      body: String\n    });\n    \n    var user = Meteor.user();\n    var post = Posts.findOne(commentAttributes.postId);\n\n    if (!post)\n      throw new Meteor.Error('invalid-comment', 'You must comment on a post');\n    \n    comment = _.extend(commentAttributes, {\n      userId: user._id,\n      author: user.username,\n      submitted: new Date()\n    });\n    \n    // update the post with the number of comments\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\n    \n    // create the comment, save the id\n    comment._id = Comments.insert(comment);\n    \n    // now create a notification, informing the user that there's been a comment\n    createCommentNotification(comment);\n    \n    return comment._id;\n  }\n});\n"]},"hash":"523e6046ad2fdf158a92653b0d66e0bf662638c5"}
