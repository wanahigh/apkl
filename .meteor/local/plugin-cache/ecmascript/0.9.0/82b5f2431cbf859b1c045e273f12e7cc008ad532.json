{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/accounts-base/accounts_client_tests.js","filenameRelative":"packages/accounts-base/accounts_client_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/accounts-base/accounts_client_tests.js.map","sourceFileName":"packages/accounts-base/accounts_client_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"accounts_client_tests"},"ignored":false,"code":"const username = 'jsmith';\nconst password = 'password';\n\nconst logoutAndCreateUser = (test, done, nextTests) => {\n  Meteor.logout(() => {\n    // Make sure we're logged out to start with\n    test.isFalse(Meteor.user()); // Setup a new test user\n\n    Accounts.createUser({\n      username,\n      password\n    }, () => {\n      // Handle next tests\n      nextTests(test, done);\n    });\n  });\n};\n\nconst removeTestUser = done => {\n  Meteor.call('removeAccountsTestUser', username, () => {\n    done();\n  });\n};\n\nTinytest.addAsync('accounts - Meteor.loggingIn() is true right after a login call', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Login then immediately verify loggingIn is true\n    Meteor.loginWithPassword(username, password);\n    test.isTrue(Meteor.loggingIn());\n    removeTestUser(done);\n  });\n});\nTinytest.addAsync('accounts - Meteor.loggingIn() is false after login has completed', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Login then verify loggingIn is false after login has completed\n    Meteor.loginWithPassword(username, password, () => {\n      test.isTrue(Meteor.user());\n      test.isFalse(Meteor.loggingIn());\n      removeTestUser(done);\n    });\n  });\n});\nTinytest.addAsync('accounts - Meteor.loggingOut() is true right after a logout call', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Logout then immediately verify loggingOut is true\n    Meteor.logout();\n    test.isTrue(Meteor.loggingOut());\n    removeTestUser(done);\n  });\n});\nTinytest.addAsync('accounts - Meteor.loggingOut() is false after logout has completed', (test, done) => {\n  logoutAndCreateUser(test, done, () => {\n    // Logout then verify loggingOut is false after logout has completed\n    Meteor.logout(error => {\n      test.isFalse(Meteor.user());\n      test.isFalse(Meteor.loggingOut());\n      removeTestUser(done);\n    });\n  });\n});","map":{"version":3,"sources":["packages/accounts-base/accounts_client_tests.js"],"names":["username","password","logoutAndCreateUser","test","done","nextTests","Meteor","logout","isFalse","user","Accounts","createUser","removeTestUser","call","Tinytest","addAsync","loginWithPassword","isTrue","loggingIn","loggingOut","error"],"mappings":"AAAA,MAAMA,WAAW,QAAjB;AACA,MAAMC,WAAW,UAAjB;;AAEA,MAAMC,sBAAsB,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,KAA2B;AACrDC,SAAOC,MAAP,CAAc,MAAM;AAClB;AACAJ,SAAKK,OAAL,CAAaF,OAAOG,IAAP,EAAb,EAFkB,CAIlB;;AACAC,aAASC,UAAT,CAAoB;AAAEX,cAAF;AAAYC;AAAZ,KAApB,EAA4C,MAAM;AAChD;AACAI,gBAAUF,IAAV,EAAgBC,IAAhB;AACD,KAHD;AAID,GATD;AAUD,CAXD;;AAaA,MAAMQ,iBAAkBR,IAAD,IAAU;AAC/BE,SAAOO,IAAP,CAAY,wBAAZ,EAAsCb,QAAtC,EAAgD,MAAM;AACpDI;AACD,GAFD;AAGD,CAJD;;AAMAU,SAASC,QAAT,CACE,gEADF,EAEE,CAACZ,IAAD,EAAOC,IAAP,KAAgB;AACdF,sBAAoBC,IAApB,EAA0BC,IAA1B,EAAgC,MAAM;AACpC;AACAE,WAAOU,iBAAP,CAAyBhB,QAAzB,EAAmCC,QAAnC;AACAE,SAAKc,MAAL,CAAYX,OAAOY,SAAP,EAAZ;AACAN,mBAAeR,IAAf;AACD,GALD;AAMD,CATH;AAYAU,SAASC,QAAT,CACE,kEADF,EAEE,CAACZ,IAAD,EAAOC,IAAP,KAAgB;AACdF,sBAAoBC,IAApB,EAA0BC,IAA1B,EAAgC,MAAM;AACpC;AACAE,WAAOU,iBAAP,CAAyBhB,QAAzB,EAAmCC,QAAnC,EAA6C,MAAM;AACjDE,WAAKc,MAAL,CAAYX,OAAOG,IAAP,EAAZ;AACAN,WAAKK,OAAL,CAAaF,OAAOY,SAAP,EAAb;AACAN,qBAAeR,IAAf;AACD,KAJD;AAKD,GAPD;AAQD,CAXH;AAcAU,SAASC,QAAT,CACE,kEADF,EAEE,CAACZ,IAAD,EAAOC,IAAP,KAAgB;AACdF,sBAAoBC,IAApB,EAA0BC,IAA1B,EAAgC,MAAM;AACpC;AACAE,WAAOC,MAAP;AACAJ,SAAKc,MAAL,CAAYX,OAAOa,UAAP,EAAZ;AACAP,mBAAeR,IAAf;AACD,GALD;AAMD,CATH;AAYAU,SAASC,QAAT,CACE,oEADF,EAEE,CAACZ,IAAD,EAAOC,IAAP,KAAgB;AACdF,sBAAoBC,IAApB,EAA0BC,IAA1B,EAAgC,MAAM;AACpC;AACAE,WAAOC,MAAP,CAAea,KAAD,IAAW;AACvBjB,WAAKK,OAAL,CAAaF,OAAOG,IAAP,EAAb;AACAN,WAAKK,OAAL,CAAaF,OAAOa,UAAP,EAAb;AACAP,qBAAeR,IAAf;AACD,KAJD;AAKD,GAPD;AAQD,CAXH","file":"packages/accounts-base/accounts_client_tests.js.map","sourcesContent":["const username = 'jsmith';\nconst password = 'password';\n\nconst logoutAndCreateUser = (test, done, nextTests) => {\n  Meteor.logout(() => {\n    // Make sure we're logged out to start with\n    test.isFalse(Meteor.user());\n\n    // Setup a new test user\n    Accounts.createUser({ username, password }, () => {\n      // Handle next tests\n      nextTests(test, done);\n    });\n  });\n};\n\nconst removeTestUser = (done) => {\n  Meteor.call('removeAccountsTestUser', username, () => {\n    done();\n  });\n};\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingIn() is true right after a login call',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Login then immediately verify loggingIn is true\n      Meteor.loginWithPassword(username, password);\n      test.isTrue(Meteor.loggingIn());\n      removeTestUser(done);\n    });\n  }\n);\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingIn() is false after login has completed',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Login then verify loggingIn is false after login has completed\n      Meteor.loginWithPassword(username, password, () => {\n        test.isTrue(Meteor.user());\n        test.isFalse(Meteor.loggingIn());\n        removeTestUser(done);\n      });\n    });\n  }\n);\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingOut() is true right after a logout call',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Logout then immediately verify loggingOut is true\n      Meteor.logout();\n      test.isTrue(Meteor.loggingOut());\n      removeTestUser(done);\n    });\n  }\n);\n\nTinytest.addAsync(\n  'accounts - Meteor.loggingOut() is false after logout has completed',\n  (test, done) => {\n    logoutAndCreateUser(test, done, () => {\n      // Logout then verify loggingOut is false after logout has completed\n      Meteor.logout((error) => {\n        test.isFalse(Meteor.user());\n        test.isFalse(Meteor.loggingOut());\n        removeTestUser(done);\n      });\n    });\n  }\n);\n"]},"hash":"82b5f2431cbf859b1c045e273f12e7cc008ad532"}
