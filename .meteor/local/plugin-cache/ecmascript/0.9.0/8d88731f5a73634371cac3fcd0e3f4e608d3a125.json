{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zodiase:mdl-assets/src/icon-toggle/icon-toggle.js","filenameRelative":"packages/zodiase:mdl-assets/src/icon-toggle/icon-toggle.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zodiase:mdl-assets/src/icon-toggle/icon-toggle.js.map","sourceFileName":"packages/zodiase:mdl-assets/src/icon-toggle/icon-toggle.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"icon-toggle"},"ignored":false,"code":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */(function () {\n  'use strict'; /**\n                 * Class constructor for icon toggle MDL component.\n                 * Implements MDL component design pattern defined at:\n                 * https://github.com/jasonmayes/mdl-component-design-pattern\n                 *\n                 * @constructor\n                 * @param {HTMLElement} element The element that will be upgraded.\n                 */\n\n  var MaterialIconToggle = function MaterialIconToggle(element) {\n    this.element_ = element; // Initialize instance.\n\n    this.init();\n  };\n\n  window['MaterialIconToggle'] = MaterialIconToggle; /**\n                                                      * Store constants in one place so they can be updated easily.\n                                                      *\n                                                      * @enum {string | number}\n                                                      * @private\n                                                      */\n  MaterialIconToggle.prototype.Constant_ = {\n    TINY_TIMEOUT: 0.001\n  }; /**\n      * Store strings for class names defined by this component that are used in\n      * JavaScript. This allows us to simply change it in one place should we\n      * decide to modify at a later date.\n      *\n      * @enum {string}\n      * @private\n      */\n  MaterialIconToggle.prototype.CssClasses_ = {\n    INPUT: 'mdl-icon-toggle__input',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n  }; /**\n      * Handle change of state.\n      *\n      * @param {Event} event The event that fired.\n      * @private\n      */\n\n  MaterialIconToggle.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n  }; /**\n      * Handle focus of element.\n      *\n      * @param {Event} event The event that fired.\n      * @private\n      */\n\n  MaterialIconToggle.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  }; /**\n      * Handle lost focus of element.\n      *\n      * @param {Event} event The event that fired.\n      * @private\n      */\n\n  MaterialIconToggle.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  }; /**\n      * Handle mouseup.\n      *\n      * @param {Event} event The event that fired.\n      * @private\n      */\n\n  MaterialIconToggle.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n  }; /**\n      * Handle class updates.\n      *\n      * @private\n      */\n\n  MaterialIconToggle.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n  }; /**\n      * Add blur.\n      *\n      * @private\n      */\n\n  MaterialIconToggle.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n      this.inputElement_.blur();\n    }.bind(this), /** @type {number} */this.Constant_.TINY_TIMEOUT);\n  }; // Public methods.\n  /**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\n\n  MaterialIconToggle.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n      this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n  };\n\n  MaterialIconToggle.prototype['checkToggleState'] = MaterialIconToggle.prototype.checkToggleState; /**\n                                                                                                     * Check the inputs disabled state and update display.\n                                                                                                     *\n                                                                                                     * @public\n                                                                                                     */\n\n  MaterialIconToggle.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n\n  MaterialIconToggle.prototype['checkDisabled'] = MaterialIconToggle.prototype.checkDisabled; /**\n                                                                                               * Disable icon toggle.\n                                                                                               *\n                                                                                               * @public\n                                                                                               */\n\n  MaterialIconToggle.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n  };\n\n  MaterialIconToggle.prototype['disable'] = MaterialIconToggle.prototype.disable; /**\n                                                                                   * Enable icon toggle.\n                                                                                   *\n                                                                                   * @public\n                                                                                   */\n\n  MaterialIconToggle.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n  };\n\n  MaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable; /**\n                                                                                 * Check icon toggle.\n                                                                                 *\n                                                                                 * @public\n                                                                                 */\n\n  MaterialIconToggle.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n  };\n\n  MaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check; /**\n                                                                               * Uncheck icon toggle.\n                                                                               *\n                                                                               * @public\n                                                                               */\n\n  MaterialIconToggle.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n  };\n\n  MaterialIconToggle.prototype['uncheck'] = MaterialIconToggle.prototype.uncheck; /**\n                                                                                   * Initialize element.\n                                                                                   */\n\n  MaterialIconToggle.prototype.init = function () {\n    if (this.element_) {\n      this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n\n      if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n        this.rippleContainerElement_ = document.createElement('span');\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n        this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n        this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n        var ripple = document.createElement('span');\n        ripple.classList.add(this.CssClasses_.RIPPLE);\n        this.rippleContainerElement_.appendChild(ripple);\n        this.element_.appendChild(this.rippleContainerElement_);\n      }\n\n      this.boundInputOnChange = this.onChange_.bind(this);\n      this.boundInputOnFocus = this.onFocus_.bind(this);\n      this.boundInputOnBlur = this.onBlur_.bind(this);\n      this.boundElementOnMouseUp = this.onMouseUp_.bind(this);\n      this.inputElement_.addEventListener('change', this.boundInputOnChange);\n      this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n      this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n      this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);\n      this.updateClasses_();\n      this.element_.classList.add('is-upgraded');\n    }\n  }; // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n\n\n  componentHandler.register({\n    constructor: MaterialIconToggle,\n    classAsString: 'MaterialIconToggle',\n    cssClass: 'mdl-js-icon-toggle',\n    widget: true\n  });\n})();","map":{"version":3,"sources":["packages/zodiase:mdl-assets/src/icon-toggle/icon-toggle.js"],"names":["MaterialIconToggle","element","element_","init","window","prototype","Constant_","TINY_TIMEOUT","CssClasses_","INPUT","JS_RIPPLE_EFFECT","RIPPLE_IGNORE_EVENTS","RIPPLE_CONTAINER","RIPPLE_CENTER","RIPPLE","IS_FOCUSED","IS_DISABLED","IS_CHECKED","onChange_","event","updateClasses_","onFocus_","classList","add","onBlur_","remove","onMouseUp_","blur_","checkDisabled","checkToggleState","setTimeout","inputElement_","blur","bind","checked","disabled","disable","enable","check","uncheck","querySelector","contains","rippleContainerElement_","document","createElement","boundRippleMouseUp","addEventListener","ripple","appendChild","boundInputOnChange","boundInputOnFocus","boundInputOnBlur","boundElementOnMouseUp","componentHandler","register","constructor","classAsString","cssClass","widget"],"mappings":"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","file":"packages/zodiase:mdl-assets/src/icon-toggle/icon-toggle.js.map","sourcesContent":["/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for icon toggle MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialIconToggle = function MaterialIconToggle(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialIconToggle'] = MaterialIconToggle;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialIconToggle.prototype.Constant_ = {\n    TINY_TIMEOUT: 0.001\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialIconToggle.prototype.CssClasses_ = {\n    INPUT: 'mdl-icon-toggle__input',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n  };\n\n  /**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialIconToggle.prototype.onChange_ = function(event) {\n    this.updateClasses_();\n  };\n\n  /**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialIconToggle.prototype.onFocus_ = function(event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialIconToggle.prototype.onBlur_ = function(event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialIconToggle.prototype.onMouseUp_ = function(event) {\n    this.blur_();\n  };\n\n  /**\n   * Handle class updates.\n   *\n   * @private\n   */\n  MaterialIconToggle.prototype.updateClasses_ = function() {\n    this.checkDisabled();\n    this.checkToggleState();\n  };\n\n  /**\n   * Add blur.\n   *\n   * @private\n   */\n  MaterialIconToggle.prototype.blur_ = function() {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function() {\n      this.inputElement_.blur();\n    }.bind(this), /** @type {number} */ (this.Constant_.TINY_TIMEOUT));\n  };\n\n  // Public methods.\n\n  /**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\n  MaterialIconToggle.prototype.checkToggleState = function() {\n    if (this.inputElement_.checked) {\n      this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n  };\n  MaterialIconToggle.prototype['checkToggleState'] =\n      MaterialIconToggle.prototype.checkToggleState;\n\n  /**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\n  MaterialIconToggle.prototype.checkDisabled = function() {\n    if (this.inputElement_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialIconToggle.prototype['checkDisabled'] =\n      MaterialIconToggle.prototype.checkDisabled;\n\n  /**\n   * Disable icon toggle.\n   *\n   * @public\n   */\n  MaterialIconToggle.prototype.disable = function() {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialIconToggle.prototype['disable'] =\n      MaterialIconToggle.prototype.disable;\n\n  /**\n   * Enable icon toggle.\n   *\n   * @public\n   */\n  MaterialIconToggle.prototype.enable = function() {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable;\n\n  /**\n   * Check icon toggle.\n   *\n   * @public\n   */\n  MaterialIconToggle.prototype.check = function() {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n  };\n  MaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check;\n\n  /**\n   * Uncheck icon toggle.\n   *\n   * @public\n   */\n  MaterialIconToggle.prototype.uncheck = function() {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n  };\n  MaterialIconToggle.prototype['uncheck'] =\n      MaterialIconToggle.prototype.uncheck;\n\n  /**\n   * Initialize element.\n   */\n  MaterialIconToggle.prototype.init = function() {\n\n    if (this.element_) {\n      this.inputElement_ =\n          this.element_.querySelector('.' + this.CssClasses_.INPUT);\n\n      if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n        this.rippleContainerElement_ = document.createElement('span');\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n        this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n        this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n\n        var ripple = document.createElement('span');\n        ripple.classList.add(this.CssClasses_.RIPPLE);\n\n        this.rippleContainerElement_.appendChild(ripple);\n        this.element_.appendChild(this.rippleContainerElement_);\n      }\n\n      this.boundInputOnChange = this.onChange_.bind(this);\n      this.boundInputOnFocus = this.onFocus_.bind(this);\n      this.boundInputOnBlur = this.onBlur_.bind(this);\n      this.boundElementOnMouseUp = this.onMouseUp_.bind(this);\n      this.inputElement_.addEventListener('change', this.boundInputOnChange);\n      this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n      this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n      this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);\n\n      this.updateClasses_();\n      this.element_.classList.add('is-upgraded');\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialIconToggle,\n    classAsString: 'MaterialIconToggle',\n    cssClass: 'mdl-js-icon-toggle',\n    widget: true\n  });\n})();\n"]},"hash":"8d88731f5a73634371cac3fcd0e3f4e608d3a125"}
