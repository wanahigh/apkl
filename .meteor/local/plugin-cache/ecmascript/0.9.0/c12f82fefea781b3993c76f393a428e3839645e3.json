{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zodiase:mdl/patch/autoUpgrade.js","filenameRelative":"packages/zodiase:mdl/patch/autoUpgrade.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zodiase:mdl/patch/autoUpgrade.js.map","sourceFileName":"packages/zodiase:mdl/patch/autoUpgrade.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"autoUpgrade"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// This patch is used for auto-upgrading when DOM is changed by blaze.\n// Well, maybe not just blaze.\n// But when you are manipulating the DOM by yourself, you should remember to upgrade.\n//\n// Browser compatibility: check https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n// also http://caniuse.com/#search=MutationObserver\n/*global MDl:true*/if (Meteor.isClient) {\n  var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n  var ObjectHasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var AutoUpgrade = function () {\n    AutoUpgrade.handleMutation = function () {\n      function handleMutation(mutation) {\n        switch (mutation.type) {\n          case 'attributes':\n            //! Try to upgrade this element.\n            break;\n\n          case 'characterData':\n            // Ignore character changes.\n            break;\n\n          case 'childList':\n            // Upgrade the new children.\n            if (mutation.addedNodes.length > 0 && mutation.target instanceof Element) {\n              MDl.componentHandler.upgradeElements(mutation.target);\n            }\n\n            break;\n\n          default:\n            throw new Error('Invalid type of mutation.');\n            break;\n        }\n      }\n\n      return handleMutation;\n    }();\n\n    function AutoUpgrade(MutationObserver) {\n      (0, _classCallCheck3.default)(this, AutoUpgrade);\n      this._upgradeStyle = false;\n      this._upgradeBehavior = null;\n      this._observer = new MutationObserver(this.onMutationObserved.bind(this));\n    }\n\n    AutoUpgrade.prototype.onMutationObserved = function () {\n      function onMutationObserved(mutations, observer) {\n        if (this._upgradeBehavior) {\n          this._upgradeBehavior(mutations, observer);\n        }\n      }\n\n      return onMutationObserved;\n    }();\n\n    AutoUpgrade.prototype.setUpgradeStyle = function () {\n      function setUpgradeStyle(style) {\n        if (ObjectHasOwnProperty.call(AutoUpgrade.upgradeBehaviors, style)) {\n          this._upgradeStyle = style;\n          this._upgradeBehavior = AutoUpgrade.upgradeBehaviors[style];\n\n          if (style === 'none') {\n            this._observer.disconnect();\n          } else {\n            this._observer.observe(document.body, AutoUpgrade.observeConfig);\n          }\n        } else {\n          throw new Error(\"Invalid upgrade style.\");\n        }\n      }\n\n      return setUpgradeStyle;\n    }();\n\n    AutoUpgrade.prototype.getUpgradeStyle = function () {\n      function getUpgradeStyle() {\n        return this._upgradeStyle;\n      }\n\n      return getUpgradeStyle;\n    }();\n\n    return AutoUpgrade;\n  }();\n\n  AutoUpgrade.upgradeBehaviors = {\n    \"fullUpgrade\": function (mutations, observer) {\n      MDl.componentHandler.upgradeAllRegistered();\n    },\n    \"mutationOnly\": function (mutations, observer) {\n      for (var i = 0, n = mutations.length; i < n; i++) {\n        AutoUpgrade.handleMutation(mutations[i]);\n      }\n    },\n    \"none\": function (mutations, observer) {}\n  };\n  AutoUpgrade.observeConfig = {\n    childList: true,\n    attributes: true,\n    characterData: false,\n    subtree: true //attributeOldValue: false,\n    //characterDataOldValue: false\n    //attributeFilter: []\n\n  };\n  Meteor.startup(function () {\n    // Check if settings is loaded.\n    if (typeof this.settings === 'undefined') {\n      return;\n    } //else\n    // Read settings.\n\n\n    var upgradeStyle = this.settings.patches.autoUpgrade; // If upgradeStyle is `false`, disable everything.\n\n    if (upgradeStyle === false) {\n      this.autoUpgrade = null;\n    } else {\n      // If MutationObserver is not available on this platform, there's little we can do.\n      if (!MutationObserver) {\n        throw new Error(\"MDl AutoUpgrade doesn't support your current client environment. Please disable it.\");\n      } else {\n        this.autoUpgrade = new AutoUpgrade(MutationObserver);\n        this.autoUpgrade.setUpgradeStyle(upgradeStyle);\n      }\n    }\n  }.bind(MDl));\n}","map":{"version":3,"sources":["packages/zodiase:mdl/patch/autoUpgrade.js"],"names":["Meteor","isClient","MutationObserver","window","WebKitMutationObserver","ObjectHasOwnProperty","Object","prototype","hasOwnProperty","AutoUpgrade","handleMutation","mutation","type","addedNodes","length","target","Element","MDl","componentHandler","upgradeElements","Error","_upgradeStyle","_upgradeBehavior","_observer","onMutationObserved","bind","mutations","observer","setUpgradeStyle","style","call","upgradeBehaviors","disconnect","observe","document","body","observeConfig","getUpgradeStyle","upgradeAllRegistered","i","n","childList","attributes","characterData","subtree","startup","settings","upgradeStyle","patches","autoUpgrade"],"mappings":"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","file":"packages/zodiase:mdl/patch/autoUpgrade.js.map","sourcesContent":["// This patch is used for auto-upgrading when DOM is changed by blaze.\n// Well, maybe not just blaze.\n// But when you are manipulating the DOM by yourself, you should remember to upgrade.\n//\n// Browser compatibility: check https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n// also http://caniuse.com/#search=MutationObserver\n\n/*global MDl:true*/\n\nif (Meteor.isClient) {\n  const MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n  const ObjectHasOwnProperty = Object.prototype.hasOwnProperty;\n\n  class AutoUpgrade {\n    static handleMutation(mutation) {\n      switch (mutation.type) {\n        case 'attributes':\n          //! Try to upgrade this element.\n          break;\n        case 'characterData':\n          // Ignore character changes.\n          break;\n        case 'childList':\n          // Upgrade the new children.\n          if (mutation.addedNodes.length > 0 && mutation.target instanceof Element) {\n            MDl.componentHandler.upgradeElements(mutation.target);\n          }\n          break;\n        default:\n          throw new Error('Invalid type of mutation.');\n          break;\n      }\n    }\n    constructor(MutationObserver) {\n      this._upgradeStyle = false;\n      this._upgradeBehavior = null;\n      this._observer = new MutationObserver(this.onMutationObserved.bind(this));\n    }\n    onMutationObserved(mutations, observer) {\n      if (this._upgradeBehavior) {\n        this._upgradeBehavior(mutations, observer);\n      }\n    }\n    setUpgradeStyle(style) {\n      if (ObjectHasOwnProperty.call(AutoUpgrade.upgradeBehaviors, style)) {\n        this._upgradeStyle = style;\n        this._upgradeBehavior = AutoUpgrade.upgradeBehaviors[style];\n\n        if (style === 'none') {\n          this._observer.disconnect();\n        } else {\n          this._observer.observe(document.body, AutoUpgrade.observeConfig);\n        }\n      } else {\n        throw new Error(\"Invalid upgrade style.\");\n      }\n    }\n    getUpgradeStyle() {\n      return this._upgradeStyle;\n    }\n  }\n  AutoUpgrade.upgradeBehaviors = {\n    \"fullUpgrade\": function (mutations, observer) {\n      MDl.componentHandler.upgradeAllRegistered();\n    },\n    \"mutationOnly\": function (mutations, observer) {\n      for (let i = 0, n = mutations.length; i < n; i++) {\n        AutoUpgrade.handleMutation(mutations[i]);\n      }\n    },\n    \"none\": function (mutations, observer) {}\n  };\n  AutoUpgrade.observeConfig = {\n    childList: true,\n    attributes: true,\n    characterData: false,\n    subtree: true\n    //attributeOldValue: false,\n    //characterDataOldValue: false\n    //attributeFilter: []\n  };\n\n  Meteor.startup(function () {\n    // Check if settings is loaded.\n    if (typeof this.settings === 'undefined') {\n      return;\n    }\n    //else\n\n    // Read settings.\n    let upgradeStyle = this.settings.patches.autoUpgrade;\n    // If upgradeStyle is `false`, disable everything.\n    if (upgradeStyle === false) {\n      this.autoUpgrade = null;\n    } else {\n      // If MutationObserver is not available on this platform, there's little we can do.\n      if (!MutationObserver) {\n        throw new Error(\"MDl AutoUpgrade doesn't support your current client environment. Please disable it.\");\n      } else {\n        this.autoUpgrade = new AutoUpgrade(MutationObserver);\n        this.autoUpgrade.setUpgradeStyle(upgradeStyle);\n      }\n    }\n  }.bind(MDl));\n}\n"]},"hash":"c12f82fefea781b3993c76f393a428e3839645e3"}
