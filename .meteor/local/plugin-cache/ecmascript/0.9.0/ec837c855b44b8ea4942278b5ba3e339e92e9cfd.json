{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zodiase:mdl-assets/src/data-table/data-table.js","filenameRelative":"packages/zodiase:mdl-assets/src/data-table/data-table.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zodiase:mdl-assets/src/data-table/data-table.js.map","sourceFileName":"packages/zodiase:mdl-assets/src/data-table/data-table.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"data-table"},"ignored":false,"code":"/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */(function () {\n  'use strict'; /**\n                 * Class constructor for Data Table Card MDL component.\n                 * Implements MDL component design pattern defined at:\n                 * https://github.com/jasonmayes/mdl-component-design-pattern\n                 *\n                 * @constructor\n                 * @param {Element} element The element that will be upgraded.\n                 */\n\n  var MaterialDataTable = function () {\n    function MaterialDataTable(element) {\n      this.element_ = element; // Initialize instance.\n\n      this.init();\n    }\n\n    return MaterialDataTable;\n  }();\n\n  window['MaterialDataTable'] = MaterialDataTable; /**\n                                                    * Store constants in one place so they can be updated easily.\n                                                    *\n                                                    * @enum {string | number}\n                                                    * @private\n                                                    */\n  MaterialDataTable.prototype.Constant_ = {// None at the moment.\n  }; /**\n      * Store strings for class names defined by this component that are used in\n      * JavaScript. This allows us to simply change it in one place should we\n      * decide to modify at a later date.\n      *\n      * @enum {string}\n      * @private\n      */\n  MaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    SELECT_ELEMENT: 'mdl-data-table__select',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n  }; /**\n      * Generates and returns a function that toggles the selection state of a\n      * single row (or multiple rows).\n      *\n      * @param {Element} checkbox Checkbox that toggles the selection state.\n      * @param {Element} row Row to toggle when checkbox changes.\n      * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n      * @private\n      */\n\n  MaterialDataTable.prototype.selectRow_ = function (checkbox, row, opt_rows) {\n    if (row) {\n      return function () {\n        if (checkbox.checked) {\n          row.classList.add(this.CssClasses_.IS_SELECTED);\n        } else {\n          row.classList.remove(this.CssClasses_.IS_SELECTED);\n        }\n      }.bind(this);\n    }\n\n    if (opt_rows) {\n      return function () {\n        var i;\n        var el;\n\n        if (checkbox.checked) {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].check();\n            opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);\n          }\n        } else {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].uncheck();\n            opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n          }\n        }\n      }.bind(this);\n    }\n  }; /**\n      * Creates a checkbox for a single or or multiple rows and hooks up the\n      * event handling.\n      *\n      * @param {Element} row Row to toggle when checkbox changes.\n      * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n      * @private\n      */\n\n  MaterialDataTable.prototype.createCheckbox_ = function (row, opt_rows) {\n    var label = document.createElement('label');\n    var labelClasses = ['mdl-checkbox', 'mdl-js-checkbox', 'mdl-js-ripple-effect', this.CssClasses_.SELECT_ELEMENT];\n    label.className = labelClasses.join(' ');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n\n    if (row) {\n      checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);\n      checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (opt_rows) {\n      checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));\n    }\n\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n  }; /**\n      * Initialize element.\n      */\n\n  MaterialDataTable.prototype.init = function () {\n    if (this.element_) {\n      var firstHeader = this.element_.querySelector('th');\n      var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));\n      var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));\n      var rows = bodyRows.concat(footRows);\n\n      if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n        var th = document.createElement('th');\n        var headerCheckbox = this.createCheckbox_(null, rows);\n        th.appendChild(headerCheckbox);\n        firstHeader.parentElement.insertBefore(th, firstHeader);\n\n        for (var i = 0; i < rows.length; i++) {\n          var firstCell = rows[i].querySelector('td');\n\n          if (firstCell) {\n            var td = document.createElement('td');\n\n            if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {\n              var rowCheckbox = this.createCheckbox_(rows[i]);\n              td.appendChild(rowCheckbox);\n            }\n\n            rows[i].insertBefore(td, firstCell);\n          }\n        }\n\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n      }\n    }\n  }; // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n\n\n  componentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n  });\n})();","map":{"version":3,"sources":["packages/zodiase:mdl-assets/src/data-table/data-table.js"],"names":["MaterialDataTable","element","element_","init","window","prototype","Constant_","CssClasses_","DATA_TABLE","SELECTABLE","SELECT_ELEMENT","IS_SELECTED","IS_UPGRADED","selectRow_","checkbox","row","opt_rows","checked","classList","add","remove","bind","i","el","length","querySelector","check","uncheck","createCheckbox_","label","document","createElement","labelClasses","className","join","type","contains","addEventListener","appendChild","componentHandler","upgradeElement","firstHeader","bodyRows","Array","slice","call","querySelectorAll","footRows","rows","concat","th","headerCheckbox","parentElement","insertBefore","firstCell","td","parentNode","nodeName","toUpperCase","rowCheckbox","register","constructor","classAsString","cssClass"],"mappings":"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","file":"packages/zodiase:mdl-assets/src/data-table/data-table.js.map","sourcesContent":["/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Data Table Card MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {Element} element The element that will be upgraded.\n   */\n  var MaterialDataTable = function MaterialDataTable(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n\n  window['MaterialDataTable'] = MaterialDataTable;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialDataTable.prototype.Constant_ = {\n    // None at the moment.\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    SELECT_ELEMENT: 'mdl-data-table__select',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n  };\n\n  /**\n   * Generates and returns a function that toggles the selection state of a\n   * single row (or multiple rows).\n   *\n   * @param {Element} checkbox Checkbox that toggles the selection state.\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n   * @private\n   */\n  MaterialDataTable.prototype.selectRow_ = function(checkbox, row, opt_rows) {\n    if (row) {\n      return function() {\n        if (checkbox.checked) {\n          row.classList.add(this.CssClasses_.IS_SELECTED);\n        } else {\n          row.classList.remove(this.CssClasses_.IS_SELECTED);\n        }\n      }.bind(this);\n    }\n\n    if (opt_rows) {\n      return function() {\n        var i;\n        var el;\n        if (checkbox.checked) {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].check();\n            opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);\n          }\n        } else {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].uncheck();\n            opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n          }\n        }\n      }.bind(this);\n    }\n  };\n\n  /**\n   * Creates a checkbox for a single or or multiple rows and hooks up the\n   * event handling.\n   *\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n   * @private\n   */\n  MaterialDataTable.prototype.createCheckbox_ = function(row, opt_rows) {\n    var label = document.createElement('label');\n    var labelClasses = [\n      'mdl-checkbox',\n      'mdl-js-checkbox',\n      'mdl-js-ripple-effect',\n      this.CssClasses_.SELECT_ELEMENT\n    ];\n    label.className = labelClasses.join(' ');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n\n    if (row) {\n      checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);\n      checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (opt_rows) {\n      checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));\n    }\n\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n  };\n\n  /**\n   * Initialize element.\n   */\n  MaterialDataTable.prototype.init = function() {\n    if (this.element_) {\n      var firstHeader = this.element_.querySelector('th');\n      var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));\n      var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));\n      var rows = bodyRows.concat(footRows);\n\n      if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n        var th = document.createElement('th');\n        var headerCheckbox = this.createCheckbox_(null, rows);\n        th.appendChild(headerCheckbox);\n        firstHeader.parentElement.insertBefore(th, firstHeader);\n\n        for (var i = 0; i < rows.length; i++) {\n          var firstCell = rows[i].querySelector('td');\n          if (firstCell) {\n            var td = document.createElement('td');\n            if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {\n              var rowCheckbox = this.createCheckbox_(rows[i]);\n              td.appendChild(rowCheckbox);\n            }\n            rows[i].insertBefore(td, firstCell);\n          }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n      }\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n  });\n})();\n"]},"hash":"ec837c855b44b8ea4942278b5ba3e339e92e9cfd"}
