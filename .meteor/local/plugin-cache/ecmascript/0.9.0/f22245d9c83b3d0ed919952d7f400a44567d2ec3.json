{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/zodiase:mdl/plugin/build.js","filenameRelative":"packages/zodiase:mdl/plugin/build.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/zodiase:mdl/plugin/build.js.map","sourceFileName":"packages/zodiase:mdl/plugin/build.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"build"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*\n * Since we are not able to get the assets added by this package, we have to\n * rely on another package to provide the assets. That would be the mdl-assets\n * package, which would export `_mdlGetAsset` function for getting asset files.\n */var settingsFileName = 'zodiase-mdl.json'; // `_mdlGetAsset` is exported from package 'zodiase:mdl-assets'.\n\nvar getAsset = _mdlGetAsset; // jQuery.extend from npm.\n\nvar extend = Npm.require('extend'); // clone from npm.\n\n\nvar clone = Npm.require('clone');\n\nvar path = Plugin.path;\nPlugin.registerCompiler({\n  archMatching: 'web',\n  extensions: [],\n  filenames: [settingsFileName]\n}, function () {\n  return new Compiler();\n}); /*\n     * Check for packages under local testing.\n     * @see {@link https://github.com/meteor/meteor/blob/be986fd70926c9dd8eff6d8866205f236c8562c4/tools/isobuild/package-source.js#L28}\n     */\n\nvar AUTO_TEST_PREFIX = \"local-test:\",\n    isTestName = function (name) {\n  return name.slice(0, AUTO_TEST_PREFIX.length) === AUTO_TEST_PREFIX;\n};\n\nvar Compiler = function (_MultiFileCachingComp) {\n  (0, _inherits3.default)(Compiler, _MultiFileCachingComp);\n\n  function Compiler() {\n    (0, _classCallCheck3.default)(this, Compiler);\n    return (0, _possibleConstructorReturn3.default)(this, _MultiFileCachingComp.call(this, {\n      compilerName: 'zodiase-mdl',\n      defaultCacheSize: 1024 * 1024 * 10\n    }));\n  }\n\n  Compiler.prototype.getCacheKey = function () {\n    function getCacheKey(inputFile) {\n      return inputFile.getSourceHash();\n    }\n\n    return getCacheKey;\n  }(); /**\n        * `compileResult` returned by `compileOneFile` is a string.\n        * @param {String} compileResult\n        * @returns {Number}\n        */\n\n  Compiler.prototype.compileResultSize = function () {\n    function compileResultSize(compileResult) {\n      return compileResult.length;\n    }\n\n    return compileResultSize;\n  }(); // We don't care settings files not at root directory.\n\n\n  Compiler.prototype.isRoot = function () {\n    function isRoot(inputFile) {\n      return inputFile.getDirname() === '.';\n    }\n\n    return isRoot;\n  }(); /**\n        * Returning `null` will skip `addCompileResult` as of Meteor 1.3.1.\n        * @param {InputFile} inputFile\n        * @param {Map.<AbsPath, InputFile>} allFiles\n        * @returns {Object|null}\n        */\n\n  Compiler.prototype.compileOneFile = function () {\n    function compileOneFile(inputFile, allFiles) {\n      /*\n       * If the settings file is loaded from the app, the package name should be `null`.\n       * If the settings file is loaded from package tests, `isTestName` should return true.\n       */var pkgName = inputFile.getPackageName();\n\n      if (!(pkgName === null || isTestName(pkgName))) {\n        // Settings files loaded from packages are ignored.\n        return null;\n      }\n\n      var self = Compiler;\n      var fileContents = inputFile.getContentsAsString().trim();\n      var finalSettings = null;\n\n      if (fileContents === '') {\n        log('Enabled with default settings. See documentation for customization options.');\n        finalSettings = clone(self.defaultSettings, false);\n      } else {\n        try {\n          var settingsFromFile = JSON.parse(fileContents);\n          finalSettings = extend(true, {}, self.defaultSettings, settingsFromFile);\n          check(finalSettings, self.settingsSchema);\n          log('Using settings:', finalSettings);\n        } catch (error) {\n          settingsFile.error(error);\n          finalSettings = null;\n        }\n      }\n\n      if (!finalSettings) {\n        return null;\n      } //else\n\n\n      return {\n        // Use the string form to help calculate cache size.\n        compileResult: JSON.stringify(finalSettings),\n        referencedImportPaths: []\n      };\n    }\n\n    return compileOneFile;\n  }(); /**\n        * `compileResult` returned by `compileOneFile` is a string.\n        * @param {InputFile} inputFile\n        * @param {String} compileResult Guaranteed to be valid JSON.\n        */\n\n  Compiler.prototype.addCompileResult = function () {\n    function addCompileResult(inputFile, compileResult) {\n      /*\n       * If the settings file is loaded from the app, the package name should be `null`.\n       * If the settings file is loaded from package tests, `isTestName` should return true.\n       */var pkgName = inputFile.getPackageName();\n\n      if (!(pkgName === null || isTestName(pkgName))) {\n        // Settings files loaded from packages are ignored.\n        // Already logged in `compileOneFile`. Ignore silently.\n        return;\n      }\n\n      var settingsFile = inputFile;\n      var finalSettings = JSON.parse(compileResult); // Attach the settings to MDl.\n\n      settingsFile.addJavaScript({\n        data: 'MDl.settings = JSON.parse(decodeURI(\"' + encodeURI(JSON.stringify(finalSettings)) + '\"));\\n',\n        path: path.join('client', 'lib', 'settings-file-checked.generated.js'),\n        bare: true\n      });\n\n      this._loadJsLib(settingsFile, finalSettings);\n\n      this._loadTheme(settingsFile, finalSettings);\n    }\n\n    return addCompileResult;\n  }(); /**\n        * Try to get the content of the specified asset.\n        * If fails for any reason, the error will be thrown to the InputFile.\n        * @param {InputFile} inputFile\n        * @param {String} assetPath\n        * @returns {String|null} Text content of the asset if found. Otherwise null.\n        */\n\n  Compiler.prototype._tryToGetAssetData = function () {\n    function _tryToGetAssetData(inputFile, assetPath) {\n      try {\n        return getAsset(assetPath);\n      } catch (error) {\n        inputFile.error(error);\n        return null;\n      }\n    }\n\n    return _tryToGetAssetData;\n  }(); /**\n        * Returns the full theme file name for the given color combination.\n        * @param {String} primary\n        * @param {String} accent\n        * @returns {String}\n        */\n\n  Compiler.prototype._getThemeFileName = function () {\n    function _getThemeFileName(primary, accent) {\n      return 'material.' + path.basename(primary) + '-' + path.basename(accent) + '.min.css';\n    }\n\n    return _getThemeFileName;\n  }(); /**\n        * Add js files to the InputFile based on the settings.\n        * @param {InputFile} inputFile\n        * @param {Object} settings\n        * @param {Object} settings.jsLib\n        * @param {Boolean} settings.jsLib.minified\n        */\n\n  Compiler.prototype._loadJsLib = function () {\n    function _loadJsLib(inputFile, settings) {\n      var jsLibFileName = settings.jsLib.minified ? 'material.min.js' : 'material.js';\n      var jsLibFilePath = path.join('dist', jsLibFileName);\n\n      var jsLibFileData = this._tryToGetAssetData(inputFile, jsLibFilePath);\n\n      if (jsLibFileData === null) {\n        // Has error getting the asset.\n        inputFile.error(new Error('Could not load JavaScript lib file.'));\n        return;\n      } //else\n\n\n      inputFile.addJavaScript({\n        data: jsLibFileData,\n        path: path.join('client', 'lib', jsLibFilePath),\n        bare: true\n      });\n      inputFile.addJavaScript({\n        data: 'MDl.componentHandler = componentHandler;\\n',\n        path: path.join('client', 'lib', 'attach-componentHandler.generated.js'),\n        bare: true\n      });\n    }\n\n    return _loadJsLib;\n  }(); /**\n        * Add css files to the InputFile based on the settings.\n        * @param {InputFile} inputFile\n        * @param {Object} settings\n        * @param {Object|false} settings.theme\n        * @param {String} settings.theme.primary\n        * @param {String} settings.theme.accent\n        */\n\n  Compiler.prototype._loadTheme = function () {\n    function _loadTheme(inputFile, settings) {\n      var theme = settings.theme;\n\n      if (theme === false) {\n        // Disable theme.\n        return;\n      } //else\n      // Load theme.\n\n\n      var themeFileName = this._getThemeFileName(theme.primary, theme.accent);\n\n      var themeFilePath = path.join('dist', themeFileName);\n\n      var themeFileData = this._tryToGetAssetData(inputFile, themeFilePath);\n\n      if (themeFileData === null) {\n        // Has error getting the asset.\n        inputFile.error(new Error('Could not load theme stylesheet.'));\n        return;\n      } //else\n\n\n      inputFile.addStylesheet({\n        data: themeFileData,\n        path: path.join('client', 'lib', themeFilePath),\n        bare: true\n      });\n    }\n\n    return _loadTheme;\n  }();\n\n  return Compiler;\n}(MultiFileCachingCompiler);\n\nCompiler.defaultSettings = {\n  \"jsLib\": {\n    \"minified\": false\n  },\n  \"theme\": {\n    \"primary\": \"indigo\",\n    \"accent\": \"pink\"\n  },\n  \"patches\": {\n    \"autoUpgrade\": \"fullUpgrade\"\n  },\n  \"verbose\": false\n};\nCompiler.settingsSchema = Match.ObjectIncluding({\n  \"jsLib\": Match.ObjectIncluding({\n    \"minified\": Boolean\n  }),\n  // Note: there're only minified theme files.\n  \"theme\": Match.OneOf(false, Match.ObjectIncluding({\n    \"primary\": String,\n    \"accent\": String\n  })),\n  \"patches\": {\n    \"autoUpgrade\": Match.OneOf(false, \"fullUpgrade\", \"mutationOnly\", \"none\")\n  },\n  \"verbose\": Boolean\n});\nvar logLabel = 'zodiase:mdl';\n\nvar log = function () {\n  var args = sliceArguments(arguments);\n  args.unshift('*', logLabel, '>');\n  console.log.apply(console, args);\n};\n\nvar sliceArguments = function (_arguments) {\n  var args = new Array(_arguments.length);\n\n  for (var i = 0, n = _arguments.length; i < n; i++) {\n    args[i] = _arguments[i];\n  }\n\n  return args;\n};","map":{"version":3,"sources":["packages/zodiase:mdl/plugin/build.js"],"names":["settingsFileName","getAsset","_mdlGetAsset","extend","Npm","require","clone","path","Plugin","registerCompiler","archMatching","extensions","filenames","Compiler","AUTO_TEST_PREFIX","isTestName","name","slice","length","compilerName","defaultCacheSize","getCacheKey","inputFile","getSourceHash","compileResultSize","compileResult","isRoot","getDirname","compileOneFile","allFiles","pkgName","getPackageName","self","fileContents","getContentsAsString","trim","finalSettings","log","defaultSettings","settingsFromFile","JSON","parse","check","settingsSchema","error","settingsFile","stringify","referencedImportPaths","addCompileResult","addJavaScript","data","encodeURI","join","bare","_loadJsLib","_loadTheme","_tryToGetAssetData","assetPath","_getThemeFileName","primary","accent","basename","settings","jsLibFileName","jsLib","minified","jsLibFilePath","jsLibFileData","Error","theme","themeFileName","themeFilePath","themeFileData","addStylesheet","MultiFileCachingCompiler","Match","ObjectIncluding","Boolean","OneOf","String","logLabel","args","sliceArguments","arguments","unshift","console","apply","_arguments","Array","i","n"],"mappings":"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","file":"packages/zodiase:mdl/plugin/build.js.map","sourcesContent":["/*\n * Since we are not able to get the assets added by this package, we have to\n * rely on another package to provide the assets. That would be the mdl-assets\n * package, which would export `_mdlGetAsset` function for getting asset files.\n */\n\nconst settingsFileName = 'zodiase-mdl.json';\n\n// `_mdlGetAsset` is exported from package 'zodiase:mdl-assets'.\nconst getAsset = _mdlGetAsset;\n// jQuery.extend from npm.\nconst extend = Npm.require('extend');\n// clone from npm.\nconst clone = Npm.require('clone');\n\nconst path = Plugin.path;\n\nPlugin.registerCompiler({\n  archMatching: 'web',\n  extensions: [],\n  filenames: [settingsFileName]\n}, () => new Compiler);\n\n/*\n * Check for packages under local testing.\n * @see {@link https://github.com/meteor/meteor/blob/be986fd70926c9dd8eff6d8866205f236c8562c4/tools/isobuild/package-source.js#L28}\n */\nconst AUTO_TEST_PREFIX = \"local-test:\",\n      isTestName = (name) => name.slice(0, AUTO_TEST_PREFIX.length) === AUTO_TEST_PREFIX;\n\nclass Compiler extends MultiFileCachingCompiler {\n\n  constructor() {\n    super({\n      compilerName: 'zodiase-mdl',\n      defaultCacheSize: 1024*1024*10,\n    });\n  }\n\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  }\n\n  /**\n   * `compileResult` returned by `compileOneFile` is a string.\n   * @param {String} compileResult\n   * @returns {Number}\n   */\n  compileResultSize(compileResult) {\n    return compileResult.length;\n  }\n\n  // We don't care settings files not at root directory.\n  isRoot(inputFile) {\n    return (inputFile.getDirname() === '.');\n  }\n\n  /**\n   * Returning `null` will skip `addCompileResult` as of Meteor 1.3.1.\n   * @param {InputFile} inputFile\n   * @param {Map.<AbsPath, InputFile>} allFiles\n   * @returns {Object|null}\n   */\n  compileOneFile(inputFile, allFiles) {\n    /*\n     * If the settings file is loaded from the app, the package name should be `null`.\n     * If the settings file is loaded from package tests, `isTestName` should return true.\n     */\n    const pkgName = inputFile.getPackageName();\n    if (!(pkgName === null || isTestName(pkgName))) {\n      // Settings files loaded from packages are ignored.\n      return null;\n    }\n\n    const self = Compiler;\n    const fileContents = inputFile.getContentsAsString().trim();\n    let finalSettings = null;\n\n    if (fileContents === '') {\n      log('Enabled with default settings. See documentation for customization options.');\n      finalSettings = clone(self.defaultSettings, false);\n    } else {\n      try {\n        const settingsFromFile = JSON.parse(fileContents);\n        finalSettings = extend(true, {}, self.defaultSettings, settingsFromFile);\n        check(finalSettings, self.settingsSchema);\n        log('Using settings:', finalSettings);\n      } catch (error) {\n        settingsFile.error(error);\n        finalSettings = null;\n      }\n    }\n    if (!finalSettings) {\n      return null;\n    }\n    //else\n\n    return {\n      // Use the string form to help calculate cache size.\n      compileResult: JSON.stringify(finalSettings),\n      referencedImportPaths: []\n    };\n  }\n\n  /**\n   * `compileResult` returned by `compileOneFile` is a string.\n   * @param {InputFile} inputFile\n   * @param {String} compileResult Guaranteed to be valid JSON.\n   */\n  addCompileResult(inputFile, compileResult) {\n    /*\n     * If the settings file is loaded from the app, the package name should be `null`.\n     * If the settings file is loaded from package tests, `isTestName` should return true.\n     */\n    const pkgName = inputFile.getPackageName();\n    if (!(pkgName === null || isTestName(pkgName))) {\n      // Settings files loaded from packages are ignored.\n      // Already logged in `compileOneFile`. Ignore silently.\n      return;\n    }\n\n    const settingsFile = inputFile;\n    const finalSettings = JSON.parse(compileResult);\n\n    // Attach the settings to MDl.\n    settingsFile.addJavaScript({\n      data: 'MDl.settings = JSON.parse(decodeURI(\"' + encodeURI(JSON.stringify(finalSettings)) + '\"));\\n',\n      path: path.join('client', 'lib', 'settings-file-checked.generated.js'),\n      bare: true\n    });\n\n    this._loadJsLib(settingsFile, finalSettings);\n    this._loadTheme(settingsFile, finalSettings);\n  }\n\n  /**\n   * Try to get the content of the specified asset.\n   * If fails for any reason, the error will be thrown to the InputFile.\n   * @param {InputFile} inputFile\n   * @param {String} assetPath\n   * @returns {String|null} Text content of the asset if found. Otherwise null.\n   */\n  _tryToGetAssetData(inputFile, assetPath) {\n    try {\n      return getAsset(assetPath);\n    } catch (error) {\n      inputFile.error(error);\n      return null;\n    }\n  }\n\n  /**\n   * Returns the full theme file name for the given color combination.\n   * @param {String} primary\n   * @param {String} accent\n   * @returns {String}\n   */\n  _getThemeFileName(primary, accent) {\n    return 'material.' + path.basename(primary) + '-' + path.basename(accent) + '.min.css';\n  }\n\n  /**\n   * Add js files to the InputFile based on the settings.\n   * @param {InputFile} inputFile\n   * @param {Object} settings\n   * @param {Object} settings.jsLib\n   * @param {Boolean} settings.jsLib.minified\n   */\n  _loadJsLib(inputFile, settings) {\n    const jsLibFileName = settings.jsLib.minified ? 'material.min.js' : 'material.js';\n    const jsLibFilePath = path.join('dist', jsLibFileName);\n    const jsLibFileData = this._tryToGetAssetData(inputFile, jsLibFilePath);\n    if (jsLibFileData === null) {\n      // Has error getting the asset.\n      inputFile.error(new Error('Could not load JavaScript lib file.'));\n      return;\n    }\n    //else\n\n    inputFile.addJavaScript({\n      data: jsLibFileData,\n      path: path.join('client', 'lib', jsLibFilePath),\n      bare: true\n    });\n    inputFile.addJavaScript({\n      data: 'MDl.componentHandler = componentHandler;\\n',\n      path: path.join('client', 'lib', 'attach-componentHandler.generated.js'),\n      bare: true\n    });\n  }\n\n  /**\n   * Add css files to the InputFile based on the settings.\n   * @param {InputFile} inputFile\n   * @param {Object} settings\n   * @param {Object|false} settings.theme\n   * @param {String} settings.theme.primary\n   * @param {String} settings.theme.accent\n   */\n  _loadTheme(inputFile, settings) {\n    const theme = settings.theme;\n    if (theme === false) {\n      // Disable theme.\n      return;\n    }\n    //else\n\n    // Load theme.\n    const themeFileName = this._getThemeFileName(theme.primary, theme.accent);\n    const themeFilePath = path.join('dist', themeFileName);\n    const themeFileData = this._tryToGetAssetData(inputFile, themeFilePath);\n    if (themeFileData === null) {\n      // Has error getting the asset.\n      inputFile.error(new Error('Could not load theme stylesheet.'));\n      return;\n    }\n    //else\n\n    inputFile.addStylesheet({\n      data: themeFileData,\n      path: path.join('client', 'lib', themeFilePath),\n      bare: true\n    });\n  }\n}\nCompiler.defaultSettings = {\n  \"jsLib\": {\n    \"minified\": false\n  },\n  \"theme\": {\n    \"primary\": \"indigo\",\n    \"accent\": \"pink\"\n  },\n  \"patches\": {\n    \"autoUpgrade\": \"fullUpgrade\"\n  },\n  \"verbose\": false\n};\nCompiler.settingsSchema = Match.ObjectIncluding({\n  \"jsLib\": Match.ObjectIncluding({\n    \"minified\": Boolean\n  }),\n  // Note: there're only minified theme files.\n  \"theme\": Match.OneOf(false, Match.ObjectIncluding({\n    \"primary\": String,\n    \"accent\": String\n  })),\n  \"patches\": {\n    \"autoUpgrade\": Match.OneOf(false, \"fullUpgrade\", \"mutationOnly\", \"none\")\n  },\n  \"verbose\": Boolean\n});\n\nconst logLabel = 'zodiase:mdl';\nconst log = function () {\n  let args = sliceArguments(arguments);\n  args.unshift('*', logLabel, '>');\n  console.log.apply(console, args);\n};\n\nconst sliceArguments = function (_arguments) {\n  let args = new Array(_arguments.length);\n  for (let i = 0, n = _arguments.length; i < n; i++) {\n    args[i] = _arguments[i];\n  }\n  return args;\n};\n"]},"hash":"f22245d9c83b3d0ed919952d7f400a44567d2ec3"}
